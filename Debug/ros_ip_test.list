
ros_ip_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018bb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003898  08018db4  08018db4  00028db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c64c  0801c64c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801c64c  0801c64c  0002c64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c654  0801c654  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c654  0801c654  0002c654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c658  0801c658  0002c658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801c65c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bcdc  20000080  0801c6dc  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bd5c  0801c6dc  0003bd5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e1b4  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008bf0  00000000  00000000  0007e262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a8  00000000  00000000  00086e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002528  00000000  00000000  00089500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a5c  00000000  00000000  0008ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c08b  00000000  00000000  0009e484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124e7f  00000000  00000000  000da50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ff38e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab3c  00000000  00000000  001ff3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00209f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00209f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08018d9c 	.word	0x08018d9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08018d9c 	.word	0x08018d9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <SCB_EnableICache+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f6:	f3bf 8f6f 	isb	sy
}
 80005fa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SCB_EnableICache+0x48>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SCB_EnableICache+0x48>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SCB_EnableDCache+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SCB_EnableDCache+0x84>)
 800063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0b5b      	lsrs	r3, r3, #13
 8000644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000648:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000652:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	015a      	lsls	r2, r3, #5
 8000658:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000664:	4313      	orrs	r3, r2
 8000666:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ef      	bne.n	8000654 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	60fa      	str	r2, [r7, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1e5      	bne.n	800064a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SCB_EnableDCache+0x84>)
 800068a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b0:	f7ff ff92 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b4:	f7ff ffb6 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fd73 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f838 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f928 	bl	8000914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f8c8 	bl	8000858 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 f8f6 	bl	80008b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x60>)
 80006ce:	f000 fadb 	bl	8000c88 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f005 fd21 	bl	8006118 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  strout_Queue = osMessageQueueNew(MAIL_SIZE, sizeof(struct_out), &strout_Queue_attr);
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <main+0x64>)
 80006d8:	2144      	movs	r1, #68	; 0x44
 80006da:	2005      	movs	r0, #5
 80006dc:	f006 f95a 	bl	8006994 <osMessageQueueNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <main+0x68>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <main+0x6c>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0x70>)
 80006ec:	f005 fda6 	bl	800623c <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <main+0x74>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  TaskStringOutHandle = osThreadNew(TaskStringOut, NULL, &myString_attributes);
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <main+0x78>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <main+0x7c>)
 80006fc:	f005 fd9e 	bl	800623c <osThreadNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <main+0x80>)
 8000704:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000706:	f005 fd3b 	bl	8006180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x5e>
 800070c:	20004f44 	.word	0x20004f44
 8000710:	0801c3a8 	.word	0x0801c3a8
 8000714:	20004fc8 	.word	0x20004fc8
 8000718:	0801c360 	.word	0x0801c360
 800071c:	08000ba1 	.word	0x08000ba1
 8000720:	20004f40 	.word	0x20004f40
 8000724:	0801c384 	.word	0x0801c384
 8000728:	08000a59 	.word	0x08000a59
 800072c:	2000540c 	.word	0x2000540c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b8      	sub	sp, #224	; 0xe0
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f017 f874 	bl	801782c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2290      	movs	r2, #144	; 0x90
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f017 f865 	bl	801782c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <SystemClock_Config+0x11c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <SystemClock_Config+0x11c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <SystemClock_Config+0x11c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <SystemClock_Config+0x120>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <SystemClock_Config+0x120>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <SystemClock_Config+0x120>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000796:	2301      	movs	r3, #1
 8000798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fafc 	bl	8002dcc <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007da:	f000 fa4f 	bl	8000c7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007de:	f002 faa5 	bl	8002d2c <HAL_PWREx_EnableOverDrive>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007e8:	f000 fa48 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800080c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000810:	2103      	movs	r1, #3
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fd88 	bl	8003328 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800081e:	f000 fa2d 	bl	8000c7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <SystemClock_Config+0x124>)
 8000824:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000826:	2300      	movs	r3, #0
 8000828:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4618      	mov	r0, r3
 8000836:	f002 ffab 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000840:	f000 fa1c 	bl	8000c7c <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	37e0      	adds	r7, #224	; 0xe0
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000
 8000854:	00200100 	.word	0x00200100

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART3_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800089c:	f003 fe80 	bl	80045a0 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f9e9 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20004f44 	.word	0x20004f44
 80008b4:	40004800 	.word	0x40004800

080008b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2202      	movs	r2, #2
 80008da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2201      	movs	r2, #1
 80008e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	f002 f8cd 	bl	8002a9a <HAL_PCD_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f9b9 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20004fcc 	.word	0x20004fcc

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x130>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a45      	ldr	r2, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x130>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x130>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c0:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c2:	f002 f851 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x138>)
 80009cc:	f002 f84c 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_GPIO_Init+0x13c>)
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_GPIO_Init+0x140>)
 80009e6:	f001 fe93 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ea:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000a04:	f001 fe84 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a20:	f001 fe76 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a38:	f001 fe6a 	bl	8002710 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	10110000 	.word	0x10110000
 8000a54:	40020800 	.word	0x40020800

08000a58 <TaskStringOut>:

/* USER CODE BEGIN 4 */
void TaskStringOut(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b096      	sub	sp, #88	; 0x58
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  osEvent event;
  struct_out *qstruct;
  struct_out loc_struct_out;
  for(;;)
  {
    if(osMessageQueueGet(strout_Queue, &loc_struct_out, 0, 2000)){
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <TaskStringOut+0x38>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	f107 0108 	add.w	r1, r7, #8
 8000a68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f006 f88b 	bl	8006b88 <osMessageQueueGet>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f3      	beq.n	8000a60 <TaskStringOut+0x8>
      sprintf(str1,"%s", loc_struct_out.str);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <TaskStringOut+0x3c>)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <TaskStringOut+0x40>)
 8000a84:	f016 fff8 	bl	8017a78 <siprintf>
      //TFT_DisplayString(50, qstruct->y_pos, (uint8_t *)str1, LEFT_MODE);
      printf(str1);
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <TaskStringOut+0x40>)
 8000a8a:	f016 fed7 	bl	801783c <iprintf>
    if(osMessageQueueGet(strout_Queue, &loc_struct_out, 0, 2000)){
 8000a8e:	e7e7      	b.n	8000a60 <TaskStringOut+0x8>
 8000a90:	20004fc8 	.word	0x20004fc8
 8000a94:	08018dd8 	.word	0x08018dd8
 8000a98:	200053d0 	.word	0x200053d0

08000a9c <tcp_thread>:
  }
}


static void tcp_thread(void *arg)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
  err_t err, recv_err;
  struct netconn *conn;
  struct netbuf *inbuf;
  struct netconn *newconn;
  struct_sock *arg_sock;
  arg_sock = (struct_sock*) arg;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  conn = arg_sock->conn;
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	623b      	str	r3, [r7, #32]
  u16_t buflen;
  char* buf;
  //TFT_SetTextColor(LCD_COLOR_BLUE);
  for(;;)
  {
    err = netconn_accept(conn, &newconn);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6a38      	ldr	r0, [r7, #32]
 8000ab6:	f009 fc75 	bl	800a3a4 <netconn_accept>
 8000aba:	4603      	mov	r3, r0
 8000abc:	77fb      	strb	r3, [r7, #31]
    if (err == ERR_OK)
 8000abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d162      	bne.n	8000b8c <tcp_thread+0xf0>
    {
      for(;;)
      {
        recv_err = netconn_recv(newconn, &inbuf);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	f107 0214 	add.w	r2, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f009 fe70 	bl	800a7b4 <netconn_recv>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	77bb      	strb	r3, [r7, #30]
        if (recv_err == ERR_OK)
 8000ad8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14b      	bne.n	8000b78 <tcp_thread+0xdc>
        {
          netbuf_data(inbuf, (void**)&buf, &buflen);
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	f107 0108 	add.w	r1, r7, #8
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00b fbf8 	bl	800c2e0 <netbuf_data>
          if((buf[0]==0x0D)||(buf[0]==0x0A))
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b0d      	cmp	r3, #13
 8000af6:	d003      	beq.n	8000b00 <tcp_thread+0x64>
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b0a      	cmp	r3, #10
 8000afe:	d104      	bne.n	8000b0a <tcp_thread+0x6e>
          {
            netbuf_delete(inbuf);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00b fbcc 	bl	800c2a0 <netbuf_delete>
            continue;
 8000b08:	e03f      	b.n	8000b8a <tcp_thread+0xee>
          }
          qstruct->y_pos = arg_sock->y_pos;
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0e:	8812      	ldrh	r2, [r2, #0]
 8000b10:	809a      	strh	r2, [r3, #4]
          strncpy(str_buf,buf,buflen);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	89fa      	ldrh	r2, [r7, #14]
 8000b16:	4619      	mov	r1, r3
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <tcp_thread+0xf8>)
 8000b1a:	f016 ffcd 	bl	8017ab8 <strncpy>
          str_buf[buflen]=0;
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <tcp_thread+0xf8>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	5499      	strb	r1, [r3, r2]
          sprintf(qstruct->str,"%-20s", str_buf);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	3306      	adds	r3, #6
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <tcp_thread+0xf8>)
 8000b2e:	491a      	ldr	r1, [pc, #104]	; (8000b98 <tcp_thread+0xfc>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f016 ffa1 	bl	8017a78 <siprintf>
          osMessageQueuePut(strout_Queue, &qstruct, 0, 0);
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <tcp_thread+0x100>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f107 0118 	add.w	r1, r7, #24
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2200      	movs	r2, #0
 8000b42:	f005 ffad 	bl	8006aa0 <osMessageQueuePut>
          str_buf[buflen] = '\r';
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <tcp_thread+0xf8>)
 8000b4c:	210d      	movs	r1, #13
 8000b4e:	5499      	strb	r1, [r3, r2]
          str_buf[buflen+1] = '\n';
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <tcp_thread+0xf8>)
 8000b56:	210a      	movs	r1, #10
 8000b58:	54d1      	strb	r1, [r2, r3]
          netconn_write(newconn, str_buf, buflen+2, NETCONN_COPY);
 8000b5a:	6938      	ldr	r0, [r7, #16]
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	461a      	mov	r2, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2301      	movs	r3, #1
 8000b68:	490a      	ldr	r1, [pc, #40]	; (8000b94 <tcp_thread+0xf8>)
 8000b6a:	f009 fe9d 	bl	800a8a8 <netconn_write_partly>
          netbuf_delete(inbuf);
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00b fb95 	bl	800c2a0 <netbuf_delete>
 8000b76:	e7a6      	b.n	8000ac6 <tcp_thread+0x2a>
        }
        else
        {
          netbuf_delete(inbuf);
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00b fb90 	bl	800c2a0 <netbuf_delete>
          netconn_close(newconn);
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f009 ff92 	bl	800aaac <netconn_close>
          break;
 8000b88:	e003      	b.n	8000b92 <tcp_thread+0xf6>
        recv_err = netconn_recv(newconn, &inbuf);
 8000b8a:	e79c      	b.n	8000ac6 <tcp_thread+0x2a>
        }
      }
    }
    else
    {
      osDelay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f005 fbfb 	bl	8006388 <osDelay>
    err = netconn_accept(conn, &newconn);
 8000b92:	e78c      	b.n	8000aae <tcp_thread+0x12>
 8000b94:	2000009c 	.word	0x2000009c
 8000b98:	08018ddc 	.word	0x08018ddc
 8000b9c:	20004fc8 	.word	0x20004fc8

08000ba0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ba8:	f004 fd2e 	bl	8005608 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  struct netconn *conn;
  err_t err;
  sock01.y_pos = 60;
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <StartDefaultTask+0x9c>)
 8000bae:	223c      	movs	r2, #60	; 0x3c
 8000bb0:	801a      	strh	r2, [r3, #0]
  sock02.y_pos = 180;
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <StartDefaultTask+0xa0>)
 8000bb4:	22b4      	movs	r2, #180	; 0xb4
 8000bb6:	801a      	strh	r2, [r3, #0]
  conn = netconn_new(NETCONN_TCP);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f009 fad3 	bl	800a168 <netconn_new_with_proto_and_callback>
 8000bc2:	60f8      	str	r0, [r7, #12]
  if(conn!=NULL)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d02a      	beq.n	8000c20 <StartDefaultTask+0x80>
  {
    sock01.conn = conn;
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <StartDefaultTask+0x9c>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6053      	str	r3, [r2, #4]
    sock02.conn = conn;
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <StartDefaultTask+0xa0>)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6053      	str	r3, [r2, #4]
    err = netconn_bind(conn, NULL, 80);
 8000bd6:	2250      	movs	r2, #80	; 0x50
 8000bd8:	2100      	movs	r1, #0
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f009 fb7e 	bl	800a2dc <netconn_bind>
 8000be0:	4603      	mov	r3, r0
 8000be2:	72fb      	strb	r3, [r7, #11]
    if (err == ERR_OK)
 8000be4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d116      	bne.n	8000c1a <StartDefaultTask+0x7a>
    {
      netconn_listen(conn);
 8000bec:	21ff      	movs	r1, #255	; 0xff
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f009 fbac 	bl	800a34c <netconn_listen_with_backlog>
      sys_thread_new("tcp_thread1", tcp_thread, (void*)&sock01, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000bf4:	2318      	movs	r3, #24
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <StartDefaultTask+0x9c>)
 8000bfe:	4911      	ldr	r1, [pc, #68]	; (8000c44 <StartDefaultTask+0xa4>)
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <StartDefaultTask+0xa8>)
 8000c02:	f016 fd7b 	bl	80176fc <sys_thread_new>
      sys_thread_new("tcp_thread2", tcp_thread, (void*)&sock02, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000c06:	2318      	movs	r3, #24
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <StartDefaultTask+0xa0>)
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <StartDefaultTask+0xa4>)
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <StartDefaultTask+0xac>)
 8000c14:	f016 fd72 	bl	80176fc <sys_thread_new>
 8000c18:	e002      	b.n	8000c20 <StartDefaultTask+0x80>
    }
    else
    {
      netconn_delete(conn);
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f009 fb42 	bl	800a2a4 <netconn_delete>
    }
  }
  /* Infinite loop */
  for(;;)
  {
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <StartDefaultTask+0xb0>)
 8000c22:	f015 fc53 	bl	80164cc <ip4addr_ntoa>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <StartDefaultTask+0xb4>)
 8000c2c:	f016 fe06 	bl	801783c <iprintf>
    osDelay(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c34:	f005 fba8 	bl	8006388 <osDelay>
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000c38:	e7f2      	b.n	8000c20 <StartDefaultTask+0x80>
 8000c3a:	bf00      	nop
 8000c3c:	20005410 	.word	0x20005410
 8000c40:	20005418 	.word	0x20005418
 8000c44:	08000a9d 	.word	0x08000a9d
 8000c48:	08018de4 	.word	0x08018de4
 8000c4c:	08018df0 	.word	0x08018df0
 8000c50:	200054a8 	.word	0x200054a8
 8000c54:	08018dfc 	.word	0x08018dfc

08000c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6a:	f000 faa7 	bl	80011bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40001000 	.word	0x40001000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <RetargetInit+0x28>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <RetargetInit+0x2c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6898      	ldr	r0, [r3, #8]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f016 fe23 	bl	80178ec <setvbuf>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20005420 	.word	0x20005420
 8000cb4:	2000001c 	.word	0x2000001c

08000cb8 <_isatty>:

int _isatty(int fd) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db04      	blt.n	8000cd0 <_isatty+0x18>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	dc01      	bgt.n	8000cd0 <_isatty+0x18>
    return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e003      	b.n	8000cd8 <_isatty+0x20>

  errno = EBADF;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <_isatty+0x2c>)
 8000cd2:	2209      	movs	r2, #9
 8000cd4:	601a      	str	r2, [r3, #0]
  return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	2000bd48 	.word	0x2000bd48

08000ce8 <_write>:

int _write(int fd, char* ptr, int len) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d002      	beq.n	8000d00 <_write+0x18>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d111      	bne.n	8000d24 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <_write+0x50>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	f003 fc95 	bl	800463c <HAL_UART_Transmit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <_write+0x38>
      return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	e006      	b.n	8000d2e <_write+0x46>
    else
      return EIO;
 8000d20:	2305      	movs	r3, #5
 8000d22:	e004      	b.n	8000d2e <_write+0x46>
  }
  errno = EBADF;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_write+0x54>)
 8000d26:	2209      	movs	r2, #9
 8000d28:	601a      	str	r2, [r3, #0]
  return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20005420 	.word	0x20005420
 8000d3c:	2000bd48 	.word	0x2000bd48

08000d40 <_close>:

int _close(int fd) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db04      	blt.n	8000d58 <_close+0x18>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	dc01      	bgt.n	8000d58 <_close+0x18>
    return 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e004      	b.n	8000d62 <_close+0x22>

  errno = EBADF;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <_close+0x30>)
 8000d5a:	2209      	movs	r2, #9
 8000d5c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000bd48 	.word	0x2000bd48

08000d74 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <_lseek+0x24>)
 8000d82:	2209      	movs	r2, #9
 8000d84:	601a      	str	r2, [r3, #0]
  return -1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000bd48 	.word	0x2000bd48

08000d9c <_read>:

int _read(int fd, char* ptr, int len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d110      	bne.n	8000dd0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <_read+0x48>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	2201      	movs	r2, #1
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	f003 fcd2 	bl	8004762 <HAL_UART_Receive>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d101      	bne.n	8000dcc <_read+0x30>
      return 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e006      	b.n	8000dda <_read+0x3e>
    else
      return EIO;
 8000dcc:	2305      	movs	r3, #5
 8000dce:	e004      	b.n	8000dda <_read+0x3e>
  }
  errno = EBADF;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <_read+0x4c>)
 8000dd2:	2209      	movs	r2, #9
 8000dd4:	601a      	str	r2, [r3, #0]
  return -1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20005420 	.word	0x20005420
 8000de8:	2000bd48 	.word	0x2000bd48

08000dec <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db08      	blt.n	8000e0e <_fstat+0x22>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	dc05      	bgt.n	8000e0e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e08:	605a      	str	r2, [r3, #4]
    return 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e003      	b.n	8000e16 <_fstat+0x2a>
  }

  errno = EBADF;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <_fstat+0x38>)
 8000e10:	2209      	movs	r2, #9
 8000e12:	601a      	str	r2, [r3, #0]
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	2000bd48 	.word	0x2000bd48

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210f      	movs	r1, #15
 8000e62:	f06f 0001 	mvn.w	r0, #1
 8000e66:	f000 faa5 	bl	80013b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d128      	bne.n	8000eec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0x80>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <HAL_UART_MspInit+0x80>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_UART_MspInit+0x80>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0x80>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_UART_MspInit+0x80>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_UART_MspInit+0x80>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000edc:	2307      	movs	r3, #7
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0x84>)
 8000ee8:	f001 fc12 	bl	8002710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f20:	d141      	bne.n	8000fa6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <HAL_PCD_MspInit+0xb4>)
 8000f58:	f001 fbda 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <HAL_PCD_MspInit+0xb4>)
 8000f72:	f001 fbcd 	bl	8002710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6353      	str	r3, [r2, #52]	; 0x34
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_PCD_MspInit+0xb0>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	2036      	movs	r0, #54	; 0x36
 8000fce:	f000 f9f1 	bl	80013b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fd2:	2036      	movs	r0, #54	; 0x36
 8000fd4:	f000 fa0a 	bl	80013ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_InitTick+0xa0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_InitTick+0xa0>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0xa0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fb96 	bl	800372c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001000:	f002 fb6c 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8001004:	4603      	mov	r3, r0
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_InitTick+0xa4>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	3b01      	subs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_InitTick+0xa8>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_InitTick+0xac>)
 800101c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_InitTick+0xa8>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_InitTick+0xa8>)
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_InitTick+0xa8>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_InitTick+0xa8>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_InitTick+0xa8>)
 800103a:	f002 ffd1 	bl	8003fe0 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_InitTick+0xa8>)
 8001046:	f003 f82d 	bl	80040a4 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	431bde83 	.word	0x431bde83
 8001060:	20005424 	.word	0x20005424
 8001064:	40001000 	.word	0x40001000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM6_DAC_IRQHandler+0x10>)
 800109a:	f003 f87b 	bl	8004194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20005424 	.word	0x20005424

080010a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <ETH_IRQHandler+0x10>)
 80010ae:	f000 fd8d 	bl	8001bcc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20006dbc 	.word	0x20006dbc

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d205      	bcs.n	80010f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <_sbrk+0x6c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20080000 	.word	0x20080000
 800111c:	00000400 	.word	0x00000400
 8001120:	20000484 	.word	0x20000484
 8001124:	2000bd60 	.word	0x2000bd60
 8001128:	2000bd48 	.word	0x2000bd48

0800112c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f016 fafb 	bl	8017778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fa93 	bl	80006ac <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001194:	0801c65c 	.word	0x0801c65c
  ldr r2, =_sbss
 8001198:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800119c:	2000bd5c 	.word	0x2000bd5c

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>

080011a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 f8f9 	bl	800139e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff ff03 	bl	8000fb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011b2:	f7ff fe39 	bl	8000e28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20005470 	.word	0x20005470

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20005470 	.word	0x20005470

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008

08001244 <__NVIC_SetPriorityGrouping>:
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <__NVIC_SetPriorityGrouping+0x40>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	4313      	orrs	r3, r2
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x40>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00
 8001288:	05fa0000 	.word	0x05fa0000

0800128c <__NVIC_GetPriorityGrouping>:
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff4c 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c6:	f7ff ff61 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f7ff ffb1 	bl	8001338 <NVIC_EncodePriority>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff80 	bl	80012e4 <__NVIC_SetPriority>
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff54 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001418:	4ba9      	ldr	r3, [pc, #676]	; (80016c0 <HAL_ETH_Init+0x2b8>)
 800141a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e181      	b.n	8001732 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f004 fa42 	bl	80058cc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001448:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <HAL_ETH_Init+0x2bc>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	4a9d      	ldr	r2, [pc, #628]	; (80016c4 <HAL_ETH_Init+0x2bc>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6453      	str	r3, [r2, #68]	; 0x44
 8001454:	4b9b      	ldr	r3, [pc, #620]	; (80016c4 <HAL_ETH_Init+0x2bc>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001460:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <HAL_ETH_Init+0x2c0>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <HAL_ETH_Init+0x2c0>)
 8001466:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800146a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <HAL_ETH_Init+0x2c0>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4994      	ldr	r1, [pc, #592]	; (80016c8 <HAL_ETH_Init+0x2c0>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff fea7 	bl	80011e4 <HAL_GetTick>
 8001496:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001498:	e011      	b.n	80014be <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800149a:	f7ff fea3 	bl	80011e4 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a8:	d909      	bls.n	80014be <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e139      	b.n	8001732 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1e4      	bne.n	800149a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f023 031c 	bic.w	r3, r3, #28
 80014de:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014e0:	f002 f8f0 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80014e4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4a78      	ldr	r2, [pc, #480]	; (80016cc <HAL_ETH_Init+0x2c4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d908      	bls.n	8001500 <HAL_ETH_Init+0xf8>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4a77      	ldr	r2, [pc, #476]	; (80016d0 <HAL_ETH_Init+0x2c8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d804      	bhi.n	8001500 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e027      	b.n	8001550 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	4a73      	ldr	r2, [pc, #460]	; (80016d0 <HAL_ETH_Init+0x2c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d908      	bls.n	800151a <HAL_ETH_Init+0x112>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	4a6d      	ldr	r2, [pc, #436]	; (80016c0 <HAL_ETH_Init+0x2b8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d204      	bcs.n	800151a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f043 030c 	orr.w	r3, r3, #12
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	e01a      	b.n	8001550 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4a68      	ldr	r2, [pc, #416]	; (80016c0 <HAL_ETH_Init+0x2b8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d303      	bcc.n	800152a <HAL_ETH_Init+0x122>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4a6b      	ldr	r2, [pc, #428]	; (80016d4 <HAL_ETH_Init+0x2cc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d911      	bls.n	800154e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_ETH_Init+0x2cc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d908      	bls.n	8001544 <HAL_ETH_Init+0x13c>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4a68      	ldr	r2, [pc, #416]	; (80016d8 <HAL_ETH_Init+0x2d0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d804      	bhi.n	8001544 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e005      	b.n	8001550 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	e000      	b.n	8001550 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800154e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001558:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800155c:	2100      	movs	r1, #0
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fc17 	bl	8001d92 <HAL_ETH_WritePHYRegister>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800156e:	6939      	ldr	r1, [r7, #16]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fdcd 	bl	8002110 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0d7      	b.n	8001732 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001582:	20ff      	movs	r0, #255	; 0xff
 8001584:	f7ff fe3a 	bl	80011fc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a5 	beq.w	80016dc <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001592:	f7ff fe27 	bl	80011e4 <HAL_GetTick>
 8001596:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	461a      	mov	r2, r3
 800159e:	2101      	movs	r1, #1
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb8e 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015a6:	f7ff fe1d 	bl	80011e4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d90f      	bls.n	80015d8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015bc:	6939      	ldr	r1, [r7, #16]
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fda6 	bl	8002110 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0ac      	b.n	8001732 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0da      	beq.n	8001598 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e6:	2100      	movs	r1, #0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fbd2 	bl	8001d92 <HAL_ETH_WritePHYRegister>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fd88 	bl	8002110 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001608:	2301      	movs	r3, #1
 800160a:	e092      	b.n	8001732 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff fdea 	bl	80011e4 <HAL_GetTick>
 8001610:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	461a      	mov	r2, r3
 8001618:	2101      	movs	r1, #1
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fb51 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001620:	f7ff fde0 	bl	80011e4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d90f      	bls.n	8001652 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001636:	6939      	ldr	r1, [r7, #16]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fd69 	bl	8002110 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e06f      	b.n	8001732 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0da      	beq.n	8001612 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	461a      	mov	r2, r3
 8001662:	2110      	movs	r1, #16
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fb2c 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fd4a 	bl	8002110 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001684:	2301      	movs	r3, #1
 8001686:	e054      	b.n	8001732 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	e002      	b.n	80016a2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	e035      	b.n	8001720 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	e030      	b.n	8001720 <HAL_ETH_Init+0x318>
 80016be:	bf00      	nop
 80016c0:	03938700 	.word	0x03938700
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	01312cff 	.word	0x01312cff
 80016d0:	02160ebf 	.word	0x02160ebf
 80016d4:	05f5e0ff 	.word	0x05f5e0ff
 80016d8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fb4c 	bl	8001d92 <HAL_ETH_WritePHYRegister>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fd02 	bl	8002110 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e00c      	b.n	8001732 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001718:	f640 70ff 	movw	r0, #4095	; 0xfff
 800171c:	f7ff fd6e 	bl	80011fc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001720:	6939      	ldr	r1, [r7, #16]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fcf4 	bl	8002110 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop

0800173c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ETH_DMATxDescListInit+0x20>
 8001758:	2302      	movs	r3, #2
 800175a:	e052      	b.n	8001802 <HAL_ETH_DMATxDescListInit+0xc6>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e030      	b.n	80017da <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	015b      	lsls	r3, r3, #5
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001788:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	461a      	mov	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d208      	bcs.n	80017ce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	e002      	b.n	80017d4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3ca      	bcc.n	8001778 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6819      	ldr	r1, [r3, #0]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f241 0310 	movw	r3, #4112	; 0x1010
 80017ec:	440b      	add	r3, r1
 80017ee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800180e:	b480      	push	{r7}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ETH_DMARxDescListInit+0x20>
 800182a:	2302      	movs	r3, #2
 800182c:	e056      	b.n	80018dc <HAL_ETH_DMARxDescListInit+0xce>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e034      	b.n	80018b4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4413      	add	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800185a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001862:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	461a      	mov	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	429a      	cmp	r2, r3
 8001894:	d208      	bcs.n	80018a8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	e002      	b.n	80018ae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d3c6      	bcc.n	800184a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6819      	ldr	r1, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	f241 030c 	movw	r3, #4108	; 0x100c
 80018c6:	440b      	add	r3, r1
 80018c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_ETH_TransmitFrame+0x24>
 8001908:	2302      	movs	r3, #2
 800190a:	e0cd      	b.n	8001aa8 <HAL_ETH_TransmitFrame+0x1c0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001932:	2301      	movs	r3, #1
 8001934:	e0b8      	b.n	8001aa8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da09      	bge.n	8001954 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2212      	movs	r2, #18
 8001944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0a9      	b.n	8001aa8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800195a:	4293      	cmp	r3, r2
 800195c:	d915      	bls.n	800198a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4a54      	ldr	r2, [pc, #336]	; (8001ab4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_ETH_TransmitFrame+0x1cc>)
 800196e:	fba3 1302 	umull	r1, r3, r3, r2
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e001      	b.n	800198e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d11c      	bne.n	80019ce <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019a2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019be:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80019cc:	e04b      	b.n	8001a66 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e044      	b.n	8001a5e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a02:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d116      	bne.n	8001a3c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a1c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a22:	fb02 f203 	mul.w	r2, r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a2e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a3a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a4a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3b6      	bcc.n	80019d4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a6e:	4413      	add	r3, r2
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a82:	4413      	add	r3, r2
 8001a84:	2204      	movs	r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a90:	4413      	add	r3, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	ac02b00b 	.word	0xac02b00b
 8001ab8:	fffffa0c 	.word	0xfffffa0c

08001abc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e074      	b.n	8001bc0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ae6:	e05a      	b.n	8001b9e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afc:	d10d      	bne.n	8001b1a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
 8001b18:	e041      	b.n	8001b9e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10b      	bne.n	8001b40 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b3e:	e02e      	b.n	8001b9e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d103      	bne.n	8001b62 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b6e:	1f1a      	subs	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e010      	b.n	8001bc0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db02      	blt.n	8001bae <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d99c      	bls.n	8001ae8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bdc:	4413      	add	r3, r2
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	d112      	bne.n	8001c0e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f003 ff2f 	bl	8005a4c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bf6:	4413      	add	r3, r2
 8001bf8:	2240      	movs	r2, #64	; 0x40
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c0c:	e01b      	b.n	8001c46 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d111      	bne.n	8001c46 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f839 	bl	8001c9a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c30:	4413      	add	r3, r2
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c4e:	4413      	add	r3, r2
 8001c50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c54:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6a:	d112      	bne.n	8001c92 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f81e 	bl	8001cae <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c80:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b82      	cmp	r3, #130	; 0x82
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e050      	b.n	8001d8a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2282      	movs	r2, #130	; 0x82
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 031c 	and.w	r3, r3, #28
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8a1b      	ldrh	r3, [r3, #16]
 8001d04:	02db      	lsls	r3, r3, #11
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f023 0302 	bic.w	r3, r3, #2
 8001d22:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d34:	f7ff fa56 	bl	80011e4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d3a:	e015      	b.n	8001d68 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d3c:	f7ff fa52 	bl	80011e4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d309      	bcc.n	8001d60 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e014      	b.n	8001d8a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e4      	bne.n	8001d3c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b42      	cmp	r3, #66	; 0x42
 8001db2:	d101      	bne.n	8001db8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001db4:	2302      	movs	r3, #2
 8001db6:	e04e      	b.n	8001e56 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2242      	movs	r2, #66	; 0x42
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 031c 	and.w	r3, r3, #28
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8a1b      	ldrh	r3, [r3, #16]
 8001dd4:	02db      	lsls	r3, r3, #11
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dde:	897b      	ldrh	r3, [r7, #10]
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0e:	f7ff f9e9 	bl	80011e4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e14:	e015      	b.n	8001e42 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e16:	f7ff f9e5 	bl	80011e4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d309      	bcc.n	8001e3a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e00d      	b.n	8001e56 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e4      	bne.n	8001e16 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_ETH_Start+0x16>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e01f      	b.n	8001eb4 <HAL_ETH_Start+0x56>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb45 	bl	8002514 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fb7c 	bl	8002588 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fc13 	bl	80026bc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fbb0 	bl	80025fc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fbdd 	bl	800265c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ETH_Stop+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e01f      	b.n	8001f12 <HAL_ETH_Stop+0x56>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fba2 	bl	800262c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fbcf 	bl	800268c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fb67 	bl	80025c2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fbe1 	bl	80026bc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fb27 	bl	800254e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_ETH_ConfigMAC+0x1c>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0e4      	b.n	8002102 <HAL_ETH_ConfigMAC+0x1e6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80b1 	beq.w	80020b2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <HAL_ETH_ConfigMAC+0x1f0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f68:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f6e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f74:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f7a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f80:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f86:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f8c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f92:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f98:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f9e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fa4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001faa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff f91a 	bl	80011fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fde:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fe4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001fea:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ff0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ff6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002002:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002004:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff f8f4 	bl	80011fc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002024:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800202e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800203e:	4013      	ands	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800204c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002052:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002058:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800205e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002064:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800207c:	2001      	movs	r0, #1
 800207e:	f7ff f8bd 	bl	80011fc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7ff f8aa 	bl	80011fc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	61da      	str	r2, [r3, #28]
 80020b0:	e01e      	b.n	80020f0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020c0:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7ff f88a 	bl	80011fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	ff20810f 	.word	0xff20810f

08002110 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0b0      	sub	sp, #192	; 0xc0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002134:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800213e:	2300      	movs	r3, #0
 8002140:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215a:	663b      	str	r3, [r7, #96]	; 0x60
 800215c:	e001      	b.n	8002162 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002166:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800216c:	2300      	movs	r3, #0
 800216e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800217c:	2340      	movs	r3, #64	; 0x40
 800217e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e8:	4bab      	ldr	r3, [pc, #684]	; (8002498 <ETH_MACDMAConfig+0x388>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021f4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021f8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021fc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002202:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002206:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800220a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002210:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002214:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002218:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800221a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800221c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800221e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002220:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002224:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002226:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002238:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002244:	2001      	movs	r0, #1
 8002246:	f7fe ffd9 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002252:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002254:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002258:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800225a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800225c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800225e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002262:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002268:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800226a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800226e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002274:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002278:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002280:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002282:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800228e:	2001      	movs	r0, #1
 8002290:	f7fe ffb4 	bl	80011fc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022a6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022b0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022c4:	4013      	ands	r3, r2
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ce:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022d4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022da:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022e0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022e6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022ec:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002300:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800230c:	2001      	movs	r0, #1
 800230e:	f7fe ff75 	bl	80011fc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800231c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002320:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe ff60 	bl	80011fc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002344:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800234a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002358:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800236a:	2304      	movs	r3, #4
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800236e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800237a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800238a:	2300      	movs	r3, #0
 800238c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800238e:	2300      	movs	r3, #0
 8002390:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f241 0318 	movw	r3, #4120	; 0x1018
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <ETH_MACDMAConfig+0x38c>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ae:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023b0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023b2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023b4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023b6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023b8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023ba:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023bc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023be:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023c0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023c2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023c4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023c6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023ca:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023ce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f241 0318 	movw	r3, #4120	; 0x1018
 80023e2:	4413      	add	r3, r2
 80023e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	f241 0318 	movw	r3, #4120	; 0x1018
 80023f2:	4413      	add	r3, r2
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7fe fefe 	bl	80011fc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f241 0318 	movw	r3, #4120	; 0x1018
 8002408:	4413      	add	r3, r2
 800240a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800240e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002414:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002418:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800241c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002420:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002426:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800242a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002438:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe fed7 	bl	80011fc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10d      	bne.n	8002480 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f241 031c 	movw	r3, #4124	; 0x101c
 800246c:	4413      	add	r3, r2
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6811      	ldr	r1, [r2, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <ETH_MACDMAConfig+0x390>)
 8002476:	431a      	orrs	r2, r3
 8002478:	f241 031c 	movw	r3, #4124	; 0x101c
 800247c:	440b      	add	r3, r1
 800247e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	461a      	mov	r2, r3
 8002486:	2100      	movs	r1, #0
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f80b 	bl	80024a4 <ETH_MACAddressConfig>
}
 800248e:	bf00      	nop
 8002490:	37c0      	adds	r7, #192	; 0xc0
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	ff20810f 	.word	0xff20810f
 800249c:	f8de3f23 	.word	0xf8de3f23
 80024a0:	00010040 	.word	0x00010040

080024a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3305      	adds	r3, #5
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	3204      	adds	r2, #4
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <ETH_MACAddressConfig+0x68>)
 80024c6:	4413      	add	r3, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3303      	adds	r3, #3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	061a      	lsls	r2, r3, #24
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3302      	adds	r3, #2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3301      	adds	r3, #1
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	4313      	orrs	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <ETH_MACAddressConfig+0x6c>)
 80024f6:	4413      	add	r3, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	6013      	str	r3, [r2, #0]
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40028040 	.word	0x40028040
 8002510:	40028044 	.word	0x40028044

08002514 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002538:	2001      	movs	r0, #1
 800253a:	f7fe fe5f 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0208 	bic.w	r2, r2, #8
 8002568:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe fe42 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	601a      	str	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0204 	orr.w	r2, r2, #4
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fe25 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0204 	bic.w	r2, r2, #4
 80025dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7fe fe08 	bl	80011fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f241 0318 	movw	r3, #4120	; 0x1018
 800260c:	4413      	add	r3, r2
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6811      	ldr	r1, [r2, #0]
 8002614:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002618:	f241 0318 	movw	r3, #4120	; 0x1018
 800261c:	440b      	add	r3, r1
 800261e:	601a      	str	r2, [r3, #0]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f241 0318 	movw	r3, #4120	; 0x1018
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6811      	ldr	r1, [r2, #0]
 8002644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002648:	f241 0318 	movw	r3, #4120	; 0x1018
 800264c:	440b      	add	r3, r1
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	f241 0318 	movw	r3, #4120	; 0x1018
 800266c:	4413      	add	r3, r2
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6811      	ldr	r1, [r2, #0]
 8002674:	f043 0202 	orr.w	r2, r3, #2
 8002678:	f241 0318 	movw	r3, #4120	; 0x1018
 800267c:	440b      	add	r3, r1
 800267e:	601a      	str	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f241 0318 	movw	r3, #4120	; 0x1018
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	f023 0202 	bic.w	r2, r3, #2
 80026a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80026ac:	440b      	add	r3, r1
 80026ae:	601a      	str	r2, [r3, #0]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80026d0:	4413      	add	r3, r2
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6811      	ldr	r1, [r2, #0]
 80026d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80026e0:	440b      	add	r3, r1
 80026e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7fe fd82 	bl	80011fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6819      	ldr	r1, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f241 0318 	movw	r3, #4120	; 0x1018
 8002702:	440b      	add	r3, r1
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e175      	b.n	8002a1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8164 	bne.w	8002a16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d00b      	beq.n	800276e <HAL_GPIO_Init+0x5e>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002762:	2b11      	cmp	r3, #17
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b12      	cmp	r3, #18
 800276c:	d130      	bne.n	80027d0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0201 	and.w	r2, r3, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b12      	cmp	r3, #18
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80be 	beq.w	8002a16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_GPIO_Init+0x324>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a65      	ldr	r2, [pc, #404]	; (8002a34 <HAL_GPIO_Init+0x324>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_GPIO_Init+0x324>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028b2:	4a61      	ldr	r2, [pc, #388]	; (8002a38 <HAL_GPIO_Init+0x328>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_GPIO_Init+0x32c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d037      	beq.n	800294e <HAL_GPIO_Init+0x23e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_GPIO_Init+0x330>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_GPIO_Init+0x23a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <HAL_GPIO_Init+0x236>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a55      	ldr	r2, [pc, #340]	; (8002a48 <HAL_GPIO_Init+0x338>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x232>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_GPIO_Init+0x33c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x22e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a53      	ldr	r2, [pc, #332]	; (8002a50 <HAL_GPIO_Init+0x340>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x22a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x344>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x226>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	; (8002a58 <HAL_GPIO_Init+0x348>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x222>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_GPIO_Init+0x34c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x21e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x350>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x21a>
 8002926:	2309      	movs	r3, #9
 8002928:	e012      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800292a:	230a      	movs	r3, #10
 800292c:	e010      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800292e:	2308      	movs	r3, #8
 8002930:	e00e      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002932:	2307      	movs	r3, #7
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002936:	2306      	movs	r3, #6
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x240>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x240>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	; (8002a38 <HAL_GPIO_Init+0x328>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_GPIO_Init+0x354>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002992:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <HAL_GPIO_Init+0x354>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_GPIO_Init+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_GPIO_Init+0x354>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_GPIO_Init+0x354>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae86 	bls.w	8002730 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40021c00 	.word	0x40021c00
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40022400 	.word	0x40022400
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9c:	b08f      	sub	sp, #60	; 0x3c
 8002a9e:	af0a      	add	r7, sp, #40	; 0x28
 8002aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e116      	b.n	8002cda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fa1a 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fb2c 	bl	8005148 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	687e      	ldr	r6, [r7, #4]
 8002af8:	466d      	mov	r5, sp
 8002afa:	f106 0410 	add.w	r4, r6, #16
 8002afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b0e:	1d33      	adds	r3, r6, #4
 8002b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b12:	6838      	ldr	r0, [r7, #0]
 8002b14:	f002 fac0 	bl	8005098 <USB_CoreInit>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0d7      	b.n	8002cda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fb1a 	bl	800516a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e04a      	b.n	8002bd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	333d      	adds	r3, #61	; 0x3d
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	333c      	adds	r3, #60	; 0x3c
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	b298      	uxth	r0, r3
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3342      	adds	r3, #66	; 0x42
 8002b78:	4602      	mov	r2, r0
 8002b7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	333f      	adds	r3, #63	; 0x3f
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3344      	adds	r3, #68	; 0x44
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3348      	adds	r3, #72	; 0x48
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3350      	adds	r3, #80	; 0x50
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3af      	bcc.n	8002b3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e044      	b.n	8002c6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3b5      	bcc.n	8002be2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	687e      	ldr	r6, [r7, #4]
 8002c7e:	466d      	mov	r5, sp
 8002c80:	f106 0410 	add.w	r4, r6, #16
 8002c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c94:	1d33      	adds	r3, r6, #4
 8002c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c98:	6838      	ldr	r0, [r7, #0]
 8002c9a:	f002 fa91 	bl	80051c0 <USB_DevInit>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e014      	b.n	8002cda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f80b 	bl	8002ce4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fc43 	bl	800555e <USB_DevDisconnect>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ce4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	10000003 	.word	0x10000003

08002d2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d5a:	f7fe fa43 	bl	80011e4 <HAL_GetTick>
 8002d5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d60:	e009      	b.n	8002d76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d62:	f7fe fa3f 	bl	80011e4 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d70:	d901      	bls.n	8002d76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e022      	b.n	8002dbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d1ee      	bne.n	8002d62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d90:	f7fe fa28 	bl	80011e4 <HAL_GetTick>
 8002d94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d96:	e009      	b.n	8002dac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d98:	f7fe fa24 	bl	80011e4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da6:	d901      	bls.n	8002dac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e007      	b.n	8002dbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db8:	d1ee      	bne.n	8002d98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e29b      	b.n	800331a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b96      	ldr	r3, [pc, #600]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
 8002e08:	4b90      	ldr	r3, [pc, #576]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e14:	d10b      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	4b8d      	ldr	r3, [pc, #564]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06c      	beq.n	8002efc <HAL_RCC_OscConfig+0x130>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d168      	bne.n	8002efc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e275      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x7a>
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a83      	ldr	r2, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x9c>
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7e      	ldr	r2, [pc, #504]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b7c      	ldr	r3, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7b      	ldr	r2, [pc, #492]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b73      	ldr	r3, [pc, #460]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a72      	ldr	r2, [pc, #456]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6e      	ldr	r2, [pc, #440]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6b      	ldr	r2, [pc, #428]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe f99a 	bl	80011e4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe f996 	bl	80011e4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e229      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe f986 	bl	80011e4 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe f982 	bl	80011e4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e215      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x110>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d069      	beq.n	8002fde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x190>
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x17a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1e9      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	493d      	ldr	r1, [pc, #244]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e040      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d023      	beq.n	8002fac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a38      	ldr	r2, [pc, #224]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe f938 	bl	80011e4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f78:	f7fe f934 	bl	80011e4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1c7      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4929      	ldr	r1, [pc, #164]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	e018      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f914 	bl	80011e4 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7fe f910 	bl	80011e4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1a3      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d038      	beq.n	800305c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe f8f1 	bl	80011e4 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe f8ed 	bl	80011e4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e180      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x280>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x23a>
 8003024:	e01a      	b.n	800305c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_RCC_OscConfig+0x280>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fe f8d7 	bl	80011e4 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe f8d3 	bl	80011e4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d903      	bls.n	8003050 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e166      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
 800304c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b92      	ldr	r3, [pc, #584]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a4 	beq.w	80031b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306a:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a88      	ldr	r2, [pc, #544]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b86      	ldr	r3, [pc, #536]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003092:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fe f89b 	bl	80011e4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b2:	f7fe f897 	bl	80011e4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b64      	cmp	r3, #100	; 0x64
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e12a      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c4:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x4d4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x31a>
 80030d8:	4b70      	ldr	r3, [pc, #448]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a6f      	ldr	r2, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	e02d      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x33c>
 80030ee:	4b6b      	ldr	r3, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a67      	ldr	r2, [pc, #412]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	e01c      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d10c      	bne.n	800312a <HAL_RCC_OscConfig+0x35e>
 8003110:	4b62      	ldr	r3, [pc, #392]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a61      	ldr	r2, [pc, #388]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b5f      	ldr	r3, [pc, #380]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a5e      	ldr	r2, [pc, #376]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
 800312a:	4b5c      	ldr	r3, [pc, #368]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a5b      	ldr	r2, [pc, #364]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f84b 	bl	80011e4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f847 	bl	80011e4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0d8      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ee      	beq.n	8003152 <HAL_RCC_OscConfig+0x386>
 8003174:	e014      	b.n	80031a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe f835 	bl	80011e4 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe f831 	bl	80011e4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0c2      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a3c      	ldr	r2, [pc, #240]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80ae 	beq.w	8003318 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031bc:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d06d      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d14b      	bne.n	8003268 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b32      	ldr	r3, [pc, #200]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe f802 	bl	80011e4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fd fffe 	bl	80011e4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e091      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	071b      	lsls	r3, r3, #28
 800322e:	491b      	ldr	r1, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd ffd0 	bl	80011e4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fd ffcc 	bl	80011e4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e05f      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x47c>
 8003266:	e057      	b.n	8003318 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0b      	ldr	r2, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd ffb6 	bl	80011e4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd ffb2 	bl	80011e4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e045      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x4b0>
 800329a:	e03d      	b.n	8003318 <HAL_RCC_OscConfig+0x54c>
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_RCC_OscConfig+0x558>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d030      	beq.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d129      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d122      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d4:	4013      	ands	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032dc:	4293      	cmp	r3, r2
 80032de:	d119      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d10f      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0d0      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d910      	bls.n	8003370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 020f 	bic.w	r2, r3, #15
 8003356:	4965      	ldr	r1, [pc, #404]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0b8      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	494d      	ldr	r1, [pc, #308]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d040      	beq.n	800344c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e073      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06b      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4936      	ldr	r1, [pc, #216]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fd fee2 	bl	80011e4 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd fede 	bl	80011e4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e053      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d210      	bcs.n	800347c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	4922      	ldr	r1, [pc, #136]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e032      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4916      	ldr	r1, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ba:	f000 f821 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	490a      	ldr	r1, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034cc:	5ccb      	ldrb	r3, [r1, r3]
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1d4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fd6c 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023c00 	.word	0x40023c00
 80034f0:	40023800 	.word	0x40023800
 80034f4:	0801c3c0 	.word	0x0801c3c0
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20000004 	.word	0x20000004

08003500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	2300      	movs	r3, #0
 8003512:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003518:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 030c 	and.w	r3, r3, #12
 8003520:	2b08      	cmp	r3, #8
 8003522:	d00d      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x40>
 8003524:	2b08      	cmp	r3, #8
 8003526:	f200 80bd 	bhi.w	80036a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x34>
 800352e:	2b04      	cmp	r3, #4
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x3a>
 8003532:	e0b7      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b61      	ldr	r3, [pc, #388]	; (80036bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003536:	60bb      	str	r3, [r7, #8]
      break;
 8003538:	e0b7      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353a:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800353c:	60bb      	str	r3, [r7, #8]
      break;
 800353e:	e0b4      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003540:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003548:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800354a:	4b5b      	ldr	r3, [pc, #364]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d04d      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003556:	4b58      	ldr	r3, [pc, #352]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	461a      	mov	r2, r3
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	ea02 0800 	and.w	r8, r2, r0
 800356e:	ea03 0901 	and.w	r9, r3, r1
 8003572:	4640      	mov	r0, r8
 8003574:	4649      	mov	r1, r9
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	014b      	lsls	r3, r1, #5
 8003580:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003584:	0142      	lsls	r2, r0, #5
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	ebb0 0008 	subs.w	r0, r0, r8
 800358e:	eb61 0109 	sbc.w	r1, r1, r9
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	018b      	lsls	r3, r1, #6
 800359c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035a0:	0182      	lsls	r2, r0, #6
 80035a2:	1a12      	subs	r2, r2, r0
 80035a4:	eb63 0301 	sbc.w	r3, r3, r1
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	00d9      	lsls	r1, r3, #3
 80035b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035b6:	00d0      	lsls	r0, r2, #3
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	eb12 0208 	adds.w	r2, r2, r8
 80035c0:	eb43 0309 	adc.w	r3, r3, r9
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	0259      	lsls	r1, r3, #9
 80035ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035d2:	0250      	lsls	r0, r2, #9
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	461a      	mov	r2, r3
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	f7fc fe7c 	bl	80002e0 <__aeabi_uldivmod>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4613      	mov	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e04a      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	461a      	mov	r2, r3
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	ea02 0400 	and.w	r4, r2, r0
 800360a:	ea03 0501 	and.w	r5, r3, r1
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	014b      	lsls	r3, r1, #5
 800361c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003620:	0142      	lsls	r2, r0, #5
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	1b00      	subs	r0, r0, r4
 8003628:	eb61 0105 	sbc.w	r1, r1, r5
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	018b      	lsls	r3, r1, #6
 8003636:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800363a:	0182      	lsls	r2, r0, #6
 800363c:	1a12      	subs	r2, r2, r0
 800363e:	eb63 0301 	sbc.w	r3, r3, r1
 8003642:	f04f 0000 	mov.w	r0, #0
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	00d9      	lsls	r1, r3, #3
 800364c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003650:	00d0      	lsls	r0, r2, #3
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	1912      	adds	r2, r2, r4
 8003658:	eb45 0303 	adc.w	r3, r5, r3
 800365c:	f04f 0000 	mov.w	r0, #0
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	0299      	lsls	r1, r3, #10
 8003666:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800366a:	0290      	lsls	r0, r2, #10
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	f7fc fe30 	bl	80002e0 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	60bb      	str	r3, [r7, #8]
      break;
 80036a2:	e002      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036a6:	60bb      	str	r3, [r7, #8]
      break;
 80036a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036aa:	68bb      	ldr	r3, [r7, #8]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	007a1200 	.word	0x007a1200

080036c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000000 	.word	0x20000000

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036e0:	f7ff fff0 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0a9b      	lsrs	r3, r3, #10
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	0801c3d0 	.word	0x0801c3d0

08003704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003708:	f7ff ffdc 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0b5b      	lsrs	r3, r3, #13
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	0801c3d0 	.word	0x0801c3d0

0800372c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	220f      	movs	r2, #15
 800373a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_GetClockConfig+0x5c>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <HAL_RCC_GetClockConfig+0x5c>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_RCC_GetClockConfig+0x5c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_GetClockConfig+0x5c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	08db      	lsrs	r3, r3, #3
 8003766:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_RCC_GetClockConfig+0x60>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40023c00 	.word	0x40023c00

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037b8:	4b69      	ldr	r3, [pc, #420]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a68      	ldr	r2, [pc, #416]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037c2:	6093      	str	r3, [r2, #8]
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	4964      	ldr	r1, [pc, #400]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ea:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	4959      	ldr	r1, [pc, #356]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003808:	d101      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d017      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003826:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	494a      	ldr	r1, [pc, #296]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 808b 	beq.w	800398a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a39      	ldr	r2, [pc, #228]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a34      	ldr	r2, [pc, #208]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fd fca4 	bl	80011e4 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fd fca0 	bl	80011e4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e38f      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038be:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d035      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d02e      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d114      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fc68 	bl	80011e4 <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fc64 	bl	80011e4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e351      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ee      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003946:	d111      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003956:	400b      	ands	r3, r1
 8003958:	4901      	ldr	r1, [pc, #4]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
 800395e:	e00b      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	0ffffcff 	.word	0x0ffffcff
 800396c:	4bb3      	ldr	r3, [pc, #716]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4ab2      	ldr	r2, [pc, #712]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003972:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003976:	6093      	str	r3, [r2, #8]
 8003978:	4bb0      	ldr	r3, [pc, #704]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	49ad      	ldr	r1, [pc, #692]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	4313      	orrs	r3, r2
 8003988:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003996:	4ba9      	ldr	r3, [pc, #676]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	4aa7      	ldr	r2, [pc, #668]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039a6:	4ba5      	ldr	r3, [pc, #660]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	49a2      	ldr	r1, [pc, #648]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039c4:	4b9d      	ldr	r3, [pc, #628]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d2:	499a      	ldr	r1, [pc, #616]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039e6:	4b95      	ldr	r3, [pc, #596]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	4991      	ldr	r1, [pc, #580]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a08:	4b8c      	ldr	r3, [pc, #560]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	4989      	ldr	r1, [pc, #548]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a2a:	4b84      	ldr	r3, [pc, #528]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4980      	ldr	r1, [pc, #512]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a4c:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4978      	ldr	r1, [pc, #480]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a6e:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f023 020c 	bic.w	r2, r3, #12
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	496f      	ldr	r1, [pc, #444]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	4967      	ldr	r1, [pc, #412]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ab2:	4b62      	ldr	r3, [pc, #392]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	495e      	ldr	r1, [pc, #376]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ad4:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	4956      	ldr	r1, [pc, #344]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	494d      	ldr	r1, [pc, #308]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b18:	4b48      	ldr	r3, [pc, #288]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	4945      	ldr	r1, [pc, #276]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b3a:	4b40      	ldr	r3, [pc, #256]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	493c      	ldr	r1, [pc, #240]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b5c:	4b37      	ldr	r3, [pc, #220]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	4934      	ldr	r1, [pc, #208]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d011      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8c:	492b      	ldr	r1, [pc, #172]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bcc:	491b      	ldr	r1, [pc, #108]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003be0:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf0:	4912      	ldr	r1, [pc, #72]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c14:	4909      	ldr	r1, [pc, #36]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00f      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	4986      	ldr	r1, [pc, #536]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c54:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	497d      	ldr	r1, [pc, #500]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d006      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80d6 	beq.w	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c80:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a75      	ldr	r2, [pc, #468]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8c:	f7fd faaa 	bl	80011e4 <HAL_GetTick>
 8003c90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c94:	f7fd faa6 	bl	80011e4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e195      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d021      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11d      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cd4:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cda:	0e1b      	lsrs	r3, r3, #24
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	019a      	lsls	r2, r3, #6
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	071b      	lsls	r3, r3, #28
 8003cfa:	4958      	ldr	r1, [pc, #352]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02e      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2c:	d129      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d3c:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	0f1b      	lsrs	r3, r3, #28
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	019a      	lsls	r2, r3, #6
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	071b      	lsls	r3, r3, #28
 8003d62:	493e      	ldr	r1, [pc, #248]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d6a:	4b3c      	ldr	r3, [pc, #240]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d70:	f023 021f 	bic.w	r2, r3, #31
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	4938      	ldr	r1, [pc, #224]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01d      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d8e:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d94:	0e1b      	lsrs	r3, r3, #24
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d9c:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da2:	0f1b      	lsrs	r3, r3, #28
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	019a      	lsls	r2, r3, #6
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	061b      	lsls	r3, r3, #24
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	071b      	lsls	r3, r3, #28
 8003dc2:	4926      	ldr	r1, [pc, #152]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d011      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	019a      	lsls	r2, r3, #6
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	491a      	ldr	r1, [pc, #104]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e06:	f7fd f9ed 	bl	80011e4 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e0e:	f7fd f9e9 	bl	80011e4 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b64      	cmp	r3, #100	; 0x64
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0d8      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 80ce 	bne.w	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fd f9d0 	bl	80011e4 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e46:	e00b      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e48:	f7fd f9cc 	bl	80011e4 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d904      	bls.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0bb      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e60:	4b5e      	ldr	r3, [pc, #376]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6c:	d0ec      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02e      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d12a      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ea4:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	0f1b      	lsrs	r3, r3, #28
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	019a      	lsls	r2, r3, #6
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	4944      	ldr	r1, [pc, #272]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	493d      	ldr	r1, [pc, #244]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d022      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f00:	d11d      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f02:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	0e1b      	lsrs	r3, r3, #24
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f10:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	0f1b      	lsrs	r3, r3, #28
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	019a      	lsls	r2, r3, #6
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	4929      	ldr	r1, [pc, #164]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d028      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f4a:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	0e1b      	lsrs	r3, r3, #24
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	019a      	lsls	r2, r3, #6
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	431a      	orrs	r2, r3
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4911      	ldr	r1, [pc, #68]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fd f91c 	bl	80011e4 <HAL_GetTick>
 8003fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fb0:	f7fd f918 	bl	80011e4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e007      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fce:	d1ef      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e049      	b.n	8004086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f841 	bl	800408e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f000 fa00 	bl	8004424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e054      	b.n	8004166 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a26      	ldr	r2, [pc, #152]	; (8004174 <HAL_TIM_Base_Start_IT+0xd0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d01d      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_TIM_Base_Start_IT+0xd8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_TIM_Base_Start_IT+0xdc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_TIM_Base_Start_IT+0xe0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_TIM_Base_Start_IT+0xe4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x80>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_TIM_Base_Start_IT+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d115      	bne.n	8004150 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_TIM_Base_Start_IT+0xec>)
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d015      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0xbe>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d011      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	e008      	b.n	8004162 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e000      	b.n	8004164 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40010400 	.word	0x40010400
 8004188:	40014000 	.word	0x40014000
 800418c:	40001800 	.word	0x40001800
 8004190:	00010007 	.word	0x00010007

08004194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d122      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d11b      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0202 	mvn.w	r2, #2
 80041c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f905 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8f7 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f908 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d122      	bne.n	8004244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11b      	bne.n	8004244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0204 	mvn.w	r2, #4
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8db 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8cd 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8de 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b08      	cmp	r3, #8
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b08      	cmp	r3, #8
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0208 	mvn.w	r2, #8
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2204      	movs	r2, #4
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8b1 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8a3 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8b4 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0210 	mvn.w	r2, #16
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2208      	movs	r2, #8
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f887 	bl	80043e6 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f879 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f88a 	bl	80043fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0201 	mvn.w	r2, #1
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fc fca0 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f91a 	bl	8004578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d10e      	bne.n	8004372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d107      	bne.n	8004372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f90d 	bl	800458c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d10e      	bne.n	800439e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d107      	bne.n	800439e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f838 	bl	800440e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d10e      	bne.n	80043ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0220 	mvn.w	r2, #32
 80043c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8cd 	bl	8004564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a40      	ldr	r2, [pc, #256]	; (8004538 <TIM_Base_SetConfig+0x114>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a3d      	ldr	r2, [pc, #244]	; (800453c <TIM_Base_SetConfig+0x118>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <TIM_Base_SetConfig+0x11c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <TIM_Base_SetConfig+0x120>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3a      	ldr	r2, [pc, #232]	; (8004548 <TIM_Base_SetConfig+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <TIM_Base_SetConfig+0x114>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02b      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d027      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2c      	ldr	r2, [pc, #176]	; (800453c <TIM_Base_SetConfig+0x118>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d023      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <TIM_Base_SetConfig+0x11c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01f      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <TIM_Base_SetConfig+0x120>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01b      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <TIM_Base_SetConfig+0x124>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d017      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a28      	ldr	r2, [pc, #160]	; (800454c <TIM_Base_SetConfig+0x128>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <TIM_Base_SetConfig+0x12c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <TIM_Base_SetConfig+0x130>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a25      	ldr	r2, [pc, #148]	; (8004558 <TIM_Base_SetConfig+0x134>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a24      	ldr	r2, [pc, #144]	; (800455c <TIM_Base_SetConfig+0x138>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <TIM_Base_SetConfig+0x13c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <TIM_Base_SetConfig+0x114>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0xf8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <TIM_Base_SetConfig+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40010400 	.word	0x40010400
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800
 8004558:	40001800 	.word	0x40001800
 800455c:	40001c00 	.word	0x40001c00
 8004560:	40002000 	.word	0x40002000

08004564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e040      	b.n	8004634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fc58 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2224      	movs	r2, #36	; 0x24
 80045cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f990 	bl	8004904 <UART_SetConfig>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e022      	b.n	8004634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fbe6 	bl	8004dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fc6d 	bl	8004f0c <UART_CheckIdleState>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004650:	2b20      	cmp	r3, #32
 8004652:	f040 8081 	bne.w	8004758 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Transmit+0x26>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e079      	b.n	800475a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_UART_Transmit+0x38>
 8004670:	2302      	movs	r3, #2
 8004672:	e072      	b.n	800475a <HAL_UART_Transmit+0x11e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2221      	movs	r2, #33	; 0x21
 8004688:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800468a:	f7fc fdab 	bl	80011e4 <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d108      	bne.n	80046bc <HAL_UART_Transmit+0x80>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e003      	b.n	80046c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046cc:	e02c      	b.n	8004728 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fc60 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e038      	b.n	800475a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10b      	bne.n	8004706 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3302      	adds	r3, #2
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e007      	b.n	8004716 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3301      	adds	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1cc      	bne.n	80046ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fc2d 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e005      	b.n	800475a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b08a      	sub	sp, #40	; 0x28
 8004766:	af02      	add	r7, sp, #8
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004776:	2b20      	cmp	r3, #32
 8004778:	f040 80be 	bne.w	80048f8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Receive+0x26>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0b6      	b.n	80048fa <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_UART_Receive+0x38>
 8004796:	2302      	movs	r3, #2
 8004798:	e0af      	b.n	80048fa <HAL_UART_Receive+0x198>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2222      	movs	r2, #34	; 0x22
 80047ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047b6:	f7fc fd15 	bl	80011e4 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d10e      	bne.n	80047f4 <HAL_UART_Receive+0x92>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <HAL_UART_Receive+0x88>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047e8:	e02d      	b.n	8004846 <HAL_UART_Receive+0xe4>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22ff      	movs	r2, #255	; 0xff
 80047ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f2:	e028      	b.n	8004846 <HAL_UART_Receive+0xe4>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_UART_Receive+0xb6>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_UART_Receive+0xac>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	22ff      	movs	r2, #255	; 0xff
 8004808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800480c:	e01b      	b.n	8004846 <HAL_UART_Receive+0xe4>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	227f      	movs	r2, #127	; 0x7f
 8004812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004816:	e016      	b.n	8004846 <HAL_UART_Receive+0xe4>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004820:	d10d      	bne.n	800483e <HAL_UART_Receive+0xdc>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <HAL_UART_Receive+0xd2>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	227f      	movs	r2, #127	; 0x7f
 800482e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004832:	e008      	b.n	8004846 <HAL_UART_Receive+0xe4>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	223f      	movs	r2, #63	; 0x3f
 8004838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800483c:	e003      	b.n	8004846 <HAL_UART_Receive+0xe4>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800484c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004856:	d108      	bne.n	800486a <HAL_UART_Receive+0x108>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	e003      	b.n	8004872 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800487a:	e032      	b.n	80048e2 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	2120      	movs	r1, #32
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fb89 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e031      	b.n	80048fa <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10c      	bne.n	80048b6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	8a7b      	ldrh	r3, [r7, #18]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3302      	adds	r3, #2
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e00c      	b.n	80048d0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	4013      	ands	r3, r2
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1c6      	bne.n	800487c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4ba7      	ldr	r3, [pc, #668]	; (8004bcc <UART_SetConfig+0x2c8>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	430b      	orrs	r3, r1
 800493a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a95      	ldr	r2, [pc, #596]	; (8004bd0 <UART_SetConfig+0x2cc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d120      	bne.n	80049c2 <UART_SetConfig+0xbe>
 8004980:	4b94      	ldr	r3, [pc, #592]	; (8004bd4 <UART_SetConfig+0x2d0>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b03      	cmp	r3, #3
 800498c:	d816      	bhi.n	80049bc <UART_SetConfig+0xb8>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <UART_SetConfig+0x90>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049ab 	.word	0x080049ab
 80049a0:	080049b7 	.word	0x080049b7
 80049a4:	2301      	movs	r3, #1
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e14f      	b.n	8004c4a <UART_SetConfig+0x346>
 80049aa:	2302      	movs	r3, #2
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e14c      	b.n	8004c4a <UART_SetConfig+0x346>
 80049b0:	2304      	movs	r3, #4
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e149      	b.n	8004c4a <UART_SetConfig+0x346>
 80049b6:	2308      	movs	r3, #8
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e146      	b.n	8004c4a <UART_SetConfig+0x346>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e143      	b.n	8004c4a <UART_SetConfig+0x346>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a84      	ldr	r2, [pc, #528]	; (8004bd8 <UART_SetConfig+0x2d4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d132      	bne.n	8004a32 <UART_SetConfig+0x12e>
 80049cc:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <UART_SetConfig+0x2d0>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d828      	bhi.n	8004a2c <UART_SetConfig+0x128>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <UART_SetConfig+0xdc>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a2d 	.word	0x08004a2d
 80049e8:	08004a2d 	.word	0x08004a2d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a2d 	.word	0x08004a2d
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a1b 	.word	0x08004a1b
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a2d 	.word	0x08004a2d
 8004a10:	08004a27 	.word	0x08004a27
 8004a14:	2300      	movs	r3, #0
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e117      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e114      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a20:	2304      	movs	r3, #4
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e111      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a26:	2308      	movs	r3, #8
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e10e      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e10b      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <UART_SetConfig+0x2d8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d120      	bne.n	8004a7e <UART_SetConfig+0x17a>
 8004a3c:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <UART_SetConfig+0x2d0>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a46:	2b30      	cmp	r3, #48	; 0x30
 8004a48:	d013      	beq.n	8004a72 <UART_SetConfig+0x16e>
 8004a4a:	2b30      	cmp	r3, #48	; 0x30
 8004a4c:	d814      	bhi.n	8004a78 <UART_SetConfig+0x174>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d009      	beq.n	8004a66 <UART_SetConfig+0x162>
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d810      	bhi.n	8004a78 <UART_SetConfig+0x174>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <UART_SetConfig+0x15c>
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d006      	beq.n	8004a6c <UART_SetConfig+0x168>
 8004a5e:	e00b      	b.n	8004a78 <UART_SetConfig+0x174>
 8004a60:	2300      	movs	r3, #0
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e0f1      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a66:	2302      	movs	r3, #2
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e0ee      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e0eb      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a72:	2308      	movs	r3, #8
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e0e8      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e0e5      	b.n	8004c4a <UART_SetConfig+0x346>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a57      	ldr	r2, [pc, #348]	; (8004be0 <UART_SetConfig+0x2dc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d120      	bne.n	8004aca <UART_SetConfig+0x1c6>
 8004a88:	4b52      	ldr	r3, [pc, #328]	; (8004bd4 <UART_SetConfig+0x2d0>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a92:	2bc0      	cmp	r3, #192	; 0xc0
 8004a94:	d013      	beq.n	8004abe <UART_SetConfig+0x1ba>
 8004a96:	2bc0      	cmp	r3, #192	; 0xc0
 8004a98:	d814      	bhi.n	8004ac4 <UART_SetConfig+0x1c0>
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d009      	beq.n	8004ab2 <UART_SetConfig+0x1ae>
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d810      	bhi.n	8004ac4 <UART_SetConfig+0x1c0>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <UART_SetConfig+0x1a8>
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d006      	beq.n	8004ab8 <UART_SetConfig+0x1b4>
 8004aaa:	e00b      	b.n	8004ac4 <UART_SetConfig+0x1c0>
 8004aac:	2300      	movs	r3, #0
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e0cb      	b.n	8004c4a <UART_SetConfig+0x346>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e0c8      	b.n	8004c4a <UART_SetConfig+0x346>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e0c5      	b.n	8004c4a <UART_SetConfig+0x346>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e0c2      	b.n	8004c4a <UART_SetConfig+0x346>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e0bf      	b.n	8004c4a <UART_SetConfig+0x346>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a45      	ldr	r2, [pc, #276]	; (8004be4 <UART_SetConfig+0x2e0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d125      	bne.n	8004b20 <UART_SetConfig+0x21c>
 8004ad4:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <UART_SetConfig+0x2d0>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae2:	d017      	beq.n	8004b14 <UART_SetConfig+0x210>
 8004ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae8:	d817      	bhi.n	8004b1a <UART_SetConfig+0x216>
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aee:	d00b      	beq.n	8004b08 <UART_SetConfig+0x204>
 8004af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af4:	d811      	bhi.n	8004b1a <UART_SetConfig+0x216>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <UART_SetConfig+0x1fe>
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d006      	beq.n	8004b0e <UART_SetConfig+0x20a>
 8004b00:	e00b      	b.n	8004b1a <UART_SetConfig+0x216>
 8004b02:	2300      	movs	r3, #0
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e0a0      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e09d      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b0e:	2304      	movs	r3, #4
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e09a      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b14:	2308      	movs	r3, #8
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e097      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e094      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <UART_SetConfig+0x2e4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d125      	bne.n	8004b76 <UART_SetConfig+0x272>
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <UART_SetConfig+0x2d0>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b38:	d017      	beq.n	8004b6a <UART_SetConfig+0x266>
 8004b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3e:	d817      	bhi.n	8004b70 <UART_SetConfig+0x26c>
 8004b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b44:	d00b      	beq.n	8004b5e <UART_SetConfig+0x25a>
 8004b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4a:	d811      	bhi.n	8004b70 <UART_SetConfig+0x26c>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <UART_SetConfig+0x254>
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b54:	d006      	beq.n	8004b64 <UART_SetConfig+0x260>
 8004b56:	e00b      	b.n	8004b70 <UART_SetConfig+0x26c>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e075      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e072      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b64:	2304      	movs	r3, #4
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e06f      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e06c      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b70:	2310      	movs	r3, #16
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e069      	b.n	8004c4a <UART_SetConfig+0x346>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <UART_SetConfig+0x2e8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d137      	bne.n	8004bf0 <UART_SetConfig+0x2ec>
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <UART_SetConfig+0x2d0>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b8e:	d017      	beq.n	8004bc0 <UART_SetConfig+0x2bc>
 8004b90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b94:	d817      	bhi.n	8004bc6 <UART_SetConfig+0x2c2>
 8004b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9a:	d00b      	beq.n	8004bb4 <UART_SetConfig+0x2b0>
 8004b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba0:	d811      	bhi.n	8004bc6 <UART_SetConfig+0x2c2>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <UART_SetConfig+0x2aa>
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d006      	beq.n	8004bba <UART_SetConfig+0x2b6>
 8004bac:	e00b      	b.n	8004bc6 <UART_SetConfig+0x2c2>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e04a      	b.n	8004c4a <UART_SetConfig+0x346>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e047      	b.n	8004c4a <UART_SetConfig+0x346>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e044      	b.n	8004c4a <UART_SetConfig+0x346>
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e041      	b.n	8004c4a <UART_SetConfig+0x346>
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e03e      	b.n	8004c4a <UART_SetConfig+0x346>
 8004bcc:	efff69f3 	.word	0xefff69f3
 8004bd0:	40011000 	.word	0x40011000
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40004400 	.word	0x40004400
 8004bdc:	40004800 	.word	0x40004800
 8004be0:	40004c00 	.word	0x40004c00
 8004be4:	40005000 	.word	0x40005000
 8004be8:	40011400 	.word	0x40011400
 8004bec:	40007800 	.word	0x40007800
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a71      	ldr	r2, [pc, #452]	; (8004dbc <UART_SetConfig+0x4b8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d125      	bne.n	8004c46 <UART_SetConfig+0x342>
 8004bfa:	4b71      	ldr	r3, [pc, #452]	; (8004dc0 <UART_SetConfig+0x4bc>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c08:	d017      	beq.n	8004c3a <UART_SetConfig+0x336>
 8004c0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c0e:	d817      	bhi.n	8004c40 <UART_SetConfig+0x33c>
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	d00b      	beq.n	8004c2e <UART_SetConfig+0x32a>
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1a:	d811      	bhi.n	8004c40 <UART_SetConfig+0x33c>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <UART_SetConfig+0x324>
 8004c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c24:	d006      	beq.n	8004c34 <UART_SetConfig+0x330>
 8004c26:	e00b      	b.n	8004c40 <UART_SetConfig+0x33c>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e00d      	b.n	8004c4a <UART_SetConfig+0x346>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e00a      	b.n	8004c4a <UART_SetConfig+0x346>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e007      	b.n	8004c4a <UART_SetConfig+0x346>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e004      	b.n	8004c4a <UART_SetConfig+0x346>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e001      	b.n	8004c4a <UART_SetConfig+0x346>
 8004c46:	2310      	movs	r3, #16
 8004c48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d15b      	bne.n	8004d0c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004c54:	7ffb      	ldrb	r3, [r7, #31]
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d827      	bhi.n	8004caa <UART_SetConfig+0x3a6>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x35c>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004cab 	.word	0x08004cab
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe fd2a 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8004c88:	61b8      	str	r0, [r7, #24]
        break;
 8004c8a:	e013      	b.n	8004cb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fe fd3a 	bl	8003704 <HAL_RCC_GetPCLK2Freq>
 8004c90:	61b8      	str	r0, [r7, #24]
        break;
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <UART_SetConfig+0x4c0>)
 8004c96:	61bb      	str	r3, [r7, #24]
        break;
 8004c98:	e00c      	b.n	8004cb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe fc31 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 8004c9e:	61b8      	str	r0, [r7, #24]
        break;
 8004ca0:	e008      	b.n	8004cb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	61bb      	str	r3, [r7, #24]
        break;
 8004ca8:	e004      	b.n	8004cb4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d074      	beq.n	8004da4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	005a      	lsls	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b0f      	cmp	r3, #15
 8004cd6:	d916      	bls.n	8004d06 <UART_SetConfig+0x402>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d212      	bcs.n	8004d06 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f023 030f 	bic.w	r3, r3, #15
 8004ce8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	89fb      	ldrh	r3, [r7, #14]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	89fa      	ldrh	r2, [r7, #14]
 8004d02:	60da      	str	r2, [r3, #12]
 8004d04:	e04e      	b.n	8004da4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	77bb      	strb	r3, [r7, #30]
 8004d0a:	e04b      	b.n	8004da4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d827      	bhi.n	8004d62 <UART_SetConfig+0x45e>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x414>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d4d 	.word	0x08004d4d
 8004d24:	08004d63 	.word	0x08004d63
 8004d28:	08004d53 	.word	0x08004d53
 8004d2c:	08004d63 	.word	0x08004d63
 8004d30:	08004d63 	.word	0x08004d63
 8004d34:	08004d63 	.word	0x08004d63
 8004d38:	08004d5b 	.word	0x08004d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d3c:	f7fe fcce 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8004d40:	61b8      	str	r0, [r7, #24]
        break;
 8004d42:	e013      	b.n	8004d6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d44:	f7fe fcde 	bl	8003704 <HAL_RCC_GetPCLK2Freq>
 8004d48:	61b8      	str	r0, [r7, #24]
        break;
 8004d4a:	e00f      	b.n	8004d6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <UART_SetConfig+0x4c0>)
 8004d4e:	61bb      	str	r3, [r7, #24]
        break;
 8004d50:	e00c      	b.n	8004d6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d52:	f7fe fbd5 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 8004d56:	61b8      	str	r0, [r7, #24]
        break;
 8004d58:	e008      	b.n	8004d6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5e:	61bb      	str	r3, [r7, #24]
        break;
 8004d60:	e004      	b.n	8004d6c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	77bb      	strb	r3, [r7, #30]
        break;
 8004d6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	085a      	lsrs	r2, r3, #1
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	d908      	bls.n	8004da0 <UART_SetConfig+0x49c>
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d204      	bcs.n	8004da0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e001      	b.n	8004da4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004db0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40007c00 	.word	0x40007c00
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	00f42400 	.word	0x00f42400

08004dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01a      	beq.n	8004ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec6:	d10a      	bne.n	8004ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f1c:	f7fc f962 	bl	80011e4 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d10e      	bne.n	8004f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f82d 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e023      	b.n	8004f96 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d10e      	bne.n	8004f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f817 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e00d      	b.n	8004f96 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fae:	e05e      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d05a      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb8:	f7fc f914 	bl	80011e4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d302      	bcc.n	8004fce <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11b      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e043      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02c      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d124      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800502c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800503c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e00f      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	429a      	cmp	r2, r3
 800508a:	d091      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005098:	b084      	sub	sp, #16
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	f107 001c 	add.w	r0, r7, #28
 80050a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d120      	bne.n	80050f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	4b20      	ldr	r3, [pc, #128]	; (8005144 <USB_CoreInit+0xac>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa5a 	bl	80055a0 <USB_CoreReset>
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e010      	b.n	8005114 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa4e 	bl	80055a0 <USB_CoreReset>
 8005104:	4603      	mov	r3, r0
 8005106:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b01      	cmp	r3, #1
 8005118:	d10b      	bne.n	8005132 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f043 0206 	orr.w	r2, r3, #6
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800513e:	b004      	add	sp, #16
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	ffbdffbf 	.word	0xffbdffbf

08005148 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 0201 	bic.w	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d106      	bne.n	8005196 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
 8005194:	e00b      	b.n	80051ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e001      	b.n	80051ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e003      	b.n	80051b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80051ae:	2032      	movs	r0, #50	; 0x32
 80051b0:	f7fc f824 	bl	80011fc <HAL_Delay>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c0:	b084      	sub	sp, #16
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e009      	b.n	80051f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3340      	adds	r3, #64	; 0x40
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	3301      	adds	r3, #1
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b0e      	cmp	r3, #14
 80051f8:	d9f2      	bls.n	80051e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11c      	bne.n	800523a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e005      	b.n	8005246 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	4619      	mov	r1, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	461a      	mov	r2, r3
 8005262:	680b      	ldr	r3, [r1, #0]
 8005264:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b01      	cmp	r3, #1
 800526a:	d10c      	bne.n	8005286 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005272:	2100      	movs	r1, #0
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f959 	bl	800552c <USB_SetDevSpeed>
 800527a:	e018      	b.n	80052ae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800527c:	2101      	movs	r1, #1
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f954 	bl	800552c <USB_SetDevSpeed>
 8005284:	e013      	b.n	80052ae <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b03      	cmp	r3, #3
 800528a:	d10c      	bne.n	80052a6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005292:	2100      	movs	r1, #0
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f949 	bl	800552c <USB_SetDevSpeed>
 800529a:	e008      	b.n	80052ae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800529c:	2101      	movs	r1, #1
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f944 	bl	800552c <USB_SetDevSpeed>
 80052a4:	e003      	b.n	80052ae <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052a6:	2103      	movs	r1, #3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f93f 	bl	800552c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052ae:	2110      	movs	r1, #16
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8f3 	bl	800549c <USB_FlushTxFifo>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f911 	bl	80054e8 <USB_FlushRxFifo>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	461a      	mov	r2, r3
 80052d8:	2300      	movs	r3, #0
 80052da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	461a      	mov	r2, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	461a      	mov	r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	e043      	b.n	8005382 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800530c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005310:	d118      	bne.n	8005344 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	461a      	mov	r2, r3
 8005326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e013      	b.n	8005356 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	461a      	mov	r2, r3
 800533c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e008      	b.n	8005356 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	2300      	movs	r3, #0
 8005354:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	461a      	mov	r2, r3
 8005376:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800537a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3301      	adds	r3, #1
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3b7      	bcc.n	80052fa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e043      	b.n	8005418 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a6:	d118      	bne.n	80053da <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e013      	b.n	80053ec <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	461a      	mov	r2, r3
 80053d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e008      	b.n	80053ec <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	461a      	mov	r2, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	461a      	mov	r2, r3
 800540c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005410:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3301      	adds	r3, #1
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	d3b7      	bcc.n	8005390 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005432:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005440:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f043 0210 	orr.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <USB_DevInit+0x2d4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f043 0208 	orr.w	r2, r3, #8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d105      	bne.n	8005484 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <USB_DevInit+0x2d8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005490:	b004      	add	sp, #16
 8005492:	4770      	bx	lr
 8005494:	803c3800 	.word	0x803c3800
 8005498:	40000004 	.word	0x40000004

0800549c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <USB_FlushTxFifo+0x48>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d901      	bls.n	80054c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e006      	b.n	80054d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d0f0      	beq.n	80054b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	00030d40 	.word	0x00030d40

080054e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2210      	movs	r2, #16
 80054f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <USB_FlushRxFifo+0x40>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b10      	cmp	r3, #16
 8005516:	d0f0      	beq.n	80054fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	00030d40 	.word	0x00030d40

0800552c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005578:	f023 0303 	bic.w	r3, r3, #3
 800557c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <USB_CoreReset+0x64>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e01b      	b.n	80055f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	daf2      	bge.n	80055ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <USB_CoreReset+0x64>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d0f0      	beq.n	80055d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	00030d40 	.word	0x00030d40

08005608 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800560e:	4ba0      	ldr	r3, [pc, #640]	; (8005890 <MX_LWIP_Init+0x288>)
 8005610:	22c0      	movs	r2, #192	; 0xc0
 8005612:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005614:	4b9e      	ldr	r3, [pc, #632]	; (8005890 <MX_LWIP_Init+0x288>)
 8005616:	22a8      	movs	r2, #168	; 0xa8
 8005618:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800561a:	4b9d      	ldr	r3, [pc, #628]	; (8005890 <MX_LWIP_Init+0x288>)
 800561c:	2201      	movs	r2, #1
 800561e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 192;
 8005620:	4b9b      	ldr	r3, [pc, #620]	; (8005890 <MX_LWIP_Init+0x288>)
 8005622:	22c0      	movs	r2, #192	; 0xc0
 8005624:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 225;
 8005626:	4b9b      	ldr	r3, [pc, #620]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005628:	22e1      	movs	r2, #225	; 0xe1
 800562a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 225;
 800562c:	4b99      	ldr	r3, [pc, #612]	; (8005894 <MX_LWIP_Init+0x28c>)
 800562e:	22e1      	movs	r2, #225	; 0xe1
 8005630:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 225;
 8005632:	4b98      	ldr	r3, [pc, #608]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005634:	22e1      	movs	r2, #225	; 0xe1
 8005636:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005638:	4b96      	ldr	r3, [pc, #600]	; (8005894 <MX_LWIP_Init+0x28c>)
 800563a:	2200      	movs	r2, #0
 800563c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800563e:	4b96      	ldr	r3, [pc, #600]	; (8005898 <MX_LWIP_Init+0x290>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005644:	4b94      	ldr	r3, [pc, #592]	; (8005898 <MX_LWIP_Init+0x290>)
 8005646:	2200      	movs	r2, #0
 8005648:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800564a:	4b93      	ldr	r3, [pc, #588]	; (8005898 <MX_LWIP_Init+0x290>)
 800564c:	2200      	movs	r2, #0
 800564e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005650:	4b91      	ldr	r3, [pc, #580]	; (8005898 <MX_LWIP_Init+0x290>)
 8005652:	2200      	movs	r2, #0
 8005654:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005656:	2100      	movs	r1, #0
 8005658:	2000      	movs	r0, #0
 800565a:	f006 fff9 	bl	800c650 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800565e:	4b8c      	ldr	r3, [pc, #560]	; (8005890 <MX_LWIP_Init+0x288>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	061a      	lsls	r2, r3, #24
 8005664:	4b8a      	ldr	r3, [pc, #552]	; (8005890 <MX_LWIP_Init+0x288>)
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	4b88      	ldr	r3, [pc, #544]	; (8005890 <MX_LWIP_Init+0x288>)
 800566e:	789b      	ldrb	r3, [r3, #2]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	4313      	orrs	r3, r2
 8005674:	4a86      	ldr	r2, [pc, #536]	; (8005890 <MX_LWIP_Init+0x288>)
 8005676:	78d2      	ldrb	r2, [r2, #3]
 8005678:	4313      	orrs	r3, r2
 800567a:	061a      	lsls	r2, r3, #24
 800567c:	4b84      	ldr	r3, [pc, #528]	; (8005890 <MX_LWIP_Init+0x288>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	0619      	lsls	r1, r3, #24
 8005682:	4b83      	ldr	r3, [pc, #524]	; (8005890 <MX_LWIP_Init+0x288>)
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	4319      	orrs	r1, r3
 800568a:	4b81      	ldr	r3, [pc, #516]	; (8005890 <MX_LWIP_Init+0x288>)
 800568c:	789b      	ldrb	r3, [r3, #2]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	430b      	orrs	r3, r1
 8005692:	497f      	ldr	r1, [pc, #508]	; (8005890 <MX_LWIP_Init+0x288>)
 8005694:	78c9      	ldrb	r1, [r1, #3]
 8005696:	430b      	orrs	r3, r1
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800569e:	431a      	orrs	r2, r3
 80056a0:	4b7b      	ldr	r3, [pc, #492]	; (8005890 <MX_LWIP_Init+0x288>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	0619      	lsls	r1, r3, #24
 80056a6:	4b7a      	ldr	r3, [pc, #488]	; (8005890 <MX_LWIP_Init+0x288>)
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	4319      	orrs	r1, r3
 80056ae:	4b78      	ldr	r3, [pc, #480]	; (8005890 <MX_LWIP_Init+0x288>)
 80056b0:	789b      	ldrb	r3, [r3, #2]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	430b      	orrs	r3, r1
 80056b6:	4976      	ldr	r1, [pc, #472]	; (8005890 <MX_LWIP_Init+0x288>)
 80056b8:	78c9      	ldrb	r1, [r1, #3]
 80056ba:	430b      	orrs	r3, r1
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056c2:	431a      	orrs	r2, r3
 80056c4:	4b72      	ldr	r3, [pc, #456]	; (8005890 <MX_LWIP_Init+0x288>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	0619      	lsls	r1, r3, #24
 80056ca:	4b71      	ldr	r3, [pc, #452]	; (8005890 <MX_LWIP_Init+0x288>)
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	4319      	orrs	r1, r3
 80056d2:	4b6f      	ldr	r3, [pc, #444]	; (8005890 <MX_LWIP_Init+0x288>)
 80056d4:	789b      	ldrb	r3, [r3, #2]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	430b      	orrs	r3, r1
 80056da:	496d      	ldr	r1, [pc, #436]	; (8005890 <MX_LWIP_Init+0x288>)
 80056dc:	78c9      	ldrb	r1, [r1, #3]
 80056de:	430b      	orrs	r3, r1
 80056e0:	0e1b      	lsrs	r3, r3, #24
 80056e2:	4313      	orrs	r3, r2
 80056e4:	4a6d      	ldr	r2, [pc, #436]	; (800589c <MX_LWIP_Init+0x294>)
 80056e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80056e8:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <MX_LWIP_Init+0x28c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	061a      	lsls	r2, r3, #24
 80056ee:	4b69      	ldr	r3, [pc, #420]	; (8005894 <MX_LWIP_Init+0x28c>)
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	431a      	orrs	r2, r3
 80056f6:	4b67      	ldr	r3, [pc, #412]	; (8005894 <MX_LWIP_Init+0x28c>)
 80056f8:	789b      	ldrb	r3, [r3, #2]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	4313      	orrs	r3, r2
 80056fe:	4a65      	ldr	r2, [pc, #404]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005700:	78d2      	ldrb	r2, [r2, #3]
 8005702:	4313      	orrs	r3, r2
 8005704:	061a      	lsls	r2, r3, #24
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	0619      	lsls	r1, r3, #24
 800570c:	4b61      	ldr	r3, [pc, #388]	; (8005894 <MX_LWIP_Init+0x28c>)
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	4319      	orrs	r1, r3
 8005714:	4b5f      	ldr	r3, [pc, #380]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005716:	789b      	ldrb	r3, [r3, #2]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	430b      	orrs	r3, r1
 800571c:	495d      	ldr	r1, [pc, #372]	; (8005894 <MX_LWIP_Init+0x28c>)
 800571e:	78c9      	ldrb	r1, [r1, #3]
 8005720:	430b      	orrs	r3, r1
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005728:	431a      	orrs	r2, r3
 800572a:	4b5a      	ldr	r3, [pc, #360]	; (8005894 <MX_LWIP_Init+0x28c>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	0619      	lsls	r1, r3, #24
 8005730:	4b58      	ldr	r3, [pc, #352]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	041b      	lsls	r3, r3, #16
 8005736:	4319      	orrs	r1, r3
 8005738:	4b56      	ldr	r3, [pc, #344]	; (8005894 <MX_LWIP_Init+0x28c>)
 800573a:	789b      	ldrb	r3, [r3, #2]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	430b      	orrs	r3, r1
 8005740:	4954      	ldr	r1, [pc, #336]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005742:	78c9      	ldrb	r1, [r1, #3]
 8005744:	430b      	orrs	r3, r1
 8005746:	0a1b      	lsrs	r3, r3, #8
 8005748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800574c:	431a      	orrs	r2, r3
 800574e:	4b51      	ldr	r3, [pc, #324]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	0619      	lsls	r1, r3, #24
 8005754:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	4319      	orrs	r1, r3
 800575c:	4b4d      	ldr	r3, [pc, #308]	; (8005894 <MX_LWIP_Init+0x28c>)
 800575e:	789b      	ldrb	r3, [r3, #2]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	430b      	orrs	r3, r1
 8005764:	494b      	ldr	r1, [pc, #300]	; (8005894 <MX_LWIP_Init+0x28c>)
 8005766:	78c9      	ldrb	r1, [r1, #3]
 8005768:	430b      	orrs	r3, r1
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	4313      	orrs	r3, r2
 800576e:	4a4c      	ldr	r2, [pc, #304]	; (80058a0 <MX_LWIP_Init+0x298>)
 8005770:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005772:	4b49      	ldr	r3, [pc, #292]	; (8005898 <MX_LWIP_Init+0x290>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	061a      	lsls	r2, r3, #24
 8005778:	4b47      	ldr	r3, [pc, #284]	; (8005898 <MX_LWIP_Init+0x290>)
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	4b45      	ldr	r3, [pc, #276]	; (8005898 <MX_LWIP_Init+0x290>)
 8005782:	789b      	ldrb	r3, [r3, #2]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	4313      	orrs	r3, r2
 8005788:	4a43      	ldr	r2, [pc, #268]	; (8005898 <MX_LWIP_Init+0x290>)
 800578a:	78d2      	ldrb	r2, [r2, #3]
 800578c:	4313      	orrs	r3, r2
 800578e:	061a      	lsls	r2, r3, #24
 8005790:	4b41      	ldr	r3, [pc, #260]	; (8005898 <MX_LWIP_Init+0x290>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	0619      	lsls	r1, r3, #24
 8005796:	4b40      	ldr	r3, [pc, #256]	; (8005898 <MX_LWIP_Init+0x290>)
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	4319      	orrs	r1, r3
 800579e:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <MX_LWIP_Init+0x290>)
 80057a0:	789b      	ldrb	r3, [r3, #2]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	430b      	orrs	r3, r1
 80057a6:	493c      	ldr	r1, [pc, #240]	; (8005898 <MX_LWIP_Init+0x290>)
 80057a8:	78c9      	ldrb	r1, [r1, #3]
 80057aa:	430b      	orrs	r3, r1
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057b2:	431a      	orrs	r2, r3
 80057b4:	4b38      	ldr	r3, [pc, #224]	; (8005898 <MX_LWIP_Init+0x290>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	0619      	lsls	r1, r3, #24
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <MX_LWIP_Init+0x290>)
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	4319      	orrs	r1, r3
 80057c2:	4b35      	ldr	r3, [pc, #212]	; (8005898 <MX_LWIP_Init+0x290>)
 80057c4:	789b      	ldrb	r3, [r3, #2]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	430b      	orrs	r3, r1
 80057ca:	4933      	ldr	r1, [pc, #204]	; (8005898 <MX_LWIP_Init+0x290>)
 80057cc:	78c9      	ldrb	r1, [r1, #3]
 80057ce:	430b      	orrs	r3, r1
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057d6:	431a      	orrs	r2, r3
 80057d8:	4b2f      	ldr	r3, [pc, #188]	; (8005898 <MX_LWIP_Init+0x290>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	0619      	lsls	r1, r3, #24
 80057de:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <MX_LWIP_Init+0x290>)
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	4319      	orrs	r1, r3
 80057e6:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <MX_LWIP_Init+0x290>)
 80057e8:	789b      	ldrb	r3, [r3, #2]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	430b      	orrs	r3, r1
 80057ee:	492a      	ldr	r1, [pc, #168]	; (8005898 <MX_LWIP_Init+0x290>)
 80057f0:	78c9      	ldrb	r1, [r1, #3]
 80057f2:	430b      	orrs	r3, r1
 80057f4:	0e1b      	lsrs	r3, r3, #24
 80057f6:	4313      	orrs	r3, r2
 80057f8:	4a2a      	ldr	r2, [pc, #168]	; (80058a4 <MX_LWIP_Init+0x29c>)
 80057fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <MX_LWIP_Init+0x2a0>)
 80057fe:	9302      	str	r3, [sp, #8]
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <MX_LWIP_Init+0x2a4>)
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	2300      	movs	r3, #0
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <MX_LWIP_Init+0x29c>)
 800580a:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <MX_LWIP_Init+0x298>)
 800580c:	4923      	ldr	r1, [pc, #140]	; (800589c <MX_LWIP_Init+0x294>)
 800580e:	4828      	ldr	r0, [pc, #160]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 8005810:	f007 fca2 	bl	800d158 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005814:	4826      	ldr	r0, [pc, #152]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 8005816:	f007 fe51 	bl	800d4bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800581a:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 800581c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800582c:	4820      	ldr	r0, [pc, #128]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 800582e:	f007 fe55 	bl	800d4dc <netif_set_up>
 8005832:	e002      	b.n	800583a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005834:	481e      	ldr	r0, [pc, #120]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 8005836:	f007 febd 	bl	800d5b4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800583a:	491e      	ldr	r1, [pc, #120]	; (80058b4 <MX_LWIP_Init+0x2ac>)
 800583c:	481c      	ldr	r0, [pc, #112]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 800583e:	f007 ff4f 	bl	800d6e0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005842:	2200      	movs	r2, #0
 8005844:	2101      	movs	r1, #1
 8005846:	2001      	movs	r0, #1
 8005848:	f000 ff14 	bl	8006674 <osSemaphoreNew>
 800584c:	4603      	mov	r3, r0
 800584e:	4a1a      	ldr	r2, [pc, #104]	; (80058b8 <MX_LWIP_Init+0x2b0>)
 8005850:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <MX_LWIP_Init+0x2b4>)
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <MX_LWIP_Init+0x2a8>)
 8005856:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <MX_LWIP_Init+0x2b0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a17      	ldr	r2, [pc, #92]	; (80058bc <MX_LWIP_Init+0x2b4>)
 800585e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005860:	2224      	movs	r2, #36	; 0x24
 8005862:	2100      	movs	r1, #0
 8005864:	4816      	ldr	r0, [pc, #88]	; (80058c0 <MX_LWIP_Init+0x2b8>)
 8005866:	f011 ffe1 	bl	801782c <memset>
  attributes.name = "LinkThr";
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <MX_LWIP_Init+0x2b8>)
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <MX_LWIP_Init+0x2bc>)
 800586e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005870:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <MX_LWIP_Init+0x2b8>)
 8005872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005876:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <MX_LWIP_Init+0x2b8>)
 800587a:	2210      	movs	r2, #16
 800587c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800587e:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <MX_LWIP_Init+0x2b8>)
 8005880:	490e      	ldr	r1, [pc, #56]	; (80058bc <MX_LWIP_Init+0x2b4>)
 8005882:	4811      	ldr	r0, [pc, #68]	; (80058c8 <MX_LWIP_Init+0x2c0>)
 8005884:	f000 fcda 	bl	800623c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200054e0 	.word	0x200054e0
 8005894:	200054dc 	.word	0x200054dc
 8005898:	2000547c 	.word	0x2000547c
 800589c:	200054d8 	.word	0x200054d8
 80058a0:	200054e4 	.word	0x200054e4
 80058a4:	200054e8 	.word	0x200054e8
 80058a8:	0800c561 	.word	0x0800c561
 80058ac:	08005f19 	.word	0x08005f19
 80058b0:	200054a4 	.word	0x200054a4
 80058b4:	08005ffd 	.word	0x08005ffd
 80058b8:	20000488 	.word	0x20000488
 80058bc:	20005474 	.word	0x20005474
 80058c0:	20005480 	.word	0x20005480
 80058c4:	08018e14 	.word	0x08018e14
 80058c8:	08005f85 	.word	0x08005f85

080058cc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08e      	sub	sp, #56	; 0x38
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a52      	ldr	r2, [pc, #328]	; (8005a34 <HAL_ETH_MspInit+0x168>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f040 809e 	bne.w	8005a2c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80058f0:	4b51      	ldr	r3, [pc, #324]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	4a50      	ldr	r2, [pc, #320]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 80058f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058fa:	6313      	str	r3, [r2, #48]	; 0x30
 80058fc:	4b4e      	ldr	r3, [pc, #312]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	623b      	str	r3, [r7, #32]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	4a4a      	ldr	r2, [pc, #296]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800590e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005912:	6313      	str	r3, [r2, #48]	; 0x30
 8005914:	4b48      	ldr	r3, [pc, #288]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4b45      	ldr	r3, [pc, #276]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	4a44      	ldr	r2, [pc, #272]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800592a:	6313      	str	r3, [r2, #48]	; 0x30
 800592c:	4b42      	ldr	r3, [pc, #264]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005938:	4b3f      	ldr	r3, [pc, #252]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	4a3e      	ldr	r2, [pc, #248]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800593e:	f043 0304 	orr.w	r3, r3, #4
 8005942:	6313      	str	r3, [r2, #48]	; 0x30
 8005944:	4b3c      	ldr	r3, [pc, #240]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005950:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	4a38      	ldr	r2, [pc, #224]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6313      	str	r3, [r2, #48]	; 0x30
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005968:	4b33      	ldr	r3, [pc, #204]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	4a32      	ldr	r2, [pc, #200]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800596e:	f043 0302 	orr.w	r3, r3, #2
 8005972:	6313      	str	r3, [r2, #48]	; 0x30
 8005974:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 8005986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598a:	6313      	str	r3, [r2, #48]	; 0x30
 800598c:	4b2a      	ldr	r3, [pc, #168]	; (8005a38 <HAL_ETH_MspInit+0x16c>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005998:	2332      	movs	r3, #50	; 0x32
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599c:	2302      	movs	r3, #2
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a4:	2303      	movs	r3, #3
 80059a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059a8:	230b      	movs	r3, #11
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059b0:	4619      	mov	r1, r3
 80059b2:	4822      	ldr	r0, [pc, #136]	; (8005a3c <HAL_ETH_MspInit+0x170>)
 80059b4:	f7fc feac 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80059b8:	2386      	movs	r3, #134	; 0x86
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059bc:	2302      	movs	r3, #2
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059c4:	2303      	movs	r3, #3
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059c8:	230b      	movs	r3, #11
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d0:	4619      	mov	r1, r3
 80059d2:	481b      	ldr	r0, [pc, #108]	; (8005a40 <HAL_ETH_MspInit+0x174>)
 80059d4:	f7fc fe9c 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80059d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059de:	2302      	movs	r3, #2
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e6:	2303      	movs	r3, #3
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80059ea:	230b      	movs	r3, #11
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80059ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f2:	4619      	mov	r1, r3
 80059f4:	4813      	ldr	r0, [pc, #76]	; (8005a44 <HAL_ETH_MspInit+0x178>)
 80059f6:	f7fc fe8b 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80059fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a00:	2302      	movs	r3, #2
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a0c:	230b      	movs	r3, #11
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a14:	4619      	mov	r1, r3
 8005a16:	480c      	ldr	r0, [pc, #48]	; (8005a48 <HAL_ETH_MspInit+0x17c>)
 8005a18:	f7fc fe7a 	bl	8002710 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2105      	movs	r1, #5
 8005a20:	203d      	movs	r0, #61	; 0x3d
 8005a22:	f7fb fcc7 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005a26:	203d      	movs	r0, #61	; 0x3d
 8005a28:	f7fb fce0 	bl	80013ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	3738      	adds	r7, #56	; 0x38
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40028000 	.word	0x40028000
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	40020800 	.word	0x40020800
 8005a40:	40020000 	.word	0x40020000
 8005a44:	40020400 	.word	0x40020400
 8005a48:	40021800 	.word	0x40021800

08005a4c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <HAL_ETH_RxCpltCallback+0x1c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 ff0d 	bl	8006878 <osSemaphoreRelease>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000048c 	.word	0x2000048c

08005a6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b090      	sub	sp, #64	; 0x40
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a78:	4b5d      	ldr	r3, [pc, #372]	; (8005bf0 <low_level_init+0x184>)
 8005a7a:	4a5e      	ldr	r2, [pc, #376]	; (8005bf4 <low_level_init+0x188>)
 8005a7c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005a7e:	4b5c      	ldr	r3, [pc, #368]	; (8005bf0 <low_level_init+0x184>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005a84:	4b5a      	ldr	r3, [pc, #360]	; (8005bf0 <low_level_init+0x184>)
 8005a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a8a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005a8c:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <low_level_init+0x184>)
 8005a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a92:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005a94:	4b56      	ldr	r3, [pc, #344]	; (8005bf0 <low_level_init+0x184>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005aa2:	23e1      	movs	r3, #225	; 0xe1
 8005aa4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005ab2:	4a4f      	ldr	r2, [pc, #316]	; (8005bf0 <low_level_init+0x184>)
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005aba:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <low_level_init+0x184>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005ac0:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <low_level_init+0x184>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005ac6:	4b4a      	ldr	r3, [pc, #296]	; (8005bf0 <low_level_init+0x184>)
 8005ac8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005acc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005ace:	4848      	ldr	r0, [pc, #288]	; (8005bf0 <low_level_init+0x184>)
 8005ad0:	f7fb fc9a 	bl	8001408 <HAL_ETH_Init>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005af4:	2304      	movs	r3, #4
 8005af6:	4a40      	ldr	r2, [pc, #256]	; (8005bf8 <low_level_init+0x18c>)
 8005af8:	4940      	ldr	r1, [pc, #256]	; (8005bfc <low_level_init+0x190>)
 8005afa:	483d      	ldr	r0, [pc, #244]	; (8005bf0 <low_level_init+0x184>)
 8005afc:	f7fb fe1e 	bl	800173c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005b00:	2304      	movs	r3, #4
 8005b02:	4a3f      	ldr	r2, [pc, #252]	; (8005c00 <low_level_init+0x194>)
 8005b04:	493f      	ldr	r1, [pc, #252]	; (8005c04 <low_level_init+0x198>)
 8005b06:	483a      	ldr	r0, [pc, #232]	; (8005bf0 <low_level_init+0x184>)
 8005b08:	f7fb fe81 	bl	800180e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2206      	movs	r2, #6
 8005b10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b14:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <low_level_init+0x184>)
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b20:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <low_level_init+0x184>)
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	785a      	ldrb	r2, [r3, #1]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005b2c:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <low_level_init+0x184>)
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	789a      	ldrb	r2, [r3, #2]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005b38:	4b2d      	ldr	r3, [pc, #180]	; (8005bf0 <low_level_init+0x184>)
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	78da      	ldrb	r2, [r3, #3]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005b44:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <low_level_init+0x184>)
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	791a      	ldrb	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <low_level_init+0x184>)
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	795a      	ldrb	r2, [r3, #5]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b62:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b6a:	f043 030a 	orr.w	r3, r3, #10
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005b76:	2200      	movs	r2, #0
 8005b78:	2101      	movs	r1, #1
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	f000 fd7a 	bl	8006674 <osSemaphoreNew>
 8005b80:	4603      	mov	r3, r0
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <low_level_init+0x19c>)
 8005b84:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f011 fe4c 	bl	801782c <memset>
  attributes.name = "EthIf";
 8005b94:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <low_level_init+0x1a0>)
 8005b96:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005b98:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005b9e:	2330      	movs	r3, #48	; 0x30
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4819      	ldr	r0, [pc, #100]	; (8005c10 <low_level_init+0x1a4>)
 8005bac:	f000 fb46 	bl	800623c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005bb0:	480f      	ldr	r0, [pc, #60]	; (8005bf0 <low_level_init+0x184>)
 8005bb2:	f7fc f954 	bl	8001e5e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005bb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bba:	461a      	mov	r2, r3
 8005bbc:	211d      	movs	r1, #29
 8005bbe:	480c      	ldr	r0, [pc, #48]	; (8005bf0 <low_level_init+0x184>)
 8005bc0:	f7fc f87f 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	f043 030b 	orr.w	r3, r3, #11
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	461a      	mov	r2, r3
 8005bd0:	211d      	movs	r1, #29
 8005bd2:	4807      	ldr	r0, [pc, #28]	; (8005bf0 <low_level_init+0x184>)
 8005bd4:	f7fc f8dd 	bl	8001d92 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005bd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bdc:	461a      	mov	r2, r3
 8005bde:	211d      	movs	r1, #29
 8005be0:	4803      	ldr	r0, [pc, #12]	; (8005bf0 <low_level_init+0x184>)
 8005be2:	f7fc f86e 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005be6:	bf00      	nop
 8005be8:	3740      	adds	r7, #64	; 0x40
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20006dbc 	.word	0x20006dbc
 8005bf4:	40028000 	.word	0x40028000
 8005bf8:	20006e04 	.word	0x20006e04
 8005bfc:	200054ec 	.word	0x200054ec
 8005c00:	2000556c 	.word	0x2000556c
 8005c04:	20006d3c 	.word	0x20006d3c
 8005c08:	2000048c 	.word	0x2000048c
 8005c0c:	08018e1c 	.word	0x08018e1c
 8005c10:	08005eb9 	.word	0x08005eb9

08005c14 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005c1e:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <low_level_output+0x138>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005c36:	4b45      	ldr	r3, [pc, #276]	; (8005d4c <low_level_output+0x138>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	e05a      	b.n	8005cfc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da03      	bge.n	8005c56 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005c4e:	23f8      	movs	r3, #248	; 0xf8
 8005c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005c54:	e05c      	b.n	8005d10 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	895b      	ldrh	r3, [r3, #10]
 8005c5a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005c60:	e02f      	b.n	8005cc2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	18d0      	adds	r0, r2, r3
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	18d1      	adds	r1, r2, r3
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f011 fdaf 	bl	80177dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	da03      	bge.n	8005c94 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005c8c:	23f8      	movs	r3, #248	; 0xf8
 8005c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005c92:	e03d      	b.n	8005d10 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005ca4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005cb0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005cbc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d8c8      	bhi.n	8005c62 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	18d0      	adds	r0, r2, r3
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4413      	add	r3, r2
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f011 fd7b 	bl	80177dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1a1      	bne.n	8005c46 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	4811      	ldr	r0, [pc, #68]	; (8005d4c <low_level_output+0x138>)
 8005d06:	f7fb fdef 	bl	80018e8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005d10:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <low_level_output+0x138>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d18:	4413      	add	r3, r2
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00d      	beq.n	8005d40 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <low_level_output+0x138>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d2c:	4413      	add	r3, r2
 8005d2e:	2220      	movs	r2, #32
 8005d30:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <low_level_output+0x138>)
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	f241 0304 	movw	r3, #4100	; 0x1004
 8005d3a:	4413      	add	r3, r2
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005d40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3728      	adds	r7, #40	; 0x28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20006dbc 	.word	0x20006dbc

08005d50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005d74:	484f      	ldr	r0, [pc, #316]	; (8005eb4 <low_level_input+0x164>)
 8005d76:	f7fb fea1 	bl	8001abc <HAL_ETH_GetReceivedFrame_IT>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <low_level_input+0x34>

    return NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e092      	b.n	8005eaa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005d84:	4b4b      	ldr	r3, [pc, #300]	; (8005eb4 <low_level_input+0x164>)
 8005d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d88:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005d8a:	4b4a      	ldr	r3, [pc, #296]	; (8005eb4 <low_level_input+0x164>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005d90:	89fb      	ldrh	r3, [r7, #14]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005d96:	89fb      	ldrh	r3, [r7, #14]
 8005d98:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f007 fd68 	bl	800d874 <pbuf_alloc>
 8005da4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d04b      	beq.n	8005e44 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005dac:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <low_level_input+0x164>)
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	e040      	b.n	8005e3e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	895b      	ldrh	r3, [r3, #10]
 8005dc0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005dc6:	e021      	b.n	8005e0c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	18d0      	adds	r0, r2, r3
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	18d1      	adds	r1, r2, r3
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	461a      	mov	r2, r3
 8005de0:	f011 fcfc 	bl	80177dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005dfa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005e06:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d8d6      	bhi.n	8005dc8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	18d0      	adds	r0, r2, r3
 8005e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f011 fcd6 	bl	80177dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	4413      	add	r3, r2
 8005e36:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1bb      	bne.n	8005dbc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <low_level_input+0x164>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	e00b      	b.n	8005e68 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3301      	adds	r3, #1
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <low_level_input+0x164>)
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3ee      	bcc.n	8005e50 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <low_level_input+0x164>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <low_level_input+0x164>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005e80:	4413      	add	r3, r2
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <low_level_input+0x164>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	f241 0314 	movw	r3, #4116	; 0x1014
 8005e94:	4413      	add	r3, r2
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <low_level_input+0x164>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	f241 0308 	movw	r3, #4104	; 0x1008
 8005ea2:	4413      	add	r3, r2
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3730      	adds	r7, #48	; 0x30
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20006dbc 	.word	0x20006dbc

08005eb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <ethernetif_input+0x58>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fc6d 	bl	80067ac <osSemaphoreAcquire>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f5      	bne.n	8005ec4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005ed8:	480e      	ldr	r0, [pc, #56]	; (8005f14 <ethernetif_input+0x5c>)
 8005eda:	f011 fbf3 	bl	80176c4 <sys_mutex_lock>
        p = low_level_input( netif );
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff ff36 	bl	8005d50 <low_level_input>
 8005ee4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	68b8      	ldr	r0, [r7, #8]
 8005ef4:	4798      	blx	r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005efc:	68b8      	ldr	r0, [r7, #8]
 8005efe:	f007 ff9d 	bl	800de3c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005f02:	4804      	ldr	r0, [pc, #16]	; (8005f14 <ethernetif_input+0x5c>)
 8005f04:	f011 fbed 	bl	80176e2 <sys_mutex_unlock>
      } while(p!=NULL);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e4      	bne.n	8005ed8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f0e:	e7d9      	b.n	8005ec4 <ethernetif_input+0xc>
 8005f10:	2000048c 	.word	0x2000048c
 8005f14:	20008614 	.word	0x20008614

08005f18 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <ethernetif_init+0x1c>
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <ethernetif_init+0x48>)
 8005f28:	f240 223a 	movw	r2, #570	; 0x23a
 8005f2c:	490d      	ldr	r1, [pc, #52]	; (8005f64 <ethernetif_init+0x4c>)
 8005f2e:	480e      	ldr	r0, [pc, #56]	; (8005f68 <ethernetif_init+0x50>)
 8005f30:	f011 fc84 	bl	801783c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2273      	movs	r2, #115	; 0x73
 8005f38:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2274      	movs	r2, #116	; 0x74
 8005f40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <ethernetif_init+0x54>)
 8005f48:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <ethernetif_init+0x58>)
 8005f4e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fd8b 	bl	8005a6c <low_level_init>

  return ERR_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	08018e24 	.word	0x08018e24
 8005f64:	08018e40 	.word	0x08018e40
 8005f68:	08018e50 	.word	0x08018e50
 8005f6c:	08015601 	.word	0x08015601
 8005f70:	08005c15 	.word	0x08005c15

08005f74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f78:	f7fb f934 	bl	80011e4 <HAL_GetTick>
 8005f7c:	4603      	mov	r3, r0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4816      	ldr	r0, [pc, #88]	; (8005ff8 <ethernetif_set_link+0x74>)
 8005f9e:	f7fb fe90 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d108      	bne.n	8005fcc <ethernetif_set_link+0x48>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f007 fb27 	bl	800d618 <netif_set_link_up>
 8005fca:	e011      	b.n	8005ff0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <ethernetif_set_link+0x6c>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d104      	bne.n	8005ff0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f007 fb48 	bl	800d680 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005ff0:	20c8      	movs	r0, #200	; 0xc8
 8005ff2:	f000 f9c9 	bl	8006388 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005ff6:	e7cd      	b.n	8005f94 <ethernetif_set_link+0x10>
 8005ff8:	20006dbc 	.word	0x20006dbc

08005ffc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d05d      	beq.n	80060da <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800601e:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <ethernetif_update_config+0xf4>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d03f      	beq.n	80060a6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800602a:	2100      	movs	r1, #0
 800602c:	4830      	ldr	r0, [pc, #192]	; (80060f0 <ethernetif_update_config+0xf4>)
 800602e:	f7fb feb0 	bl	8001d92 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006032:	f7fb f8d7 	bl	80011e4 <HAL_GetTick>
 8006036:	4603      	mov	r3, r0
 8006038:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	461a      	mov	r2, r3
 8006040:	2101      	movs	r1, #1
 8006042:	482b      	ldr	r0, [pc, #172]	; (80060f0 <ethernetif_update_config+0xf4>)
 8006044:	f7fb fe3d 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006048:	f7fb f8cc 	bl	80011e4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006056:	d828      	bhi.n	80060aa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0eb      	beq.n	800603a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	461a      	mov	r2, r3
 8006068:	2110      	movs	r1, #16
 800606a:	4821      	ldr	r0, [pc, #132]	; (80060f0 <ethernetif_update_config+0xf4>)
 800606c:	f7fb fe29 	bl	8001cc2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d004      	beq.n	8006084 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800607a:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <ethernetif_update_config+0xf4>)
 800607c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e002      	b.n	800608a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <ethernetif_update_config+0xf4>)
 8006086:	2200      	movs	r2, #0
 8006088:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006094:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <ethernetif_update_config+0xf4>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
 800609a:	e016      	b.n	80060ca <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <ethernetif_update_config+0xf4>)
 800609e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	e011      	b.n	80060ca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <ethernetif_update_config+0xb0>
          goto error;
 80060aa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <ethernetif_update_config+0xf4>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	08db      	lsrs	r3, r3, #3
 80060b2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <ethernetif_update_config+0xf4>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80060bc:	4313      	orrs	r3, r2
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	2100      	movs	r1, #0
 80060c4:	480a      	ldr	r0, [pc, #40]	; (80060f0 <ethernetif_update_config+0xf4>)
 80060c6:	f7fb fe64 	bl	8001d92 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80060ca:	2100      	movs	r1, #0
 80060cc:	4808      	ldr	r0, [pc, #32]	; (80060f0 <ethernetif_update_config+0xf4>)
 80060ce:	f7fb ff25 	bl	8001f1c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80060d2:	4807      	ldr	r0, [pc, #28]	; (80060f0 <ethernetif_update_config+0xf4>)
 80060d4:	f7fb fec3 	bl	8001e5e <HAL_ETH_Start>
 80060d8:	e002      	b.n	80060e0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80060da:	4805      	ldr	r0, [pc, #20]	; (80060f0 <ethernetif_update_config+0xf4>)
 80060dc:	f7fb feee 	bl	8001ebc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f807 	bl	80060f4 <ethernetif_notify_conn_changed>
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20006dbc 	.word	0x20006dbc

080060f4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800610c:	bf00      	nop
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800611e:	f3ef 8305 	mrs	r3, IPSR
 8006122:	60bb      	str	r3, [r7, #8]
  return(result);
 8006124:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10f      	bne.n	800614a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612a:	f3ef 8310 	mrs	r3, PRIMASK
 800612e:	607b      	str	r3, [r7, #4]
  return(result);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006136:	f3ef 8311 	mrs	r3, BASEPRI
 800613a:	603b      	str	r3, [r7, #0]
  return(result);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <osKernelInitialize+0x3a>
 8006142:	4b0e      	ldr	r3, [pc, #56]	; (800617c <osKernelInitialize+0x64>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d103      	bne.n	8006152 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800614a:	f06f 0305 	mvn.w	r3, #5
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e00c      	b.n	800616c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <osKernelInitialize+0x64>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800615a:	4b08      	ldr	r3, [pc, #32]	; (800617c <osKernelInitialize+0x64>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e002      	b.n	800616c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006166:	f04f 33ff 	mov.w	r3, #4294967295
 800616a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000490 	.word	0x20000490

08006180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006186:	f3ef 8305 	mrs	r3, IPSR
 800618a:	60bb      	str	r3, [r7, #8]
  return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	607b      	str	r3, [r7, #4]
  return(result);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d105      	bne.n	80061aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800619e:	f3ef 8311 	mrs	r3, BASEPRI
 80061a2:	603b      	str	r3, [r7, #0]
  return(result);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <osKernelStart+0x3a>
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <osKernelStart+0x68>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d103      	bne.n	80061ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80061b2:	f06f 0305 	mvn.w	r3, #5
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e010      	b.n	80061dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <osKernelStart+0x68>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d109      	bne.n	80061d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061c2:	f7ff ffa1 	bl	8006108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061c6:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <osKernelStart+0x68>)
 80061c8:	2202      	movs	r2, #2
 80061ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061cc:	f002 f9ce 	bl	800856c <vTaskStartScheduler>
      stat = osOK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e002      	b.n	80061dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061dc:	68fb      	ldr	r3, [r7, #12]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000490 	.word	0x20000490

080061ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f2:	f3ef 8305 	mrs	r3, IPSR
 80061f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	607b      	str	r3, [r7, #4]
  return(result);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800620a:	f3ef 8311 	mrs	r3, BASEPRI
 800620e:	603b      	str	r3, [r7, #0]
  return(result);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <osKernelGetTickCount+0x3a>
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <osKernelGetTickCount+0x4c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d103      	bne.n	8006226 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800621e:	f002 facd 	bl	80087bc <xTaskGetTickCountFromISR>
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	e002      	b.n	800622c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006226:	f002 fab9 	bl	800879c <xTaskGetTickCount>
 800622a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000490 	.word	0x20000490

0800623c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b090      	sub	sp, #64	; 0x40
 8006240:	af04      	add	r7, sp, #16
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800624c:	f3ef 8305 	mrs	r3, IPSR
 8006250:	61fb      	str	r3, [r7, #28]
  return(result);
 8006252:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 808f 	bne.w	8006378 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625a:	f3ef 8310 	mrs	r3, PRIMASK
 800625e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006266:	f3ef 8311 	mrs	r3, BASEPRI
 800626a:	617b      	str	r3, [r7, #20]
  return(result);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <osThreadNew+0x3e>
 8006272:	4b44      	ldr	r3, [pc, #272]	; (8006384 <osThreadNew+0x148>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d07e      	beq.n	8006378 <osThreadNew+0x13c>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d07b      	beq.n	8006378 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006280:	2380      	movs	r3, #128	; 0x80
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006284:	2318      	movs	r3, #24
 8006286:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800628c:	f04f 33ff 	mov.w	r3, #4294967295
 8006290:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d045      	beq.n	8006324 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <osThreadNew+0x6a>
        name = attr->name;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <osThreadNew+0x90>
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	2b38      	cmp	r3, #56	; 0x38
 80062be:	d805      	bhi.n	80062cc <osThreadNew+0x90>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <osThreadNew+0x94>
        return (NULL);
 80062cc:	2300      	movs	r3, #0
 80062ce:	e054      	b.n	800637a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00e      	beq.n	8006306 <osThreadNew+0xca>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b5b      	cmp	r3, #91	; 0x5b
 80062ee:	d90a      	bls.n	8006306 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <osThreadNew+0xca>
        mem = 1;
 8006300:	2301      	movs	r3, #1
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	e010      	b.n	8006328 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10c      	bne.n	8006328 <osThreadNew+0xec>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d108      	bne.n	8006328 <osThreadNew+0xec>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <osThreadNew+0xec>
          mem = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	e001      	b.n	8006328 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d110      	bne.n	8006350 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 ff31 	bl	80081ac <xTaskCreateStatic>
 800634a:	4603      	mov	r3, r0
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	e013      	b.n	8006378 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d110      	bne.n	8006378 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	b29a      	uxth	r2, r3
 800635a:	f107 0310 	add.w	r3, r7, #16
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 ff82 	bl	8008272 <xTaskCreate>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d001      	beq.n	8006378 <osThreadNew+0x13c>
          hTask = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006378:	693b      	ldr	r3, [r7, #16]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3730      	adds	r7, #48	; 0x30
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000490 	.word	0x20000490

08006388 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006390:	f3ef 8305 	mrs	r3, IPSR
 8006394:	613b      	str	r3, [r7, #16]
  return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639c:	f3ef 8310 	mrs	r3, PRIMASK
 80063a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063a8:	f3ef 8311 	mrs	r3, BASEPRI
 80063ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d007      	beq.n	80063c4 <osDelay+0x3c>
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <osDelay+0x58>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d103      	bne.n	80063c4 <osDelay+0x3c>
    stat = osErrorISR;
 80063bc:	f06f 0305 	mvn.w	r3, #5
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e007      	b.n	80063d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 f896 	bl	8008500 <vTaskDelay>
    }
  }

  return (stat);
 80063d4:	697b      	ldr	r3, [r7, #20]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000490 	.word	0x20000490

080063e4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f0:	f3ef 8305 	mrs	r3, IPSR
 80063f4:	613b      	str	r3, [r7, #16]
  return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 8085 	bne.w	8006508 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006402:	60fb      	str	r3, [r7, #12]
  return(result);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800640a:	f3ef 8311 	mrs	r3, BASEPRI
 800640e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <osMutexNew+0x3a>
 8006416:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <osMutexNew+0x130>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d074      	beq.n	8006508 <osMutexNew+0x124>
    if (attr != NULL) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	e001      	b.n	8006430 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <osMutexNew+0x5c>
      rmtx = 1U;
 800643a:	2301      	movs	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	e001      	b.n	8006444 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d15c      	bne.n	8006508 <osMutexNew+0x124>
      mem = -1;
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d015      	beq.n	8006486 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d006      	beq.n	8006470 <osMutexNew+0x8c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2b4f      	cmp	r3, #79	; 0x4f
 8006468:	d902      	bls.n	8006470 <osMutexNew+0x8c>
          mem = 1;
 800646a:	2301      	movs	r3, #1
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e00c      	b.n	800648a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d108      	bne.n	800648a <osMutexNew+0xa6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <osMutexNew+0xa6>
            mem = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e001      	b.n	800648a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d112      	bne.n	80064b6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	4619      	mov	r1, r3
 800649c:	2004      	movs	r0, #4
 800649e:	f000 feb8 	bl	8007212 <xQueueCreateMutexStatic>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24
 80064a4:	e016      	b.n	80064d4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4619      	mov	r1, r3
 80064ac:	2001      	movs	r0, #1
 80064ae:	f000 feb0 	bl	8007212 <xQueueCreateMutexStatic>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24
 80064b4:	e00e      	b.n	80064d4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80064c2:	2004      	movs	r0, #4
 80064c4:	f000 fe8d 	bl	80071e2 <xQueueCreateMutex>
 80064c8:	6278      	str	r0, [r7, #36]	; 0x24
 80064ca:	e003      	b.n	80064d4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80064cc:	2001      	movs	r0, #1
 80064ce:	f000 fe88 	bl	80071e2 <xQueueCreateMutex>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00c      	beq.n	80064f4 <osMutexNew+0x110>
        if (attr != NULL) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <osMutexNew+0x104>
          name = attr->name;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e001      	b.n	80064ec <osMutexNew+0x108>
        } else {
          name = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80064ec:	6979      	ldr	r1, [r7, #20]
 80064ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064f0:	f001 fdd4 	bl	800809c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <osMutexNew+0x124>
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800650a:	4618      	mov	r0, r3
 800650c:	3728      	adds	r7, #40	; 0x28
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000490 	.word	0x20000490

08006518 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006536:	f3ef 8305 	mrs	r3, IPSR
 800653a:	613b      	str	r3, [r7, #16]
  return(result);
 800653c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006542:	f3ef 8310 	mrs	r3, PRIMASK
 8006546:	60fb      	str	r3, [r7, #12]
  return(result);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d105      	bne.n	800655a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800654e:	f3ef 8311 	mrs	r3, BASEPRI
 8006552:	60bb      	str	r3, [r7, #8]
  return(result);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <osMutexAcquire+0x52>
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <osMutexAcquire+0xb8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d103      	bne.n	800656a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006562:	f06f 0305 	mvn.w	r3, #5
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e02c      	b.n	80065c4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006570:	f06f 0303 	mvn.w	r3, #3
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	e025      	b.n	80065c4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d011      	beq.n	80065a2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	69b8      	ldr	r0, [r7, #24]
 8006582:	f000 fe97 	bl	80072b4 <xQueueTakeMutexRecursive>
 8006586:	4603      	mov	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d01b      	beq.n	80065c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006592:	f06f 0301 	mvn.w	r3, #1
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e014      	b.n	80065c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800659a:	f06f 0302 	mvn.w	r3, #2
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e010      	b.n	80065c4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	69b8      	ldr	r0, [r7, #24]
 80065a6:	f001 fa51 	bl	8007a4c <xQueueSemaphoreTake>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d009      	beq.n	80065c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80065b6:	f06f 0301 	mvn.w	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e002      	b.n	80065c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065be:	f06f 0302 	mvn.w	r3, #2
 80065c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065c4:	69fb      	ldr	r3, [r7, #28]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000490 	.word	0x20000490

080065d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f0:	f3ef 8305 	mrs	r3, IPSR
 80065f4:	613b      	str	r3, [r7, #16]
  return(result);
 80065f6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10f      	bne.n	800661c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006600:	60fb      	str	r3, [r7, #12]
  return(result);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006608:	f3ef 8311 	mrs	r3, BASEPRI
 800660c:	60bb      	str	r3, [r7, #8]
  return(result);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <osMutexRelease+0x50>
 8006614:	4b16      	ldr	r3, [pc, #88]	; (8006670 <osMutexRelease+0x9c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d103      	bne.n	8006624 <osMutexRelease+0x50>
    stat = osErrorISR;
 800661c:	f06f 0305 	mvn.w	r3, #5
 8006620:	61fb      	str	r3, [r7, #28]
 8006622:	e01f      	b.n	8006664 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d103      	bne.n	8006632 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800662a:	f06f 0303 	mvn.w	r3, #3
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	e018      	b.n	8006664 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006638:	69b8      	ldr	r0, [r7, #24]
 800663a:	f000 fe05 	bl	8007248 <xQueueGiveMutexRecursive>
 800663e:	4603      	mov	r3, r0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d00f      	beq.n	8006664 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006644:	f06f 0302 	mvn.w	r3, #2
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	e00b      	b.n	8006664 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800664c:	2300      	movs	r3, #0
 800664e:	2200      	movs	r2, #0
 8006650:	2100      	movs	r1, #0
 8006652:	69b8      	ldr	r0, [r7, #24]
 8006654:	f000 fed8 	bl	8007408 <xQueueGenericSend>
 8006658:	4603      	mov	r3, r0
 800665a:	2b01      	cmp	r3, #1
 800665c:	d002      	beq.n	8006664 <osMutexRelease+0x90>
        stat = osErrorResource;
 800665e:	f06f 0302 	mvn.w	r3, #2
 8006662:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006664:	69fb      	ldr	r3, [r7, #28]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000490 	.word	0x20000490

08006674 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006684:	f3ef 8305 	mrs	r3, IPSR
 8006688:	61bb      	str	r3, [r7, #24]
  return(result);
 800668a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 8086 	bne.w	800679e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006692:	f3ef 8310 	mrs	r3, PRIMASK
 8006696:	617b      	str	r3, [r7, #20]
  return(result);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d105      	bne.n	80066aa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	613b      	str	r3, [r7, #16]
  return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <osSemaphoreNew+0x3e>
 80066aa:	4b3f      	ldr	r3, [pc, #252]	; (80067a8 <osSemaphoreNew+0x134>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d075      	beq.n	800679e <osSemaphoreNew+0x12a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d072      	beq.n	800679e <osSemaphoreNew+0x12a>
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d86e      	bhi.n	800679e <osSemaphoreNew+0x12a>
    mem = -1;
 80066c0:	f04f 33ff 	mov.w	r3, #4294967295
 80066c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <osSemaphoreNew+0x6e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b4f      	cmp	r3, #79	; 0x4f
 80066da:	d902      	bls.n	80066e2 <osSemaphoreNew+0x6e>
        mem = 1;
 80066dc:	2301      	movs	r3, #1
 80066de:	623b      	str	r3, [r7, #32]
 80066e0:	e00c      	b.n	80066fc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <osSemaphoreNew+0x88>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <osSemaphoreNew+0x88>
          mem = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	e001      	b.n	80066fc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d04c      	beq.n	800679e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d128      	bne.n	800675c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d10a      	bne.n	8006726 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2203      	movs	r2, #3
 8006716:	9200      	str	r2, [sp, #0]
 8006718:	2200      	movs	r2, #0
 800671a:	2100      	movs	r1, #0
 800671c:	2001      	movs	r0, #1
 800671e:	f000 fc5f 	bl	8006fe0 <xQueueGenericCreateStatic>
 8006722:	6278      	str	r0, [r7, #36]	; 0x24
 8006724:	e005      	b.n	8006732 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006726:	2203      	movs	r2, #3
 8006728:	2100      	movs	r1, #0
 800672a:	2001      	movs	r0, #1
 800672c:	f000 fcda 	bl	80070e4 <xQueueGenericCreate>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d022      	beq.n	800677e <osSemaphoreNew+0x10a>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01f      	beq.n	800677e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800673e:	2300      	movs	r3, #0
 8006740:	2200      	movs	r2, #0
 8006742:	2100      	movs	r1, #0
 8006744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006746:	f000 fe5f 	bl	8007408 <xQueueGenericSend>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d016      	beq.n	800677e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006752:	f001 fb55 	bl	8007e00 <vQueueDelete>
            hSemaphore = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
 800675a:	e010      	b.n	800677e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d108      	bne.n	8006774 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	461a      	mov	r2, r3
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fdda 	bl	8007324 <xQueueCreateCountingSemaphoreStatic>
 8006770:	6278      	str	r0, [r7, #36]	; 0x24
 8006772:	e004      	b.n	800677e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fe0f 	bl	800739a <xQueueCreateCountingSemaphore>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <osSemaphoreNew+0x11e>
          name = attr->name;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e001      	b.n	8006796 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006796:	69f9      	ldr	r1, [r7, #28]
 8006798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800679a:	f001 fc7f 	bl	800809c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3728      	adds	r7, #40	; 0x28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000490 	.word	0x20000490

080067ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d103      	bne.n	80067cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80067c4:	f06f 0303 	mvn.w	r3, #3
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e04b      	b.n	8006864 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067cc:	f3ef 8305 	mrs	r3, IPSR
 80067d0:	617b      	str	r3, [r7, #20]
  return(result);
 80067d2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d8:	f3ef 8310 	mrs	r3, PRIMASK
 80067dc:	613b      	str	r3, [r7, #16]
  return(result);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067e4:	f3ef 8311 	mrs	r3, BASEPRI
 80067e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d026      	beq.n	800683e <osSemaphoreAcquire+0x92>
 80067f0:	4b1f      	ldr	r3, [pc, #124]	; (8006870 <osSemaphoreAcquire+0xc4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d122      	bne.n	800683e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80067fe:	f06f 0303 	mvn.w	r3, #3
 8006802:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006804:	e02d      	b.n	8006862 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	461a      	mov	r2, r3
 8006810:	2100      	movs	r1, #0
 8006812:	69b8      	ldr	r0, [r7, #24]
 8006814:	f001 fa2e 	bl	8007c74 <xQueueReceiveFromISR>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d003      	beq.n	8006826 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800681e:	f06f 0302 	mvn.w	r3, #2
 8006822:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006824:	e01d      	b.n	8006862 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01a      	beq.n	8006862 <osSemaphoreAcquire+0xb6>
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <osSemaphoreAcquire+0xc8>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800683c:	e011      	b.n	8006862 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	69b8      	ldr	r0, [r7, #24]
 8006842:	f001 f903 	bl	8007a4c <xQueueSemaphoreTake>
 8006846:	4603      	mov	r3, r0
 8006848:	2b01      	cmp	r3, #1
 800684a:	d00b      	beq.n	8006864 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006852:	f06f 0301 	mvn.w	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e004      	b.n	8006864 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800685a:	f06f 0302 	mvn.w	r3, #2
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e000      	b.n	8006864 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006862:	bf00      	nop
      }
    }
  }

  return (stat);
 8006864:	69fb      	ldr	r3, [r7, #28]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000490 	.word	0x20000490
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800688e:	f06f 0303 	mvn.w	r3, #3
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e03e      	b.n	8006914 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006896:	f3ef 8305 	mrs	r3, IPSR
 800689a:	617b      	str	r3, [r7, #20]
  return(result);
 800689c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a2:	f3ef 8310 	mrs	r3, PRIMASK
 80068a6:	613b      	str	r3, [r7, #16]
  return(result);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068ae:	f3ef 8311 	mrs	r3, BASEPRI
 80068b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01e      	beq.n	80068f8 <osSemaphoreRelease+0x80>
 80068ba:	4b19      	ldr	r3, [pc, #100]	; (8006920 <osSemaphoreRelease+0xa8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d11a      	bne.n	80068f8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068c6:	f107 0308 	add.w	r3, r7, #8
 80068ca:	4619      	mov	r1, r3
 80068cc:	69b8      	ldr	r0, [r7, #24]
 80068ce:	f000 ff41 	bl	8007754 <xQueueGiveFromISR>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d003      	beq.n	80068e0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80068d8:	f06f 0302 	mvn.w	r3, #2
 80068dc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068de:	e018      	b.n	8006912 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d015      	beq.n	8006912 <osSemaphoreRelease+0x9a>
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <osSemaphoreRelease+0xac>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80068f6:	e00c      	b.n	8006912 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80068f8:	2300      	movs	r3, #0
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	69b8      	ldr	r0, [r7, #24]
 8006900:	f000 fd82 	bl	8007408 <xQueueGenericSend>
 8006904:	4603      	mov	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d004      	beq.n	8006914 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800690a:	f06f 0302 	mvn.w	r3, #2
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e000      	b.n	8006914 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006912:	bf00      	nop
    }
  }

  return (stat);
 8006914:	69fb      	ldr	r3, [r7, #28]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000490 	.word	0x20000490
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006934:	f3ef 8305 	mrs	r3, IPSR
 8006938:	617b      	str	r3, [r7, #20]
  return(result);
 800693a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10f      	bne.n	8006960 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006940:	f3ef 8310 	mrs	r3, PRIMASK
 8006944:	613b      	str	r3, [r7, #16]
  return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800694c:	f3ef 8311 	mrs	r3, BASEPRI
 8006950:	60fb      	str	r3, [r7, #12]
  return(result);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <osSemaphoreDelete+0x40>
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <osSemaphoreDelete+0x68>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d103      	bne.n	8006968 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006960:	f06f 0305 	mvn.w	r3, #5
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e00e      	b.n	8006986 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800696e:	f06f 0303 	mvn.w	r3, #3
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e007      	b.n	8006986 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006976:	69b8      	ldr	r0, [r7, #24]
 8006978:	f001 fbba 	bl	80080f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006980:	69b8      	ldr	r0, [r7, #24]
 8006982:	f001 fa3d 	bl	8007e00 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006986:	69fb      	ldr	r3, [r7, #28]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20000490 	.word	0x20000490

08006994 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	; 0x30
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a4:	f3ef 8305 	mrs	r3, IPSR
 80069a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80069aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d16f      	bne.n	8006a90 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b0:	f3ef 8310 	mrs	r3, PRIMASK
 80069b4:	617b      	str	r3, [r7, #20]
  return(result);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069bc:	f3ef 8311 	mrs	r3, BASEPRI
 80069c0:	613b      	str	r3, [r7, #16]
  return(result);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <osMessageQueueNew+0x3c>
 80069c8:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <osMessageQueueNew+0x108>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d05f      	beq.n	8006a90 <osMessageQueueNew+0xfc>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d05c      	beq.n	8006a90 <osMessageQueueNew+0xfc>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d059      	beq.n	8006a90 <osMessageQueueNew+0xfc>
    mem = -1;
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
 80069e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d029      	beq.n	8006a3c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d012      	beq.n	8006a16 <osMessageQueueNew+0x82>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b4f      	cmp	r3, #79	; 0x4f
 80069f6:	d90e      	bls.n	8006a16 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	695a      	ldr	r2, [r3, #20]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <osMessageQueueNew+0x82>
        mem = 1;
 8006a10:	2301      	movs	r3, #1
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	e014      	b.n	8006a40 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d110      	bne.n	8006a40 <osMessageQueueNew+0xac>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d108      	bne.n	8006a40 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <osMessageQueueNew+0xac>
          mem = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	e001      	b.n	8006a40 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10b      	bne.n	8006a5e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2100      	movs	r1, #0
 8006a50:	9100      	str	r1, [sp, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fac3 	bl	8006fe0 <xQueueGenericCreateStatic>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a5c:	e008      	b.n	8006a70 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006a64:	2200      	movs	r2, #0
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fb3b 	bl	80070e4 <xQueueGenericCreate>
 8006a6e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00c      	beq.n	8006a90 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	e001      	b.n	8006a88 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006a88:	69f9      	ldr	r1, [r7, #28]
 8006a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a8c:	f001 fb06 	bl	800809c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3728      	adds	r7, #40	; 0x28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000490 	.word	0x20000490

08006aa0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab8:	f3ef 8305 	mrs	r3, IPSR
 8006abc:	61fb      	str	r3, [r7, #28]
  return(result);
 8006abe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d02c      	beq.n	8006b36 <osMessageQueuePut+0x96>
 8006adc:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <osMessageQueuePut+0xe0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d128      	bne.n	8006b36 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <osMessageQueuePut+0x56>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <osMessageQueuePut+0x56>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006af6:	f06f 0303 	mvn.w	r3, #3
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006afc:	e039      	b.n	8006b72 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b02:	f107 0210 	add.w	r2, r7, #16
 8006b06:	2300      	movs	r3, #0
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	6a38      	ldr	r0, [r7, #32]
 8006b0c:	f000 fd82 	bl	8007614 <xQueueGenericSendFromISR>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d003      	beq.n	8006b1e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006b16:	f06f 0302 	mvn.w	r3, #2
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b1c:	e029      	b.n	8006b72 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d026      	beq.n	8006b72 <osMessageQueuePut+0xd2>
 8006b24:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <osMessageQueuePut+0xe4>)
 8006b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b34:	e01d      	b.n	8006b72 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <osMessageQueuePut+0xa2>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006b42:	f06f 0303 	mvn.w	r3, #3
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	e014      	b.n	8006b74 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	6a38      	ldr	r0, [r7, #32]
 8006b52:	f000 fc59 	bl	8007408 <xQueueGenericSend>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d00b      	beq.n	8006b74 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006b62:	f06f 0301 	mvn.w	r3, #1
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	e004      	b.n	8006b74 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006b6a:	f06f 0302 	mvn.w	r3, #2
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b70:	e000      	b.n	8006b74 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3728      	adds	r7, #40	; 0x28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000490 	.word	0x20000490
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ba4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006baa:	f3ef 8310 	mrs	r3, PRIMASK
 8006bae:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bba:	617b      	str	r3, [r7, #20]
  return(result);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d02c      	beq.n	8006c1c <osMessageQueueGet+0x94>
 8006bc2:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <osMessageQueueGet+0xdc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d128      	bne.n	8006c1c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <osMessageQueueGet+0x54>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <osMessageQueueGet+0x54>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006bdc:	f06f 0303 	mvn.w	r3, #3
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006be2:	e038      	b.n	8006c56 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006be8:	f107 0310 	add.w	r3, r7, #16
 8006bec:	461a      	mov	r2, r3
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	6a38      	ldr	r0, [r7, #32]
 8006bf2:	f001 f83f 	bl	8007c74 <xQueueReceiveFromISR>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d003      	beq.n	8006c04 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006bfc:	f06f 0302 	mvn.w	r3, #2
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c02:	e028      	b.n	8006c56 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d025      	beq.n	8006c56 <osMessageQueueGet+0xce>
 8006c0a:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <osMessageQueueGet+0xe0>)
 8006c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c1a:	e01c      	b.n	8006c56 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <osMessageQueueGet+0xa0>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006c28:	f06f 0303 	mvn.w	r3, #3
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	e013      	b.n	8006c58 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	6a38      	ldr	r0, [r7, #32]
 8006c36:	f000 fe23 	bl	8007880 <xQueueReceive>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d00b      	beq.n	8006c58 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006c46:	f06f 0301 	mvn.w	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	e004      	b.n	8006c58 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006c4e:	f06f 0302 	mvn.w	r3, #2
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
 8006c54:	e000      	b.n	8006c58 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c56:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3728      	adds	r7, #40	; 0x28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000490 	.word	0x20000490
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e01e      	b.n	8006cc2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c84:	f3ef 8305 	mrs	r3, IPSR
 8006c88:	617b      	str	r3, [r7, #20]
  return(result);
 8006c8a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10f      	bne.n	8006cb0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c90:	f3ef 8310 	mrs	r3, PRIMASK
 8006c94:	613b      	str	r3, [r7, #16]
  return(result);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <osMessageQueueGetCount+0x4e>
 8006ca8:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <osMessageQueueGetCount+0x60>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d104      	bne.n	8006cba <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006cb0:	69b8      	ldr	r0, [r7, #24]
 8006cb2:	f001 f885 	bl	8007dc0 <uxQueueMessagesWaitingFromISR>
 8006cb6:	61f8      	str	r0, [r7, #28]
 8006cb8:	e003      	b.n	8006cc2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006cba:	69b8      	ldr	r0, [r7, #24]
 8006cbc:	f001 f860 	bl	8007d80 <uxQueueMessagesWaiting>
 8006cc0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006cc2:	69fb      	ldr	r3, [r7, #28]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000490 	.word	0x20000490

08006cd0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cdc:	f3ef 8305 	mrs	r3, IPSR
 8006ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10f      	bne.n	8006d08 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	613b      	str	r3, [r7, #16]
  return(result);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <osMessageQueueDelete+0x40>
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <osMessageQueueDelete+0x68>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d103      	bne.n	8006d10 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006d08:	f06f 0305 	mvn.w	r3, #5
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e00e      	b.n	8006d2e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006d16:	f06f 0303 	mvn.w	r3, #3
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e007      	b.n	8006d2e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006d1e:	69b8      	ldr	r0, [r7, #24]
 8006d20:	f001 f9e6 	bl	80080f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006d28:	69b8      	ldr	r0, [r7, #24]
 8006d2a:	f001 f869 	bl	8007e00 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006d2e:	69fb      	ldr	r3, [r7, #28]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000490 	.word	0x20000490

08006d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <vApplicationGetIdleTaskMemory+0x30>)
 8006d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2280      	movs	r2, #128	; 0x80
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000494 	.word	0x20000494
 8006d6c:	200004f0 	.word	0x200004f0

08006d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a07      	ldr	r2, [pc, #28]	; (8006d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8006d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <vApplicationGetTimerTaskMemory+0x30>)
 8006d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d8e:	601a      	str	r2, [r3, #0]
}
 8006d90:	bf00      	nop
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	200006f0 	.word	0x200006f0
 8006da0:	2000074c 	.word	0x2000074c

08006da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f103 0208 	add.w	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f103 0208 	add.w	r2, r3, #8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f103 0208 	add.w	r2, r3, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	601a      	str	r2, [r3, #0]
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d103      	bne.n	8006e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e00c      	b.n	8006e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e002      	b.n	8006e74 <vListInsert+0x2e>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d2f6      	bcs.n	8006e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
}
 8006eac:	bf00      	nop
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6892      	ldr	r2, [r2, #8]
 8006ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6852      	ldr	r2, [r2, #4]
 8006ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d103      	bne.n	8006eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	1e5a      	subs	r2, r3, #1
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	b672      	cpsid	i
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	b662      	cpsie	i
 8006f34:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006f3a:	f002 fde7 	bl	8009b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f4a:	fb01 f303 	mul.w	r3, r1, r3
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	22ff      	movs	r2, #255	; 0xff
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d114      	bne.n	8006fba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3310      	adds	r3, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fd8f 	bl	8008ac0 <xTaskRemoveFromEventList>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <xQueueGenericReset+0xd0>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	e009      	b.n	8006fce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3310      	adds	r3, #16
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fef0 	bl	8006da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3324      	adds	r3, #36	; 0x24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff feeb 	bl	8006da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fce:	f002 fdd1 	bl	8009b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fd2:	2301      	movs	r3, #1
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08e      	sub	sp, #56	; 0x38
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10c      	bne.n	800700e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	b672      	cpsid	i
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	b662      	cpsie	i
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10c      	bne.n	800702e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	b672      	cpsid	i
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	b662      	cpsie	i
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <xQueueGenericCreateStatic+0x5a>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <xQueueGenericCreateStatic+0x5e>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <xQueueGenericCreateStatic+0x60>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10c      	bne.n	800705e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	b672      	cpsid	i
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	b662      	cpsie	i
 8007058:	623b      	str	r3, [r7, #32]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <xQueueGenericCreateStatic+0x8a>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <xQueueGenericCreateStatic+0x8e>
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <xQueueGenericCreateStatic+0x90>
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10c      	bne.n	800708e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	b672      	cpsid	i
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	b662      	cpsie	i
 8007088:	61fb      	str	r3, [r7, #28]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800708e:	2350      	movs	r3, #80	; 0x50
 8007090:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b50      	cmp	r3, #80	; 0x50
 8007096:	d00c      	beq.n	80070b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	b672      	cpsid	i
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	b662      	cpsie	i
 80070ac:	61bb      	str	r3, [r7, #24]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4613      	mov	r3, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f847 	bl	8007168 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	3730      	adds	r7, #48	; 0x30
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10c      	bne.n	8007112 <xQueueGenericCreate+0x2e>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	b672      	cpsid	i
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	b662      	cpsie	i
 800710c:	613b      	str	r3, [r7, #16]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e004      	b.n	8007128 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3350      	adds	r3, #80	; 0x50
 800712c:	4618      	mov	r0, r3
 800712e:	f002 fe19 	bl	8009d64 <pvPortMalloc>
 8007132:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	3350      	adds	r3, #80	; 0x50
 8007142:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800714c:	79fa      	ldrb	r2, [r7, #7]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4613      	mov	r3, r2
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f805 	bl	8007168 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800715e:	69bb      	ldr	r3, [r7, #24]
	}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d103      	bne.n	8007184 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e002      	b.n	800718a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007196:	2101      	movs	r1, #1
 8007198:	69b8      	ldr	r0, [r7, #24]
 800719a:	f7ff feb7 	bl	8006f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00e      	beq.n	80071da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071ce:	2300      	movs	r3, #0
 80071d0:	2200      	movs	r2, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f917 	bl	8007408 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	4603      	mov	r3, r0
 80071ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071ec:	2301      	movs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6939      	ldr	r1, [r7, #16]
 80071fa:	6978      	ldr	r0, [r7, #20]
 80071fc:	f7ff ff72 	bl	80070e4 <xQueueGenericCreate>
 8007200:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff ffd3 	bl	80071ae <prvInitialiseMutex>

		return xNewQueue;
 8007208:	68fb      	ldr	r3, [r7, #12]
	}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af02      	add	r7, sp, #8
 8007218:	4603      	mov	r3, r0
 800721a:	6039      	str	r1, [r7, #0]
 800721c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800721e:	2301      	movs	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	2300      	movs	r3, #0
 8007224:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2200      	movs	r2, #0
 800722e:	6939      	ldr	r1, [r7, #16]
 8007230:	6978      	ldr	r0, [r7, #20]
 8007232:	f7ff fed5 	bl	8006fe0 <xQueueGenericCreateStatic>
 8007236:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ffb8 	bl	80071ae <prvInitialiseMutex>

		return xNewQueue;
 800723e:	68fb      	ldr	r3, [r7, #12]
	}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10c      	bne.n	8007274 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	b672      	cpsid	i
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	b662      	cpsie	i
 800726e:	60fb      	str	r3, [r7, #12]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	689c      	ldr	r4, [r3, #8]
 8007278:	f001 fde8 	bl	8008e4c <xTaskGetCurrentTaskHandle>
 800727c:	4603      	mov	r3, r0
 800727e:	429c      	cmp	r4, r3
 8007280:	d111      	bne.n	80072a6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	2100      	movs	r1, #0
 800729a:	6938      	ldr	r0, [r7, #16]
 800729c:	f000 f8b4 	bl	8007408 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e001      	b.n	80072aa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80072aa:	697b      	ldr	r3, [r7, #20]
	}
 80072ac:	4618      	mov	r0, r3
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd90      	pop	{r4, r7, pc}

080072b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10c      	bne.n	80072e2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	b672      	cpsid	i
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	b662      	cpsie	i
 80072dc:	60fb      	str	r3, [r7, #12]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	689c      	ldr	r4, [r3, #8]
 80072e6:	f001 fdb1 	bl	8008e4c <xTaskGetCurrentTaskHandle>
 80072ea:	4603      	mov	r3, r0
 80072ec:	429c      	cmp	r4, r3
 80072ee:	d107      	bne.n	8007300 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80072fa:	2301      	movs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	e00c      	b.n	800731a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6938      	ldr	r0, [r7, #16]
 8007304:	f000 fba2 	bl	8007a4c <xQueueSemaphoreTake>
 8007308:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800731a:	697b      	ldr	r3, [r7, #20]
	}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd90      	pop	{r4, r7, pc}

08007324 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08a      	sub	sp, #40	; 0x28
 8007328:	af02      	add	r7, sp, #8
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10c      	bne.n	8007350 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
 800734a:	61bb      	str	r3, [r7, #24]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d90c      	bls.n	8007372 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	b672      	cpsid	i
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	b662      	cpsie	i
 800736c:	617b      	str	r3, [r7, #20]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007372:	2302      	movs	r3, #2
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	2100      	movs	r1, #0
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fe2f 	bl	8006fe0 <xQueueGenericCreateStatic>
 8007382:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007390:	69fb      	ldr	r3, [r7, #28]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10c      	bne.n	80073c4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	b672      	cpsid	i
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	b662      	cpsie	i
 80073be:	613b      	str	r3, [r7, #16]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d90c      	bls.n	80073e6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	60fb      	str	r3, [r7, #12]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80073e6:	2202      	movs	r2, #2
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fe7a 	bl	80070e4 <xQueueGenericCreate>
 80073f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073fe:	697b      	ldr	r3, [r7, #20]
	}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08e      	sub	sp, #56	; 0x38
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10c      	bne.n	800743e <xQueueGenericSend+0x36>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	b672      	cpsid	i
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	b662      	cpsie	i
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <xQueueGenericSend+0x44>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <xQueueGenericSend+0x48>
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <xQueueGenericSend+0x4a>
 8007450:	2300      	movs	r3, #0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10c      	bne.n	8007470 <xQueueGenericSend+0x68>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d103      	bne.n	800747e <xQueueGenericSend+0x76>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <xQueueGenericSend+0x7a>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <xQueueGenericSend+0x7c>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10c      	bne.n	80074a2 <xQueueGenericSend+0x9a>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	b672      	cpsid	i
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	b662      	cpsie	i
 800749c:	623b      	str	r3, [r7, #32]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074a2:	f001 fce3 	bl	8008e6c <xTaskGetSchedulerState>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <xQueueGenericSend+0xaa>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <xQueueGenericSend+0xae>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueGenericSend+0xb0>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10c      	bne.n	80074d6 <xQueueGenericSend+0xce>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	b672      	cpsid	i
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	b662      	cpsie	i
 80074d0:	61fb      	str	r3, [r7, #28]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074d6:	f002 fb19 	bl	8009b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <xQueueGenericSend+0xe4>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d129      	bne.n	8007540 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f2:	f000 fcc2 	bl	8007e7a <prvCopyDataToQueue>
 80074f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d010      	beq.n	8007522 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	3324      	adds	r3, #36	; 0x24
 8007504:	4618      	mov	r0, r3
 8007506:	f001 fadb 	bl	8008ac0 <xTaskRemoveFromEventList>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d013      	beq.n	8007538 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007510:	4b3f      	ldr	r3, [pc, #252]	; (8007610 <xQueueGenericSend+0x208>)
 8007512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	e00a      	b.n	8007538 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d007      	beq.n	8007538 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007528:	4b39      	ldr	r3, [pc, #228]	; (8007610 <xQueueGenericSend+0x208>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007538:	f002 fb1c 	bl	8009b74 <vPortExitCritical>
				return pdPASS;
 800753c:	2301      	movs	r3, #1
 800753e:	e063      	b.n	8007608 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007546:	f002 fb15 	bl	8009b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800754a:	2300      	movs	r3, #0
 800754c:	e05c      	b.n	8007608 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007554:	f107 0314 	add.w	r3, r7, #20
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fb17 	bl	8008b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800755e:	2301      	movs	r3, #1
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007562:	f002 fb07 	bl	8009b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007566:	f001 f86b 	bl	8008640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800756a:	f002 facf 	bl	8009b0c <vPortEnterCritical>
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007574:	b25b      	sxtb	r3, r3
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d103      	bne.n	8007584 <xQueueGenericSend+0x17c>
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800758a:	b25b      	sxtb	r3, r3
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d103      	bne.n	800759a <xQueueGenericSend+0x192>
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800759a:	f002 faeb 	bl	8009b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800759e:	1d3a      	adds	r2, r7, #4
 80075a0:	f107 0314 	add.w	r3, r7, #20
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fb06 	bl	8008bb8 <xTaskCheckForTimeOut>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d124      	bne.n	80075fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075b4:	f000 fd59 	bl	800806a <prvIsQueueFull>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d018      	beq.n	80075f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	3310      	adds	r3, #16
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fa26 	bl	8008a18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ce:	f000 fce4 	bl	8007f9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075d2:	f001 f843 	bl	800865c <xTaskResumeAll>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f47f af7c 	bne.w	80074d6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80075de:	4b0c      	ldr	r3, [pc, #48]	; (8007610 <xQueueGenericSend+0x208>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	e772      	b.n	80074d6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f2:	f000 fcd2 	bl	8007f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075f6:	f001 f831 	bl	800865c <xTaskResumeAll>
 80075fa:	e76c      	b.n	80074d6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075fe:	f000 fccc 	bl	8007f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007602:	f001 f82b 	bl	800865c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007606:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007608:	4618      	mov	r0, r3
 800760a:	3738      	adds	r7, #56	; 0x38
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08e      	sub	sp, #56	; 0x38
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10c      	bne.n	8007646 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	b672      	cpsid	i
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	b662      	cpsie	i
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <xQueueGenericSendFromISR+0x40>
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <xQueueGenericSendFromISR+0x44>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <xQueueGenericSendFromISR+0x46>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10c      	bne.n	8007678 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	b672      	cpsid	i
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	b662      	cpsie	i
 8007672:	623b      	str	r3, [r7, #32]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d103      	bne.n	8007686 <xQueueGenericSendFromISR+0x72>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <xQueueGenericSendFromISR+0x76>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <xQueueGenericSendFromISR+0x78>
 800768a:	2300      	movs	r3, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10c      	bne.n	80076aa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	b672      	cpsid	i
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	b662      	cpsie	i
 80076a4:	61fb      	str	r3, [r7, #28]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076aa:	f002 fb17 	bl	8009cdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076ae:	f3ef 8211 	mrs	r2, BASEPRI
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	b672      	cpsid	i
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	b662      	cpsie	i
 80076c6:	61ba      	str	r2, [r7, #24]
 80076c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d302      	bcc.n	80076e0 <xQueueGenericSendFromISR+0xcc>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d12c      	bne.n	800773a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f0:	f000 fbc3 	bl	8007e7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d112      	bne.n	8007724 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d016      	beq.n	8007734 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	3324      	adds	r3, #36	; 0x24
 800770a:	4618      	mov	r0, r3
 800770c:	f001 f9d8 	bl	8008ac0 <xTaskRemoveFromEventList>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00e      	beq.n	8007734 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e007      	b.n	8007734 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007728:	3301      	adds	r3, #1
 800772a:	b2db      	uxtb	r3, r3
 800772c:	b25a      	sxtb	r2, r3
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007734:	2301      	movs	r3, #1
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007738:	e001      	b.n	800773e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007748:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800774c:	4618      	mov	r0, r3
 800774e:	3738      	adds	r7, #56	; 0x38
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08e      	sub	sp, #56	; 0x38
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10c      	bne.n	8007782 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	b672      	cpsid	i
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	b662      	cpsie	i
 800777c:	623b      	str	r3, [r7, #32]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00c      	beq.n	80077a4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	b672      	cpsid	i
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	b662      	cpsie	i
 800779e:	61fb      	str	r3, [r7, #28]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <xQueueGiveFromISR+0x60>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <xQueueGiveFromISR+0x64>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <xQueueGiveFromISR+0x66>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <xQueueGiveFromISR+0x84>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	b672      	cpsid	i
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	b662      	cpsie	i
 80077d2:	61bb      	str	r3, [r7, #24]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077d8:	f002 fa80 	bl	8009cdc <vPortValidateInterruptPriority>
	__asm volatile
 80077dc:	f3ef 8211 	mrs	r2, BASEPRI
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	b672      	cpsid	i
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	b662      	cpsie	i
 80077f4:	617a      	str	r2, [r7, #20]
 80077f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80077f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007808:	429a      	cmp	r2, r3
 800780a:	d22b      	bcs.n	8007864 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800781e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d112      	bne.n	800784e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d016      	beq.n	800785e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f001 f943 	bl	8008ac0 <xTaskRemoveFromEventList>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e007      	b.n	800785e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800784e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007852:	3301      	adds	r3, #1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	b25a      	sxtb	r2, r3
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800785e:	2301      	movs	r3, #1
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
 8007862:	e001      	b.n	8007868 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007864:	2300      	movs	r3, #0
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f383 8811 	msr	BASEPRI, r3
}
 8007872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007876:	4618      	mov	r0, r3
 8007878:	3738      	adds	r7, #56	; 0x38
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	; 0x30
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800788c:	2300      	movs	r3, #0
 800788e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10c      	bne.n	80078b4 <xQueueReceive+0x34>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	b672      	cpsid	i
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	b662      	cpsie	i
 80078ae:	623b      	str	r3, [r7, #32]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <xQueueReceive+0x42>
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <xQueueReceive+0x46>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueReceive+0x48>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <xQueueReceive+0x66>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	b672      	cpsid	i
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	b662      	cpsie	i
 80078e0:	61fb      	str	r3, [r7, #28]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e6:	f001 fac1 	bl	8008e6c <xTaskGetSchedulerState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xQueueReceive+0x76>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueReceive+0x7a>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueReceive+0x7c>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10c      	bne.n	800791a <xQueueReceive+0x9a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	61bb      	str	r3, [r7, #24]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800791a:	f002 f8f7 	bl	8009b0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01f      	beq.n	800796a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f000 fb0e 	bl	8007f4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	1e5a      	subs	r2, r3, #1
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00f      	beq.n	8007962 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	3310      	adds	r3, #16
 8007946:	4618      	mov	r0, r3
 8007948:	f001 f8ba 	bl	8008ac0 <xTaskRemoveFromEventList>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007952:	4b3d      	ldr	r3, [pc, #244]	; (8007a48 <xQueueReceive+0x1c8>)
 8007954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007962:	f002 f907 	bl	8009b74 <vPortExitCritical>
				return pdPASS;
 8007966:	2301      	movs	r3, #1
 8007968:	e069      	b.n	8007a3e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007970:	f002 f900 	bl	8009b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007974:	2300      	movs	r3, #0
 8007976:	e062      	b.n	8007a3e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800797e:	f107 0310 	add.w	r3, r7, #16
 8007982:	4618      	mov	r0, r3
 8007984:	f001 f902 	bl	8008b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007988:	2301      	movs	r3, #1
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800798c:	f002 f8f2 	bl	8009b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007990:	f000 fe56 	bl	8008640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007994:	f002 f8ba 	bl	8009b0c <vPortEnterCritical>
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d103      	bne.n	80079ae <xQueueReceive+0x12e>
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d103      	bne.n	80079c4 <xQueueReceive+0x144>
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c4:	f002 f8d6 	bl	8009b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c8:	1d3a      	adds	r2, r7, #4
 80079ca:	f107 0310 	add.w	r3, r7, #16
 80079ce:	4611      	mov	r1, r2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 f8f1 	bl	8008bb8 <xTaskCheckForTimeOut>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d123      	bne.n	8007a24 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079de:	f000 fb2e 	bl	800803e <prvIsQueueEmpty>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 f811 	bl	8008a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f8:	f000 facf 	bl	8007f9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079fc:	f000 fe2e 	bl	800865c <xTaskResumeAll>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d189      	bne.n	800791a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <xQueueReceive+0x1c8>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	e780      	b.n	800791a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1a:	f000 fabe 	bl	8007f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a1e:	f000 fe1d 	bl	800865c <xTaskResumeAll>
 8007a22:	e77a      	b.n	800791a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a26:	f000 fab8 	bl	8007f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a2a:	f000 fe17 	bl	800865c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a30:	f000 fb05 	bl	800803e <prvIsQueueEmpty>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f43f af6f 	beq.w	800791a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3730      	adds	r7, #48	; 0x30
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08e      	sub	sp, #56	; 0x38
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	b672      	cpsid	i
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	b662      	cpsie	i
 8007a7c:	623b      	str	r3, [r7, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00c      	beq.n	8007aa4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	b672      	cpsid	i
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	b662      	cpsie	i
 8007a9e:	61fb      	str	r3, [r7, #28]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aa4:	f001 f9e2 	bl	8008e6c <xTaskGetSchedulerState>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <xQueueSemaphoreTake+0x68>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <xQueueSemaphoreTake+0x6c>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <xQueueSemaphoreTake+0x6e>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10c      	bne.n	8007ad8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	b672      	cpsid	i
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	b662      	cpsie	i
 8007ad2:	61bb      	str	r3, [r7, #24]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ad8:	f002 f818 	bl	8009b0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d024      	beq.n	8007b32 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	1e5a      	subs	r2, r3, #1
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007af8:	f001 fb36 	bl	8009168 <pvTaskIncrementMutexHeldCount>
 8007afc:	4602      	mov	r2, r0
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00f      	beq.n	8007b2a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 ffd6 	bl	8008ac0 <xTaskRemoveFromEventList>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b1a:	4b55      	ldr	r3, [pc, #340]	; (8007c70 <xQueueSemaphoreTake+0x224>)
 8007b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b2a:	f002 f823 	bl	8009b74 <vPortExitCritical>
				return pdPASS;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e099      	b.n	8007c66 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d113      	bne.n	8007b60 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00c      	beq.n	8007b58 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	b672      	cpsid	i
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	b662      	cpsie	i
 8007b52:	617b      	str	r3, [r7, #20]
}
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b58:	f002 f80c 	bl	8009b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e082      	b.n	8007c66 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 f80e 	bl	8008b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b70:	2301      	movs	r3, #1
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b74:	f001 fffe 	bl	8009b74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b78:	f000 fd62 	bl	8008640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b7c:	f001 ffc6 	bl	8009b0c <vPortEnterCritical>
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d103      	bne.n	8007b96 <xQueueSemaphoreTake+0x14a>
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d103      	bne.n	8007bac <xQueueSemaphoreTake+0x160>
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bac:	f001 ffe2 	bl	8009b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bb0:	463a      	mov	r2, r7
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fffd 	bl	8008bb8 <xTaskCheckForTimeOut>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d132      	bne.n	8007c2a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bc6:	f000 fa3a 	bl	800803e <prvIsQueueEmpty>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d026      	beq.n	8007c1e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007bd8:	f001 ff98 	bl	8009b0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 f961 	bl	8008ea8 <xTaskPriorityInherit>
 8007be6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007be8:	f001 ffc4 	bl	8009b74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	3324      	adds	r3, #36	; 0x24
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 ff0f 	bl	8008a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bfc:	f000 f9cd 	bl	8007f9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c00:	f000 fd2c 	bl	800865c <xTaskResumeAll>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f af66 	bne.w	8007ad8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007c0c:	4b18      	ldr	r3, [pc, #96]	; (8007c70 <xQueueSemaphoreTake+0x224>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	e75c      	b.n	8007ad8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c20:	f000 f9bb 	bl	8007f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c24:	f000 fd1a 	bl	800865c <xTaskResumeAll>
 8007c28:	e756      	b.n	8007ad8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2c:	f000 f9b5 	bl	8007f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c30:	f000 fd14 	bl	800865c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c36:	f000 fa02 	bl	800803e <prvIsQueueEmpty>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f43f af4b 	beq.w	8007ad8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007c48:	f001 ff60 	bl	8009b0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c4e:	f000 f8fc 	bl	8007e4a <prvGetDisinheritPriorityAfterTimeout>
 8007c52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f9fe 	bl	800905c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c60:	f001 ff88 	bl	8009b74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3738      	adds	r7, #56	; 0x38
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	; 0x38
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10c      	bne.n	8007ca4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	b672      	cpsid	i
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	b662      	cpsie	i
 8007c9e:	623b      	str	r3, [r7, #32]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <xQueueReceiveFromISR+0x3e>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <xQueueReceiveFromISR+0x42>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <xQueueReceiveFromISR+0x44>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10c      	bne.n	8007cd6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	b672      	cpsid	i
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	b662      	cpsie	i
 8007cd0:	61fb      	str	r3, [r7, #28]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cd6:	f002 f801 	bl	8009cdc <vPortValidateInterruptPriority>
	__asm volatile
 8007cda:	f3ef 8211 	mrs	r2, BASEPRI
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	b672      	cpsid	i
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	b662      	cpsie	i
 8007cf2:	61ba      	str	r2, [r7, #24]
 8007cf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007cf6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d02f      	beq.n	8007d66 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d14:	f000 f91b 	bl	8007f4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	1e5a      	subs	r2, r3, #1
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d112      	bne.n	8007d50 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d016      	beq.n	8007d60 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	3310      	adds	r3, #16
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fec2 	bl	8008ac0 <xTaskRemoveFromEventList>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00e      	beq.n	8007d60 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e007      	b.n	8007d60 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d54:	3301      	adds	r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	b25a      	sxtb	r2, r3
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d60:	2301      	movs	r3, #1
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
 8007d64:	e001      	b.n	8007d6a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f383 8811 	msr	BASEPRI, r3
}
 8007d74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3738      	adds	r7, #56	; 0x38
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10c      	bne.n	8007da8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	b672      	cpsid	i
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	b662      	cpsie	i
 8007da2:	60bb      	str	r3, [r7, #8]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007da8:	f001 feb0 	bl	8009b0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007db2:	f001 fedf 	bl	8009b74 <vPortExitCritical>

	return uxReturn;
 8007db6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10c      	bne.n	8007dec <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	b672      	cpsid	i
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	b662      	cpsie	i
 8007de6:	60fb      	str	r3, [r7, #12]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007df2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007df4:	4618      	mov	r0, r3
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10c      	bne.n	8007e2c <vQueueDelete+0x2c>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	b672      	cpsid	i
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	b662      	cpsie	i
 8007e26:	60bb      	str	r3, [r7, #8]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 f95f 	bl	80080f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f002 f85b 	bl	8009ef8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	e001      	b.n	8007e6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
	}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10d      	bne.n	8007eb4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d14d      	bne.n	8007f3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f867 	bl	8008f78 <xTaskPriorityDisinherit>
 8007eaa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	609a      	str	r2, [r3, #8]
 8007eb2:	e043      	b.n	8007f3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d119      	bne.n	8007eee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6858      	ldr	r0, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	f00f fc89 	bl	80177dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	441a      	add	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d32b      	bcc.n	8007f3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	605a      	str	r2, [r3, #4]
 8007eec:	e026      	b.n	8007f3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68d8      	ldr	r0, [r3, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68b9      	ldr	r1, [r7, #8]
 8007efa:	f00f fc6f 	bl	80177dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	425b      	negs	r3, r3
 8007f08:	441a      	add	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d207      	bcs.n	8007f2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	425b      	negs	r3, r3
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d105      	bne.n	8007f3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f44:	697b      	ldr	r3, [r7, #20]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d018      	beq.n	8007f92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	441a      	add	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d303      	bcc.n	8007f82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68d9      	ldr	r1, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6838      	ldr	r0, [r7, #0]
 8007f8e:	f00f fc25 	bl	80177dc <memcpy>
	}
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fa2:	f001 fdb3 	bl	8009b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fae:	e011      	b.n	8007fd4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d012      	beq.n	8007fde <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fd7f 	bl	8008ac0 <xTaskRemoveFromEventList>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fc8:	f000 fe5c 	bl	8008c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dce9      	bgt.n	8007fb0 <prvUnlockQueue+0x16>
 8007fdc:	e000      	b.n	8007fe0 <prvUnlockQueue+0x46>
					break;
 8007fde:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	22ff      	movs	r2, #255	; 0xff
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fe8:	f001 fdc4 	bl	8009b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fec:	f001 fd8e 	bl	8009b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ff6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ff8:	e011      	b.n	800801e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d012      	beq.n	8008028 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3310      	adds	r3, #16
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fd5a 	bl	8008ac0 <xTaskRemoveFromEventList>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008012:	f000 fe37 	bl	8008c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	3b01      	subs	r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800801e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dce9      	bgt.n	8007ffa <prvUnlockQueue+0x60>
 8008026:	e000      	b.n	800802a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008028:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	22ff      	movs	r2, #255	; 0xff
 800802e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008032:	f001 fd9f 	bl	8009b74 <vPortExitCritical>
}
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008046:	f001 fd61 	bl	8009b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e001      	b.n	800805c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800805c:	f001 fd8a 	bl	8009b74 <vPortExitCritical>

	return xReturn;
 8008060:	68fb      	ldr	r3, [r7, #12]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008072:	f001 fd4b 	bl	8009b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	429a      	cmp	r2, r3
 8008080:	d102      	bne.n	8008088 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008082:	2301      	movs	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e001      	b.n	800808c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800808c:	f001 fd72 	bl	8009b74 <vPortExitCritical>

	return xReturn;
 8008090:	68fb      	ldr	r3, [r7, #12]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e014      	b.n	80080d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080ac:	4a0f      	ldr	r2, [pc, #60]	; (80080ec <vQueueAddToRegistry+0x50>)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080b8:	490c      	ldr	r1, [pc, #48]	; (80080ec <vQueueAddToRegistry+0x50>)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <vQueueAddToRegistry+0x50>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4413      	add	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080ce:	e006      	b.n	80080de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b07      	cmp	r3, #7
 80080da:	d9e7      	bls.n	80080ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	200085d4 	.word	0x200085d4

080080f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e016      	b.n	800812c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <vQueueUnregisterQueue+0x50>)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	4413      	add	r3, r2
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d10b      	bne.n	8008126 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800810e:	4a0c      	ldr	r2, [pc, #48]	; (8008140 <vQueueUnregisterQueue+0x50>)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2100      	movs	r1, #0
 8008114:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008118:	4a09      	ldr	r2, [pc, #36]	; (8008140 <vQueueUnregisterQueue+0x50>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4413      	add	r3, r2
 8008120:	2200      	movs	r2, #0
 8008122:	605a      	str	r2, [r3, #4]
				break;
 8008124:	e006      	b.n	8008134 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b07      	cmp	r3, #7
 8008130:	d9e5      	bls.n	80080fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	200085d4 	.word	0x200085d4

08008144 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008154:	f001 fcda 	bl	8009b0c <vPortEnterCritical>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800815e:	b25b      	sxtb	r3, r3
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d103      	bne.n	800816e <vQueueWaitForMessageRestricted+0x2a>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008174:	b25b      	sxtb	r3, r3
 8008176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817a:	d103      	bne.n	8008184 <vQueueWaitForMessageRestricted+0x40>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008184:	f001 fcf6 	bl	8009b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fc63 	bl	8008a64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f7ff fefb 	bl	8007f9a <prvUnlockQueue>
	}
 80081a4:	bf00      	nop
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10c      	bne.n	80081da <xTaskCreateStatic+0x2e>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	623b      	str	r3, [r7, #32]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10c      	bne.n	80081fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	61fb      	str	r3, [r7, #28]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081fa:	235c      	movs	r3, #92	; 0x5c
 80081fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b5c      	cmp	r3, #92	; 0x5c
 8008202:	d00c      	beq.n	800821e <xTaskCreateStatic+0x72>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	b672      	cpsid	i
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	b662      	cpsie	i
 8008218:	61bb      	str	r3, [r7, #24]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800821e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01e      	beq.n	8008264 <xTaskCreateStatic+0xb8>
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01b      	beq.n	8008264 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	2202      	movs	r2, #2
 800823a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800823e:	2300      	movs	r3, #0
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f850 	bl	80082fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800825c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800825e:	f000 f8df 	bl	8008420 <prvAddNewTaskToReadyList>
 8008262:	e001      	b.n	8008268 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008268:	697b      	ldr	r3, [r7, #20]
	}
 800826a:	4618      	mov	r0, r3
 800826c:	3728      	adds	r7, #40	; 0x28
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008272:	b580      	push	{r7, lr}
 8008274:	b08c      	sub	sp, #48	; 0x30
 8008276:	af04      	add	r7, sp, #16
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4618      	mov	r0, r3
 8008288:	f001 fd6c 	bl	8009d64 <pvPortMalloc>
 800828c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008294:	205c      	movs	r0, #92	; 0x5c
 8008296:	f001 fd65 	bl	8009d64 <pvPortMalloc>
 800829a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
 80082a8:	e005      	b.n	80082b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082aa:	6978      	ldr	r0, [r7, #20]
 80082ac:	f001 fe24 	bl	8009ef8 <vPortFree>
 80082b0:	e001      	b.n	80082b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d017      	beq.n	80082ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f80e 	bl	80082fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082e0:	69f8      	ldr	r0, [r7, #28]
 80082e2:	f000 f89d 	bl	8008420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61bb      	str	r3, [r7, #24]
 80082ea:	e002      	b.n	80082f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082ec:	f04f 33ff 	mov.w	r3, #4294967295
 80082f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082f2:	69bb      	ldr	r3, [r7, #24]
	}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	461a      	mov	r2, r3
 8008314:	21a5      	movs	r1, #165	; 0xa5
 8008316:	f00f fa89 	bl	801782c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008324:	440b      	add	r3, r1
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	f023 0307 	bic.w	r3, r3, #7
 8008332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	b672      	cpsid	i
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	b662      	cpsie	i
 8008352:	617b      	str	r3, [r7, #20]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01f      	beq.n	800839e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	e012      	b.n	800838a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	7819      	ldrb	r1, [r3, #0]
 800836c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	3334      	adds	r3, #52	; 0x34
 8008374:	460a      	mov	r2, r1
 8008376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	3301      	adds	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2b0f      	cmp	r3, #15
 800838e:	d9e9      	bls.n	8008364 <prvInitialiseNewTask+0x68>
 8008390:	e000      	b.n	8008394 <prvInitialiseNewTask+0x98>
			{
				break;
 8008392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800839c:	e003      	b.n	80083a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	2b37      	cmp	r3, #55	; 0x37
 80083aa:	d901      	bls.n	80083b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083ac:	2337      	movs	r3, #55	; 0x37
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	2200      	movs	r2, #0
 80083c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	3304      	adds	r3, #4
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fd0c 	bl	8006de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	3318      	adds	r3, #24
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fd07 	bl	8006de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	2200      	movs	r2, #0
 80083f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	68f9      	ldr	r1, [r7, #12]
 80083fe:	69b8      	ldr	r0, [r7, #24]
 8008400:	f001 fa76 	bl	80098f0 <pxPortInitialiseStack>
 8008404:	4602      	mov	r2, r0
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008416:	bf00      	nop
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008428:	f001 fb70 	bl	8009b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <prvAddNewTaskToReadyList+0xc4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3301      	adds	r3, #1
 8008432:	4a2c      	ldr	r2, [pc, #176]	; (80084e4 <prvAddNewTaskToReadyList+0xc4>)
 8008434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008436:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800843e:	4a2a      	ldr	r2, [pc, #168]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008444:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <prvAddNewTaskToReadyList+0xc4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d110      	bne.n	800846e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800844c:	f000 fc3e 	bl	8008ccc <prvInitialiseTaskLists>
 8008450:	e00d      	b.n	800846e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008452:	4b26      	ldr	r3, [pc, #152]	; (80084ec <prvAddNewTaskToReadyList+0xcc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800845a:	4b23      	ldr	r3, [pc, #140]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	429a      	cmp	r2, r3
 8008466:	d802      	bhi.n	800846e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008468:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800846e:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <prvAddNewTaskToReadyList+0xd0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	4a1e      	ldr	r2, [pc, #120]	; (80084f0 <prvAddNewTaskToReadyList+0xd0>)
 8008476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008478:	4b1d      	ldr	r3, [pc, #116]	; (80084f0 <prvAddNewTaskToReadyList+0xd0>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	4b1b      	ldr	r3, [pc, #108]	; (80084f4 <prvAddNewTaskToReadyList+0xd4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d903      	bls.n	8008494 <prvAddNewTaskToReadyList+0x74>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4a18      	ldr	r2, [pc, #96]	; (80084f4 <prvAddNewTaskToReadyList+0xd4>)
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <prvAddNewTaskToReadyList+0xd8>)
 80084a2:	441a      	add	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f7fe fca7 	bl	8006dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084b0:	f001 fb60 	bl	8009b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084b4:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <prvAddNewTaskToReadyList+0xcc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00e      	beq.n	80084da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d207      	bcs.n	80084da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <prvAddNewTaskToReadyList+0xdc>)
 80084cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20001020 	.word	0x20001020
 80084e8:	20000b4c 	.word	0x20000b4c
 80084ec:	2000102c 	.word	0x2000102c
 80084f0:	2000103c 	.word	0x2000103c
 80084f4:	20001028 	.word	0x20001028
 80084f8:	20000b50 	.word	0x20000b50
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d019      	beq.n	8008546 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008512:	4b14      	ldr	r3, [pc, #80]	; (8008564 <vTaskDelay+0x64>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <vTaskDelay+0x34>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	b672      	cpsid	i
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	b662      	cpsie	i
 800852e:	60bb      	str	r3, [r7, #8]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008534:	f000 f884 	bl	8008640 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fe28 	bl	8009190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008540:	f000 f88c 	bl	800865c <xTaskResumeAll>
 8008544:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800854c:	4b06      	ldr	r3, [pc, #24]	; (8008568 <vTaskDelay+0x68>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20001048 	.word	0x20001048
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	; 0x28
 8008570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800857a:	463a      	mov	r2, r7
 800857c:	1d39      	adds	r1, r7, #4
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fbda 	bl	8006d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	9202      	str	r2, [sp, #8]
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	2300      	movs	r3, #0
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	460a      	mov	r2, r1
 800859a:	4923      	ldr	r1, [pc, #140]	; (8008628 <vTaskStartScheduler+0xbc>)
 800859c:	4823      	ldr	r0, [pc, #140]	; (800862c <vTaskStartScheduler+0xc0>)
 800859e:	f7ff fe05 	bl	80081ac <xTaskCreateStatic>
 80085a2:	4603      	mov	r3, r0
 80085a4:	4a22      	ldr	r2, [pc, #136]	; (8008630 <vTaskStartScheduler+0xc4>)
 80085a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085a8:	4b21      	ldr	r3, [pc, #132]	; (8008630 <vTaskStartScheduler+0xc4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085b0:	2301      	movs	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e001      	b.n	80085ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d102      	bne.n	80085c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085c0:	f000 fe3a 	bl	8009238 <xTimerCreateTimerTask>
 80085c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d118      	bne.n	80085fe <vTaskStartScheduler+0x92>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085e4:	4b13      	ldr	r3, [pc, #76]	; (8008634 <vTaskStartScheduler+0xc8>)
 80085e6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085ec:	4b12      	ldr	r3, [pc, #72]	; (8008638 <vTaskStartScheduler+0xcc>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085f2:	4b12      	ldr	r3, [pc, #72]	; (800863c <vTaskStartScheduler+0xd0>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085f8:	f001 fa0a 	bl	8009a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085fc:	e010      	b.n	8008620 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d10c      	bne.n	8008620 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	b672      	cpsid	i
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	b662      	cpsie	i
 800861a:	60fb      	str	r3, [r7, #12]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <vTaskStartScheduler+0xb2>
}
 8008620:	bf00      	nop
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	08018e78 	.word	0x08018e78
 800862c:	08008c9d 	.word	0x08008c9d
 8008630:	20001044 	.word	0x20001044
 8008634:	20001040 	.word	0x20001040
 8008638:	2000102c 	.word	0x2000102c
 800863c:	20001024 	.word	0x20001024

08008640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <vTaskSuspendAll+0x18>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	4a03      	ldr	r2, [pc, #12]	; (8008658 <vTaskSuspendAll+0x18>)
 800864c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	20001048 	.word	0x20001048

0800865c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800866a:	4b43      	ldr	r3, [pc, #268]	; (8008778 <xTaskResumeAll+0x11c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10c      	bne.n	800868c <xTaskResumeAll+0x30>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	b672      	cpsid	i
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	b662      	cpsie	i
 8008686:	603b      	str	r3, [r7, #0]
}
 8008688:	bf00      	nop
 800868a:	e7fe      	b.n	800868a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800868c:	f001 fa3e 	bl	8009b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008690:	4b39      	ldr	r3, [pc, #228]	; (8008778 <xTaskResumeAll+0x11c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3b01      	subs	r3, #1
 8008696:	4a38      	ldr	r2, [pc, #224]	; (8008778 <xTaskResumeAll+0x11c>)
 8008698:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800869a:	4b37      	ldr	r3, [pc, #220]	; (8008778 <xTaskResumeAll+0x11c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d162      	bne.n	8008768 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086a2:	4b36      	ldr	r3, [pc, #216]	; (800877c <xTaskResumeAll+0x120>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d05e      	beq.n	8008768 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086aa:	e02f      	b.n	800870c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ac:	4b34      	ldr	r3, [pc, #208]	; (8008780 <xTaskResumeAll+0x124>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3318      	adds	r3, #24
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe fbfd 	bl	8006eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fbf8 	bl	8006eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086cc:	4b2d      	ldr	r3, [pc, #180]	; (8008784 <xTaskResumeAll+0x128>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d903      	bls.n	80086dc <xTaskResumeAll+0x80>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	4a2a      	ldr	r2, [pc, #168]	; (8008784 <xTaskResumeAll+0x128>)
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4a27      	ldr	r2, [pc, #156]	; (8008788 <xTaskResumeAll+0x12c>)
 80086ea:	441a      	add	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fe fb83 	bl	8006dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	4b23      	ldr	r3, [pc, #140]	; (800878c <xTaskResumeAll+0x130>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008706:	4b22      	ldr	r3, [pc, #136]	; (8008790 <xTaskResumeAll+0x134>)
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800870c:	4b1c      	ldr	r3, [pc, #112]	; (8008780 <xTaskResumeAll+0x124>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1cb      	bne.n	80086ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800871a:	f000 fb77 	bl	8008e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <xTaskResumeAll+0x138>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d010      	beq.n	800874c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800872a:	f000 f859 	bl	80087e0 <xTaskIncrementTick>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <xTaskResumeAll+0x134>)
 8008736:	2201      	movs	r2, #1
 8008738:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3b01      	subs	r3, #1
 800873e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f1      	bne.n	800872a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008746:	4b13      	ldr	r3, [pc, #76]	; (8008794 <xTaskResumeAll+0x138>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800874c:	4b10      	ldr	r3, [pc, #64]	; (8008790 <xTaskResumeAll+0x134>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008754:	2301      	movs	r3, #1
 8008756:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008758:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <xTaskResumeAll+0x13c>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008768:	f001 fa04 	bl	8009b74 <vPortExitCritical>

	return xAlreadyYielded;
 800876c:	68bb      	ldr	r3, [r7, #8]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20001048 	.word	0x20001048
 800877c:	20001020 	.word	0x20001020
 8008780:	20000fe0 	.word	0x20000fe0
 8008784:	20001028 	.word	0x20001028
 8008788:	20000b50 	.word	0x20000b50
 800878c:	20000b4c 	.word	0x20000b4c
 8008790:	20001034 	.word	0x20001034
 8008794:	20001030 	.word	0x20001030
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087a2:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <xTaskGetTickCount+0x1c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087a8:	687b      	ldr	r3, [r7, #4]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20001024 	.word	0x20001024

080087bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087c2:	f001 fa8b 	bl	8009cdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80087c6:	2300      	movs	r3, #0
 80087c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <xTaskGetTickCountFromISR+0x20>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087d0:	683b      	ldr	r3, [r7, #0]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20001024 	.word	0x20001024

080087e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ea:	4b50      	ldr	r3, [pc, #320]	; (800892c <xTaskIncrementTick+0x14c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f040 808b 	bne.w	800890a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087f4:	4b4e      	ldr	r3, [pc, #312]	; (8008930 <xTaskIncrementTick+0x150>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087fc:	4a4c      	ldr	r2, [pc, #304]	; (8008930 <xTaskIncrementTick+0x150>)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d122      	bne.n	800884e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008808:	4b4a      	ldr	r3, [pc, #296]	; (8008934 <xTaskIncrementTick+0x154>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00c      	beq.n	800882c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	b672      	cpsid	i
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	b662      	cpsie	i
 8008826:	603b      	str	r3, [r7, #0]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <xTaskIncrementTick+0x4a>
 800882c:	4b41      	ldr	r3, [pc, #260]	; (8008934 <xTaskIncrementTick+0x154>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	4b41      	ldr	r3, [pc, #260]	; (8008938 <xTaskIncrementTick+0x158>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a3f      	ldr	r2, [pc, #252]	; (8008934 <xTaskIncrementTick+0x154>)
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	4a3f      	ldr	r2, [pc, #252]	; (8008938 <xTaskIncrementTick+0x158>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	4b3e      	ldr	r3, [pc, #248]	; (800893c <xTaskIncrementTick+0x15c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a3d      	ldr	r2, [pc, #244]	; (800893c <xTaskIncrementTick+0x15c>)
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	f000 fadf 	bl	8008e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800884e:	4b3c      	ldr	r3, [pc, #240]	; (8008940 <xTaskIncrementTick+0x160>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	429a      	cmp	r2, r3
 8008856:	d349      	bcc.n	80088ec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008858:	4b36      	ldr	r3, [pc, #216]	; (8008934 <xTaskIncrementTick+0x154>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d104      	bne.n	800886c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008862:	4b37      	ldr	r3, [pc, #220]	; (8008940 <xTaskIncrementTick+0x160>)
 8008864:	f04f 32ff 	mov.w	r2, #4294967295
 8008868:	601a      	str	r2, [r3, #0]
					break;
 800886a:	e03f      	b.n	80088ec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886c:	4b31      	ldr	r3, [pc, #196]	; (8008934 <xTaskIncrementTick+0x154>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d203      	bcs.n	800888c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008884:	4a2e      	ldr	r2, [pc, #184]	; (8008940 <xTaskIncrementTick+0x160>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800888a:	e02f      	b.n	80088ec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	3304      	adds	r3, #4
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fb11 	bl	8006eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	2b00      	cmp	r3, #0
 800889c:	d004      	beq.n	80088a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	3318      	adds	r3, #24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fb08 	bl	8006eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	4b25      	ldr	r3, [pc, #148]	; (8008944 <xTaskIncrementTick+0x164>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d903      	bls.n	80088bc <xTaskIncrementTick+0xdc>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	4a22      	ldr	r2, [pc, #136]	; (8008944 <xTaskIncrementTick+0x164>)
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4a1f      	ldr	r2, [pc, #124]	; (8008948 <xTaskIncrementTick+0x168>)
 80088ca:	441a      	add	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	3304      	adds	r3, #4
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f7fe fa93 	bl	8006dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088dc:	4b1b      	ldr	r3, [pc, #108]	; (800894c <xTaskIncrementTick+0x16c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d3b8      	bcc.n	8008858 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80088e6:	2301      	movs	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ea:	e7b5      	b.n	8008858 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088ec:	4b17      	ldr	r3, [pc, #92]	; (800894c <xTaskIncrementTick+0x16c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	4915      	ldr	r1, [pc, #84]	; (8008948 <xTaskIncrementTick+0x168>)
 80088f4:	4613      	mov	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	440b      	add	r3, r1
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d907      	bls.n	8008914 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008904:	2301      	movs	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e004      	b.n	8008914 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <xTaskIncrementTick+0x170>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3301      	adds	r3, #1
 8008910:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <xTaskIncrementTick+0x170>)
 8008912:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <xTaskIncrementTick+0x174>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800891c:	2301      	movs	r3, #1
 800891e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008920:	697b      	ldr	r3, [r7, #20]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20001048 	.word	0x20001048
 8008930:	20001024 	.word	0x20001024
 8008934:	20000fd8 	.word	0x20000fd8
 8008938:	20000fdc 	.word	0x20000fdc
 800893c:	20001038 	.word	0x20001038
 8008940:	20001040 	.word	0x20001040
 8008944:	20001028 	.word	0x20001028
 8008948:	20000b50 	.word	0x20000b50
 800894c:	20000b4c 	.word	0x20000b4c
 8008950:	20001030 	.word	0x20001030
 8008954:	20001034 	.word	0x20001034

08008958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800895e:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <vTaskSwitchContext+0xac>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008966:	4b28      	ldr	r3, [pc, #160]	; (8008a08 <vTaskSwitchContext+0xb0>)
 8008968:	2201      	movs	r2, #1
 800896a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800896c:	e043      	b.n	80089f6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800896e:	4b26      	ldr	r3, [pc, #152]	; (8008a08 <vTaskSwitchContext+0xb0>)
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008974:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <vTaskSwitchContext+0xb4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e012      	b.n	80089a2 <vTaskSwitchContext+0x4a>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10c      	bne.n	800899c <vTaskSwitchContext+0x44>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	b672      	cpsid	i
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	b662      	cpsie	i
 8008996:	607b      	str	r3, [r7, #4]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <vTaskSwitchContext+0x42>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3b01      	subs	r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	491b      	ldr	r1, [pc, #108]	; (8008a10 <vTaskSwitchContext+0xb8>)
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0e2      	beq.n	800897c <vTaskSwitchContext+0x24>
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4a13      	ldr	r2, [pc, #76]	; (8008a10 <vTaskSwitchContext+0xb8>)
 80089c2:	4413      	add	r3, r2
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	605a      	str	r2, [r3, #4]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3308      	adds	r3, #8
 80089d8:	429a      	cmp	r2, r3
 80089da:	d104      	bne.n	80089e6 <vTaskSwitchContext+0x8e>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <vTaskSwitchContext+0xbc>)
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	4a06      	ldr	r2, [pc, #24]	; (8008a0c <vTaskSwitchContext+0xb4>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6013      	str	r3, [r2, #0]
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20001048 	.word	0x20001048
 8008a08:	20001034 	.word	0x20001034
 8008a0c:	20001028 	.word	0x20001028
 8008a10:	20000b50 	.word	0x20000b50
 8008a14:	20000b4c 	.word	0x20000b4c

08008a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10c      	bne.n	8008a42 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a42:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <vTaskPlaceOnEventList+0x48>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3318      	adds	r3, #24
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fe f9fb 	bl	8006e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a50:	2101      	movs	r1, #1
 8008a52:	6838      	ldr	r0, [r7, #0]
 8008a54:	f000 fb9c 	bl	8009190 <prvAddCurrentTaskToDelayedList>
}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000b4c 	.word	0x20000b4c

08008a64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	b672      	cpsid	i
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	b662      	cpsie	i
 8008a8a:	617b      	str	r3, [r7, #20]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a90:	4b0a      	ldr	r3, [pc, #40]	; (8008abc <vTaskPlaceOnEventListRestricted+0x58>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3318      	adds	r3, #24
 8008a96:	4619      	mov	r1, r3
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f7fe f9b0 	bl	8006dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	68b8      	ldr	r0, [r7, #8]
 8008aae:	f000 fb6f 	bl	8009190 <prvAddCurrentTaskToDelayedList>
	}
 8008ab2:	bf00      	nop
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000b4c 	.word	0x20000b4c

08008ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10c      	bne.n	8008af0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	b672      	cpsid	i
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	b662      	cpsie	i
 8008aea:	60fb      	str	r3, [r7, #12]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	3318      	adds	r3, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe f9df 	bl	8006eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afa:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <xTaskRemoveFromEventList+0xb4>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d11d      	bne.n	8008b3e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe f9d6 	bl	8006eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <xTaskRemoveFromEventList+0xb8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d903      	bls.n	8008b20 <xTaskRemoveFromEventList+0x60>
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <xTaskRemoveFromEventList+0xb8>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4a13      	ldr	r2, [pc, #76]	; (8008b7c <xTaskRemoveFromEventList+0xbc>)
 8008b2e:	441a      	add	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7fe f961 	bl	8006dfe <vListInsertEnd>
 8008b3c:	e005      	b.n	8008b4a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	3318      	adds	r3, #24
 8008b42:	4619      	mov	r1, r3
 8008b44:	480e      	ldr	r0, [pc, #56]	; (8008b80 <xTaskRemoveFromEventList+0xc0>)
 8008b46:	f7fe f95a 	bl	8006dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <xTaskRemoveFromEventList+0xc4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d905      	bls.n	8008b64 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <xTaskRemoveFromEventList+0xc8>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	e001      	b.n	8008b68 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b68:	697b      	ldr	r3, [r7, #20]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20001048 	.word	0x20001048
 8008b78:	20001028 	.word	0x20001028
 8008b7c:	20000b50 	.word	0x20000b50
 8008b80:	20000fe0 	.word	0x20000fe0
 8008b84:	20000b4c 	.word	0x20000b4c
 8008b88:	20001034 	.word	0x20001034

08008b8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <vTaskInternalSetTimeOutState+0x24>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <vTaskInternalSetTimeOutState+0x28>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	605a      	str	r2, [r3, #4]
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20001038 	.word	0x20001038
 8008bb4:	20001024 	.word	0x20001024

08008bb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10c      	bne.n	8008be2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	b672      	cpsid	i
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	b662      	cpsie	i
 8008bdc:	613b      	str	r3, [r7, #16]
}
 8008bde:	bf00      	nop
 8008be0:	e7fe      	b.n	8008be0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10c      	bne.n	8008c02 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	b672      	cpsid	i
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	b662      	cpsie	i
 8008bfc:	60fb      	str	r3, [r7, #12]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008c02:	f000 ff83 	bl	8009b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c06:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <xTaskCheckForTimeOut+0xc4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d102      	bne.n	8008c26 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]
 8008c24:	e023      	b.n	8008c6e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <xTaskCheckForTimeOut+0xc8>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d007      	beq.n	8008c42 <xTaskCheckForTimeOut+0x8a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d302      	bcc.n	8008c42 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	e015      	b.n	8008c6e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d20b      	bcs.n	8008c64 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	1ad2      	subs	r2, r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ff97 	bl	8008b8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	e004      	b.n	8008c6e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c6e:	f000 ff81 	bl	8009b74 <vPortExitCritical>

	return xReturn;
 8008c72:	69fb      	ldr	r3, [r7, #28]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20001024 	.word	0x20001024
 8008c80:	20001038 	.word	0x20001038

08008c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c88:	4b03      	ldr	r3, [pc, #12]	; (8008c98 <vTaskMissedYield+0x14>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
}
 8008c8e:	bf00      	nop
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	20001034 	.word	0x20001034

08008c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ca4:	f000 f852 	bl	8008d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <prvIdleTask+0x28>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d9f9      	bls.n	8008ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <prvIdleTask+0x2c>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cc0:	e7f0      	b.n	8008ca4 <prvIdleTask+0x8>
 8008cc2:	bf00      	nop
 8008cc4:	20000b50 	.word	0x20000b50
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	607b      	str	r3, [r7, #4]
 8008cd6:	e00c      	b.n	8008cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4a12      	ldr	r2, [pc, #72]	; (8008d2c <prvInitialiseTaskLists+0x60>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe f85c 	bl	8006da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	607b      	str	r3, [r7, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b37      	cmp	r3, #55	; 0x37
 8008cf6:	d9ef      	bls.n	8008cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cf8:	480d      	ldr	r0, [pc, #52]	; (8008d30 <prvInitialiseTaskLists+0x64>)
 8008cfa:	f7fe f853 	bl	8006da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cfe:	480d      	ldr	r0, [pc, #52]	; (8008d34 <prvInitialiseTaskLists+0x68>)
 8008d00:	f7fe f850 	bl	8006da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d04:	480c      	ldr	r0, [pc, #48]	; (8008d38 <prvInitialiseTaskLists+0x6c>)
 8008d06:	f7fe f84d 	bl	8006da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d0a:	480c      	ldr	r0, [pc, #48]	; (8008d3c <prvInitialiseTaskLists+0x70>)
 8008d0c:	f7fe f84a 	bl	8006da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d10:	480b      	ldr	r0, [pc, #44]	; (8008d40 <prvInitialiseTaskLists+0x74>)
 8008d12:	f7fe f847 	bl	8006da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <prvInitialiseTaskLists+0x78>)
 8008d18:	4a05      	ldr	r2, [pc, #20]	; (8008d30 <prvInitialiseTaskLists+0x64>)
 8008d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <prvInitialiseTaskLists+0x7c>)
 8008d1e:	4a05      	ldr	r2, [pc, #20]	; (8008d34 <prvInitialiseTaskLists+0x68>)
 8008d20:	601a      	str	r2, [r3, #0]
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000b50 	.word	0x20000b50
 8008d30:	20000fb0 	.word	0x20000fb0
 8008d34:	20000fc4 	.word	0x20000fc4
 8008d38:	20000fe0 	.word	0x20000fe0
 8008d3c:	20000ff4 	.word	0x20000ff4
 8008d40:	2000100c 	.word	0x2000100c
 8008d44:	20000fd8 	.word	0x20000fd8
 8008d48:	20000fdc 	.word	0x20000fdc

08008d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d52:	e019      	b.n	8008d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d54:	f000 feda 	bl	8009b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d58:	4b10      	ldr	r3, [pc, #64]	; (8008d9c <prvCheckTasksWaitingTermination+0x50>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe f8a7 	bl	8006eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d6a:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <prvCheckTasksWaitingTermination+0x54>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	4a0b      	ldr	r2, [pc, #44]	; (8008da0 <prvCheckTasksWaitingTermination+0x54>)
 8008d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d74:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <prvCheckTasksWaitingTermination+0x58>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <prvCheckTasksWaitingTermination+0x58>)
 8008d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d7e:	f000 fef9 	bl	8009b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f810 	bl	8008da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <prvCheckTasksWaitingTermination+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e1      	bne.n	8008d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000ff4 	.word	0x20000ff4
 8008da0:	20001020 	.word	0x20001020
 8008da4:	20001008 	.word	0x20001008

08008da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d108      	bne.n	8008dcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 f89a 	bl	8009ef8 <vPortFree>
				vPortFree( pxTCB );
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f897 	bl	8009ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dca:	e01a      	b.n	8008e02 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d103      	bne.n	8008dde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 f88e 	bl	8009ef8 <vPortFree>
	}
 8008ddc:	e011      	b.n	8008e02 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d00c      	beq.n	8008e02 <prvDeleteTCB+0x5a>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	b672      	cpsid	i
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	b662      	cpsie	i
 8008dfc:	60fb      	str	r3, [r7, #12]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <prvDeleteTCB+0x58>
	}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e12:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <prvResetNextTaskUnblockTime+0x38>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <prvResetNextTaskUnblockTime+0x3c>)
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e24:	e008      	b.n	8008e38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e26:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <prvResetNextTaskUnblockTime+0x38>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <prvResetNextTaskUnblockTime+0x3c>)
 8008e36:	6013      	str	r3, [r2, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	20000fd8 	.word	0x20000fd8
 8008e48:	20001040 	.word	0x20001040

08008e4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <xTaskGetCurrentTaskHandle+0x1c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008e58:	687b      	ldr	r3, [r7, #4]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000b4c 	.word	0x20000b4c

08008e6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e72:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <xTaskGetSchedulerState+0x34>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	607b      	str	r3, [r7, #4]
 8008e7e:	e008      	b.n	8008e92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e80:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <xTaskGetSchedulerState+0x38>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e88:	2302      	movs	r3, #2
 8008e8a:	607b      	str	r3, [r7, #4]
 8008e8c:	e001      	b.n	8008e92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e92:	687b      	ldr	r3, [r7, #4]
	}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	2000102c 	.word	0x2000102c
 8008ea4:	20001048 	.word	0x20001048

08008ea8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d051      	beq.n	8008f62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec2:	4b2a      	ldr	r3, [pc, #168]	; (8008f6c <xTaskPriorityInherit+0xc4>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d241      	bcs.n	8008f50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db06      	blt.n	8008ee2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed4:	4b25      	ldr	r3, [pc, #148]	; (8008f6c <xTaskPriorityInherit+0xc4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6959      	ldr	r1, [r3, #20]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <xTaskPriorityInherit+0xc8>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	d122      	bne.n	8008f40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	3304      	adds	r3, #4
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fd ffda 	bl	8006eb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f04:	4b19      	ldr	r3, [pc, #100]	; (8008f6c <xTaskPriorityInherit+0xc4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <xTaskPriorityInherit+0xcc>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d903      	bls.n	8008f22 <xTaskPriorityInherit+0x7a>
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	4a15      	ldr	r2, [pc, #84]	; (8008f74 <xTaskPriorityInherit+0xcc>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a10      	ldr	r2, [pc, #64]	; (8008f70 <xTaskPriorityInherit+0xc8>)
 8008f30:	441a      	add	r2, r3
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fd ff60 	bl	8006dfe <vListInsertEnd>
 8008f3e:	e004      	b.n	8008f4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f40:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <xTaskPriorityInherit+0xc4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	e008      	b.n	8008f62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <xTaskPriorityInherit+0xc4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d201      	bcs.n	8008f62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f62:	68fb      	ldr	r3, [r7, #12]
	}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000b4c 	.word	0x20000b4c
 8008f70:	20000b50 	.word	0x20000b50
 8008f74:	20001028 	.word	0x20001028

08008f78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d05a      	beq.n	8009044 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f8e:	4b30      	ldr	r3, [pc, #192]	; (8009050 <xTaskPriorityDisinherit+0xd8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d00c      	beq.n	8008fb2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	b672      	cpsid	i
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	b662      	cpsie	i
 8008fac:	60fb      	str	r3, [r7, #12]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10c      	bne.n	8008fd4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	b672      	cpsid	i
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	b662      	cpsie	i
 8008fce:	60bb      	str	r3, [r7, #8]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd8:	1e5a      	subs	r2, r3, #1
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d02c      	beq.n	8009044 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d128      	bne.n	8009044 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd ff5e 	bl	8006eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009014:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <xTaskPriorityDisinherit+0xdc>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d903      	bls.n	8009024 <xTaskPriorityDisinherit+0xac>
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	4a0c      	ldr	r2, [pc, #48]	; (8009054 <xTaskPriorityDisinherit+0xdc>)
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4a09      	ldr	r2, [pc, #36]	; (8009058 <xTaskPriorityDisinherit+0xe0>)
 8009032:	441a      	add	r2, r3
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fd fedf 	bl	8006dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009044:	697b      	ldr	r3, [r7, #20]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000b4c 	.word	0x20000b4c
 8009054:	20001028 	.word	0x20001028
 8009058:	20000b50 	.word	0x20000b50

0800905c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800906a:	2301      	movs	r3, #1
 800906c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d06e      	beq.n	8009152 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10c      	bne.n	8009096 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	b672      	cpsid	i
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	b662      	cpsie	i
 8009090:	60fb      	str	r3, [r7, #12]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d902      	bls.n	80090a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	61fb      	str	r3, [r7, #28]
 80090a4:	e002      	b.n	80090ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d04d      	beq.n	8009152 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d148      	bne.n	8009152 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80090c0:	4b26      	ldr	r3, [pc, #152]	; (800915c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d10c      	bne.n	80090e4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	b672      	cpsid	i
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	b662      	cpsie	i
 80090de:	60bb      	str	r3, [r7, #8]
}
 80090e0:	bf00      	nop
 80090e2:	e7fe      	b.n	80090e2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	db04      	blt.n	8009102 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	6959      	ldr	r1, [r3, #20]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4a13      	ldr	r2, [pc, #76]	; (8009160 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009112:	4413      	add	r3, r2
 8009114:	4299      	cmp	r1, r3
 8009116:	d11c      	bne.n	8009152 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fd fecb 	bl	8006eb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009126:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d903      	bls.n	8009136 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	4a0c      	ldr	r2, [pc, #48]	; (8009164 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4a07      	ldr	r2, [pc, #28]	; (8009160 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009144:	441a      	add	r2, r3
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3304      	adds	r3, #4
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f7fd fe56 	bl	8006dfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009152:	bf00      	nop
 8009154:	3720      	adds	r7, #32
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000b4c 	.word	0x20000b4c
 8009160:	20000b50 	.word	0x20000b50
 8009164:	20001028 	.word	0x20001028

08009168 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800916c:	4b07      	ldr	r3, [pc, #28]	; (800918c <pvTaskIncrementMutexHeldCount+0x24>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <pvTaskIncrementMutexHeldCount+0x24>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800917a:	3201      	adds	r2, #1
 800917c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800917e:	4b03      	ldr	r3, [pc, #12]	; (800918c <pvTaskIncrementMutexHeldCount+0x24>)
 8009180:	681b      	ldr	r3, [r3, #0]
	}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	20000b4c 	.word	0x20000b4c

08009190 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800919a:	4b21      	ldr	r3, [pc, #132]	; (8009220 <prvAddCurrentTaskToDelayedList+0x90>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a0:	4b20      	ldr	r3, [pc, #128]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fd fe86 	bl	8006eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b2:	d10a      	bne.n	80091ca <prvAddCurrentTaskToDelayedList+0x3a>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ba:	4b1a      	ldr	r3, [pc, #104]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4819      	ldr	r0, [pc, #100]	; (8009228 <prvAddCurrentTaskToDelayedList+0x98>)
 80091c4:	f7fd fe1b 	bl	8006dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091c8:	e026      	b.n	8009218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4413      	add	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091d2:	4b14      	ldr	r3, [pc, #80]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d209      	bcs.n	80091f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091e2:	4b12      	ldr	r3, [pc, #72]	; (800922c <prvAddCurrentTaskToDelayedList+0x9c>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b0f      	ldr	r3, [pc, #60]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fd fe29 	bl	8006e46 <vListInsert>
}
 80091f4:	e010      	b.n	8009218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f6:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <prvAddCurrentTaskToDelayedList+0x94>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fd fe1f 	bl	8006e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	429a      	cmp	r2, r3
 8009210:	d202      	bcs.n	8009218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009212:	4a08      	ldr	r2, [pc, #32]	; (8009234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6013      	str	r3, [r2, #0]
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20001024 	.word	0x20001024
 8009224:	20000b4c 	.word	0x20000b4c
 8009228:	2000100c 	.word	0x2000100c
 800922c:	20000fdc 	.word	0x20000fdc
 8009230:	20000fd8 	.word	0x20000fd8
 8009234:	20001040 	.word	0x20001040

08009238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009242:	f000 fb15 	bl	8009870 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009246:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <xTimerCreateTimerTask+0x84>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d021      	beq.n	8009292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009256:	1d3a      	adds	r2, r7, #4
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	f107 030c 	add.w	r3, r7, #12
 8009260:	4618      	mov	r0, r3
 8009262:	f7fd fd85 	bl	8006d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	9202      	str	r2, [sp, #8]
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	2302      	movs	r3, #2
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	2300      	movs	r3, #0
 8009276:	460a      	mov	r2, r1
 8009278:	4911      	ldr	r1, [pc, #68]	; (80092c0 <xTimerCreateTimerTask+0x88>)
 800927a:	4812      	ldr	r0, [pc, #72]	; (80092c4 <xTimerCreateTimerTask+0x8c>)
 800927c:	f7fe ff96 	bl	80081ac <xTaskCreateStatic>
 8009280:	4603      	mov	r3, r0
 8009282:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <xTimerCreateTimerTask+0x90>)
 8009284:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009286:	4b10      	ldr	r3, [pc, #64]	; (80092c8 <xTimerCreateTimerTask+0x90>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800928e:	2301      	movs	r3, #1
 8009290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10c      	bne.n	80092b2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	613b      	str	r3, [r7, #16]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80092b2:	697b      	ldr	r3, [r7, #20]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	2000107c 	.word	0x2000107c
 80092c0:	08018e80 	.word	0x08018e80
 80092c4:	08009409 	.word	0x08009409
 80092c8:	20001080 	.word	0x20001080

080092cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	; 0x28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092da:	2300      	movs	r3, #0
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10c      	bne.n	80092fe <xTimerGenericCommand+0x32>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	b672      	cpsid	i
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	b662      	cpsie	i
 80092f8:	623b      	str	r3, [r7, #32]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092fe:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <xTimerGenericCommand+0x9c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d02a      	beq.n	800935c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b05      	cmp	r3, #5
 8009316:	dc18      	bgt.n	800934a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009318:	f7ff fda8 	bl	8008e6c <xTaskGetSchedulerState>
 800931c:	4603      	mov	r3, r0
 800931e:	2b02      	cmp	r3, #2
 8009320:	d109      	bne.n	8009336 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009322:	4b11      	ldr	r3, [pc, #68]	; (8009368 <xTimerGenericCommand+0x9c>)
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f107 0110 	add.w	r1, r7, #16
 800932a:	2300      	movs	r3, #0
 800932c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932e:	f7fe f86b 	bl	8007408 <xQueueGenericSend>
 8009332:	6278      	str	r0, [r7, #36]	; 0x24
 8009334:	e012      	b.n	800935c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <xTimerGenericCommand+0x9c>)
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	f107 0110 	add.w	r1, r7, #16
 800933e:	2300      	movs	r3, #0
 8009340:	2200      	movs	r2, #0
 8009342:	f7fe f861 	bl	8007408 <xQueueGenericSend>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24
 8009348:	e008      	b.n	800935c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <xTimerGenericCommand+0x9c>)
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f107 0110 	add.w	r1, r7, #16
 8009352:	2300      	movs	r3, #0
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	f7fe f95d 	bl	8007614 <xQueueGenericSendFromISR>
 800935a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800935e:	4618      	mov	r0, r3
 8009360:	3728      	adds	r7, #40	; 0x28
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	2000107c 	.word	0x2000107c

0800936c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af02      	add	r7, sp, #8
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009376:	4b23      	ldr	r3, [pc, #140]	; (8009404 <prvProcessExpiredTimer+0x98>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	3304      	adds	r3, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f7fd fd97 	bl	8006eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d024      	beq.n	80093e2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	18d1      	adds	r1, r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	6978      	ldr	r0, [r7, #20]
 80093a6:	f000 f8d3 	bl	8009550 <prvInsertTimerInActiveList>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d021      	beq.n	80093f4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b0:	2300      	movs	r3, #0
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	2300      	movs	r3, #0
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	2100      	movs	r1, #0
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f7ff ff86 	bl	80092cc <xTimerGenericCommand>
 80093c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d115      	bne.n	80093f4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	b672      	cpsid	i
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	b662      	cpsie	i
 80093dc:	60fb      	str	r3, [r7, #12]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	6978      	ldr	r0, [r7, #20]
 80093fa:	4798      	blx	r3
}
 80093fc:	bf00      	nop
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20001074 	.word	0x20001074

08009408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f857 	bl	80094c8 <prvGetNextExpireTime>
 800941a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4619      	mov	r1, r3
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 f803 	bl	800942c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009426:	f000 f8d5 	bl	80095d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800942a:	e7f1      	b.n	8009410 <prvTimerTask+0x8>

0800942c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009436:	f7ff f903 	bl	8008640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800943a:	f107 0308 	add.w	r3, r7, #8
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f866 	bl	8009510 <prvSampleTimeNow>
 8009444:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d130      	bne.n	80094ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <prvProcessTimerOrBlockTask+0x3c>
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	429a      	cmp	r2, r3
 8009458:	d806      	bhi.n	8009468 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800945a:	f7ff f8ff 	bl	800865c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ff83 	bl	800936c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009466:	e024      	b.n	80094b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d008      	beq.n	8009480 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <prvProcessTimerOrBlockTask+0x90>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <prvProcessTimerOrBlockTask+0x50>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <prvProcessTimerOrBlockTask+0x52>
 800947c:	2300      	movs	r3, #0
 800947e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009480:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <prvProcessTimerOrBlockTask+0x94>)
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	4619      	mov	r1, r3
 800948e:	f7fe fe59 	bl	8008144 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009492:	f7ff f8e3 	bl	800865c <xTaskResumeAll>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10a      	bne.n	80094b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800949c:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <prvProcessTimerOrBlockTask+0x98>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	f3bf 8f6f 	isb	sy
}
 80094ac:	e001      	b.n	80094b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094ae:	f7ff f8d5 	bl	800865c <xTaskResumeAll>
}
 80094b2:	bf00      	nop
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20001078 	.word	0x20001078
 80094c0:	2000107c 	.word	0x2000107c
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094d0:	4b0e      	ldr	r3, [pc, #56]	; (800950c <prvGetNextExpireTime+0x44>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <prvGetNextExpireTime+0x16>
 80094da:	2201      	movs	r2, #1
 80094dc:	e000      	b.n	80094e0 <prvGetNextExpireTime+0x18>
 80094de:	2200      	movs	r2, #0
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d105      	bne.n	80094f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ec:	4b07      	ldr	r3, [pc, #28]	; (800950c <prvGetNextExpireTime+0x44>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e001      	b.n	80094fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094fc:	68fb      	ldr	r3, [r7, #12]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20001074 	.word	0x20001074

08009510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009518:	f7ff f940 	bl	800879c <xTaskGetTickCount>
 800951c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800951e:	4b0b      	ldr	r3, [pc, #44]	; (800954c <prvSampleTimeNow+0x3c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	429a      	cmp	r2, r3
 8009526:	d205      	bcs.n	8009534 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009528:	f000 f93c 	bl	80097a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e002      	b.n	800953a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800953a:	4a04      	ldr	r2, [pc, #16]	; (800954c <prvSampleTimeNow+0x3c>)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009540:	68fb      	ldr	r3, [r7, #12]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20001084 	.word	0x20001084

08009550 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d812      	bhi.n	800959c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	429a      	cmp	r2, r3
 8009582:	d302      	bcc.n	800958a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e01b      	b.n	80095c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800958a:	4b10      	ldr	r3, [pc, #64]	; (80095cc <prvInsertTimerInActiveList+0x7c>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3304      	adds	r3, #4
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7fd fc56 	bl	8006e46 <vListInsert>
 800959a:	e012      	b.n	80095c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d206      	bcs.n	80095b2 <prvInsertTimerInActiveList+0x62>
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d302      	bcc.n	80095b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	e007      	b.n	80095c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <prvInsertTimerInActiveList+0x80>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7fd fc42 	bl	8006e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095c2:	697b      	ldr	r3, [r7, #20]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20001078 	.word	0x20001078
 80095d0:	20001074 	.word	0x20001074

080095d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08e      	sub	sp, #56	; 0x38
 80095d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095da:	e0d0      	b.n	800977e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da1a      	bge.n	8009618 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095e2:	1d3b      	adds	r3, r7, #4
 80095e4:	3304      	adds	r3, #4
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	61fb      	str	r3, [r7, #28]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960e:	6850      	ldr	r0, [r2, #4]
 8009610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009612:	6892      	ldr	r2, [r2, #8]
 8009614:	4611      	mov	r1, r2
 8009616:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f2c0 80ae 	blt.w	800977c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	3304      	adds	r3, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f7fd fc41 	bl	8006eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009636:	463b      	mov	r3, r7
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff ff69 	bl	8009510 <prvSampleTimeNow>
 800963e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b09      	cmp	r3, #9
 8009644:	f200 809b 	bhi.w	800977e <prvProcessReceivedCommands+0x1aa>
 8009648:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <prvProcessReceivedCommands+0x7c>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009679 	.word	0x08009679
 8009654:	08009679 	.word	0x08009679
 8009658:	08009679 	.word	0x08009679
 800965c:	080096f1 	.word	0x080096f1
 8009660:	08009705 	.word	0x08009705
 8009664:	08009753 	.word	0x08009753
 8009668:	08009679 	.word	0x08009679
 800966c:	08009679 	.word	0x08009679
 8009670:	080096f1 	.word	0x080096f1
 8009674:	08009705 	.word	0x08009705
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	b2da      	uxtb	r2, r3
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	18d1      	adds	r1, r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009698:	f7ff ff5a 	bl	8009550 <prvInsertTimerInActiveList>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d06d      	beq.n	800977e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d062      	beq.n	800977e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	441a      	add	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	2100      	movs	r1, #0
 80096c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ca:	f7ff fdff 	bl	80092cc <xTimerGenericCommand>
 80096ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d153      	bne.n	800977e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	b672      	cpsid	i
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	b662      	cpsie	i
 80096ea:	61bb      	str	r3, [r7, #24]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f6:	f023 0301 	bic.w	r3, r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009702:	e03c      	b.n	800977e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10c      	bne.n	800973e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	b672      	cpsid	i
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	b662      	cpsie	i
 8009738:	617b      	str	r3, [r7, #20]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	18d1      	adds	r1, r2, r3
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800974c:	f7ff ff00 	bl	8009550 <prvInsertTimerInActiveList>
					break;
 8009750:	e015      	b.n	800977e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d103      	bne.n	8009768 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009762:	f000 fbc9 	bl	8009ef8 <vPortFree>
 8009766:	e00a      	b.n	800977e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976e:	f023 0301 	bic.w	r3, r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800977a:	e000      	b.n	800977e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800977c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800977e:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <prvProcessReceivedCommands+0x1cc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	1d39      	adds	r1, r7, #4
 8009784:	2200      	movs	r2, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe f87a 	bl	8007880 <xQueueReceive>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	f47f af24 	bne.w	80095dc <prvProcessReceivedCommands+0x8>
	}
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	3730      	adds	r7, #48	; 0x30
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000107c 	.word	0x2000107c

080097a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097aa:	e04a      	b.n	8009842 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097ac:	4b2e      	ldr	r3, [pc, #184]	; (8009868 <prvSwitchTimerLists+0xc4>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b6:	4b2c      	ldr	r3, [pc, #176]	; (8009868 <prvSwitchTimerLists+0xc4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fd fb77 	bl	8006eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d030      	beq.n	8009842 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	4413      	add	r3, r2
 80097e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d90e      	bls.n	8009810 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097fe:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <prvSwitchTimerLists+0xc4>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3304      	adds	r3, #4
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7fd fb1c 	bl	8006e46 <vListInsert>
 800980e:	e018      	b.n	8009842 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	2100      	movs	r1, #0
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff fd56 	bl	80092cc <xTimerGenericCommand>
 8009820:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10c      	bne.n	8009842 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	b672      	cpsid	i
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	b662      	cpsie	i
 800983c:	603b      	str	r3, [r7, #0]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009842:	4b09      	ldr	r3, [pc, #36]	; (8009868 <prvSwitchTimerLists+0xc4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1af      	bne.n	80097ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <prvSwitchTimerLists+0xc4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009852:	4b06      	ldr	r3, [pc, #24]	; (800986c <prvSwitchTimerLists+0xc8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a04      	ldr	r2, [pc, #16]	; (8009868 <prvSwitchTimerLists+0xc4>)
 8009858:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800985a:	4a04      	ldr	r2, [pc, #16]	; (800986c <prvSwitchTimerLists+0xc8>)
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	6013      	str	r3, [r2, #0]
}
 8009860:	bf00      	nop
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20001074 	.word	0x20001074
 800986c:	20001078 	.word	0x20001078

08009870 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009876:	f000 f949 	bl	8009b0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800987a:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <prvCheckForValidListAndQueue+0x60>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d120      	bne.n	80098c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009882:	4814      	ldr	r0, [pc, #80]	; (80098d4 <prvCheckForValidListAndQueue+0x64>)
 8009884:	f7fd fa8e 	bl	8006da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009888:	4813      	ldr	r0, [pc, #76]	; (80098d8 <prvCheckForValidListAndQueue+0x68>)
 800988a:	f7fd fa8b 	bl	8006da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800988e:	4b13      	ldr	r3, [pc, #76]	; (80098dc <prvCheckForValidListAndQueue+0x6c>)
 8009890:	4a10      	ldr	r2, [pc, #64]	; (80098d4 <prvCheckForValidListAndQueue+0x64>)
 8009892:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009894:	4b12      	ldr	r3, [pc, #72]	; (80098e0 <prvCheckForValidListAndQueue+0x70>)
 8009896:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <prvCheckForValidListAndQueue+0x68>)
 8009898:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800989a:	2300      	movs	r3, #0
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	4b11      	ldr	r3, [pc, #68]	; (80098e4 <prvCheckForValidListAndQueue+0x74>)
 80098a0:	4a11      	ldr	r2, [pc, #68]	; (80098e8 <prvCheckForValidListAndQueue+0x78>)
 80098a2:	2110      	movs	r1, #16
 80098a4:	200a      	movs	r0, #10
 80098a6:	f7fd fb9b 	bl	8006fe0 <xQueueGenericCreateStatic>
 80098aa:	4603      	mov	r3, r0
 80098ac:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <prvCheckForValidListAndQueue+0x60>)
 80098ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <prvCheckForValidListAndQueue+0x60>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <prvCheckForValidListAndQueue+0x60>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	490b      	ldr	r1, [pc, #44]	; (80098ec <prvCheckForValidListAndQueue+0x7c>)
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fbec 	bl	800809c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098c4:	f000 f956 	bl	8009b74 <vPortExitCritical>
}
 80098c8:	bf00      	nop
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	2000107c 	.word	0x2000107c
 80098d4:	2000104c 	.word	0x2000104c
 80098d8:	20001060 	.word	0x20001060
 80098dc:	20001074 	.word	0x20001074
 80098e0:	20001078 	.word	0x20001078
 80098e4:	20001128 	.word	0x20001128
 80098e8:	20001088 	.word	0x20001088
 80098ec:	08018e88 	.word	0x08018e88

080098f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3b04      	subs	r3, #4
 8009900:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3b04      	subs	r3, #4
 800990e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f023 0201 	bic.w	r2, r3, #1
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b04      	subs	r3, #4
 800991e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009920:	4a0c      	ldr	r2, [pc, #48]	; (8009954 <pxPortInitialiseStack+0x64>)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3b14      	subs	r3, #20
 800992a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b04      	subs	r3, #4
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f06f 0202 	mvn.w	r2, #2
 800993e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3b20      	subs	r3, #32
 8009944:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009946:	68fb      	ldr	r3, [r7, #12]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	08009959 	.word	0x08009959

08009958 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <prvTaskExitError+0x5c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	d00c      	beq.n	8009986 <prvTaskExitError+0x2e>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	60fb      	str	r3, [r7, #12]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <prvTaskExitError+0x2c>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	b672      	cpsid	i
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	b662      	cpsie	i
 800999a:	60bb      	str	r3, [r7, #8]
}
 800999c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800999e:	bf00      	nop
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0fc      	beq.n	80099a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	2000000c 	.word	0x2000000c
	...

080099c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099c0:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <pxCurrentTCBConst2>)
 80099c2:	6819      	ldr	r1, [r3, #0]
 80099c4:	6808      	ldr	r0, [r1, #0]
 80099c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	f380 8809 	msr	PSP, r0
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8811 	msr	BASEPRI, r0
 80099da:	4770      	bx	lr
 80099dc:	f3af 8000 	nop.w

080099e0 <pxCurrentTCBConst2>:
 80099e0:	20000b4c 	.word	0x20000b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop

080099e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099e8:	4808      	ldr	r0, [pc, #32]	; (8009a0c <prvPortStartFirstTask+0x24>)
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	6800      	ldr	r0, [r0, #0]
 80099ee:	f380 8808 	msr	MSP, r0
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8814 	msr	CONTROL, r0
 80099fa:	b662      	cpsie	i
 80099fc:	b661      	cpsie	f
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	df00      	svc	0
 8009a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a0a:	bf00      	nop
 8009a0c:	e000ed08 	.word	0xe000ed08

08009a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a16:	4b37      	ldr	r3, [pc, #220]	; (8009af4 <xPortStartScheduler+0xe4>)
 8009a18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	22ff      	movs	r2, #255	; 0xff
 8009a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4b2f      	ldr	r3, [pc, #188]	; (8009af8 <xPortStartScheduler+0xe8>)
 8009a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a3e:	4b2f      	ldr	r3, [pc, #188]	; (8009afc <xPortStartScheduler+0xec>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a44:	e009      	b.n	8009a5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a46:	4b2d      	ldr	r3, [pc, #180]	; (8009afc <xPortStartScheduler+0xec>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4a2b      	ldr	r2, [pc, #172]	; (8009afc <xPortStartScheduler+0xec>)
 8009a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b80      	cmp	r3, #128	; 0x80
 8009a64:	d0ef      	beq.n	8009a46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a66:	4b25      	ldr	r3, [pc, #148]	; (8009afc <xPortStartScheduler+0xec>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f1c3 0307 	rsb	r3, r3, #7
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d00c      	beq.n	8009a8c <xPortStartScheduler+0x7c>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	b672      	cpsid	i
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	b662      	cpsie	i
 8009a86:	60bb      	str	r3, [r7, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a8c:	4b1b      	ldr	r3, [pc, #108]	; (8009afc <xPortStartScheduler+0xec>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	021b      	lsls	r3, r3, #8
 8009a92:	4a1a      	ldr	r2, [pc, #104]	; (8009afc <xPortStartScheduler+0xec>)
 8009a94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a96:	4b19      	ldr	r3, [pc, #100]	; (8009afc <xPortStartScheduler+0xec>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a9e:	4a17      	ldr	r2, [pc, #92]	; (8009afc <xPortStartScheduler+0xec>)
 8009aa0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009aaa:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <xPortStartScheduler+0xf0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a14      	ldr	r2, [pc, #80]	; (8009b00 <xPortStartScheduler+0xf0>)
 8009ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ab4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ab6:	4b12      	ldr	r3, [pc, #72]	; (8009b00 <xPortStartScheduler+0xf0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a11      	ldr	r2, [pc, #68]	; (8009b00 <xPortStartScheduler+0xf0>)
 8009abc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ac0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ac2:	f000 f8dd 	bl	8009c80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <xPortStartScheduler+0xf4>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009acc:	f000 f8fc 	bl	8009cc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <xPortStartScheduler+0xf8>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <xPortStartScheduler+0xf8>)
 8009ad6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ada:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009adc:	f7ff ff84 	bl	80099e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ae0:	f7fe ff3a 	bl	8008958 <vTaskSwitchContext>
	prvTaskExitError();
 8009ae4:	f7ff ff38 	bl	8009958 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	e000e400 	.word	0xe000e400
 8009af8:	20001178 	.word	0x20001178
 8009afc:	2000117c 	.word	0x2000117c
 8009b00:	e000ed20 	.word	0xe000ed20
 8009b04:	2000000c 	.word	0x2000000c
 8009b08:	e000ef34 	.word	0xe000ef34

08009b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	b672      	cpsid	i
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	b662      	cpsie	i
 8009b26:	607b      	str	r3, [r7, #4]
}
 8009b28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b2a:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <vPortEnterCritical+0x60>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	4a0e      	ldr	r2, [pc, #56]	; (8009b6c <vPortEnterCritical+0x60>)
 8009b32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b34:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <vPortEnterCritical+0x60>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d111      	bne.n	8009b60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <vPortEnterCritical+0x64>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00c      	beq.n	8009b60 <vPortEnterCritical+0x54>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	b672      	cpsid	i
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	b662      	cpsie	i
 8009b5a:	603b      	str	r3, [r7, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <vPortEnterCritical+0x52>
	}
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	2000000c 	.word	0x2000000c
 8009b70:	e000ed04 	.word	0xe000ed04

08009b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b7a:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <vPortExitCritical+0x54>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10c      	bne.n	8009b9c <vPortExitCritical+0x28>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	b672      	cpsid	i
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	b662      	cpsie	i
 8009b96:	607b      	str	r3, [r7, #4]
}
 8009b98:	bf00      	nop
 8009b9a:	e7fe      	b.n	8009b9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <vPortExitCritical+0x54>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4a09      	ldr	r2, [pc, #36]	; (8009bc8 <vPortExitCritical+0x54>)
 8009ba4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ba6:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <vPortExitCritical+0x54>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d105      	bne.n	8009bba <vPortExitCritical+0x46>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	f383 8811 	msr	BASEPRI, r3
}
 8009bb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	2000000c 	.word	0x2000000c
 8009bcc:	00000000 	.word	0x00000000

08009bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bd0:	f3ef 8009 	mrs	r0, PSP
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <pxCurrentTCBConst>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f01e 0f10 	tst.w	lr, #16
 8009be0:	bf08      	it	eq
 8009be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	6010      	str	r0, [r2, #0]
 8009bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bf4:	b672      	cpsid	i
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	b662      	cpsie	i
 8009c04:	f7fe fea8 	bl	8008958 <vTaskSwitchContext>
 8009c08:	f04f 0000 	mov.w	r0, #0
 8009c0c:	f380 8811 	msr	BASEPRI, r0
 8009c10:	bc09      	pop	{r0, r3}
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	f01e 0f10 	tst.w	lr, #16
 8009c1e:	bf08      	it	eq
 8009c20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c24:	f380 8809 	msr	PSP, r0
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop

08009c30 <pxCurrentTCBConst>:
 8009c30:	20000b4c 	.word	0x20000b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	b672      	cpsid	i
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	b662      	cpsie	i
 8009c52:	607b      	str	r3, [r7, #4]
}
 8009c54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c56:	f7fe fdc3 	bl	80087e0 <xTaskIncrementTick>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <SysTick_Handler+0x44>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	f383 8811 	msr	BASEPRI, r3
}
 8009c72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c84:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <vPortSetupTimerInterrupt+0x34>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <vPortSetupTimerInterrupt+0x38>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c90:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <vPortSetupTimerInterrupt+0x3c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <vPortSetupTimerInterrupt+0x40>)
 8009c96:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9a:	099b      	lsrs	r3, r3, #6
 8009c9c:	4a09      	ldr	r2, [pc, #36]	; (8009cc4 <vPortSetupTimerInterrupt+0x44>)
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ca2:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <vPortSetupTimerInterrupt+0x34>)
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	601a      	str	r2, [r3, #0]
}
 8009ca8:	bf00      	nop
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	e000e010 	.word	0xe000e010
 8009cb8:	e000e018 	.word	0xe000e018
 8009cbc:	20000000 	.word	0x20000000
 8009cc0:	10624dd3 	.word	0x10624dd3
 8009cc4:	e000e014 	.word	0xe000e014

08009cc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cd8 <vPortEnableVFP+0x10>
 8009ccc:	6801      	ldr	r1, [r0, #0]
 8009cce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cd2:	6001      	str	r1, [r0, #0]
 8009cd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cd6:	bf00      	nop
 8009cd8:	e000ed88 	.word	0xe000ed88

08009cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ce2:	f3ef 8305 	mrs	r3, IPSR
 8009ce6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b0f      	cmp	r3, #15
 8009cec:	d916      	bls.n	8009d1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cee:	4a19      	ldr	r2, [pc, #100]	; (8009d54 <vPortValidateInterruptPriority+0x78>)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cf8:	4b17      	ldr	r3, [pc, #92]	; (8009d58 <vPortValidateInterruptPriority+0x7c>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	7afa      	ldrb	r2, [r7, #11]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d20c      	bcs.n	8009d1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	b672      	cpsid	i
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	b662      	cpsie	i
 8009d16:	607b      	str	r3, [r7, #4]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d1c:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <vPortValidateInterruptPriority+0x80>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d24:	4b0e      	ldr	r3, [pc, #56]	; (8009d60 <vPortValidateInterruptPriority+0x84>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d90c      	bls.n	8009d46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	b672      	cpsid	i
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	b662      	cpsie	i
 8009d40:	603b      	str	r3, [r7, #0]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <vPortValidateInterruptPriority+0x68>
	}
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	e000e3f0 	.word	0xe000e3f0
 8009d58:	20001178 	.word	0x20001178
 8009d5c:	e000ed0c 	.word	0xe000ed0c
 8009d60:	2000117c 	.word	0x2000117c

08009d64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08a      	sub	sp, #40	; 0x28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d70:	f7fe fc66 	bl	8008640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d74:	4b5b      	ldr	r3, [pc, #364]	; (8009ee4 <pvPortMalloc+0x180>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d7c:	f000 f91a 	bl	8009fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d80:	4b59      	ldr	r3, [pc, #356]	; (8009ee8 <pvPortMalloc+0x184>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4013      	ands	r3, r2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f040 8092 	bne.w	8009eb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01f      	beq.n	8009dd4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009d94:	2208      	movs	r2, #8
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4413      	add	r3, r2
 8009d9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d016      	beq.n	8009dd4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f023 0307 	bic.w	r3, r3, #7
 8009dac:	3308      	adds	r3, #8
 8009dae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00c      	beq.n	8009dd4 <pvPortMalloc+0x70>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	b672      	cpsid	i
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	b662      	cpsie	i
 8009dce:	617b      	str	r3, [r7, #20]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d06b      	beq.n	8009eb2 <pvPortMalloc+0x14e>
 8009dda:	4b44      	ldr	r3, [pc, #272]	; (8009eec <pvPortMalloc+0x188>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d866      	bhi.n	8009eb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009de4:	4b42      	ldr	r3, [pc, #264]	; (8009ef0 <pvPortMalloc+0x18c>)
 8009de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009de8:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <pvPortMalloc+0x18c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dee:	e004      	b.n	8009dfa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d903      	bls.n	8009e0c <pvPortMalloc+0xa8>
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1f1      	bne.n	8009df0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e0c:	4b35      	ldr	r3, [pc, #212]	; (8009ee4 <pvPortMalloc+0x180>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d04d      	beq.n	8009eb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2208      	movs	r2, #8
 8009e1c:	4413      	add	r3, r2
 8009e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	1ad2      	subs	r2, r2, r3
 8009e30:	2308      	movs	r3, #8
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d921      	bls.n	8009e7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00c      	beq.n	8009e64 <pvPortMalloc+0x100>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	b672      	cpsid	i
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	b662      	cpsie	i
 8009e5e:	613b      	str	r3, [r7, #16]
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e76:	69b8      	ldr	r0, [r7, #24]
 8009e78:	f000 f8fe 	bl	800a078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e7c:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <pvPortMalloc+0x188>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	4a19      	ldr	r2, [pc, #100]	; (8009eec <pvPortMalloc+0x188>)
 8009e88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e8a:	4b18      	ldr	r3, [pc, #96]	; (8009eec <pvPortMalloc+0x188>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b19      	ldr	r3, [pc, #100]	; (8009ef4 <pvPortMalloc+0x190>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d203      	bcs.n	8009e9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e96:	4b15      	ldr	r3, [pc, #84]	; (8009eec <pvPortMalloc+0x188>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a16      	ldr	r2, [pc, #88]	; (8009ef4 <pvPortMalloc+0x190>)
 8009e9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <pvPortMalloc+0x184>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eb2:	f7fe fbd3 	bl	800865c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00c      	beq.n	8009eda <pvPortMalloc+0x176>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	b672      	cpsid	i
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	b662      	cpsie	i
 8009ed4:	60fb      	str	r3, [r7, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <pvPortMalloc+0x174>
	return pvReturn;
 8009eda:	69fb      	ldr	r3, [r7, #28]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3728      	adds	r7, #40	; 0x28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20004d88 	.word	0x20004d88
 8009ee8:	20004d94 	.word	0x20004d94
 8009eec:	20004d8c 	.word	0x20004d8c
 8009ef0:	20004d80 	.word	0x20004d80
 8009ef4:	20004d90 	.word	0x20004d90

08009ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d04c      	beq.n	8009fa4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4413      	add	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	4b23      	ldr	r3, [pc, #140]	; (8009fac <vPortFree+0xb4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4013      	ands	r3, r2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10c      	bne.n	8009f40 <vPortFree+0x48>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	b672      	cpsid	i
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	b662      	cpsie	i
 8009f3a:	60fb      	str	r3, [r7, #12]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00c      	beq.n	8009f62 <vPortFree+0x6a>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	b672      	cpsid	i
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	b662      	cpsie	i
 8009f5c:	60bb      	str	r3, [r7, #8]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4b11      	ldr	r3, [pc, #68]	; (8009fac <vPortFree+0xb4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d019      	beq.n	8009fa4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d115      	bne.n	8009fa4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	4b0b      	ldr	r3, [pc, #44]	; (8009fac <vPortFree+0xb4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	43db      	mvns	r3, r3
 8009f82:	401a      	ands	r2, r3
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f88:	f7fe fb5a 	bl	8008640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <vPortFree+0xb8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4413      	add	r3, r2
 8009f96:	4a06      	ldr	r2, [pc, #24]	; (8009fb0 <vPortFree+0xb8>)
 8009f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f9a:	6938      	ldr	r0, [r7, #16]
 8009f9c:	f000 f86c 	bl	800a078 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009fa0:	f7fe fb5c 	bl	800865c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fa4:	bf00      	nop
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20004d94 	.word	0x20004d94
 8009fb0:	20004d8c 	.word	0x20004d8c

08009fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fc0:	4b27      	ldr	r3, [pc, #156]	; (800a060 <prvHeapInit+0xac>)
 8009fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f003 0307 	and.w	r3, r3, #7
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00c      	beq.n	8009fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3307      	adds	r3, #7
 8009fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0307 	bic.w	r3, r3, #7
 8009fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <prvHeapInit+0xac>)
 8009fe4:	4413      	add	r3, r2
 8009fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fec:	4a1d      	ldr	r2, [pc, #116]	; (800a064 <prvHeapInit+0xb0>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <prvHeapInit+0xb0>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a000:	2208      	movs	r2, #8
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f023 0307 	bic.w	r3, r3, #7
 800a00e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4a15      	ldr	r2, [pc, #84]	; (800a068 <prvHeapInit+0xb4>)
 800a014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a016:	4b14      	ldr	r3, [pc, #80]	; (800a068 <prvHeapInit+0xb4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a01e:	4b12      	ldr	r3, [pc, #72]	; (800a068 <prvHeapInit+0xb4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a034:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <prvHeapInit+0xb4>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <prvHeapInit+0xb8>)
 800a042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	4a09      	ldr	r2, [pc, #36]	; (800a070 <prvHeapInit+0xbc>)
 800a04a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <prvHeapInit+0xc0>)
 800a04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	bf00      	nop
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	20001180 	.word	0x20001180
 800a064:	20004d80 	.word	0x20004d80
 800a068:	20004d88 	.word	0x20004d88
 800a06c:	20004d90 	.word	0x20004d90
 800a070:	20004d8c 	.word	0x20004d8c
 800a074:	20004d94 	.word	0x20004d94

0800a078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a080:	4b28      	ldr	r3, [pc, #160]	; (800a124 <prvInsertBlockIntoFreeList+0xac>)
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e002      	b.n	800a08c <prvInsertBlockIntoFreeList+0x14>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	429a      	cmp	r2, r3
 800a094:	d8f7      	bhi.n	800a086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d108      	bne.n	800a0ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	441a      	add	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d118      	bne.n	800a100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	4b15      	ldr	r3, [pc, #84]	; (800a128 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d00d      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e008      	b.n	800a108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	e003      	b.n	800a108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d002      	beq.n	800a116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	20004d80 	.word	0x20004d80
 800a128:	20004d88 	.word	0x20004d88

0800a12c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	330c      	adds	r3, #12
 800a13c:	461a      	mov	r2, r3
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 fa6f 	bl	800c624 <tcpip_send_msg_wait_sem>
 800a146:	4603      	mov	r3, r0
 800a148:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a158:	e001      	b.n	800a15e <netconn_apimsg+0x32>
  }
  return err;
 800a15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08c      	sub	sp, #48	; 0x30
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	603a      	str	r2, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
 800a174:	460b      	mov	r3, r1
 800a176:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 f923 	bl	800b3c8 <netconn_alloc>
 800a182:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d054      	beq.n	800a234 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a18a:	79bb      	ldrb	r3, [r7, #6]
 800a18c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a192:	f107 0308 	add.w	r3, r7, #8
 800a196:	4619      	mov	r1, r3
 800a198:	4829      	ldr	r0, [pc, #164]	; (800a240 <netconn_new_with_proto_and_callback+0xd8>)
 800a19a:	f7ff ffc7 	bl	800a12c <netconn_apimsg>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a1a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d043      	beq.n	800a234 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <netconn_new_with_proto_and_callback+0x58>
 800a1b4:	4b23      	ldr	r3, [pc, #140]	; (800a244 <netconn_new_with_proto_and_callback+0xdc>)
 800a1b6:	22a3      	movs	r2, #163	; 0xa3
 800a1b8:	4923      	ldr	r1, [pc, #140]	; (800a248 <netconn_new_with_proto_and_callback+0xe0>)
 800a1ba:	4824      	ldr	r0, [pc, #144]	; (800a24c <netconn_new_with_proto_and_callback+0xe4>)
 800a1bc:	f00d fb3e 	bl	801783c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	3310      	adds	r3, #16
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f00d f9af 	bl	8017528 <sys_mbox_valid>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d105      	bne.n	800a1dc <netconn_new_with_proto_and_callback+0x74>
 800a1d0:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <netconn_new_with_proto_and_callback+0xdc>)
 800a1d2:	22a4      	movs	r2, #164	; 0xa4
 800a1d4:	491e      	ldr	r1, [pc, #120]	; (800a250 <netconn_new_with_proto_and_callback+0xe8>)
 800a1d6:	481d      	ldr	r0, [pc, #116]	; (800a24c <netconn_new_with_proto_and_callback+0xe4>)
 800a1d8:	f00d fb30 	bl	801783c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	3314      	adds	r3, #20
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f00d f9a1 	bl	8017528 <sys_mbox_valid>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <netconn_new_with_proto_and_callback+0x90>
 800a1ec:	4b15      	ldr	r3, [pc, #84]	; (800a244 <netconn_new_with_proto_and_callback+0xdc>)
 800a1ee:	22a6      	movs	r2, #166	; 0xa6
 800a1f0:	4918      	ldr	r1, [pc, #96]	; (800a254 <netconn_new_with_proto_and_callback+0xec>)
 800a1f2:	4816      	ldr	r0, [pc, #88]	; (800a24c <netconn_new_with_proto_and_callback+0xe4>)
 800a1f4:	f00d fb22 	bl	801783c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	330c      	adds	r3, #12
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f00d fa21 	bl	8017644 <sys_sem_valid>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <netconn_new_with_proto_and_callback+0xac>
 800a208:	4b0e      	ldr	r3, [pc, #56]	; (800a244 <netconn_new_with_proto_and_callback+0xdc>)
 800a20a:	22a9      	movs	r2, #169	; 0xa9
 800a20c:	4912      	ldr	r1, [pc, #72]	; (800a258 <netconn_new_with_proto_and_callback+0xf0>)
 800a20e:	480f      	ldr	r0, [pc, #60]	; (800a24c <netconn_new_with_proto_and_callback+0xe4>)
 800a210:	f00d fb14 	bl	801783c <iprintf>
      sys_sem_free(&conn->op_completed);
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	330c      	adds	r3, #12
 800a218:	4618      	mov	r0, r3
 800a21a:	f00d fa06 	bl	801762a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	3310      	adds	r3, #16
 800a222:	4618      	mov	r0, r3
 800a224:	f00d f90c 	bl	8017440 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a22a:	2007      	movs	r0, #7
 800a22c:	f002 ff62 	bl	800d0f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a230:	2300      	movs	r3, #0
 800a232:	e000      	b.n	800a236 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a236:	4618      	mov	r0, r3
 800a238:	3730      	adds	r7, #48	; 0x30
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	0800b39d 	.word	0x0800b39d
 800a244:	08018e90 	.word	0x08018e90
 800a248:	08018ec4 	.word	0x08018ec4
 800a24c:	08018ee8 	.word	0x08018ee8
 800a250:	08018f10 	.word	0x08018f10
 800a254:	08018f28 	.word	0x08018f28
 800a258:	08018f4c 	.word	0x08018f4c

0800a25c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08c      	sub	sp, #48	; 0x30
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	e014      	b.n	800a298 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a272:	2329      	movs	r3, #41	; 0x29
 800a274:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	4619      	mov	r1, r3
 800a27c:	4808      	ldr	r0, [pc, #32]	; (800a2a0 <netconn_prepare_delete+0x44>)
 800a27e:	f7ff ff55 	bl	800a12c <netconn_apimsg>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <netconn_prepare_delete+0x3a>
    return err;
 800a290:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a294:	e000      	b.n	800a298 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3730      	adds	r7, #48	; 0x30
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	0800b901 	.word	0x0800b901

0800a2a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <netconn_delete+0x12>
    return ERR_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e00d      	b.n	800a2d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff ffd0 	bl	800a25c <netconn_prepare_delete>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <netconn_delete+0x2a>
    netconn_free(conn);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 f8eb 	bl	800b4a4 <netconn_free>
  }
  return err;
 800a2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08e      	sub	sp, #56	; 0x38
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d109      	bne.n	800a304 <netconn_bind+0x28>
 800a2f0:	4b11      	ldr	r3, [pc, #68]	; (800a338 <netconn_bind+0x5c>)
 800a2f2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a2f6:	4911      	ldr	r1, [pc, #68]	; (800a33c <netconn_bind+0x60>)
 800a2f8:	4811      	ldr	r0, [pc, #68]	; (800a340 <netconn_bind+0x64>)
 800a2fa:	f00d fa9f 	bl	801783c <iprintf>
 800a2fe:	f06f 030f 	mvn.w	r3, #15
 800a302:	e015      	b.n	800a330 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a30a:	4b0e      	ldr	r3, [pc, #56]	; (800a344 <netconn_bind+0x68>)
 800a30c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a31a:	f107 0314 	add.w	r3, r7, #20
 800a31e:	4619      	mov	r1, r3
 800a320:	4809      	ldr	r0, [pc, #36]	; (800a348 <netconn_bind+0x6c>)
 800a322:	f7ff ff03 	bl	800a12c <netconn_apimsg>
 800a326:	4603      	mov	r3, r0
 800a328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a32c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a330:	4618      	mov	r0, r3
 800a332:	3738      	adds	r7, #56	; 0x38
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	08018e90 	.word	0x08018e90
 800a33c:	08018fc8 	.word	0x08018fc8
 800a340:	08018ee8 	.word	0x08018ee8
 800a344:	0801c4ec 	.word	0x0801c4ec
 800a348:	0800bac9 	.word	0x0800bac9

0800a34c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08c      	sub	sp, #48	; 0x30
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d109      	bne.n	800a372 <netconn_listen_with_backlog+0x26>
 800a35e:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <netconn_listen_with_backlog+0x48>)
 800a360:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a364:	490c      	ldr	r1, [pc, #48]	; (800a398 <netconn_listen_with_backlog+0x4c>)
 800a366:	480d      	ldr	r0, [pc, #52]	; (800a39c <netconn_listen_with_backlog+0x50>)
 800a368:	f00d fa68 	bl	801783c <iprintf>
 800a36c:	f06f 030f 	mvn.w	r3, #15
 800a370:	e00c      	b.n	800a38c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a376:	f107 030c 	add.w	r3, r7, #12
 800a37a:	4619      	mov	r1, r3
 800a37c:	4808      	ldr	r0, [pc, #32]	; (800a3a0 <netconn_listen_with_backlog+0x54>)
 800a37e:	f7ff fed5 	bl	800a12c <netconn_apimsg>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a388:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3730      	adds	r7, #48	; 0x30
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	08018e90 	.word	0x08018e90
 800a398:	08019048 	.word	0x08019048
 800a39c:	08018ee8 	.word	0x08018ee8
 800a3a0:	0800bb3d 	.word	0x0800bb3d

0800a3a4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <netconn_accept+0x24>
 800a3b4:	4b3d      	ldr	r3, [pc, #244]	; (800a4ac <netconn_accept+0x108>)
 800a3b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a3ba:	493d      	ldr	r1, [pc, #244]	; (800a4b0 <netconn_accept+0x10c>)
 800a3bc:	483d      	ldr	r0, [pc, #244]	; (800a4b4 <netconn_accept+0x110>)
 800a3be:	f00d fa3d 	bl	801783c <iprintf>
 800a3c2:	f06f 030f 	mvn.w	r3, #15
 800a3c6:	e06c      	b.n	800a4a2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d109      	bne.n	800a3e8 <netconn_accept+0x44>
 800a3d4:	4b35      	ldr	r3, [pc, #212]	; (800a4ac <netconn_accept+0x108>)
 800a3d6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a3da:	4937      	ldr	r1, [pc, #220]	; (800a4b8 <netconn_accept+0x114>)
 800a3dc:	4835      	ldr	r0, [pc, #212]	; (800a4b4 <netconn_accept+0x110>)
 800a3de:	f00d fa2d 	bl	801783c <iprintf>
 800a3e2:	f06f 030f 	mvn.w	r3, #15
 800a3e6:	e05c      	b.n	800a4a2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fb6c 	bl	800aac6 <netconn_err>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a3f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a3fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3fe:	e050      	b.n	800a4a2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3314      	adds	r3, #20
 800a404:	4618      	mov	r0, r3
 800a406:	f00d f88f 	bl	8017528 <sys_mbox_valid>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d005      	beq.n	800a41c <netconn_accept+0x78>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7f1b      	ldrb	r3, [r3, #28]
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a41c:	f06f 030e 	mvn.w	r3, #14
 800a420:	e03f      	b.n	800a4a2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7f1b      	ldrb	r3, [r3, #28]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00e      	beq.n	800a44c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3314      	adds	r3, #20
 800a432:	f107 020c 	add.w	r2, r7, #12
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f00d f85e 	bl	80174fa <sys_arch_mbox_tryfetch>
 800a43e:	4603      	mov	r3, r0
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a444:	d10a      	bne.n	800a45c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a446:	f06f 0306 	mvn.w	r3, #6
 800a44a:	e02a      	b.n	800a4a2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3314      	adds	r3, #20
 800a450:	f107 010c 	add.w	r1, r7, #12
 800a454:	2200      	movs	r2, #0
 800a456:	4618      	mov	r0, r3
 800a458:	f00d f81e 	bl	8017498 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	2b00      	cmp	r3, #0
 800a462:	d005      	beq.n	800a470 <netconn_accept+0xcc>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	2200      	movs	r2, #0
 800a46a:	2101      	movs	r1, #1
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f107 0213 	add.w	r2, r7, #19
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fb75 	bl	800ab68 <lwip_netconn_is_err_msg>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a484:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a488:	e00b      	b.n	800a4a2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a490:	f06f 030e 	mvn.w	r3, #14
 800a494:	e005      	b.n	800a4a2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a4a0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	08018e90 	.word	0x08018e90
 800a4b0:	08019068 	.word	0x08019068
 800a4b4:	08018ee8 	.word	0x08018ee8
 800a4b8:	08019088 	.word	0x08019088

0800a4bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d109      	bne.n	800a4e8 <netconn_recv_data+0x2c>
 800a4d4:	4b58      	ldr	r3, [pc, #352]	; (800a638 <netconn_recv_data+0x17c>)
 800a4d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a4da:	4958      	ldr	r1, [pc, #352]	; (800a63c <netconn_recv_data+0x180>)
 800a4dc:	4858      	ldr	r0, [pc, #352]	; (800a640 <netconn_recv_data+0x184>)
 800a4de:	f00d f9ad 	bl	801783c <iprintf>
 800a4e2:	f06f 030f 	mvn.w	r3, #15
 800a4e6:	e0a2      	b.n	800a62e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <netconn_recv_data+0x4c>
 800a4f4:	4b50      	ldr	r3, [pc, #320]	; (800a638 <netconn_recv_data+0x17c>)
 800a4f6:	f240 224a 	movw	r2, #586	; 0x24a
 800a4fa:	4952      	ldr	r1, [pc, #328]	; (800a644 <netconn_recv_data+0x188>)
 800a4fc:	4850      	ldr	r0, [pc, #320]	; (800a640 <netconn_recv_data+0x184>)
 800a4fe:	f00d f99d 	bl	801783c <iprintf>
 800a502:	f06f 030f 	mvn.w	r3, #15
 800a506:	e092      	b.n	800a62e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3310      	adds	r3, #16
 800a50c:	4618      	mov	r0, r3
 800a50e:	f00d f80b 	bl	8017528 <sys_mbox_valid>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10e      	bne.n	800a536 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 fad4 	bl	800aac6 <netconn_err>
 800a51e:	4603      	mov	r3, r0
 800a520:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a522:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a52a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a52e:	e07e      	b.n	800a62e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a530:	f06f 030a 	mvn.w	r3, #10
 800a534:	e07b      	b.n	800a62e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7f1b      	ldrb	r3, [r3, #28]
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10f      	bne.n	800a562 <netconn_recv_data+0xa6>
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	7f1b      	ldrb	r3, [r3, #28]
 800a550:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a554:	2b00      	cmp	r3, #0
 800a556:	d104      	bne.n	800a562 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d023      	beq.n	800a5aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	3310      	adds	r3, #16
 800a566:	f107 0218 	add.w	r2, r7, #24
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f00c ffc4 	bl	80174fa <sys_arch_mbox_tryfetch>
 800a572:	4603      	mov	r3, r0
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a578:	d11f      	bne.n	800a5ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 faa3 	bl	800aac6 <netconn_err>
 800a580:	4603      	mov	r3, r0
 800a582:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a584:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a58c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a590:	e04d      	b.n	800a62e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	7f1b      	ldrb	r3, [r3, #28]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a59e:	f06f 030a 	mvn.w	r3, #10
 800a5a2:	e044      	b.n	800a62e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a5a4:	f06f 0306 	mvn.w	r3, #6
 800a5a8:	e041      	b.n	800a62e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3310      	adds	r3, #16
 800a5ae:	f107 0118 	add.w	r1, r7, #24
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00c ff6f 	bl	8017498 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5c2:	2b10      	cmp	r3, #16
 800a5c4:	d117      	bne.n	800a5f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	f107 0217 	add.w	r2, r7, #23
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 faca 	bl	800ab68 <lwip_netconn_is_err_msg>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a5da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5de:	f113 0f0f 	cmn.w	r3, #15
 800a5e2:	d101      	bne.n	800a5e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e022      	b.n	800a62e <netconn_recv_data+0x172>
      }
      return err;
 800a5e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5ec:	e01f      	b.n	800a62e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	891b      	ldrh	r3, [r3, #8]
 800a5f2:	83fb      	strh	r3, [r7, #30]
 800a5f4:	e00d      	b.n	800a612 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d106      	bne.n	800a60a <netconn_recv_data+0x14e>
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <netconn_recv_data+0x17c>)
 800a5fe:	f240 2291 	movw	r2, #657	; 0x291
 800a602:	4911      	ldr	r1, [pc, #68]	; (800a648 <netconn_recv_data+0x18c>)
 800a604:	480e      	ldr	r0, [pc, #56]	; (800a640 <netconn_recv_data+0x184>)
 800a606:	f00d f919 	bl	801783c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	891b      	ldrh	r3, [r3, #8]
 800a610:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <netconn_recv_data+0x16a>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	8bfa      	ldrh	r2, [r7, #30]
 800a620:	2101      	movs	r1, #1
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a626:	69ba      	ldr	r2, [r7, #24]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3720      	adds	r7, #32
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	08018e90 	.word	0x08018e90
 800a63c:	080190a8 	.word	0x080190a8
 800a640:	08018ee8 	.word	0x08018ee8
 800a644:	080190c8 	.word	0x080190c8
 800a648:	080190e4 	.word	0x080190e4

0800a64c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d005      	beq.n	800a66a <netconn_tcp_recvd_msg+0x1e>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a666:	2b10      	cmp	r3, #16
 800a668:	d009      	beq.n	800a67e <netconn_tcp_recvd_msg+0x32>
 800a66a:	4b0c      	ldr	r3, [pc, #48]	; (800a69c <netconn_tcp_recvd_msg+0x50>)
 800a66c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a670:	490b      	ldr	r1, [pc, #44]	; (800a6a0 <netconn_tcp_recvd_msg+0x54>)
 800a672:	480c      	ldr	r0, [pc, #48]	; (800a6a4 <netconn_tcp_recvd_msg+0x58>)
 800a674:	f00d f8e2 	bl	801783c <iprintf>
 800a678:	f06f 030f 	mvn.w	r3, #15
 800a67c:	e00a      	b.n	800a694 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	4806      	ldr	r0, [pc, #24]	; (800a6a8 <netconn_tcp_recvd_msg+0x5c>)
 800a68e:	f7ff fd4d 	bl	800a12c <netconn_apimsg>
 800a692:	4603      	mov	r3, r0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	08018e90 	.word	0x08018e90
 800a6a0:	080190f0 	.word	0x080190f0
 800a6a4:	08018ee8 	.word	0x08018ee8
 800a6a8:	0800bc6d 	.word	0x0800bc6d

0800a6ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b090      	sub	sp, #64	; 0x40
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f00c ff32 	bl	8017528 <sys_mbox_valid>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a6ca:	f06f 030a 	mvn.w	r3, #10
 800a6ce:	e06d      	b.n	800a7ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	7f1b      	ldrb	r3, [r3, #28]
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da07      	bge.n	800a6ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	7f1b      	ldrb	r3, [r3, #28]
 800a6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a6e8:	e039      	b.n	800a75e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	68b9      	ldr	r1, [r7, #8]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff fee3 	bl	800a4bc <netconn_recv_data>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a6fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a704:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a708:	e050      	b.n	800a7ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10e      	bne.n	800a738 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <netconn_recv_data_tcp+0x7a>
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	891b      	ldrh	r3, [r3, #8]
 800a724:	e000      	b.n	800a728 <netconn_recv_data_tcp+0x7c>
 800a726:	2301      	movs	r3, #1
 800a728:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a72a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a72c:	f107 0214 	add.w	r2, r7, #20
 800a730:	4619      	mov	r1, r3
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff ff8a 	bl	800a64c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d134      	bne.n	800a7a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d009      	beq.n	800a75c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	7f1b      	ldrb	r3, [r3, #28]
 800a74c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a756:	f06f 0306 	mvn.w	r3, #6
 800a75a:	e027      	b.n	800a7ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a75c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <netconn_recv_data_tcp+0xc6>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	2200      	movs	r2, #0
 800a76c:	2101      	movs	r1, #1
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10f      	bne.n	800a79a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 f9a3 	bl	800aac6 <netconn_err>
 800a780:	4603      	mov	r3, r0
 800a782:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a786:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <netconn_recv_data_tcp+0xe8>
          return err;
 800a78e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a792:	e00b      	b.n	800a7ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a794:	f06f 030d 	mvn.w	r3, #13
 800a798:	e008      	b.n	800a7ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a79a:	2101      	movs	r1, #1
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 f955 	bl	800aa4c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a7a2:	f06f 030e 	mvn.w	r3, #14
 800a7a6:	e001      	b.n	800a7ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a7a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3740      	adds	r7, #64	; 0x40
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <netconn_recv+0x28>
 800a7c8:	4b32      	ldr	r3, [pc, #200]	; (800a894 <netconn_recv+0xe0>)
 800a7ca:	f240 3263 	movw	r2, #867	; 0x363
 800a7ce:	4932      	ldr	r1, [pc, #200]	; (800a898 <netconn_recv+0xe4>)
 800a7d0:	4832      	ldr	r0, [pc, #200]	; (800a89c <netconn_recv+0xe8>)
 800a7d2:	f00d f833 	bl	801783c <iprintf>
 800a7d6:	f06f 030f 	mvn.w	r3, #15
 800a7da:	e056      	b.n	800a88a <netconn_recv+0xd6>
  *new_buf = NULL;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d109      	bne.n	800a7fc <netconn_recv+0x48>
 800a7e8:	4b2a      	ldr	r3, [pc, #168]	; (800a894 <netconn_recv+0xe0>)
 800a7ea:	f240 3265 	movw	r2, #869	; 0x365
 800a7ee:	492c      	ldr	r1, [pc, #176]	; (800a8a0 <netconn_recv+0xec>)
 800a7f0:	482a      	ldr	r0, [pc, #168]	; (800a89c <netconn_recv+0xe8>)
 800a7f2:	f00d f823 	bl	801783c <iprintf>
 800a7f6:	f06f 030f 	mvn.w	r3, #15
 800a7fa:	e046      	b.n	800a88a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a804:	2b10      	cmp	r3, #16
 800a806:	d13a      	bne.n	800a87e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a80c:	2006      	movs	r0, #6
 800a80e:	f002 fc1f 	bl	800d050 <memp_malloc>
 800a812:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <netconn_recv+0x6c>
      return ERR_MEM;
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295
 800a81e:	e034      	b.n	800a88a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a820:	f107 030c 	add.w	r3, r7, #12
 800a824:	2200      	movs	r2, #0
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ff3f 	bl	800a6ac <netconn_recv_data_tcp>
 800a82e:	4603      	mov	r3, r0
 800a830:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a832:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d006      	beq.n	800a848 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a83a:	6979      	ldr	r1, [r7, #20]
 800a83c:	2006      	movs	r0, #6
 800a83e:	f002 fc59 	bl	800d0f4 <memp_free>
      return err;
 800a842:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a846:	e020      	b.n	800a88a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <netconn_recv+0xa8>
 800a84e:	4b11      	ldr	r3, [pc, #68]	; (800a894 <netconn_recv+0xe0>)
 800a850:	f240 3279 	movw	r2, #889	; 0x379
 800a854:	4913      	ldr	r1, [pc, #76]	; (800a8a4 <netconn_recv+0xf0>)
 800a856:	4811      	ldr	r0, [pc, #68]	; (800a89c <netconn_recv+0xe8>)
 800a858:	f00c fff0 	bl	801783c <iprintf>

    buf->p = p;
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2200      	movs	r2, #0
 800a86c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2200      	movs	r2, #0
 800a872:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	e005      	b.n	800a88a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a87e:	2200      	movs	r2, #0
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff fe1a 	bl	800a4bc <netconn_recv_data>
 800a888:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	08018e90 	.word	0x08018e90
 800a898:	080190a8 	.word	0x080190a8
 800a89c:	08018ee8 	.word	0x08018ee8
 800a8a0:	080190c8 	.word	0x080190c8
 800a8a4:	08019140 	.word	0x08019140

0800a8a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a8be:	78fa      	ldrb	r2, [r7, #3]
 800a8c0:	f107 0110 	add.w	r1, r7, #16
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 f805 	bl	800a8dc <netconn_write_vectors_partly>
 800a8d2:	4603      	mov	r3, r0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b092      	sub	sp, #72	; 0x48
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	80fb      	strh	r3, [r7, #6]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d109      	bne.n	800a90c <netconn_write_vectors_partly+0x30>
 800a8f8:	4b4e      	ldr	r3, [pc, #312]	; (800aa34 <netconn_write_vectors_partly+0x158>)
 800a8fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a8fe:	494e      	ldr	r1, [pc, #312]	; (800aa38 <netconn_write_vectors_partly+0x15c>)
 800a900:	484e      	ldr	r0, [pc, #312]	; (800aa3c <netconn_write_vectors_partly+0x160>)
 800a902:	f00c ff9b 	bl	801783c <iprintf>
 800a906:	f06f 030f 	mvn.w	r3, #15
 800a90a:	e08e      	b.n	800aa2a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a914:	2b10      	cmp	r3, #16
 800a916:	d009      	beq.n	800a92c <netconn_write_vectors_partly+0x50>
 800a918:	4b46      	ldr	r3, [pc, #280]	; (800aa34 <netconn_write_vectors_partly+0x158>)
 800a91a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a91e:	4948      	ldr	r1, [pc, #288]	; (800aa40 <netconn_write_vectors_partly+0x164>)
 800a920:	4846      	ldr	r0, [pc, #280]	; (800aa3c <netconn_write_vectors_partly+0x160>)
 800a922:	f00c ff8b 	bl	801783c <iprintf>
 800a926:	f06f 0305 	mvn.w	r3, #5
 800a92a:	e07e      	b.n	800aa2a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	7f1b      	ldrb	r3, [r3, #28]
 800a930:	f003 0302 	and.w	r3, r3, #2
 800a934:	2b00      	cmp	r3, #0
 800a936:	d104      	bne.n	800a942 <netconn_write_vectors_partly+0x66>
 800a938:	797b      	ldrb	r3, [r7, #5]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <netconn_write_vectors_partly+0x6a>
 800a942:	2301      	movs	r3, #1
 800a944:	e000      	b.n	800a948 <netconn_write_vectors_partly+0x6c>
 800a946:	2300      	movs	r3, #0
 800a948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a94c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <netconn_write_vectors_partly+0x84>
 800a954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a95a:	f06f 0305 	mvn.w	r3, #5
 800a95e:	e064      	b.n	800aa2a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a964:	2300      	movs	r3, #0
 800a966:	643b      	str	r3, [r7, #64]	; 0x40
 800a968:	e015      	b.n	800a996 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	4413      	add	r3, r2
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a976:	4413      	add	r3, r2
 800a978:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	4413      	add	r3, r2
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a986:	429a      	cmp	r2, r3
 800a988:	d202      	bcs.n	800a990 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a98a:	f06f 0305 	mvn.w	r3, #5
 800a98e:	e04c      	b.n	800aa2a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a992:	3301      	adds	r3, #1
 800a994:	643b      	str	r3, [r7, #64]	; 0x40
 800a996:	88fb      	ldrh	r3, [r7, #6]
 800a998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a99a:	429a      	cmp	r2, r3
 800a99c:	dbe5      	blt.n	800a96a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a99e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e040      	b.n	800aa2a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da0a      	bge.n	800a9c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a9b4:	f06f 0305 	mvn.w	r3, #5
 800a9b8:	e037      	b.n	800aa2a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a9ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a9be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a9d4:	797b      	ldrb	r3, [r7, #5]
 800a9d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a9e2:	f107 0314 	add.w	r3, r7, #20
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4816      	ldr	r0, [pc, #88]	; (800aa44 <netconn_write_vectors_partly+0x168>)
 800a9ea:	f7ff fb9f 	bl	800a12c <netconn_apimsg>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a9f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d114      	bne.n	800aa26 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800aa02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa06:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800aa08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d006      	beq.n	800aa26 <netconn_write_vectors_partly+0x14a>
 800aa18:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <netconn_write_vectors_partly+0x158>)
 800aa1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aa1e:	490a      	ldr	r1, [pc, #40]	; (800aa48 <netconn_write_vectors_partly+0x16c>)
 800aa20:	4806      	ldr	r0, [pc, #24]	; (800aa3c <netconn_write_vectors_partly+0x160>)
 800aa22:	f00c ff0b 	bl	801783c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800aa26:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3748      	adds	r7, #72	; 0x48
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	08018e90 	.word	0x08018e90
 800aa38:	08019168 	.word	0x08019168
 800aa3c:	08018ee8 	.word	0x08018ee8
 800aa40:	08019184 	.word	0x08019184
 800aa44:	0800c071 	.word	0x0800c071
 800aa48:	080191a8 	.word	0x080191a8

0800aa4c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08c      	sub	sp, #48	; 0x30
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d109      	bne.n	800aa72 <netconn_close_shutdown+0x26>
 800aa5e:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <netconn_close_shutdown+0x50>)
 800aa60:	f240 4247 	movw	r2, #1095	; 0x447
 800aa64:	490e      	ldr	r1, [pc, #56]	; (800aaa0 <netconn_close_shutdown+0x54>)
 800aa66:	480f      	ldr	r0, [pc, #60]	; (800aaa4 <netconn_close_shutdown+0x58>)
 800aa68:	f00c fee8 	bl	801783c <iprintf>
 800aa6c:	f06f 030f 	mvn.w	r3, #15
 800aa70:	e010      	b.n	800aa94 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800aa7a:	2329      	movs	r3, #41	; 0x29
 800aa7c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800aa7e:	f107 030c 	add.w	r3, r7, #12
 800aa82:	4619      	mov	r1, r3
 800aa84:	4808      	ldr	r0, [pc, #32]	; (800aaa8 <netconn_close_shutdown+0x5c>)
 800aa86:	f7ff fb51 	bl	800a12c <netconn_apimsg>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800aa90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3730      	adds	r7, #48	; 0x30
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	08018e90 	.word	0x08018e90
 800aaa0:	080191cc 	.word	0x080191cc
 800aaa4:	08018ee8 	.word	0x08018ee8
 800aaa8:	0800c189 	.word	0x0800c189

0800aaac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800aab4:	2103      	movs	r1, #3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff ffc8 	bl	800aa4c <netconn_close_shutdown>
 800aabc:	4603      	mov	r3, r0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <netconn_err+0x12>
    return ERR_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	e00d      	b.n	800aaf4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800aad8:	f00c fe30 	bl	801773c <sys_arch_protect>
 800aadc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	7a1b      	ldrb	r3, [r3, #8]
 800aae2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f00c fe34 	bl	8017758 <sys_arch_unprotect>
  return err;
 800aaf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ab06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab0a:	f113 0f0d 	cmn.w	r3, #13
 800ab0e:	d009      	beq.n	800ab24 <lwip_netconn_err_to_msg+0x28>
 800ab10:	f113 0f0d 	cmn.w	r3, #13
 800ab14:	dc0c      	bgt.n	800ab30 <lwip_netconn_err_to_msg+0x34>
 800ab16:	f113 0f0f 	cmn.w	r3, #15
 800ab1a:	d007      	beq.n	800ab2c <lwip_netconn_err_to_msg+0x30>
 800ab1c:	f113 0f0e 	cmn.w	r3, #14
 800ab20:	d002      	beq.n	800ab28 <lwip_netconn_err_to_msg+0x2c>
 800ab22:	e005      	b.n	800ab30 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <lwip_netconn_err_to_msg+0x54>)
 800ab26:	e00e      	b.n	800ab46 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <lwip_netconn_err_to_msg+0x58>)
 800ab2a:	e00c      	b.n	800ab46 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <lwip_netconn_err_to_msg+0x5c>)
 800ab2e:	e00a      	b.n	800ab46 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ab30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d005      	beq.n	800ab44 <lwip_netconn_err_to_msg+0x48>
 800ab38:	4b08      	ldr	r3, [pc, #32]	; (800ab5c <lwip_netconn_err_to_msg+0x60>)
 800ab3a:	227d      	movs	r2, #125	; 0x7d
 800ab3c:	4908      	ldr	r1, [pc, #32]	; (800ab60 <lwip_netconn_err_to_msg+0x64>)
 800ab3e:	4809      	ldr	r0, [pc, #36]	; (800ab64 <lwip_netconn_err_to_msg+0x68>)
 800ab40:	f00c fe7c 	bl	801783c <iprintf>
      return NULL;
 800ab44:	2300      	movs	r3, #0
  }
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	0801c3d8 	.word	0x0801c3d8
 800ab54:	0801c3d9 	.word	0x0801c3d9
 800ab58:	0801c3da 	.word	0x0801c3da
 800ab5c:	080191e8 	.word	0x080191e8
 800ab60:	0801921c 	.word	0x0801921c
 800ab64:	0801922c 	.word	0x0801922c

0800ab68 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d105      	bne.n	800ab84 <lwip_netconn_is_err_msg+0x1c>
 800ab78:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <lwip_netconn_is_err_msg+0x5c>)
 800ab7a:	2285      	movs	r2, #133	; 0x85
 800ab7c:	4912      	ldr	r1, [pc, #72]	; (800abc8 <lwip_netconn_is_err_msg+0x60>)
 800ab7e:	4813      	ldr	r0, [pc, #76]	; (800abcc <lwip_netconn_is_err_msg+0x64>)
 800ab80:	f00c fe5c 	bl	801783c <iprintf>

  if (msg == &netconn_aborted) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a12      	ldr	r2, [pc, #72]	; (800abd0 <lwip_netconn_is_err_msg+0x68>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d104      	bne.n	800ab96 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	22f3      	movs	r2, #243	; 0xf3
 800ab90:	701a      	strb	r2, [r3, #0]
    return 1;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e012      	b.n	800abbc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a0e      	ldr	r2, [pc, #56]	; (800abd4 <lwip_netconn_is_err_msg+0x6c>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d104      	bne.n	800aba8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	22f2      	movs	r2, #242	; 0xf2
 800aba2:	701a      	strb	r2, [r3, #0]
    return 1;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e009      	b.n	800abbc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a0b      	ldr	r2, [pc, #44]	; (800abd8 <lwip_netconn_is_err_msg+0x70>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d104      	bne.n	800abba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	22f1      	movs	r2, #241	; 0xf1
 800abb4:	701a      	strb	r2, [r3, #0]
    return 1;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	080191e8 	.word	0x080191e8
 800abc8:	08019254 	.word	0x08019254
 800abcc:	0801922c 	.word	0x0801922c
 800abd0:	0801c3d8 	.word	0x0801c3d8
 800abd4:	0801c3d9 	.word	0x0801c3d9
 800abd8:	0801c3da 	.word	0x0801c3da

0800abdc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d105      	bne.n	800abfc <recv_udp+0x20>
 800abf0:	4b34      	ldr	r3, [pc, #208]	; (800acc4 <recv_udp+0xe8>)
 800abf2:	22e5      	movs	r2, #229	; 0xe5
 800abf4:	4934      	ldr	r1, [pc, #208]	; (800acc8 <recv_udp+0xec>)
 800abf6:	4835      	ldr	r0, [pc, #212]	; (800accc <recv_udp+0xf0>)
 800abf8:	f00c fe20 	bl	801783c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d105      	bne.n	800ac0e <recv_udp+0x32>
 800ac02:	4b30      	ldr	r3, [pc, #192]	; (800acc4 <recv_udp+0xe8>)
 800ac04:	22e6      	movs	r2, #230	; 0xe6
 800ac06:	4932      	ldr	r1, [pc, #200]	; (800acd0 <recv_udp+0xf4>)
 800ac08:	4830      	ldr	r0, [pc, #192]	; (800accc <recv_udp+0xf0>)
 800ac0a:	f00c fe17 	bl	801783c <iprintf>
  conn = (struct netconn *)arg;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d103      	bne.n	800ac20 <recv_udp+0x44>
    pbuf_free(p);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f003 f90f 	bl	800de3c <pbuf_free>
    return;
 800ac1e:	e04d      	b.n	800acbc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d005      	beq.n	800ac36 <recv_udp+0x5a>
 800ac2a:	4b26      	ldr	r3, [pc, #152]	; (800acc4 <recv_udp+0xe8>)
 800ac2c:	22ee      	movs	r2, #238	; 0xee
 800ac2e:	4929      	ldr	r1, [pc, #164]	; (800acd4 <recv_udp+0xf8>)
 800ac30:	4826      	ldr	r0, [pc, #152]	; (800accc <recv_udp+0xf0>)
 800ac32:	f00c fe03 	bl	801783c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	3310      	adds	r3, #16
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f00c fc74 	bl	8017528 <sys_mbox_valid>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d103      	bne.n	800ac4e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f003 f8f8 	bl	800de3c <pbuf_free>
    return;
 800ac4c:	e036      	b.n	800acbc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ac4e:	2006      	movs	r0, #6
 800ac50:	f002 f9fe 	bl	800d050 <memp_malloc>
 800ac54:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <recv_udp+0x88>
    pbuf_free(p);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f003 f8ed 	bl	800de3c <pbuf_free>
    return;
 800ac62:	e02b      	b.n	800acbc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <recv_udp+0xa0>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	e000      	b.n	800ac7e <recv_udp+0xa2>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ac86:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	891b      	ldrh	r3, [r3, #8]
 800ac8c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	3310      	adds	r3, #16
 800ac92:	69b9      	ldr	r1, [r7, #24]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f00c fbe5 	bl	8017464 <sys_mbox_trypost>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800aca0:	69b8      	ldr	r0, [r7, #24]
 800aca2:	f001 fafd 	bl	800c2a0 <netbuf_delete>
    return;
 800aca6:	e009      	b.n	800acbc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <recv_udp+0xe0>
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	8afa      	ldrh	r2, [r7, #22]
 800acb6:	2100      	movs	r1, #0
 800acb8:	69f8      	ldr	r0, [r7, #28]
 800acba:	4798      	blx	r3
  }
}
 800acbc:	3720      	adds	r7, #32
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	080191e8 	.word	0x080191e8
 800acc8:	08019260 	.word	0x08019260
 800accc:	0801922c 	.word	0x0801922c
 800acd0:	08019284 	.word	0x08019284
 800acd4:	080192a4 	.word	0x080192a4

0800acd8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d106      	bne.n	800acfa <recv_tcp+0x22>
 800acec:	4b36      	ldr	r3, [pc, #216]	; (800adc8 <recv_tcp+0xf0>)
 800acee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800acf2:	4936      	ldr	r1, [pc, #216]	; (800adcc <recv_tcp+0xf4>)
 800acf4:	4836      	ldr	r0, [pc, #216]	; (800add0 <recv_tcp+0xf8>)
 800acf6:	f00c fda1 	bl	801783c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <recv_tcp+0x36>
 800ad00:	4b31      	ldr	r3, [pc, #196]	; (800adc8 <recv_tcp+0xf0>)
 800ad02:	f240 122d 	movw	r2, #301	; 0x12d
 800ad06:	4933      	ldr	r1, [pc, #204]	; (800add4 <recv_tcp+0xfc>)
 800ad08:	4831      	ldr	r0, [pc, #196]	; (800add0 <recv_tcp+0xf8>)
 800ad0a:	f00c fd97 	bl	801783c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ad0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d006      	beq.n	800ad24 <recv_tcp+0x4c>
 800ad16:	4b2c      	ldr	r3, [pc, #176]	; (800adc8 <recv_tcp+0xf0>)
 800ad18:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ad1c:	492e      	ldr	r1, [pc, #184]	; (800add8 <recv_tcp+0x100>)
 800ad1e:	482c      	ldr	r0, [pc, #176]	; (800add0 <recv_tcp+0xf8>)
 800ad20:	f00c fd8c 	bl	801783c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <recv_tcp+0x5c>
    return ERR_VAL;
 800ad2e:	f06f 0305 	mvn.w	r3, #5
 800ad32:	e045      	b.n	800adc0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d006      	beq.n	800ad4c <recv_tcp+0x74>
 800ad3e:	4b22      	ldr	r3, [pc, #136]	; (800adc8 <recv_tcp+0xf0>)
 800ad40:	f240 1235 	movw	r2, #309	; 0x135
 800ad44:	4925      	ldr	r1, [pc, #148]	; (800addc <recv_tcp+0x104>)
 800ad46:	4822      	ldr	r0, [pc, #136]	; (800add0 <recv_tcp+0xf8>)
 800ad48:	f00c fd78 	bl	801783c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	3310      	adds	r3, #16
 800ad50:	4618      	mov	r0, r3
 800ad52:	f00c fbe9 	bl	8017528 <sys_mbox_valid>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10d      	bne.n	800ad78 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d008      	beq.n	800ad74 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	891b      	ldrh	r3, [r3, #8]
 800ad66:	4619      	mov	r1, r3
 800ad68:	68b8      	ldr	r0, [r7, #8]
 800ad6a:	f004 f81f 	bl	800edac <tcp_recved>
      pbuf_free(p);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f003 f864 	bl	800de3c <pbuf_free>
    }
    return ERR_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	e023      	b.n	800adc0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <recv_tcp+0xb2>
    msg = p;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	891b      	ldrh	r3, [r3, #8]
 800ad86:	83fb      	strh	r3, [r7, #30]
 800ad88:	e003      	b.n	800ad92 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ad8a:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <recv_tcp+0x108>)
 800ad8c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	3310      	adds	r3, #16
 800ad96:	69b9      	ldr	r1, [r7, #24]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f00c fb63 	bl	8017464 <sys_mbox_trypost>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ada4:	f04f 33ff 	mov.w	r3, #4294967295
 800ada8:	e00a      	b.n	800adc0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d005      	beq.n	800adbe <recv_tcp+0xe6>
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	8bfa      	ldrh	r2, [r7, #30]
 800adb8:	2100      	movs	r1, #0
 800adba:	6978      	ldr	r0, [r7, #20]
 800adbc:	4798      	blx	r3
  }

  return ERR_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	080191e8 	.word	0x080191e8
 800adcc:	080192c4 	.word	0x080192c4
 800add0:	0801922c 	.word	0x0801922c
 800add4:	080192e8 	.word	0x080192e8
 800add8:	08019308 	.word	0x08019308
 800addc:	08019320 	.word	0x08019320
 800ade0:	0801c3da 	.word	0x0801c3da

0800ade4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <poll_tcp+0x22>
 800adf8:	4b29      	ldr	r3, [pc, #164]	; (800aea0 <poll_tcp+0xbc>)
 800adfa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800adfe:	4929      	ldr	r1, [pc, #164]	; (800aea4 <poll_tcp+0xc0>)
 800ae00:	4829      	ldr	r0, [pc, #164]	; (800aea8 <poll_tcp+0xc4>)
 800ae02:	f00c fd1b 	bl	801783c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	785b      	ldrb	r3, [r3, #1]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d104      	bne.n	800ae18 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ae0e:	2101      	movs	r1, #1
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 ff61 	bl	800bcd8 <lwip_netconn_do_writemore>
 800ae16:	e016      	b.n	800ae46 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d112      	bne.n	800ae46 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00a      	beq.n	800ae3e <poll_tcp+0x5a>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	7a5b      	ldrb	r3, [r3, #9]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	7a5a      	ldrb	r2, [r3, #9]
 800ae38:	3a01      	subs	r2, #1
 800ae3a:	b2d2      	uxtb	r2, r2
 800ae3c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ae3e:	2101      	movs	r1, #1
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 fbf7 	bl	800b634 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	7f1b      	ldrb	r3, [r3, #28]
 800ae4a:	f003 0310 	and.w	r3, r3, #16
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d021      	beq.n	800ae96 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d01d      	beq.n	800ae96 <poll_tcp+0xb2>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae62:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ae66:	d316      	bcc.n	800ae96 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae70:	2b04      	cmp	r3, #4
 800ae72:	d810      	bhi.n	800ae96 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	7f1b      	ldrb	r3, [r3, #28]
 800ae78:	f023 0310 	bic.w	r3, r3, #16
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d005      	beq.n	800ae96 <poll_tcp+0xb2>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2102      	movs	r1, #2
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	080191e8 	.word	0x080191e8
 800aea4:	08019340 	.word	0x08019340
 800aea8:	0801922c 	.word	0x0801922c

0800aeac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <sent_tcp+0x26>
 800aec4:	4b20      	ldr	r3, [pc, #128]	; (800af48 <sent_tcp+0x9c>)
 800aec6:	f240 1293 	movw	r2, #403	; 0x193
 800aeca:	4920      	ldr	r1, [pc, #128]	; (800af4c <sent_tcp+0xa0>)
 800aecc:	4820      	ldr	r0, [pc, #128]	; (800af50 <sent_tcp+0xa4>)
 800aece:	f00c fcb5 	bl	801783c <iprintf>

  if (conn) {
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d032      	beq.n	800af3e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d104      	bne.n	800aeea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aee0:	2101      	movs	r1, #1
 800aee2:	6978      	ldr	r0, [r7, #20]
 800aee4:	f000 fef8 	bl	800bcd8 <lwip_netconn_do_writemore>
 800aee8:	e007      	b.n	800aefa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	785b      	ldrb	r3, [r3, #1]
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d103      	bne.n	800aefa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aef2:	2101      	movs	r1, #1
 800aef4:	6978      	ldr	r0, [r7, #20]
 800aef6:	f000 fb9d 	bl	800b634 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01d      	beq.n	800af3e <sent_tcp+0x92>
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af0a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800af0e:	d316      	bcc.n	800af3e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d810      	bhi.n	800af3e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	7f1b      	ldrb	r3, [r3, #28]
 800af20:	f023 0310 	bic.w	r3, r3, #16
 800af24:	b2da      	uxtb	r2, r3
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d005      	beq.n	800af3e <sent_tcp+0x92>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	88fa      	ldrh	r2, [r7, #6]
 800af38:	2102      	movs	r1, #2
 800af3a:	6978      	ldr	r0, [r7, #20]
 800af3c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	080191e8 	.word	0x080191e8
 800af4c:	08019340 	.word	0x08019340
 800af50:	0801922c 	.word	0x0801922c

0800af54 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <err_tcp+0x24>
 800af6a:	4b5f      	ldr	r3, [pc, #380]	; (800b0e8 <err_tcp+0x194>)
 800af6c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800af70:	495e      	ldr	r1, [pc, #376]	; (800b0ec <err_tcp+0x198>)
 800af72:	485f      	ldr	r0, [pc, #380]	; (800b0f0 <err_tcp+0x19c>)
 800af74:	f00c fc62 	bl	801783c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800af78:	f00c fbe0 	bl	801773c <sys_arch_protect>
 800af7c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	2200      	movs	r2, #0
 800af82:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	78fa      	ldrb	r2, [r7, #3]
 800af88:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	7f1b      	ldrb	r3, [r3, #28]
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	b2da      	uxtb	r2, r3
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	785b      	ldrb	r3, [r3, #1]
 800af9c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	2200      	movs	r2, #0
 800afa2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800afa4:	69b8      	ldr	r0, [r7, #24]
 800afa6:	f00c fbd7 	bl	8017758 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <err_tcp+0x6a>
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	2200      	movs	r2, #0
 800afb8:	2104      	movs	r1, #4
 800afba:	69f8      	ldr	r0, [r7, #28]
 800afbc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <err_tcp+0x7e>
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	69f8      	ldr	r0, [r7, #28]
 800afd0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <err_tcp+0x92>
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afde:	2200      	movs	r2, #0
 800afe0:	2102      	movs	r1, #2
 800afe2:	69f8      	ldr	r0, [r7, #28]
 800afe4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800afe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fd86 	bl	800aafc <lwip_netconn_err_to_msg>
 800aff0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	3310      	adds	r3, #16
 800aff6:	4618      	mov	r0, r3
 800aff8:	f00c fa96 	bl	8017528 <sys_mbox_valid>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d005      	beq.n	800b00e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	3310      	adds	r3, #16
 800b006:	6939      	ldr	r1, [r7, #16]
 800b008:	4618      	mov	r0, r3
 800b00a:	f00c fa2b 	bl	8017464 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	3314      	adds	r3, #20
 800b012:	4618      	mov	r0, r3
 800b014:	f00c fa88 	bl	8017528 <sys_mbox_valid>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d005      	beq.n	800b02a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	3314      	adds	r3, #20
 800b022:	6939      	ldr	r1, [r7, #16]
 800b024:	4618      	mov	r0, r3
 800b026:	f00c fa1d 	bl	8017464 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d005      	beq.n	800b03c <err_tcp+0xe8>
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	2b04      	cmp	r3, #4
 800b034:	d002      	beq.n	800b03c <err_tcp+0xe8>
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d143      	bne.n	800b0c4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	7f1b      	ldrb	r3, [r3, #28]
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	7f1b      	ldrb	r3, [r3, #28]
 800b054:	f023 0304 	bic.w	r3, r3, #4
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d13b      	bne.n	800b0dc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <err_tcp+0x126>
 800b06c:	4b1e      	ldr	r3, [pc, #120]	; (800b0e8 <err_tcp+0x194>)
 800b06e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b072:	4920      	ldr	r1, [pc, #128]	; (800b0f4 <err_tcp+0x1a0>)
 800b074:	481e      	ldr	r0, [pc, #120]	; (800b0f0 <err_tcp+0x19c>)
 800b076:	f00c fbe1 	bl	801783c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	2b04      	cmp	r3, #4
 800b07e:	d104      	bne.n	800b08a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	2200      	movs	r2, #0
 800b086:	711a      	strb	r2, [r3, #4]
 800b088:	e003      	b.n	800b092 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	78fa      	ldrb	r2, [r7, #3]
 800b090:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	330c      	adds	r3, #12
 800b09a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f00c fad1 	bl	8017644 <sys_sem_valid>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d106      	bne.n	800b0b6 <err_tcp+0x162>
 800b0a8:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <err_tcp+0x194>)
 800b0aa:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b0ae:	4912      	ldr	r1, [pc, #72]	; (800b0f8 <err_tcp+0x1a4>)
 800b0b0:	480f      	ldr	r0, [pc, #60]	; (800b0f0 <err_tcp+0x19c>)
 800b0b2:	f00c fbc3 	bl	801783c <iprintf>
      conn->current_msg = NULL;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b0bc:	68b8      	ldr	r0, [r7, #8]
 800b0be:	f00c faa7 	bl	8017610 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b0c2:	e00b      	b.n	800b0dc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d008      	beq.n	800b0de <err_tcp+0x18a>
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <err_tcp+0x194>)
 800b0ce:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b0d2:	490a      	ldr	r1, [pc, #40]	; (800b0fc <err_tcp+0x1a8>)
 800b0d4:	4806      	ldr	r0, [pc, #24]	; (800b0f0 <err_tcp+0x19c>)
 800b0d6:	f00c fbb1 	bl	801783c <iprintf>
  }
}
 800b0da:	e000      	b.n	800b0de <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b0dc:	bf00      	nop
}
 800b0de:	bf00      	nop
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	080191e8 	.word	0x080191e8
 800b0ec:	08019340 	.word	0x08019340
 800b0f0:	0801922c 	.word	0x0801922c
 800b0f4:	08019350 	.word	0x08019350
 800b0f8:	0801936c 	.word	0x0801936c
 800b0fc:	08019388 	.word	0x08019388

0800b100 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f004 fd11 	bl	800fb38 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b116:	490a      	ldr	r1, [pc, #40]	; (800b140 <setup_tcp+0x40>)
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f004 fd1f 	bl	800fb5c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b11e:	4909      	ldr	r1, [pc, #36]	; (800b144 <setup_tcp+0x44>)
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f004 fd3d 	bl	800fba0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b126:	2202      	movs	r2, #2
 800b128:	4907      	ldr	r1, [pc, #28]	; (800b148 <setup_tcp+0x48>)
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f004 fd94 	bl	800fc58 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b130:	4906      	ldr	r1, [pc, #24]	; (800b14c <setup_tcp+0x4c>)
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f004 fd56 	bl	800fbe4 <tcp_err>
}
 800b138:	bf00      	nop
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	0800acd9 	.word	0x0800acd9
 800b144:	0800aead 	.word	0x0800aead
 800b148:	0800ade5 	.word	0x0800ade5
 800b14c:	0800af55 	.word	0x0800af55

0800b150 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b089      	sub	sp, #36	; 0x24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	4613      	mov	r3, r2
 800b15c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <accept_function+0x1e>
    return ERR_VAL;
 800b168:	f06f 0305 	mvn.w	r3, #5
 800b16c:	e0a1      	b.n	800b2b2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3314      	adds	r3, #20
 800b172:	4618      	mov	r0, r3
 800b174:	f00c f9d8 	bl	8017528 <sys_mbox_valid>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b17e:	f06f 0305 	mvn.w	r3, #5
 800b182:	e096      	b.n	800b2b2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d11b      	bne.n	800b1c2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	f103 0414 	add.w	r4, r3, #20
 800b190:	f06f 000c 	mvn.w	r0, #12
 800b194:	f7ff fcb2 	bl	800aafc <lwip_netconn_err_to_msg>
 800b198:	4603      	mov	r3, r0
 800b19a:	4619      	mov	r1, r3
 800b19c:	4620      	mov	r0, r4
 800b19e:	f00c f961 	bl	8017464 <sys_mbox_trypost>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d109      	bne.n	800b1bc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <accept_function+0x6c>
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	69f8      	ldr	r0, [r7, #28]
 800b1ba:	4798      	blx	r3
    }
    return ERR_VAL;
 800b1bc:	f06f 0305 	mvn.w	r3, #5
 800b1c0:	e077      	b.n	800b2b2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d006      	beq.n	800b1d8 <accept_function+0x88>
 800b1ca:	4b3c      	ldr	r3, [pc, #240]	; (800b2bc <accept_function+0x16c>)
 800b1cc:	f240 222a 	movw	r2, #554	; 0x22a
 800b1d0:	493b      	ldr	r1, [pc, #236]	; (800b2c0 <accept_function+0x170>)
 800b1d2:	483c      	ldr	r0, [pc, #240]	; (800b2c4 <accept_function+0x174>)
 800b1d4:	f00c fb32 	bl	801783c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	781a      	ldrb	r2, [r3, #0]
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f000 f8f0 	bl	800b3c8 <netconn_alloc>
 800b1e8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d11b      	bne.n	800b228 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f103 0414 	add.w	r4, r3, #20
 800b1f6:	f06f 000c 	mvn.w	r0, #12
 800b1fa:	f7ff fc7f 	bl	800aafc <lwip_netconn_err_to_msg>
 800b1fe:	4603      	mov	r3, r0
 800b200:	4619      	mov	r1, r3
 800b202:	4620      	mov	r0, r4
 800b204:	f00c f92e 	bl	8017464 <sys_mbox_trypost>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d109      	bne.n	800b222 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b00      	cmp	r3, #0
 800b214:	d005      	beq.n	800b222 <accept_function+0xd2>
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2200      	movs	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	69f8      	ldr	r0, [r7, #28]
 800b220:	4798      	blx	r3
    }
    return ERR_MEM;
 800b222:	f04f 33ff 	mov.w	r3, #4294967295
 800b226:	e044      	b.n	800b2b2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b22e:	69b8      	ldr	r0, [r7, #24]
 800b230:	f7ff ff66 	bl	800b100 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	3314      	adds	r3, #20
 800b238:	69b9      	ldr	r1, [r7, #24]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f00c f912 	bl	8017464 <sys_mbox_trypost>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d02a      	beq.n	800b29c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b24c:	2100      	movs	r1, #0
 800b24e:	6978      	ldr	r0, [r7, #20]
 800b250:	f004 fc72 	bl	800fb38 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b254:	2100      	movs	r1, #0
 800b256:	6978      	ldr	r0, [r7, #20]
 800b258:	f004 fc80 	bl	800fb5c <tcp_recv>
    tcp_sent(pcb, NULL);
 800b25c:	2100      	movs	r1, #0
 800b25e:	6978      	ldr	r0, [r7, #20]
 800b260:	f004 fc9e 	bl	800fba0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b264:	2200      	movs	r2, #0
 800b266:	2100      	movs	r1, #0
 800b268:	6978      	ldr	r0, [r7, #20]
 800b26a:	f004 fcf5 	bl	800fc58 <tcp_poll>
    tcp_err(pcb, NULL);
 800b26e:	2100      	movs	r1, #0
 800b270:	6978      	ldr	r0, [r7, #20]
 800b272:	f004 fcb7 	bl	800fbe4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	2200      	movs	r2, #0
 800b27a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	3310      	adds	r3, #16
 800b280:	4618      	mov	r0, r3
 800b282:	f00c f8dd 	bl	8017440 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	3310      	adds	r3, #16
 800b28a:	4618      	mov	r0, r3
 800b28c:	f00c f95d 	bl	801754a <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b290:	69b8      	ldr	r0, [r7, #24]
 800b292:	f000 f907 	bl	800b4a4 <netconn_free>
    return ERR_MEM;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295
 800b29a:	e00a      	b.n	800b2b2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d005      	beq.n	800b2b0 <accept_function+0x160>
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	69f8      	ldr	r0, [r7, #28]
 800b2ae:	4798      	blx	r3
  }

  return ERR_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3724      	adds	r7, #36	; 0x24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd90      	pop	{r4, r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	080191e8 	.word	0x080191e8
 800b2c0:	080193a4 	.word	0x080193a4
 800b2c4:	0801922c 	.word	0x0801922c

0800b2c8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d006      	beq.n	800b2ec <pcb_new+0x24>
 800b2de:	4b2b      	ldr	r3, [pc, #172]	; (800b38c <pcb_new+0xc4>)
 800b2e0:	f240 2265 	movw	r2, #613	; 0x265
 800b2e4:	492a      	ldr	r1, [pc, #168]	; (800b390 <pcb_new+0xc8>)
 800b2e6:	482b      	ldr	r0, [pc, #172]	; (800b394 <pcb_new+0xcc>)
 800b2e8:	f00c faa8 	bl	801783c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2f6:	2b10      	cmp	r3, #16
 800b2f8:	d022      	beq.n	800b340 <pcb_new+0x78>
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	d133      	bne.n	800b366 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681c      	ldr	r4, [r3, #0]
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	4618      	mov	r0, r3
 800b306:	f009 fcf2 	bl	8014cee <udp_new_ip_type>
 800b30a:	4603      	mov	r3, r0
 800b30c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d02a      	beq.n	800b36e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b22      	cmp	r3, #34	; 0x22
 800b320:	d104      	bne.n	800b32c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6858      	ldr	r0, [r3, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	4917      	ldr	r1, [pc, #92]	; (800b398 <pcb_new+0xd0>)
 800b33a:	f009 fc5f 	bl	8014bfc <udp_recv>
      }
      break;
 800b33e:	e016      	b.n	800b36e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681c      	ldr	r4, [r3, #0]
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	4618      	mov	r0, r3
 800b348:	f004 fbe8 	bl	800fb1c <tcp_new_ip_type>
 800b34c:	4603      	mov	r3, r0
 800b34e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00b      	beq.n	800b372 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff fece 	bl	800b100 <setup_tcp>
      }
      break;
 800b364:	e005      	b.n	800b372 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	22fa      	movs	r2, #250	; 0xfa
 800b36a:	711a      	strb	r2, [r3, #4]
      return;
 800b36c:	e00a      	b.n	800b384 <pcb_new+0xbc>
      break;
 800b36e:	bf00      	nop
 800b370:	e000      	b.n	800b374 <pcb_new+0xac>
      break;
 800b372:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	22ff      	movs	r2, #255	; 0xff
 800b382:	711a      	strb	r2, [r3, #4]
  }
}
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	bd90      	pop	{r4, r7, pc}
 800b38a:	bf00      	nop
 800b38c:	080191e8 	.word	0x080191e8
 800b390:	080193cc 	.word	0x080193cc
 800b394:	0801922c 	.word	0x0801922c
 800b398:	0800abdd 	.word	0x0800abdd

0800b39c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f7ff ff85 	bl	800b2c8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b3be:	bf00      	nop
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
	...

0800b3c8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b3d8:	2007      	movs	r0, #7
 800b3da:	f001 fe39 	bl	800d050 <memp_malloc>
 800b3de:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <netconn_alloc+0x22>
    return NULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e052      	b.n	800b490 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	79fa      	ldrb	r2, [r7, #7]
 800b3f4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b402:	2b10      	cmp	r3, #16
 800b404:	d004      	beq.n	800b410 <netconn_alloc+0x48>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d105      	bne.n	800b416 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b40a:	2306      	movs	r3, #6
 800b40c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b40e:	e00a      	b.n	800b426 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b410:	2306      	movs	r3, #6
 800b412:	617b      	str	r3, [r7, #20]
      break;
 800b414:	e007      	b.n	800b426 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b416:	4b20      	ldr	r3, [pc, #128]	; (800b498 <netconn_alloc+0xd0>)
 800b418:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b41c:	491f      	ldr	r1, [pc, #124]	; (800b49c <netconn_alloc+0xd4>)
 800b41e:	4820      	ldr	r0, [pc, #128]	; (800b4a0 <netconn_alloc+0xd8>)
 800b420:	f00c fa0c 	bl	801783c <iprintf>
      goto free_and_return;
 800b424:	e02f      	b.n	800b486 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3310      	adds	r3, #16
 800b42a:	6979      	ldr	r1, [r7, #20]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f00b ffed 	bl	801740c <sys_mbox_new>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d125      	bne.n	800b484 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	330c      	adds	r3, #12
 800b43c:	2100      	movs	r1, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f00c f890 	bl	8017564 <sys_sem_new>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3310      	adds	r3, #16
 800b44e:	4618      	mov	r0, r3
 800b450:	f00b fff6 	bl	8017440 <sys_mbox_free>
    goto free_and_return;
 800b454:	e017      	b.n	800b486 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3314      	adds	r3, #20
 800b45a:	4618      	mov	r0, r3
 800b45c:	f00c f875 	bl	801754a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f04f 32ff 	mov.w	r2, #4294967295
 800b46c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	7cfa      	ldrb	r2, [r7, #19]
 800b47e:	771a      	strb	r2, [r3, #28]
  return conn;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	e005      	b.n	800b490 <netconn_alloc+0xc8>
    goto free_and_return;
 800b484:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	2007      	movs	r0, #7
 800b48a:	f001 fe33 	bl	800d0f4 <memp_free>
  return NULL;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	080191e8 	.word	0x080191e8
 800b49c:	080193ec 	.word	0x080193ec
 800b4a0:	0801922c 	.word	0x0801922c

0800b4a4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d006      	beq.n	800b4c2 <netconn_free+0x1e>
 800b4b4:	4b1b      	ldr	r3, [pc, #108]	; (800b524 <netconn_free+0x80>)
 800b4b6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b4ba:	491b      	ldr	r1, [pc, #108]	; (800b528 <netconn_free+0x84>)
 800b4bc:	481b      	ldr	r0, [pc, #108]	; (800b52c <netconn_free+0x88>)
 800b4be:	f00c f9bd 	bl	801783c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	3310      	adds	r3, #16
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f00c f82e 	bl	8017528 <sys_mbox_valid>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d006      	beq.n	800b4e0 <netconn_free+0x3c>
 800b4d2:	4b14      	ldr	r3, [pc, #80]	; (800b524 <netconn_free+0x80>)
 800b4d4:	f240 3223 	movw	r2, #803	; 0x323
 800b4d8:	4915      	ldr	r1, [pc, #84]	; (800b530 <netconn_free+0x8c>)
 800b4da:	4814      	ldr	r0, [pc, #80]	; (800b52c <netconn_free+0x88>)
 800b4dc:	f00c f9ae 	bl	801783c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3314      	adds	r3, #20
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f00c f81f 	bl	8017528 <sys_mbox_valid>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <netconn_free+0x5a>
 800b4f0:	4b0c      	ldr	r3, [pc, #48]	; (800b524 <netconn_free+0x80>)
 800b4f2:	f240 3226 	movw	r2, #806	; 0x326
 800b4f6:	490f      	ldr	r1, [pc, #60]	; (800b534 <netconn_free+0x90>)
 800b4f8:	480c      	ldr	r0, [pc, #48]	; (800b52c <netconn_free+0x88>)
 800b4fa:	f00c f99f 	bl	801783c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	330c      	adds	r3, #12
 800b502:	4618      	mov	r0, r3
 800b504:	f00c f891 	bl	801762a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	330c      	adds	r3, #12
 800b50c:	4618      	mov	r0, r3
 800b50e:	f00c f8aa 	bl	8017666 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	2007      	movs	r0, #7
 800b516:	f001 fded 	bl	800d0f4 <memp_free>
}
 800b51a:	bf00      	nop
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	080191e8 	.word	0x080191e8
 800b528:	08019414 	.word	0x08019414
 800b52c:	0801922c 	.word	0x0801922c
 800b530:	08019444 	.word	0x08019444
 800b534:	08019480 	.word	0x08019480

0800b538 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3310      	adds	r3, #16
 800b544:	4618      	mov	r0, r3
 800b546:	f00b ffef 	bl	8017528 <sys_mbox_valid>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d02f      	beq.n	800b5b0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b550:	e018      	b.n	800b584 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b55a:	2b10      	cmp	r3, #16
 800b55c:	d10e      	bne.n	800b57c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	f107 020f 	add.w	r2, r7, #15
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff fafe 	bl	800ab68 <lwip_netconn_is_err_msg>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d108      	bne.n	800b584 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	4618      	mov	r0, r3
 800b576:	f002 fc61 	bl	800de3c <pbuf_free>
 800b57a:	e003      	b.n	800b584 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 fe8e 	bl	800c2a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3310      	adds	r3, #16
 800b588:	f107 0210 	add.w	r2, r7, #16
 800b58c:	4611      	mov	r1, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f00b ffb3 	bl	80174fa <sys_arch_mbox_tryfetch>
 800b594:	4603      	mov	r3, r0
 800b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59a:	d1da      	bne.n	800b552 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3310      	adds	r3, #16
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f00b ff4d 	bl	8017440 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3310      	adds	r3, #16
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f00b ffcd 	bl	801754a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3314      	adds	r3, #20
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f00b ffb7 	bl	8017528 <sys_mbox_valid>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d034      	beq.n	800b62a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b5c0:	e01d      	b.n	800b5fe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f107 020e 	add.w	r2, r7, #14
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff facc 	bl	800ab68 <lwip_netconn_is_err_msg>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d113      	bne.n	800b5fe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b5da:	6978      	ldr	r0, [r7, #20]
 800b5dc:	f7ff ffac 	bl	800b538 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d007      	beq.n	800b5f8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f003 fa15 	bl	800ea1c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b5f8:	6978      	ldr	r0, [r7, #20]
 800b5fa:	f7ff ff53 	bl	800b4a4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3314      	adds	r3, #20
 800b602:	f107 0210 	add.w	r2, r7, #16
 800b606:	4611      	mov	r1, r2
 800b608:	4618      	mov	r0, r3
 800b60a:	f00b ff76 	bl	80174fa <sys_arch_mbox_tryfetch>
 800b60e:	4603      	mov	r3, r0
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b614:	d1d5      	bne.n	800b5c2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3314      	adds	r3, #20
 800b61a:	4618      	mov	r0, r3
 800b61c:	f00b ff10 	bl	8017440 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3314      	adds	r3, #20
 800b624:	4618      	mov	r0, r3
 800b626:	f00b ff90 	bl	801754a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b62a:	bf00      	nop
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d106      	bne.n	800b658 <lwip_netconn_do_close_internal+0x24>
 800b64a:	4ba1      	ldr	r3, [pc, #644]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b64c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b650:	49a0      	ldr	r1, [pc, #640]	; (800b8d4 <lwip_netconn_do_close_internal+0x2a0>)
 800b652:	48a1      	ldr	r0, [pc, #644]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b654:	f00c f8f2 	bl	801783c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b660:	2b10      	cmp	r3, #16
 800b662:	d006      	beq.n	800b672 <lwip_netconn_do_close_internal+0x3e>
 800b664:	4b9a      	ldr	r3, [pc, #616]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b666:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b66a:	499c      	ldr	r1, [pc, #624]	; (800b8dc <lwip_netconn_do_close_internal+0x2a8>)
 800b66c:	489a      	ldr	r0, [pc, #616]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b66e:	f00c f8e5 	bl	801783c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	785b      	ldrb	r3, [r3, #1]
 800b676:	2b04      	cmp	r3, #4
 800b678:	d006      	beq.n	800b688 <lwip_netconn_do_close_internal+0x54>
 800b67a:	4b95      	ldr	r3, [pc, #596]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b67c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b680:	4997      	ldr	r1, [pc, #604]	; (800b8e0 <lwip_netconn_do_close_internal+0x2ac>)
 800b682:	4895      	ldr	r0, [pc, #596]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b684:	f00c f8da 	bl	801783c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d106      	bne.n	800b69e <lwip_netconn_do_close_internal+0x6a>
 800b690:	4b8f      	ldr	r3, [pc, #572]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b692:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b696:	4993      	ldr	r1, [pc, #588]	; (800b8e4 <lwip_netconn_do_close_internal+0x2b0>)
 800b698:	488f      	ldr	r0, [pc, #572]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b69a:	f00c f8cf 	bl	801783c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <lwip_netconn_do_close_internal+0x80>
 800b6a6:	4b8a      	ldr	r3, [pc, #552]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b6a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b6ac:	498e      	ldr	r1, [pc, #568]	; (800b8e8 <lwip_netconn_do_close_internal+0x2b4>)
 800b6ae:	488a      	ldr	r0, [pc, #552]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b6b0:	f00c f8c4 	bl	801783c <iprintf>

  tpcb = conn->pcb.tcp;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	7a1b      	ldrb	r3, [r3, #8]
 800b6c0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	f003 0302 	and.w	r3, r3, #2
 800b6d0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d102      	bne.n	800b6de <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	75bb      	strb	r3, [r7, #22]
 800b6dc:	e01f      	b.n	800b71e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00e      	beq.n	800b702 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b6e8:	2b05      	cmp	r3, #5
 800b6ea:	d007      	beq.n	800b6fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b6f0:	2b06      	cmp	r3, #6
 800b6f2:	d003      	beq.n	800b6fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b6f8:	2b08      	cmp	r3, #8
 800b6fa:	d102      	bne.n	800b702 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	75bb      	strb	r3, [r7, #22]
 800b700:	e00d      	b.n	800b71e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b702:	7b7b      	ldrb	r3, [r7, #13]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d008      	beq.n	800b71a <lwip_netconn_do_close_internal+0xe6>
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	8b5b      	ldrh	r3, [r3, #26]
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b714:	2301      	movs	r3, #1
 800b716:	75bb      	strb	r3, [r7, #22]
 800b718:	e001      	b.n	800b71e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b71e:	7dbb      	ldrb	r3, [r7, #22]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b724:	2100      	movs	r1, #0
 800b726:	6938      	ldr	r0, [r7, #16]
 800b728:	f004 fa06 	bl	800fb38 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	7d1b      	ldrb	r3, [r3, #20]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d104      	bne.n	800b73e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b734:	2100      	movs	r1, #0
 800b736:	6938      	ldr	r0, [r7, #16]
 800b738:	f004 fa76 	bl	800fc28 <tcp_accept>
 800b73c:	e01d      	b.n	800b77a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b744:	2100      	movs	r1, #0
 800b746:	6938      	ldr	r0, [r7, #16]
 800b748:	f004 fa08 	bl	800fb5c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b74c:	2100      	movs	r1, #0
 800b74e:	6938      	ldr	r0, [r7, #16]
 800b750:	f004 fa6a 	bl	800fc28 <tcp_accept>
    }
    if (shut_tx) {
 800b754:	7b7b      	ldrb	r3, [r7, #13]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b75a:	2100      	movs	r1, #0
 800b75c:	6938      	ldr	r0, [r7, #16]
 800b75e:	f004 fa1f 	bl	800fba0 <tcp_sent>
    }
    if (shut_close) {
 800b762:	7dbb      	ldrb	r3, [r7, #22]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d008      	beq.n	800b77a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b768:	2200      	movs	r2, #0
 800b76a:	2100      	movs	r1, #0
 800b76c:	6938      	ldr	r0, [r7, #16]
 800b76e:	f004 fa73 	bl	800fc58 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b772:	2100      	movs	r1, #0
 800b774:	6938      	ldr	r0, [r7, #16]
 800b776:	f004 fa35 	bl	800fbe4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b77a:	7dbb      	ldrb	r3, [r7, #22]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d005      	beq.n	800b78c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b780:	6938      	ldr	r0, [r7, #16]
 800b782:	f003 f805 	bl	800e790 <tcp_close>
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]
 800b78a:	e007      	b.n	800b79c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
 800b78e:	7b7a      	ldrb	r2, [r7, #13]
 800b790:	4619      	mov	r1, r3
 800b792:	6938      	ldr	r0, [r7, #16]
 800b794:	f003 f828 	bl	800e7e8 <tcp_shutdown>
 800b798:	4603      	mov	r3, r0
 800b79a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b79c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	757b      	strb	r3, [r7, #21]
 800b7a8:	e016      	b.n	800b7d8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b2:	d10f      	bne.n	800b7d4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	7a5b      	ldrb	r3, [r3, #9]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10c      	bne.n	800b7d8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b7c2:	7dbb      	ldrb	r3, [r7, #22]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b7c8:	6938      	ldr	r0, [r7, #16]
 800b7ca:	f003 f927 	bl	800ea1c <tcp_abort>
          err = ERR_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]
 800b7d2:	e001      	b.n	800b7d8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b7d8:	7d7b      	ldrb	r3, [r7, #21]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d044      	beq.n	800b868 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	7dfa      	ldrb	r2, [r7, #23]
 800b7ee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b7fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d129      	bne.n	800b858 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b804:	7dbb      	ldrb	r3, [r7, #22]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00c      	beq.n	800b824 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <lwip_netconn_do_close_internal+0x1f0>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	2200      	movs	r2, #0
 800b81e:	2104      	movs	r1, #4
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	4798      	blx	r3
      }
      if (shut_rx) {
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d009      	beq.n	800b83e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d005      	beq.n	800b83e <lwip_netconn_do_close_internal+0x20a>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2200      	movs	r2, #0
 800b838:	2100      	movs	r1, #0
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
      }
      if (shut_tx) {
 800b83e:	7b7b      	ldrb	r3, [r7, #13]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d009      	beq.n	800b858 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <lwip_netconn_do_close_internal+0x224>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	2200      	movs	r2, #0
 800b852:	2102      	movs	r1, #2
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b85e:	68b8      	ldr	r0, [r7, #8]
 800b860:	f00b fed6 	bl	8017610 <sys_sem_signal>
    }
    return ERR_OK;
 800b864:	2300      	movs	r3, #0
 800b866:	e02e      	b.n	800b8c6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b868:	7d7b      	ldrb	r3, [r7, #21]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d11e      	bne.n	800b8ac <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	7d1b      	ldrb	r3, [r3, #20]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d106      	bne.n	800b884 <lwip_netconn_do_close_internal+0x250>
 800b876:	4b16      	ldr	r3, [pc, #88]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b878:	f240 4241 	movw	r2, #1089	; 0x441
 800b87c:	491b      	ldr	r1, [pc, #108]	; (800b8ec <lwip_netconn_do_close_internal+0x2b8>)
 800b87e:	4816      	ldr	r0, [pc, #88]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b880:	f00b ffdc 	bl	801783c <iprintf>
    if (shut_tx) {
 800b884:	7b7b      	ldrb	r3, [r7, #13]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b88a:	4919      	ldr	r1, [pc, #100]	; (800b8f0 <lwip_netconn_do_close_internal+0x2bc>)
 800b88c:	6938      	ldr	r0, [r7, #16]
 800b88e:	f004 f987 	bl	800fba0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b892:	2201      	movs	r2, #1
 800b894:	4917      	ldr	r1, [pc, #92]	; (800b8f4 <lwip_netconn_do_close_internal+0x2c0>)
 800b896:	6938      	ldr	r0, [r7, #16]
 800b898:	f004 f9de 	bl	800fc58 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b89c:	4916      	ldr	r1, [pc, #88]	; (800b8f8 <lwip_netconn_do_close_internal+0x2c4>)
 800b89e:	6938      	ldr	r0, [r7, #16]
 800b8a0:	f004 f9a0 	bl	800fbe4 <tcp_err>
    tcp_arg(tpcb, conn);
 800b8a4:	6879      	ldr	r1, [r7, #4]
 800b8a6:	6938      	ldr	r0, [r7, #16]
 800b8a8:	f004 f946 	bl	800fb38 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d106      	bne.n	800b8c2 <lwip_netconn_do_close_internal+0x28e>
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <lwip_netconn_do_close_internal+0x29c>)
 800b8b6:	f240 424d 	movw	r2, #1101	; 0x44d
 800b8ba:	4910      	ldr	r1, [pc, #64]	; (800b8fc <lwip_netconn_do_close_internal+0x2c8>)
 800b8bc:	4806      	ldr	r0, [pc, #24]	; (800b8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800b8be:	f00b ffbd 	bl	801783c <iprintf>
  return err;
 800b8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	080191e8 	.word	0x080191e8
 800b8d4:	080194bc 	.word	0x080194bc
 800b8d8:	0801922c 	.word	0x0801922c
 800b8dc:	080194cc 	.word	0x080194cc
 800b8e0:	080194ec 	.word	0x080194ec
 800b8e4:	08019510 	.word	0x08019510
 800b8e8:	08019350 	.word	0x08019350
 800b8ec:	08019524 	.word	0x08019524
 800b8f0:	0800aead 	.word	0x0800aead
 800b8f4:	0800ade5 	.word	0x0800ade5
 800b8f8:	0800af55 	.word	0x0800af55
 800b8fc:	08019548 	.word	0x08019548

0800b900 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00d      	beq.n	800b936 <lwip_netconn_do_delconn+0x36>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b924:	2b10      	cmp	r3, #16
 800b926:	d006      	beq.n	800b936 <lwip_netconn_do_delconn+0x36>
 800b928:	4b60      	ldr	r3, [pc, #384]	; (800baac <lwip_netconn_do_delconn+0x1ac>)
 800b92a:	f240 425e 	movw	r2, #1118	; 0x45e
 800b92e:	4960      	ldr	r1, [pc, #384]	; (800bab0 <lwip_netconn_do_delconn+0x1b0>)
 800b930:	4860      	ldr	r0, [pc, #384]	; (800bab4 <lwip_netconn_do_delconn+0x1b4>)
 800b932:	f00b ff83 	bl	801783c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b936:	7afb      	ldrb	r3, [r7, #11]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d005      	beq.n	800b948 <lwip_netconn_do_delconn+0x48>
 800b93c:	7afb      	ldrb	r3, [r7, #11]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d002      	beq.n	800b948 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	2b03      	cmp	r3, #3
 800b946:	d109      	bne.n	800b95c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b948:	7afb      	ldrb	r3, [r7, #11]
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d10a      	bne.n	800b964 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	7f1b      	ldrb	r3, [r3, #28]
 800b954:	f003 0304 	and.w	r3, r3, #4
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d103      	bne.n	800b964 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	22fb      	movs	r2, #251	; 0xfb
 800b960:	711a      	strb	r2, [r3, #4]
 800b962:	e097      	b.n	800ba94 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b964:	7afb      	ldrb	r3, [r7, #11]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d10d      	bne.n	800b986 <lwip_netconn_do_delconn+0x86>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	7f1b      	ldrb	r3, [r3, #28]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d106      	bne.n	800b986 <lwip_netconn_do_delconn+0x86>
 800b978:	4b4c      	ldr	r3, [pc, #304]	; (800baac <lwip_netconn_do_delconn+0x1ac>)
 800b97a:	f240 427a 	movw	r2, #1146	; 0x47a
 800b97e:	494e      	ldr	r1, [pc, #312]	; (800bab8 <lwip_netconn_do_delconn+0x1b8>)
 800b980:	484c      	ldr	r0, [pc, #304]	; (800bab4 <lwip_netconn_do_delconn+0x1b4>)
 800b982:	f00b ff5b 	bl	801783c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff fdd1 	bl	800b538 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d05f      	beq.n	800ba60 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9aa:	2b10      	cmp	r3, #16
 800b9ac:	d00d      	beq.n	800b9ca <lwip_netconn_do_delconn+0xca>
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d151      	bne.n	800ba56 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f009 f93a 	bl	8014c3c <udp_remove>
          break;
 800b9c8:	e046      	b.n	800ba58 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d006      	beq.n	800b9e2 <lwip_netconn_do_delconn+0xe2>
 800b9d4:	4b35      	ldr	r3, [pc, #212]	; (800baac <lwip_netconn_do_delconn+0x1ac>)
 800b9d6:	f240 4294 	movw	r2, #1172	; 0x494
 800b9da:	4938      	ldr	r1, [pc, #224]	; (800babc <lwip_netconn_do_delconn+0x1bc>)
 800b9dc:	4835      	ldr	r0, [pc, #212]	; (800bab4 <lwip_netconn_do_delconn+0x1b4>)
 800b9de:	f00b ff2d 	bl	801783c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2204      	movs	r2, #4
 800b9e8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2203      	movs	r2, #3
 800b9ee:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff fe18 	bl	800b634 <lwip_netconn_do_close_internal>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d04b      	beq.n	800baa2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	785b      	ldrb	r3, [r3, #1]
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d006      	beq.n	800ba22 <lwip_netconn_do_delconn+0x122>
 800ba14:	4b25      	ldr	r3, [pc, #148]	; (800baac <lwip_netconn_do_delconn+0x1ac>)
 800ba16:	f240 429a 	movw	r2, #1178	; 0x49a
 800ba1a:	4929      	ldr	r1, [pc, #164]	; (800bac0 <lwip_netconn_do_delconn+0x1c0>)
 800ba1c:	4825      	ldr	r0, [pc, #148]	; (800bab4 <lwip_netconn_do_delconn+0x1b4>)
 800ba1e:	f00b ff0d 	bl	801783c <iprintf>
            UNLOCK_TCPIP_CORE();
 800ba22:	4828      	ldr	r0, [pc, #160]	; (800bac4 <lwip_netconn_do_delconn+0x1c4>)
 800ba24:	f00b fe5d 	bl	80176e2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	2100      	movs	r1, #0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f00b fdbc 	bl	80175ae <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ba36:	4823      	ldr	r0, [pc, #140]	; (800bac4 <lwip_netconn_do_delconn+0x1c4>)
 800ba38:	f00b fe44 	bl	80176c4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	785b      	ldrb	r3, [r3, #1]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d02d      	beq.n	800baa2 <lwip_netconn_do_delconn+0x1a2>
 800ba46:	4b19      	ldr	r3, [pc, #100]	; (800baac <lwip_netconn_do_delconn+0x1ac>)
 800ba48:	f240 429e 	movw	r2, #1182	; 0x49e
 800ba4c:	491c      	ldr	r1, [pc, #112]	; (800bac0 <lwip_netconn_do_delconn+0x1c0>)
 800ba4e:	4819      	ldr	r0, [pc, #100]	; (800bab4 <lwip_netconn_do_delconn+0x1b4>)
 800ba50:	f00b fef4 	bl	801783c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ba54:	e025      	b.n	800baa2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ba56:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <lwip_netconn_do_delconn+0x17a>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	6810      	ldr	r0, [r2, #0]
 800ba74:	2200      	movs	r2, #0
 800ba76:	2100      	movs	r1, #0
 800ba78:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d007      	beq.n	800ba94 <lwip_netconn_do_delconn+0x194>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	6810      	ldr	r0, [r2, #0]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2102      	movs	r1, #2
 800ba92:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	330c      	adds	r3, #12
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f00b fdd2 	bl	8017644 <sys_sem_valid>
 800baa0:	e000      	b.n	800baa4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800baa2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	080191e8 	.word	0x080191e8
 800bab0:	08019558 	.word	0x08019558
 800bab4:	0801922c 	.word	0x0801922c
 800bab8:	0801956c 	.word	0x0801956c
 800babc:	0801958c 	.word	0x0801958c
 800bac0:	080195a8 	.word	0x080195a8
 800bac4:	20008614 	.word	0x20008614

0800bac8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d025      	beq.n	800bb2a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bae8:	2b10      	cmp	r3, #16
 800baea:	d00e      	beq.n	800bb0a <lwip_netconn_do_bind+0x42>
 800baec:	2b20      	cmp	r3, #32
 800baee:	d119      	bne.n	800bb24 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6858      	ldr	r0, [r3, #4]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6899      	ldr	r1, [r3, #8]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	899b      	ldrh	r3, [r3, #12]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f008 fff4 	bl	8014aec <udp_bind>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]
        break;
 800bb08:	e011      	b.n	800bb2e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6858      	ldr	r0, [r3, #4]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	6899      	ldr	r1, [r3, #8]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	899b      	ldrh	r3, [r3, #12]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	f002 ff8b 	bl	800ea34 <tcp_bind>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	73fb      	strb	r3, [r7, #15]
        break;
 800bb22:	e004      	b.n	800bb2e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800bb24:	23fa      	movs	r3, #250	; 0xfa
 800bb26:	73fb      	strb	r3, [r7, #15]
        break;
 800bb28:	e001      	b.n	800bb2e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800bb2a:	23fa      	movs	r3, #250	; 0xfa
 800bb2c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	7bfa      	ldrb	r2, [r7, #15]
 800bb32:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d07f      	beq.n	800bc52 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb5c:	2b10      	cmp	r3, #16
 800bb5e:	d175      	bne.n	800bc4c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	785b      	ldrb	r3, [r3, #1]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d165      	bne.n	800bc36 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	7d1b      	ldrb	r3, [r3, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800bb76:	23fa      	movs	r3, #250	; 0xfa
 800bb78:	72fb      	strb	r3, [r7, #11]
 800bb7a:	e06c      	b.n	800bc56 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800bb7c:	23ff      	movs	r3, #255	; 0xff
 800bb7e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f107 020b 	add.w	r2, r7, #11
 800bb8a:	7cf9      	ldrb	r1, [r7, #19]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f003 f809 	bl	800eba4 <tcp_listen_with_backlog_and_err>
 800bb92:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d05d      	beq.n	800bc56 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3310      	adds	r3, #16
 800bba0:	4618      	mov	r0, r3
 800bba2:	f00b fcc1 	bl	8017528 <sys_mbox_valid>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3310      	adds	r3, #16
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f00b fc44 	bl	8017440 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3310      	adds	r3, #16
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f00b fcc3 	bl	801754a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3314      	adds	r3, #20
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f00b fcaa 	bl	8017528 <sys_mbox_valid>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d108      	bne.n	800bbec <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3314      	adds	r3, #20
 800bbe0:	2106      	movs	r1, #6
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f00b fc12 	bl	801740c <sys_mbox_new>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bbec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d118      	bne.n	800bc26 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4610      	mov	r0, r2
 800bc12:	f003 ff91 	bl	800fb38 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	4912      	ldr	r1, [pc, #72]	; (800bc68 <lwip_netconn_do_listen+0x12c>)
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f004 f802 	bl	800fc28 <tcp_accept>
 800bc24:	e017      	b.n	800bc56 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f002 fdb2 	bl	800e790 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2200      	movs	r2, #0
 800bc32:	605a      	str	r2, [r3, #4]
 800bc34:	e00f      	b.n	800bc56 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d102      	bne.n	800bc46 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	72fb      	strb	r3, [r7, #11]
 800bc44:	e007      	b.n	800bc56 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bc46:	23f5      	movs	r3, #245	; 0xf5
 800bc48:	72fb      	strb	r3, [r7, #11]
 800bc4a:	e004      	b.n	800bc56 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bc4c:	23f0      	movs	r3, #240	; 0xf0
 800bc4e:	72fb      	strb	r3, [r7, #11]
 800bc50:	e001      	b.n	800bc56 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bc52:	23f5      	movs	r3, #245	; 0xf5
 800bc54:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bc56:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bc5e:	bf00      	nop
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	0800b151 	.word	0x0800b151

0800bc6c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d022      	beq.n	800bcce <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc92:	2b10      	cmp	r3, #16
 800bc94:	d11b      	bne.n	800bcce <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca2:	d202      	bcs.n	800bcaa <lwip_netconn_do_recv+0x3e>
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	e001      	b.n	800bcae <lwip_netconn_do_recv+0x42>
 800bcaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcae:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	89fa      	ldrh	r2, [r7, #14]
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f003 f876 	bl	800edac <tcp_recved>
        remaining -= recved;
 800bcc0:	89fb      	ldrh	r3, [r7, #14]
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e6      	bne.n	800bc9c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bcce:	bf00      	nop
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <lwip_netconn_do_writemore+0x24>
 800bcee:	4b96      	ldr	r3, [pc, #600]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800bcf0:	f240 6273 	movw	r2, #1651	; 0x673
 800bcf4:	4995      	ldr	r1, [pc, #596]	; (800bf4c <lwip_netconn_do_writemore+0x274>)
 800bcf6:	4896      	ldr	r0, [pc, #600]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800bcf8:	f00b fda0 	bl	801783c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d006      	beq.n	800bd12 <lwip_netconn_do_writemore+0x3a>
 800bd04:	4b90      	ldr	r3, [pc, #576]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800bd06:	f240 6274 	movw	r2, #1652	; 0x674
 800bd0a:	4992      	ldr	r1, [pc, #584]	; (800bf54 <lwip_netconn_do_writemore+0x27c>)
 800bd0c:	4890      	ldr	r0, [pc, #576]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800bd0e:	f00b fd95 	bl	801783c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <lwip_netconn_do_writemore+0x50>
 800bd1a:	4b8b      	ldr	r3, [pc, #556]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800bd1c:	f240 6275 	movw	r2, #1653	; 0x675
 800bd20:	498d      	ldr	r1, [pc, #564]	; (800bf58 <lwip_netconn_do_writemore+0x280>)
 800bd22:	488b      	ldr	r0, [pc, #556]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800bd24:	f00b fd8a 	bl	801783c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d106      	bne.n	800bd3e <lwip_netconn_do_writemore+0x66>
 800bd30:	4b85      	ldr	r3, [pc, #532]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800bd32:	f240 6276 	movw	r2, #1654	; 0x676
 800bd36:	4989      	ldr	r1, [pc, #548]	; (800bf5c <lwip_netconn_do_writemore+0x284>)
 800bd38:	4885      	ldr	r0, [pc, #532]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800bd3a:	f00b fd7f 	bl	801783c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d306      	bcc.n	800bd5c <lwip_netconn_do_writemore+0x84>
 800bd4e:	4b7e      	ldr	r3, [pc, #504]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800bd50:	f240 6277 	movw	r2, #1655	; 0x677
 800bd54:	4982      	ldr	r1, [pc, #520]	; (800bf60 <lwip_netconn_do_writemore+0x288>)
 800bd56:	487e      	ldr	r0, [pc, #504]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800bd58:	f00b fd70 	bl	801783c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a1b      	ldr	r3, [r3, #32]
 800bd60:	899b      	ldrh	r3, [r3, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <lwip_netconn_do_writemore+0x9c>
 800bd66:	4b78      	ldr	r3, [pc, #480]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800bd68:	f240 6279 	movw	r2, #1657	; 0x679
 800bd6c:	497d      	ldr	r1, [pc, #500]	; (800bf64 <lwip_netconn_do_writemore+0x28c>)
 800bd6e:	4878      	ldr	r0, [pc, #480]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800bd70:	f00b fd64 	bl	801783c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	7f1b      	ldrb	r3, [r3, #28]
 800bd7a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7f1b      	ldrb	r3, [r3, #28]
 800bd80:	f003 0302 	and.w	r3, r3, #2
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d104      	bne.n	800bd92 <lwip_netconn_do_writemore+0xba>
 800bd88:	7ebb      	ldrb	r3, [r7, #26]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <lwip_netconn_do_writemore+0xbe>
 800bd92:	2301      	movs	r3, #1
 800bd94:	e000      	b.n	800bd98 <lwip_netconn_do_writemore+0xc0>
 800bd96:	2300      	movs	r3, #0
 800bd98:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	4413      	add	r3, r2
 800bdaa:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc4:	d307      	bcc.n	800bdd6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bdc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdca:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bdcc:	7ebb      	ldrb	r3, [r7, #26]
 800bdce:	f043 0302 	orr.w	r3, r3, #2
 800bdd2:	76bb      	strb	r3, [r7, #26]
 800bdd4:	e001      	b.n	800bdda <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bde2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bde4:	89fa      	ldrh	r2, [r7, #14]
 800bde6:	8bbb      	ldrh	r3, [r7, #28]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d216      	bcs.n	800be1a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800bdec:	89fb      	ldrh	r3, [r7, #14]
 800bdee:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bdf0:	7e3b      	ldrb	r3, [r7, #24]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00d      	beq.n	800be12 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800bdf6:	8bbb      	ldrh	r3, [r7, #28]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10e      	bne.n	800be1a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d102      	bne.n	800be0c <lwip_netconn_do_writemore+0x134>
 800be06:	f06f 0306 	mvn.w	r3, #6
 800be0a:	e000      	b.n	800be0e <lwip_netconn_do_writemore+0x136>
 800be0c:	2300      	movs	r3, #0
 800be0e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800be10:	e07d      	b.n	800bf0e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800be12:	7ebb      	ldrb	r3, [r7, #26]
 800be14:	f043 0302 	orr.w	r3, r3, #2
 800be18:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	691a      	ldr	r2, [r3, #16]
 800be20:	8bbb      	ldrh	r3, [r7, #28]
 800be22:	441a      	add	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d906      	bls.n	800be3e <lwip_netconn_do_writemore+0x166>
 800be30:	4b45      	ldr	r3, [pc, #276]	; (800bf48 <lwip_netconn_do_writemore+0x270>)
 800be32:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800be36:	494c      	ldr	r1, [pc, #304]	; (800bf68 <lwip_netconn_do_writemore+0x290>)
 800be38:	4845      	ldr	r0, [pc, #276]	; (800bf50 <lwip_netconn_do_writemore+0x278>)
 800be3a:	f00b fcff 	bl	801783c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800be3e:	8bbb      	ldrh	r3, [r7, #28]
 800be40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be44:	4293      	cmp	r3, r2
 800be46:	d103      	bne.n	800be50 <lwip_netconn_do_writemore+0x178>
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be4e:	d209      	bcs.n	800be64 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800be54:	8bba      	ldrh	r2, [r7, #28]
 800be56:	429a      	cmp	r2, r3
 800be58:	d10b      	bne.n	800be72 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	899b      	ldrh	r3, [r3, #12]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d906      	bls.n	800be72 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800be64:	2301      	movs	r3, #1
 800be66:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800be68:	7ebb      	ldrb	r3, [r7, #26]
 800be6a:	f043 0302 	orr.w	r3, r3, #2
 800be6e:	76bb      	strb	r3, [r7, #26]
 800be70:	e001      	b.n	800be76 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6858      	ldr	r0, [r3, #4]
 800be7a:	7ebb      	ldrb	r3, [r7, #26]
 800be7c:	8bba      	ldrh	r2, [r7, #28]
 800be7e:	6979      	ldr	r1, [r7, #20]
 800be80:	f006 fd98 	bl	80129b4 <tcp_write>
 800be84:	4603      	mov	r3, r0
 800be86:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800be88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d12c      	bne.n	800beea <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	6999      	ldr	r1, [r3, #24]
 800be96:	8bba      	ldrh	r2, [r7, #28]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a1b      	ldr	r3, [r3, #32]
 800be9c:	440a      	add	r2, r1
 800be9e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	6919      	ldr	r1, [r3, #16]
 800bea6:	8bba      	ldrh	r2, [r7, #28]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	440a      	add	r2, r1
 800beae:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	691a      	ldr	r2, [r3, #16]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d113      	bne.n	800beea <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	899a      	ldrh	r2, [r3, #12]
 800bec8:	3a01      	subs	r2, #1
 800beca:	b292      	uxth	r2, r2
 800becc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	899b      	ldrh	r3, [r3, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d008      	beq.n	800beea <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	3208      	adds	r2, #8
 800bee0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	2200      	movs	r2, #0
 800bee8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800beea:	7e7b      	ldrb	r3, [r7, #25]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d004      	beq.n	800befa <lwip_netconn_do_writemore+0x222>
 800bef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f43f af50 	beq.w	800bd9a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800befa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d004      	beq.n	800bf0c <lwip_netconn_do_writemore+0x234>
 800bf02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0a:	d146      	bne.n	800bf9a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800bf0c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bf0e:	7e3b      	ldrb	r3, [r7, #24]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d02b      	beq.n	800bf6c <lwip_netconn_do_writemore+0x294>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d223      	bcs.n	800bf6c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d005      	beq.n	800bf38 <lwip_netconn_do_writemore+0x260>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	2200      	movs	r2, #0
 800bf32:	2103      	movs	r1, #3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7f1b      	ldrb	r3, [r3, #28]
 800bf3c:	f043 0310 	orr.w	r3, r3, #16
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	771a      	strb	r2, [r3, #28]
 800bf46:	e028      	b.n	800bf9a <lwip_netconn_do_writemore+0x2c2>
 800bf48:	080191e8 	.word	0x080191e8
 800bf4c:	08019340 	.word	0x08019340
 800bf50:	0801922c 	.word	0x0801922c
 800bf54:	08019648 	.word	0x08019648
 800bf58:	08019350 	.word	0x08019350
 800bf5c:	08019668 	.word	0x08019668
 800bf60:	08019680 	.word	0x08019680
 800bf64:	080196c0 	.word	0x080196c0
 800bf68:	080196e8 	.word	0x080196e8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bf74:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bf78:	d305      	bcc.n	800bf86 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d909      	bls.n	800bf9a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d005      	beq.n	800bf9a <lwip_netconn_do_writemore+0x2c2>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	2200      	movs	r2, #0
 800bf94:	2103      	movs	r1, #3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bf9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d11d      	bne.n	800bfde <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	699a      	ldr	r2, [r3, #24]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d002      	beq.n	800bfb8 <lwip_netconn_do_writemore+0x2e0>
 800bfb2:	7e3b      	ldrb	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f007 fae1 	bl	8013588 <tcp_output>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bfca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bfce:	f113 0f04 	cmn.w	r3, #4
 800bfd2:	d12c      	bne.n	800c02e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bfd4:	7b3b      	ldrb	r3, [r7, #12]
 800bfd6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	76fb      	strb	r3, [r7, #27]
 800bfdc:	e027      	b.n	800c02e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800bfde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d120      	bne.n	800c02a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f007 facb 	bl	8013588 <tcp_output>
 800bff2:	4603      	mov	r3, r0
 800bff4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bff6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bffa:	f113 0f04 	cmn.w	r3, #4
 800bffe:	d104      	bne.n	800c00a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c000:	7b7b      	ldrb	r3, [r7, #13]
 800c002:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c004:	2301      	movs	r3, #1
 800c006:	76fb      	strb	r3, [r7, #27]
 800c008:	e011      	b.n	800c02e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c00a:	7e3b      	ldrb	r3, [r7, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00e      	beq.n	800c02e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d102      	bne.n	800c020 <lwip_netconn_do_writemore+0x348>
 800c01a:	f06f 0306 	mvn.w	r3, #6
 800c01e:	e000      	b.n	800c022 <lwip_netconn_do_writemore+0x34a>
 800c020:	2300      	movs	r3, #0
 800c022:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c024:	2301      	movs	r3, #1
 800c026:	76fb      	strb	r3, [r7, #27]
 800c028:	e001      	b.n	800c02e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c02a:	2301      	movs	r3, #1
 800c02c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c02e:	7efb      	ldrb	r3, [r7, #27]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d015      	beq.n	800c060 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	330c      	adds	r3, #12
 800c03c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	7ffa      	ldrb	r2, [r7, #31]
 800c044:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d006      	beq.n	800c066 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c058:	68b8      	ldr	r0, [r7, #8]
 800c05a:	f00b fad9 	bl	8017610 <sys_sem_signal>
 800c05e:	e002      	b.n	800c066 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c060:	f04f 33ff 	mov.w	r3, #4294967295
 800c064:	e000      	b.n	800c068 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3720      	adds	r7, #32
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe fd20 	bl	800aac6 <netconn_err>
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d166      	bne.n	800c160 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c09c:	2b10      	cmp	r3, #16
 800c09e:	d15d      	bne.n	800c15c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c0aa:	23fb      	movs	r3, #251	; 0xfb
 800c0ac:	73fb      	strb	r3, [r7, #15]
 800c0ae:	e057      	b.n	800c160 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d04d      	beq.n	800c156 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6a1b      	ldr	r3, [r3, #32]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d006      	beq.n	800c0da <lwip_netconn_do_write+0x6a>
 800c0cc:	4b28      	ldr	r3, [pc, #160]	; (800c170 <lwip_netconn_do_write+0x100>)
 800c0ce:	f240 7223 	movw	r2, #1827	; 0x723
 800c0d2:	4928      	ldr	r1, [pc, #160]	; (800c174 <lwip_netconn_do_write+0x104>)
 800c0d4:	4828      	ldr	r0, [pc, #160]	; (800c178 <lwip_netconn_do_write+0x108>)
 800c0d6:	f00b fbb1 	bl	801783c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <lwip_netconn_do_write+0x80>
 800c0e2:	4b23      	ldr	r3, [pc, #140]	; (800c170 <lwip_netconn_do_write+0x100>)
 800c0e4:	f240 7224 	movw	r2, #1828	; 0x724
 800c0e8:	4924      	ldr	r1, [pc, #144]	; (800c17c <lwip_netconn_do_write+0x10c>)
 800c0ea:	4823      	ldr	r0, [pc, #140]	; (800c178 <lwip_netconn_do_write+0x108>)
 800c0ec:	f00b fba6 	bl	801783c <iprintf>
        msg->conn->current_msg = msg;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff fdea 	bl	800bcd8 <lwip_netconn_do_writemore>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d02e      	beq.n	800c168 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d006      	beq.n	800c122 <lwip_netconn_do_write+0xb2>
 800c114:	4b16      	ldr	r3, [pc, #88]	; (800c170 <lwip_netconn_do_write+0x100>)
 800c116:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c11a:	4919      	ldr	r1, [pc, #100]	; (800c180 <lwip_netconn_do_write+0x110>)
 800c11c:	4816      	ldr	r0, [pc, #88]	; (800c178 <lwip_netconn_do_write+0x108>)
 800c11e:	f00b fb8d 	bl	801783c <iprintf>
          UNLOCK_TCPIP_CORE();
 800c122:	4818      	ldr	r0, [pc, #96]	; (800c184 <lwip_netconn_do_write+0x114>)
 800c124:	f00b fadd 	bl	80176e2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	330c      	adds	r3, #12
 800c12e:	2100      	movs	r1, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f00b fa3c 	bl	80175ae <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c136:	4813      	ldr	r0, [pc, #76]	; (800c184 <lwip_netconn_do_write+0x114>)
 800c138:	f00b fac4 	bl	80176c4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	785b      	ldrb	r3, [r3, #1]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d110      	bne.n	800c168 <lwip_netconn_do_write+0xf8>
 800c146:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <lwip_netconn_do_write+0x100>)
 800c148:	f240 722c 	movw	r2, #1836	; 0x72c
 800c14c:	490c      	ldr	r1, [pc, #48]	; (800c180 <lwip_netconn_do_write+0x110>)
 800c14e:	480a      	ldr	r0, [pc, #40]	; (800c178 <lwip_netconn_do_write+0x108>)
 800c150:	f00b fb74 	bl	801783c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c154:	e008      	b.n	800c168 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c156:	23f5      	movs	r3, #245	; 0xf5
 800c158:	73fb      	strb	r3, [r7, #15]
 800c15a:	e001      	b.n	800c160 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c15c:	23fa      	movs	r3, #250	; 0xfa
 800c15e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	7bfa      	ldrb	r2, [r7, #15]
 800c164:	711a      	strb	r2, [r3, #4]
 800c166:	e000      	b.n	800c16a <lwip_netconn_do_write+0xfa>
        return;
 800c168:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	080191e8 	.word	0x080191e8
 800c174:	0801958c 	.word	0x0801958c
 800c178:	0801922c 	.word	0x0801922c
 800c17c:	08019714 	.word	0x08019714
 800c180:	080195a8 	.word	0x080195a8
 800c184:	20008614 	.word	0x20008614

0800c188 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d069      	beq.n	800c27a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	d162      	bne.n	800c27a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d002      	beq.n	800c1c2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c1bc:	7afb      	ldrb	r3, [r7, #11]
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d05b      	beq.n	800c27a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c1c2:	7afb      	ldrb	r3, [r7, #11]
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d103      	bne.n	800c1d0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	22f5      	movs	r2, #245	; 0xf5
 800c1cc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c1ce:	e059      	b.n	800c284 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c1d0:	7afb      	ldrb	r3, [r7, #11]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d103      	bne.n	800c1de <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	22fb      	movs	r2, #251	; 0xfb
 800c1da:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c1dc:	e052      	b.n	800c284 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	7a1b      	ldrb	r3, [r3, #8]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff f9a2 	bl	800b538 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d006      	beq.n	800c20c <lwip_netconn_do_close+0x84>
 800c1fe:	4b23      	ldr	r3, [pc, #140]	; (800c28c <lwip_netconn_do_close+0x104>)
 800c200:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c204:	4922      	ldr	r1, [pc, #136]	; (800c290 <lwip_netconn_do_close+0x108>)
 800c206:	4823      	ldr	r0, [pc, #140]	; (800c294 <lwip_netconn_do_close+0x10c>)
 800c208:	f00b fb18 	bl	801783c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2204      	movs	r2, #4
 800c212:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2100      	movs	r1, #0
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fa06 	bl	800b634 <lwip_netconn_do_close_internal>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d029      	beq.n	800c282 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b04      	cmp	r3, #4
 800c236:	d006      	beq.n	800c246 <lwip_netconn_do_close+0xbe>
 800c238:	4b14      	ldr	r3, [pc, #80]	; (800c28c <lwip_netconn_do_close+0x104>)
 800c23a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c23e:	4916      	ldr	r1, [pc, #88]	; (800c298 <lwip_netconn_do_close+0x110>)
 800c240:	4814      	ldr	r0, [pc, #80]	; (800c294 <lwip_netconn_do_close+0x10c>)
 800c242:	f00b fafb 	bl	801783c <iprintf>
        UNLOCK_TCPIP_CORE();
 800c246:	4815      	ldr	r0, [pc, #84]	; (800c29c <lwip_netconn_do_close+0x114>)
 800c248:	f00b fa4b 	bl	80176e2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	330c      	adds	r3, #12
 800c252:	2100      	movs	r1, #0
 800c254:	4618      	mov	r0, r3
 800c256:	f00b f9aa 	bl	80175ae <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c25a:	4810      	ldr	r0, [pc, #64]	; (800c29c <lwip_netconn_do_close+0x114>)
 800c25c:	f00b fa32 	bl	80176c4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	785b      	ldrb	r3, [r3, #1]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <lwip_netconn_do_close+0xfa>
 800c26a:	4b08      	ldr	r3, [pc, #32]	; (800c28c <lwip_netconn_do_close+0x104>)
 800c26c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c270:	4909      	ldr	r1, [pc, #36]	; (800c298 <lwip_netconn_do_close+0x110>)
 800c272:	4808      	ldr	r0, [pc, #32]	; (800c294 <lwip_netconn_do_close+0x10c>)
 800c274:	f00b fae2 	bl	801783c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c278:	e003      	b.n	800c282 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	22f5      	movs	r2, #245	; 0xf5
 800c27e:	711a      	strb	r2, [r3, #4]
 800c280:	e000      	b.n	800c284 <lwip_netconn_do_close+0xfc>
      return;
 800c282:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	080191e8 	.word	0x080191e8
 800c290:	0801958c 	.word	0x0801958c
 800c294:	0801922c 	.word	0x0801922c
 800c298:	080195a8 	.word	0x080195a8
 800c29c:	20008614 	.word	0x20008614

0800c2a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d013      	beq.n	800c2d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00b      	beq.n	800c2ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f001 fdbe 	bl	800de3c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	605a      	str	r2, [r3, #4]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	2006      	movs	r0, #6
 800c2d2:	f000 ff0f 	bl	800d0f4 <memp_free>
  }
}
 800c2d6:	bf00      	nop
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d108      	bne.n	800c304 <netbuf_data+0x24>
 800c2f2:	4b1b      	ldr	r3, [pc, #108]	; (800c360 <netbuf_data+0x80>)
 800c2f4:	22c6      	movs	r2, #198	; 0xc6
 800c2f6:	491b      	ldr	r1, [pc, #108]	; (800c364 <netbuf_data+0x84>)
 800c2f8:	481b      	ldr	r0, [pc, #108]	; (800c368 <netbuf_data+0x88>)
 800c2fa:	f00b fa9f 	bl	801783c <iprintf>
 800c2fe:	f06f 030f 	mvn.w	r3, #15
 800c302:	e029      	b.n	800c358 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d108      	bne.n	800c31c <netbuf_data+0x3c>
 800c30a:	4b15      	ldr	r3, [pc, #84]	; (800c360 <netbuf_data+0x80>)
 800c30c:	22c7      	movs	r2, #199	; 0xc7
 800c30e:	4917      	ldr	r1, [pc, #92]	; (800c36c <netbuf_data+0x8c>)
 800c310:	4815      	ldr	r0, [pc, #84]	; (800c368 <netbuf_data+0x88>)
 800c312:	f00b fa93 	bl	801783c <iprintf>
 800c316:	f06f 030f 	mvn.w	r3, #15
 800c31a:	e01d      	b.n	800c358 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d108      	bne.n	800c334 <netbuf_data+0x54>
 800c322:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <netbuf_data+0x80>)
 800c324:	22c8      	movs	r2, #200	; 0xc8
 800c326:	4912      	ldr	r1, [pc, #72]	; (800c370 <netbuf_data+0x90>)
 800c328:	480f      	ldr	r0, [pc, #60]	; (800c368 <netbuf_data+0x88>)
 800c32a:	f00b fa87 	bl	801783c <iprintf>
 800c32e:	f06f 030f 	mvn.w	r3, #15
 800c332:	e011      	b.n	800c358 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <netbuf_data+0x62>
    return ERR_BUF;
 800c33c:	f06f 0301 	mvn.w	r3, #1
 800c340:	e00a      	b.n	800c358 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	895a      	ldrh	r2, [r3, #10]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	08019740 	.word	0x08019740
 800c364:	08019848 	.word	0x08019848
 800c368:	08019790 	.word	0x08019790
 800c36c:	08019864 	.word	0x08019864
 800c370:	08019884 	.word	0x08019884

0800c374 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c37e:	f008 f9bb 	bl	80146f8 <sys_timeouts_sleeptime>
 800c382:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d10b      	bne.n	800c3a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c38c:	4813      	ldr	r0, [pc, #76]	; (800c3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800c38e:	f00b f9a8 	bl	80176e2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c392:	2200      	movs	r2, #0
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f00b f87e 	bl	8017498 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c39c:	480f      	ldr	r0, [pc, #60]	; (800c3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800c39e:	f00b f991 	bl	80176c4 <sys_mutex_lock>
    return;
 800c3a2:	e018      	b.n	800c3d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c3aa:	f008 f96b 	bl	8014684 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c3ae:	e7e6      	b.n	800c37e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c3b0:	480a      	ldr	r0, [pc, #40]	; (800c3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800c3b2:	f00b f996 	bl	80176e2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f00b f86c 	bl	8017498 <sys_arch_mbox_fetch>
 800c3c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c3c2:	4806      	ldr	r0, [pc, #24]	; (800c3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800c3c4:	f00b f97e 	bl	80176c4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ce:	d102      	bne.n	800c3d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c3d0:	f008 f958 	bl	8014684 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c3d4:	e7d3      	b.n	800c37e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	20008614 	.word	0x20008614

0800c3e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c3e8:	4810      	ldr	r0, [pc, #64]	; (800c42c <tcpip_thread+0x4c>)
 800c3ea:	f00b f96b 	bl	80176c4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c3ee:	4b10      	ldr	r3, [pc, #64]	; (800c430 <tcpip_thread+0x50>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	; (800c430 <tcpip_thread+0x50>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a0e      	ldr	r2, [pc, #56]	; (800c434 <tcpip_thread+0x54>)
 800c3fc:	6812      	ldr	r2, [r2, #0]
 800c3fe:	4610      	mov	r0, r2
 800c400:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c402:	f107 030c 	add.w	r3, r7, #12
 800c406:	4619      	mov	r1, r3
 800c408:	480b      	ldr	r0, [pc, #44]	; (800c438 <tcpip_thread+0x58>)
 800c40a:	f7ff ffb3 	bl	800c374 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d106      	bne.n	800c422 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c414:	4b09      	ldr	r3, [pc, #36]	; (800c43c <tcpip_thread+0x5c>)
 800c416:	2291      	movs	r2, #145	; 0x91
 800c418:	4909      	ldr	r1, [pc, #36]	; (800c440 <tcpip_thread+0x60>)
 800c41a:	480a      	ldr	r0, [pc, #40]	; (800c444 <tcpip_thread+0x64>)
 800c41c:	f00b fa0e 	bl	801783c <iprintf>
      continue;
 800c420:	e003      	b.n	800c42a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 f80f 	bl	800c448 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c42a:	e7ea      	b.n	800c402 <tcpip_thread+0x22>
 800c42c:	20008614 	.word	0x20008614
 800c430:	20004d98 	.word	0x20004d98
 800c434:	20004d9c 	.word	0x20004d9c
 800c438:	20004da0 	.word	0x20004da0
 800c43c:	080198d8 	.word	0x080198d8
 800c440:	08019908 	.word	0x08019908
 800c444:	08019928 	.word	0x08019928

0800c448 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d026      	beq.n	800c4a6 <tcpip_thread_handle_msg+0x5e>
 800c458:	2b02      	cmp	r3, #2
 800c45a:	dc2b      	bgt.n	800c4b4 <tcpip_thread_handle_msg+0x6c>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <tcpip_thread_handle_msg+0x1e>
 800c460:	2b01      	cmp	r3, #1
 800c462:	d015      	beq.n	800c490 <tcpip_thread_handle_msg+0x48>
 800c464:	e026      	b.n	800c4b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	6850      	ldr	r0, [r2, #4]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	6892      	ldr	r2, [r2, #8]
 800c472:	4611      	mov	r1, r2
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	4618      	mov	r0, r3
 800c482:	f001 fcdb 	bl	800de3c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c486:	6879      	ldr	r1, [r7, #4]
 800c488:	2009      	movs	r0, #9
 800c48a:	f000 fe33 	bl	800d0f4 <memp_free>
      break;
 800c48e:	e018      	b.n	800c4c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	6892      	ldr	r2, [r2, #8]
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	2008      	movs	r0, #8
 800c4a0:	f000 fe28 	bl	800d0f4 <memp_free>
      break;
 800c4a4:	e00d      	b.n	800c4c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	6892      	ldr	r2, [r2, #8]
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4798      	blx	r3
      break;
 800c4b2:	e006      	b.n	800c4c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c4b4:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <tcpip_thread_handle_msg+0x84>)
 800c4b6:	22cf      	movs	r2, #207	; 0xcf
 800c4b8:	4905      	ldr	r1, [pc, #20]	; (800c4d0 <tcpip_thread_handle_msg+0x88>)
 800c4ba:	4806      	ldr	r0, [pc, #24]	; (800c4d4 <tcpip_thread_handle_msg+0x8c>)
 800c4bc:	f00b f9be 	bl	801783c <iprintf>
      break;
 800c4c0:	bf00      	nop
  }
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	080198d8 	.word	0x080198d8
 800c4d0:	08019908 	.word	0x08019908
 800c4d4:	08019928 	.word	0x08019928

0800c4d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c4e4:	481a      	ldr	r0, [pc, #104]	; (800c550 <tcpip_inpkt+0x78>)
 800c4e6:	f00b f81f 	bl	8017528 <sys_mbox_valid>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d105      	bne.n	800c4fc <tcpip_inpkt+0x24>
 800c4f0:	4b18      	ldr	r3, [pc, #96]	; (800c554 <tcpip_inpkt+0x7c>)
 800c4f2:	22fc      	movs	r2, #252	; 0xfc
 800c4f4:	4918      	ldr	r1, [pc, #96]	; (800c558 <tcpip_inpkt+0x80>)
 800c4f6:	4819      	ldr	r0, [pc, #100]	; (800c55c <tcpip_inpkt+0x84>)
 800c4f8:	f00b f9a0 	bl	801783c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c4fc:	2009      	movs	r0, #9
 800c4fe:	f000 fda7 	bl	800d050 <memp_malloc>
 800c502:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c50a:	f04f 33ff 	mov.w	r3, #4294967295
 800c50e:	e01a      	b.n	800c546 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2200      	movs	r2, #0
 800c514:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c528:	6979      	ldr	r1, [r7, #20]
 800c52a:	4809      	ldr	r0, [pc, #36]	; (800c550 <tcpip_inpkt+0x78>)
 800c52c:	f00a ff9a 	bl	8017464 <sys_mbox_trypost>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d006      	beq.n	800c544 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c536:	6979      	ldr	r1, [r7, #20]
 800c538:	2009      	movs	r0, #9
 800c53a:	f000 fddb 	bl	800d0f4 <memp_free>
    return ERR_MEM;
 800c53e:	f04f 33ff 	mov.w	r3, #4294967295
 800c542:	e000      	b.n	800c546 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c544:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20004da0 	.word	0x20004da0
 800c554:	080198d8 	.word	0x080198d8
 800c558:	08019950 	.word	0x08019950
 800c55c:	08019928 	.word	0x08019928

0800c560 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c570:	f003 0318 	and.w	r3, r3, #24
 800c574:	2b00      	cmp	r3, #0
 800c576:	d006      	beq.n	800c586 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c578:	4a08      	ldr	r2, [pc, #32]	; (800c59c <tcpip_input+0x3c>)
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffab 	bl	800c4d8 <tcpip_inpkt>
 800c582:	4603      	mov	r3, r0
 800c584:	e005      	b.n	800c592 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c586:	4a06      	ldr	r2, [pc, #24]	; (800c5a0 <tcpip_input+0x40>)
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff ffa4 	bl	800c4d8 <tcpip_inpkt>
 800c590:	4603      	mov	r3, r0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	08017261 	.word	0x08017261
 800c5a0:	08016051 	.word	0x08016051

0800c5a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c5ae:	4819      	ldr	r0, [pc, #100]	; (800c614 <tcpip_try_callback+0x70>)
 800c5b0:	f00a ffba 	bl	8017528 <sys_mbox_valid>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d106      	bne.n	800c5c8 <tcpip_try_callback+0x24>
 800c5ba:	4b17      	ldr	r3, [pc, #92]	; (800c618 <tcpip_try_callback+0x74>)
 800c5bc:	f240 125d 	movw	r2, #349	; 0x15d
 800c5c0:	4916      	ldr	r1, [pc, #88]	; (800c61c <tcpip_try_callback+0x78>)
 800c5c2:	4817      	ldr	r0, [pc, #92]	; (800c620 <tcpip_try_callback+0x7c>)
 800c5c4:	f00b f93a 	bl	801783c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c5c8:	2008      	movs	r0, #8
 800c5ca:	f000 fd41 	bl	800d050 <memp_malloc>
 800c5ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d102      	bne.n	800c5dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5da:	e017      	b.n	800c60c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	4808      	ldr	r0, [pc, #32]	; (800c614 <tcpip_try_callback+0x70>)
 800c5f2:	f00a ff37 	bl	8017464 <sys_mbox_trypost>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d006      	beq.n	800c60a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c5fc:	68f9      	ldr	r1, [r7, #12]
 800c5fe:	2008      	movs	r0, #8
 800c600:	f000 fd78 	bl	800d0f4 <memp_free>
    return ERR_MEM;
 800c604:	f04f 33ff 	mov.w	r3, #4294967295
 800c608:	e000      	b.n	800c60c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20004da0 	.word	0x20004da0
 800c618:	080198d8 	.word	0x080198d8
 800c61c:	08019950 	.word	0x08019950
 800c620:	08019928 	.word	0x08019928

0800c624 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c630:	4806      	ldr	r0, [pc, #24]	; (800c64c <tcpip_send_msg_wait_sem+0x28>)
 800c632:	f00b f847 	bl	80176c4 <sys_mutex_lock>
  fn(apimsg);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68b8      	ldr	r0, [r7, #8]
 800c63a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c63c:	4803      	ldr	r0, [pc, #12]	; (800c64c <tcpip_send_msg_wait_sem+0x28>)
 800c63e:	f00b f850 	bl	80176e2 <sys_mutex_unlock>
  return ERR_OK;
 800c642:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20008614 	.word	0x20008614

0800c650 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af02      	add	r7, sp, #8
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c65a:	f000 f871 	bl	800c740 <lwip_init>

  tcpip_init_done = initfunc;
 800c65e:	4a17      	ldr	r2, [pc, #92]	; (800c6bc <tcpip_init+0x6c>)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c664:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <tcpip_init+0x70>)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c66a:	2106      	movs	r1, #6
 800c66c:	4815      	ldr	r0, [pc, #84]	; (800c6c4 <tcpip_init+0x74>)
 800c66e:	f00a fecd 	bl	801740c <sys_mbox_new>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d006      	beq.n	800c686 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c678:	4b13      	ldr	r3, [pc, #76]	; (800c6c8 <tcpip_init+0x78>)
 800c67a:	f240 2261 	movw	r2, #609	; 0x261
 800c67e:	4913      	ldr	r1, [pc, #76]	; (800c6cc <tcpip_init+0x7c>)
 800c680:	4813      	ldr	r0, [pc, #76]	; (800c6d0 <tcpip_init+0x80>)
 800c682:	f00b f8db 	bl	801783c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c686:	4813      	ldr	r0, [pc, #76]	; (800c6d4 <tcpip_init+0x84>)
 800c688:	f00b f806 	bl	8017698 <sys_mutex_new>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d006      	beq.n	800c6a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c692:	4b0d      	ldr	r3, [pc, #52]	; (800c6c8 <tcpip_init+0x78>)
 800c694:	f240 2265 	movw	r2, #613	; 0x265
 800c698:	490f      	ldr	r1, [pc, #60]	; (800c6d8 <tcpip_init+0x88>)
 800c69a:	480d      	ldr	r0, [pc, #52]	; (800c6d0 <tcpip_init+0x80>)
 800c69c:	f00b f8ce 	bl	801783c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c6a0:	2318      	movs	r3, #24
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	490c      	ldr	r1, [pc, #48]	; (800c6dc <tcpip_init+0x8c>)
 800c6ac:	480c      	ldr	r0, [pc, #48]	; (800c6e0 <tcpip_init+0x90>)
 800c6ae:	f00b f825 	bl	80176fc <sys_thread_new>
}
 800c6b2:	bf00      	nop
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20004d98 	.word	0x20004d98
 800c6c0:	20004d9c 	.word	0x20004d9c
 800c6c4:	20004da0 	.word	0x20004da0
 800c6c8:	080198d8 	.word	0x080198d8
 800c6cc:	08019960 	.word	0x08019960
 800c6d0:	08019928 	.word	0x08019928
 800c6d4:	20008614 	.word	0x20008614
 800c6d8:	08019984 	.word	0x08019984
 800c6dc:	0800c3e1 	.word	0x0800c3e1
 800c6e0:	080199a8 	.word	0x080199a8

0800c6e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	b21a      	sxth	r2, r3
 800c6f4:	88fb      	ldrh	r3, [r7, #6]
 800c6f6:	0a1b      	lsrs	r3, r3, #8
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	b21b      	sxth	r3, r3
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	b21b      	sxth	r3, r3
 800c700:	b29b      	uxth	r3, r3
}
 800c702:	4618      	mov	r0, r3
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	061a      	lsls	r2, r3, #24
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	021b      	lsls	r3, r3, #8
 800c71e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	0a1b      	lsrs	r3, r3, #8
 800c728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c72c:	431a      	orrs	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0e1b      	lsrs	r3, r3, #24
 800c732:	4313      	orrs	r3, r2
}
 800c734:	4618      	mov	r0, r3
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c74a:	f00a ff99 	bl	8017680 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c74e:	f000 f8d5 	bl	800c8fc <mem_init>
  memp_init();
 800c752:	f000 fc31 	bl	800cfb8 <memp_init>
  pbuf_init();
  netif_init();
 800c756:	f000 fcf7 	bl	800d148 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c75a:	f008 f805 	bl	8014768 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c75e:	f001 fe07 	bl	800e370 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c762:	f007 ff47 	bl	80145f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c77a:	4b05      	ldr	r3, [pc, #20]	; (800c790 <ptr_to_mem+0x20>)
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	88fb      	ldrh	r3, [r7, #6]
 800c780:	4413      	add	r3, r2
}
 800c782:	4618      	mov	r0, r3
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20004da4 	.word	0x20004da4

0800c794 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c79c:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <mem_to_ptr+0x20>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	b29b      	uxth	r3, r3
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	20004da4 	.word	0x20004da4

0800c7b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c7b8:	b590      	push	{r4, r7, lr}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c7c0:	4b45      	ldr	r3, [pc, #276]	; (800c8d8 <plug_holes+0x120>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d206      	bcs.n	800c7d8 <plug_holes+0x20>
 800c7ca:	4b44      	ldr	r3, [pc, #272]	; (800c8dc <plug_holes+0x124>)
 800c7cc:	f240 12df 	movw	r2, #479	; 0x1df
 800c7d0:	4943      	ldr	r1, [pc, #268]	; (800c8e0 <plug_holes+0x128>)
 800c7d2:	4844      	ldr	r0, [pc, #272]	; (800c8e4 <plug_holes+0x12c>)
 800c7d4:	f00b f832 	bl	801783c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c7d8:	4b43      	ldr	r3, [pc, #268]	; (800c8e8 <plug_holes+0x130>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d306      	bcc.n	800c7f0 <plug_holes+0x38>
 800c7e2:	4b3e      	ldr	r3, [pc, #248]	; (800c8dc <plug_holes+0x124>)
 800c7e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c7e8:	4940      	ldr	r1, [pc, #256]	; (800c8ec <plug_holes+0x134>)
 800c7ea:	483e      	ldr	r0, [pc, #248]	; (800c8e4 <plug_holes+0x12c>)
 800c7ec:	f00b f826 	bl	801783c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	791b      	ldrb	r3, [r3, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d006      	beq.n	800c806 <plug_holes+0x4e>
 800c7f8:	4b38      	ldr	r3, [pc, #224]	; (800c8dc <plug_holes+0x124>)
 800c7fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c7fe:	493c      	ldr	r1, [pc, #240]	; (800c8f0 <plug_holes+0x138>)
 800c800:	4838      	ldr	r0, [pc, #224]	; (800c8e4 <plug_holes+0x12c>)
 800c802:	f00b f81b 	bl	801783c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c80e:	d906      	bls.n	800c81e <plug_holes+0x66>
 800c810:	4b32      	ldr	r3, [pc, #200]	; (800c8dc <plug_holes+0x124>)
 800c812:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c816:	4937      	ldr	r1, [pc, #220]	; (800c8f4 <plug_holes+0x13c>)
 800c818:	4832      	ldr	r0, [pc, #200]	; (800c8e4 <plug_holes+0x12c>)
 800c81a:	f00b f80f 	bl	801783c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff ffa4 	bl	800c770 <ptr_to_mem>
 800c828:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d024      	beq.n	800c87c <plug_holes+0xc4>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	791b      	ldrb	r3, [r3, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d120      	bne.n	800c87c <plug_holes+0xc4>
 800c83a:	4b2b      	ldr	r3, [pc, #172]	; (800c8e8 <plug_holes+0x130>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	429a      	cmp	r2, r3
 800c842:	d01b      	beq.n	800c87c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c844:	4b2c      	ldr	r3, [pc, #176]	; (800c8f8 <plug_holes+0x140>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d102      	bne.n	800c854 <plug_holes+0x9c>
      lfree = mem;
 800c84e:	4a2a      	ldr	r2, [pc, #168]	; (800c8f8 <plug_holes+0x140>)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	881a      	ldrh	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c864:	d00a      	beq.n	800c87c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff ff80 	bl	800c770 <ptr_to_mem>
 800c870:	4604      	mov	r4, r0
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff ff8e 	bl	800c794 <mem_to_ptr>
 800c878:	4603      	mov	r3, r0
 800c87a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	885b      	ldrh	r3, [r3, #2]
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff ff75 	bl	800c770 <ptr_to_mem>
 800c886:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d01f      	beq.n	800c8d0 <plug_holes+0x118>
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	791b      	ldrb	r3, [r3, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d11b      	bne.n	800c8d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c898:	4b17      	ldr	r3, [pc, #92]	; (800c8f8 <plug_holes+0x140>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d102      	bne.n	800c8a8 <plug_holes+0xf0>
      lfree = pmem;
 800c8a2:	4a15      	ldr	r2, [pc, #84]	; (800c8f8 <plug_holes+0x140>)
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	881a      	ldrh	r2, [r3, #0]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8b8:	d00a      	beq.n	800c8d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff ff56 	bl	800c770 <ptr_to_mem>
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	68b8      	ldr	r0, [r7, #8]
 800c8c8:	f7ff ff64 	bl	800c794 <mem_to_ptr>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c8d0:	bf00      	nop
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd90      	pop	{r4, r7, pc}
 800c8d8:	20004da4 	.word	0x20004da4
 800c8dc:	080199b8 	.word	0x080199b8
 800c8e0:	080199e8 	.word	0x080199e8
 800c8e4:	08019a00 	.word	0x08019a00
 800c8e8:	20004da8 	.word	0x20004da8
 800c8ec:	08019a28 	.word	0x08019a28
 800c8f0:	08019a44 	.word	0x08019a44
 800c8f4:	08019a60 	.word	0x08019a60
 800c8f8:	20004db0 	.word	0x20004db0

0800c8fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c902:	4b1f      	ldr	r3, [pc, #124]	; (800c980 <mem_init+0x84>)
 800c904:	3303      	adds	r3, #3
 800c906:	f023 0303 	bic.w	r3, r3, #3
 800c90a:	461a      	mov	r2, r3
 800c90c:	4b1d      	ldr	r3, [pc, #116]	; (800c984 <mem_init+0x88>)
 800c90e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c910:	4b1c      	ldr	r3, [pc, #112]	; (800c984 <mem_init+0x88>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c91c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c92a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c92e:	f7ff ff1f 	bl	800c770 <ptr_to_mem>
 800c932:	4603      	mov	r3, r0
 800c934:	4a14      	ldr	r2, [pc, #80]	; (800c988 <mem_init+0x8c>)
 800c936:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c938:	4b13      	ldr	r3, [pc, #76]	; (800c988 <mem_init+0x8c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2201      	movs	r2, #1
 800c93e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c940:	4b11      	ldr	r3, [pc, #68]	; (800c988 <mem_init+0x8c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c948:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c94a:	4b0f      	ldr	r3, [pc, #60]	; (800c988 <mem_init+0x8c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c952:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c954:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <mem_init+0x88>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a0c      	ldr	r2, [pc, #48]	; (800c98c <mem_init+0x90>)
 800c95a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c95c:	480c      	ldr	r0, [pc, #48]	; (800c990 <mem_init+0x94>)
 800c95e:	f00a fe9b 	bl	8017698 <sys_mutex_new>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d006      	beq.n	800c976 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c968:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <mem_init+0x98>)
 800c96a:	f240 221f 	movw	r2, #543	; 0x21f
 800c96e:	490a      	ldr	r1, [pc, #40]	; (800c998 <mem_init+0x9c>)
 800c970:	480a      	ldr	r0, [pc, #40]	; (800c99c <mem_init+0xa0>)
 800c972:	f00a ff63 	bl	801783c <iprintf>
  }
}
 800c976:	bf00      	nop
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20008630 	.word	0x20008630
 800c984:	20004da4 	.word	0x20004da4
 800c988:	20004da8 	.word	0x20004da8
 800c98c:	20004db0 	.word	0x20004db0
 800c990:	20004dac 	.word	0x20004dac
 800c994:	080199b8 	.word	0x080199b8
 800c998:	08019a8c 	.word	0x08019a8c
 800c99c:	08019a00 	.word	0x08019a00

0800c9a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fef3 	bl	800c794 <mem_to_ptr>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff feda 	bl	800c770 <ptr_to_mem>
 800c9bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	885b      	ldrh	r3, [r3, #2]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7ff fed4 	bl	800c770 <ptr_to_mem>
 800c9c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	881b      	ldrh	r3, [r3, #0]
 800c9ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9d2:	d818      	bhi.n	800ca06 <mem_link_valid+0x66>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	885b      	ldrh	r3, [r3, #2]
 800c9d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9dc:	d813      	bhi.n	800ca06 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c9e2:	8afa      	ldrh	r2, [r7, #22]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d004      	beq.n	800c9f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	8afa      	ldrh	r2, [r7, #22]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d109      	bne.n	800ca06 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c9f2:	4b08      	ldr	r3, [pc, #32]	; (800ca14 <mem_link_valid+0x74>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d006      	beq.n	800ca0a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	885b      	ldrh	r3, [r3, #2]
 800ca00:	8afa      	ldrh	r2, [r7, #22]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d001      	beq.n	800ca0a <mem_link_valid+0x6a>
    return 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	e000      	b.n	800ca0c <mem_link_valid+0x6c>
  }
  return 1;
 800ca0a:	2301      	movs	r3, #1
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20004da8 	.word	0x20004da8

0800ca18 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b088      	sub	sp, #32
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d070      	beq.n	800cb08 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f003 0303 	and.w	r3, r3, #3
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00d      	beq.n	800ca4c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ca30:	4b37      	ldr	r3, [pc, #220]	; (800cb10 <mem_free+0xf8>)
 800ca32:	f240 2273 	movw	r2, #627	; 0x273
 800ca36:	4937      	ldr	r1, [pc, #220]	; (800cb14 <mem_free+0xfc>)
 800ca38:	4837      	ldr	r0, [pc, #220]	; (800cb18 <mem_free+0x100>)
 800ca3a:	f00a feff 	bl	801783c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca3e:	f00a fe7d 	bl	801773c <sys_arch_protect>
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f00a fe87 	bl	8017758 <sys_arch_unprotect>
    return;
 800ca4a:	e05e      	b.n	800cb0a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3b08      	subs	r3, #8
 800ca50:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ca52:	4b32      	ldr	r3, [pc, #200]	; (800cb1c <mem_free+0x104>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	69fa      	ldr	r2, [r7, #28]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d306      	bcc.n	800ca6a <mem_free+0x52>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f103 020c 	add.w	r2, r3, #12
 800ca62:	4b2f      	ldr	r3, [pc, #188]	; (800cb20 <mem_free+0x108>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d90d      	bls.n	800ca86 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ca6a:	4b29      	ldr	r3, [pc, #164]	; (800cb10 <mem_free+0xf8>)
 800ca6c:	f240 227f 	movw	r2, #639	; 0x27f
 800ca70:	492c      	ldr	r1, [pc, #176]	; (800cb24 <mem_free+0x10c>)
 800ca72:	4829      	ldr	r0, [pc, #164]	; (800cb18 <mem_free+0x100>)
 800ca74:	f00a fee2 	bl	801783c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca78:	f00a fe60 	bl	801773c <sys_arch_protect>
 800ca7c:	6138      	str	r0, [r7, #16]
 800ca7e:	6938      	ldr	r0, [r7, #16]
 800ca80:	f00a fe6a 	bl	8017758 <sys_arch_unprotect>
    return;
 800ca84:	e041      	b.n	800cb0a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca86:	4828      	ldr	r0, [pc, #160]	; (800cb28 <mem_free+0x110>)
 800ca88:	f00a fe1c 	bl	80176c4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	791b      	ldrb	r3, [r3, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d110      	bne.n	800cab6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca94:	4b1e      	ldr	r3, [pc, #120]	; (800cb10 <mem_free+0xf8>)
 800ca96:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca9a:	4924      	ldr	r1, [pc, #144]	; (800cb2c <mem_free+0x114>)
 800ca9c:	481e      	ldr	r0, [pc, #120]	; (800cb18 <mem_free+0x100>)
 800ca9e:	f00a fecd 	bl	801783c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800caa2:	4821      	ldr	r0, [pc, #132]	; (800cb28 <mem_free+0x110>)
 800caa4:	f00a fe1d 	bl	80176e2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800caa8:	f00a fe48 	bl	801773c <sys_arch_protect>
 800caac:	6178      	str	r0, [r7, #20]
 800caae:	6978      	ldr	r0, [r7, #20]
 800cab0:	f00a fe52 	bl	8017758 <sys_arch_unprotect>
    return;
 800cab4:	e029      	b.n	800cb0a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cab6:	69f8      	ldr	r0, [r7, #28]
 800cab8:	f7ff ff72 	bl	800c9a0 <mem_link_valid>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d110      	bne.n	800cae4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cac2:	4b13      	ldr	r3, [pc, #76]	; (800cb10 <mem_free+0xf8>)
 800cac4:	f240 2295 	movw	r2, #661	; 0x295
 800cac8:	4919      	ldr	r1, [pc, #100]	; (800cb30 <mem_free+0x118>)
 800caca:	4813      	ldr	r0, [pc, #76]	; (800cb18 <mem_free+0x100>)
 800cacc:	f00a feb6 	bl	801783c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cad0:	4815      	ldr	r0, [pc, #84]	; (800cb28 <mem_free+0x110>)
 800cad2:	f00a fe06 	bl	80176e2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cad6:	f00a fe31 	bl	801773c <sys_arch_protect>
 800cada:	61b8      	str	r0, [r7, #24]
 800cadc:	69b8      	ldr	r0, [r7, #24]
 800cade:	f00a fe3b 	bl	8017758 <sys_arch_unprotect>
    return;
 800cae2:	e012      	b.n	800cb0a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	2200      	movs	r2, #0
 800cae8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <mem_free+0x11c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	69fa      	ldr	r2, [r7, #28]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d202      	bcs.n	800cafa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800caf4:	4a0f      	ldr	r2, [pc, #60]	; (800cb34 <mem_free+0x11c>)
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cafa:	69f8      	ldr	r0, [r7, #28]
 800cafc:	f7ff fe5c 	bl	800c7b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cb00:	4809      	ldr	r0, [pc, #36]	; (800cb28 <mem_free+0x110>)
 800cb02:	f00a fdee 	bl	80176e2 <sys_mutex_unlock>
 800cb06:	e000      	b.n	800cb0a <mem_free+0xf2>
    return;
 800cb08:	bf00      	nop
}
 800cb0a:	3720      	adds	r7, #32
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	080199b8 	.word	0x080199b8
 800cb14:	08019aa8 	.word	0x08019aa8
 800cb18:	08019a00 	.word	0x08019a00
 800cb1c:	20004da4 	.word	0x20004da4
 800cb20:	20004da8 	.word	0x20004da8
 800cb24:	08019acc 	.word	0x08019acc
 800cb28:	20004dac 	.word	0x20004dac
 800cb2c:	08019ae8 	.word	0x08019ae8
 800cb30:	08019b10 	.word	0x08019b10
 800cb34:	20004db0 	.word	0x20004db0

0800cb38 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cb44:	887b      	ldrh	r3, [r7, #2]
 800cb46:	3303      	adds	r3, #3
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cb50:	8bfb      	ldrh	r3, [r7, #30]
 800cb52:	2b0b      	cmp	r3, #11
 800cb54:	d801      	bhi.n	800cb5a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cb56:	230c      	movs	r3, #12
 800cb58:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cb5a:	8bfb      	ldrh	r3, [r7, #30]
 800cb5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb60:	d803      	bhi.n	800cb6a <mem_trim+0x32>
 800cb62:	8bfa      	ldrh	r2, [r7, #30]
 800cb64:	887b      	ldrh	r3, [r7, #2]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d201      	bcs.n	800cb6e <mem_trim+0x36>
    return NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e0d8      	b.n	800cd20 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cb6e:	4b6e      	ldr	r3, [pc, #440]	; (800cd28 <mem_trim+0x1f0>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d304      	bcc.n	800cb82 <mem_trim+0x4a>
 800cb78:	4b6c      	ldr	r3, [pc, #432]	; (800cd2c <mem_trim+0x1f4>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d306      	bcc.n	800cb90 <mem_trim+0x58>
 800cb82:	4b6b      	ldr	r3, [pc, #428]	; (800cd30 <mem_trim+0x1f8>)
 800cb84:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb88:	496a      	ldr	r1, [pc, #424]	; (800cd34 <mem_trim+0x1fc>)
 800cb8a:	486b      	ldr	r0, [pc, #428]	; (800cd38 <mem_trim+0x200>)
 800cb8c:	f00a fe56 	bl	801783c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb90:	4b65      	ldr	r3, [pc, #404]	; (800cd28 <mem_trim+0x1f0>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d304      	bcc.n	800cba4 <mem_trim+0x6c>
 800cb9a:	4b64      	ldr	r3, [pc, #400]	; (800cd2c <mem_trim+0x1f4>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d307      	bcc.n	800cbb4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cba4:	f00a fdca 	bl	801773c <sys_arch_protect>
 800cba8:	60b8      	str	r0, [r7, #8]
 800cbaa:	68b8      	ldr	r0, [r7, #8]
 800cbac:	f00a fdd4 	bl	8017758 <sys_arch_unprotect>
    return rmem;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	e0b5      	b.n	800cd20 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3b08      	subs	r3, #8
 800cbb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cbba:	69b8      	ldr	r0, [r7, #24]
 800cbbc:	f7ff fdea 	bl	800c794 <mem_to_ptr>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	881a      	ldrh	r2, [r3, #0]
 800cbc8:	8afb      	ldrh	r3, [r7, #22]
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b08      	subs	r3, #8
 800cbd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cbd2:	8bfa      	ldrh	r2, [r7, #30]
 800cbd4:	8abb      	ldrh	r3, [r7, #20]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d906      	bls.n	800cbe8 <mem_trim+0xb0>
 800cbda:	4b55      	ldr	r3, [pc, #340]	; (800cd30 <mem_trim+0x1f8>)
 800cbdc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cbe0:	4956      	ldr	r1, [pc, #344]	; (800cd3c <mem_trim+0x204>)
 800cbe2:	4855      	ldr	r0, [pc, #340]	; (800cd38 <mem_trim+0x200>)
 800cbe4:	f00a fe2a 	bl	801783c <iprintf>
  if (newsize > size) {
 800cbe8:	8bfa      	ldrh	r2, [r7, #30]
 800cbea:	8abb      	ldrh	r3, [r7, #20]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d901      	bls.n	800cbf4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	e095      	b.n	800cd20 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cbf4:	8bfa      	ldrh	r2, [r7, #30]
 800cbf6:	8abb      	ldrh	r3, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d101      	bne.n	800cc00 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	e08f      	b.n	800cd20 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc00:	484f      	ldr	r0, [pc, #316]	; (800cd40 <mem_trim+0x208>)
 800cc02:	f00a fd5f 	bl	80176c4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff fdb0 	bl	800c770 <ptr_to_mem>
 800cc10:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	791b      	ldrb	r3, [r3, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d13f      	bne.n	800cc9a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc22:	d106      	bne.n	800cc32 <mem_trim+0xfa>
 800cc24:	4b42      	ldr	r3, [pc, #264]	; (800cd30 <mem_trim+0x1f8>)
 800cc26:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cc2a:	4946      	ldr	r1, [pc, #280]	; (800cd44 <mem_trim+0x20c>)
 800cc2c:	4842      	ldr	r0, [pc, #264]	; (800cd38 <mem_trim+0x200>)
 800cc2e:	f00a fe05 	bl	801783c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc38:	8afa      	ldrh	r2, [r7, #22]
 800cc3a:	8bfb      	ldrh	r3, [r7, #30]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	3308      	adds	r3, #8
 800cc42:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cc44:	4b40      	ldr	r3, [pc, #256]	; (800cd48 <mem_trim+0x210>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d106      	bne.n	800cc5c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cc4e:	89fb      	ldrh	r3, [r7, #14]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff fd8d 	bl	800c770 <ptr_to_mem>
 800cc56:	4603      	mov	r3, r0
 800cc58:	4a3b      	ldr	r2, [pc, #236]	; (800cd48 <mem_trim+0x210>)
 800cc5a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cc5c:	89fb      	ldrh	r3, [r7, #14]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fd86 	bl	800c770 <ptr_to_mem>
 800cc64:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	89ba      	ldrh	r2, [r7, #12]
 800cc70:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	8afa      	ldrh	r2, [r7, #22]
 800cc76:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	89fa      	ldrh	r2, [r7, #14]
 800cc7c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc86:	d047      	beq.n	800cd18 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff fd6f 	bl	800c770 <ptr_to_mem>
 800cc92:	4602      	mov	r2, r0
 800cc94:	89fb      	ldrh	r3, [r7, #14]
 800cc96:	8053      	strh	r3, [r2, #2]
 800cc98:	e03e      	b.n	800cd18 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc9a:	8bfb      	ldrh	r3, [r7, #30]
 800cc9c:	f103 0214 	add.w	r2, r3, #20
 800cca0:	8abb      	ldrh	r3, [r7, #20]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d838      	bhi.n	800cd18 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cca6:	8afa      	ldrh	r2, [r7, #22]
 800cca8:	8bfb      	ldrh	r3, [r7, #30]
 800ccaa:	4413      	add	r3, r2
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3308      	adds	r3, #8
 800ccb0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccba:	d106      	bne.n	800ccca <mem_trim+0x192>
 800ccbc:	4b1c      	ldr	r3, [pc, #112]	; (800cd30 <mem_trim+0x1f8>)
 800ccbe:	f240 3216 	movw	r2, #790	; 0x316
 800ccc2:	4920      	ldr	r1, [pc, #128]	; (800cd44 <mem_trim+0x20c>)
 800ccc4:	481c      	ldr	r0, [pc, #112]	; (800cd38 <mem_trim+0x200>)
 800ccc6:	f00a fdb9 	bl	801783c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ccca:	89fb      	ldrh	r3, [r7, #14]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff fd4f 	bl	800c770 <ptr_to_mem>
 800ccd2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ccd4:	4b1c      	ldr	r3, [pc, #112]	; (800cd48 <mem_trim+0x210>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d202      	bcs.n	800cce4 <mem_trim+0x1ac>
      lfree = mem2;
 800ccde:	4a1a      	ldr	r2, [pc, #104]	; (800cd48 <mem_trim+0x210>)
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	2200      	movs	r2, #0
 800cce8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	881a      	ldrh	r2, [r3, #0]
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	8afa      	ldrh	r2, [r7, #22]
 800ccf6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	89fa      	ldrh	r2, [r7, #14]
 800ccfc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	881b      	ldrh	r3, [r3, #0]
 800cd02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd06:	d007      	beq.n	800cd18 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7ff fd2f 	bl	800c770 <ptr_to_mem>
 800cd12:	4602      	mov	r2, r0
 800cd14:	89fb      	ldrh	r3, [r7, #14]
 800cd16:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cd18:	4809      	ldr	r0, [pc, #36]	; (800cd40 <mem_trim+0x208>)
 800cd1a:	f00a fce2 	bl	80176e2 <sys_mutex_unlock>
  return rmem;
 800cd1e:	687b      	ldr	r3, [r7, #4]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20004da4 	.word	0x20004da4
 800cd2c:	20004da8 	.word	0x20004da8
 800cd30:	080199b8 	.word	0x080199b8
 800cd34:	08019b44 	.word	0x08019b44
 800cd38:	08019a00 	.word	0x08019a00
 800cd3c:	08019b5c 	.word	0x08019b5c
 800cd40:	20004dac 	.word	0x20004dac
 800cd44:	08019b7c 	.word	0x08019b7c
 800cd48:	20004db0 	.word	0x20004db0

0800cd4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	4603      	mov	r3, r0
 800cd54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cd56:	88fb      	ldrh	r3, [r7, #6]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <mem_malloc+0x14>
    return NULL;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	e0e2      	b.n	800cf26 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cd60:	88fb      	ldrh	r3, [r7, #6]
 800cd62:	3303      	adds	r3, #3
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	f023 0303 	bic.w	r3, r3, #3
 800cd6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cd6c:	8bbb      	ldrh	r3, [r7, #28]
 800cd6e:	2b0b      	cmp	r3, #11
 800cd70:	d801      	bhi.n	800cd76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cd72:	230c      	movs	r3, #12
 800cd74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cd76:	8bbb      	ldrh	r3, [r7, #28]
 800cd78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd7c:	d803      	bhi.n	800cd86 <mem_malloc+0x3a>
 800cd7e:	8bba      	ldrh	r2, [r7, #28]
 800cd80:	88fb      	ldrh	r3, [r7, #6]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d201      	bcs.n	800cd8a <mem_malloc+0x3e>
    return NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e0cd      	b.n	800cf26 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cd8a:	4869      	ldr	r0, [pc, #420]	; (800cf30 <mem_malloc+0x1e4>)
 800cd8c:	f00a fc9a 	bl	80176c4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd90:	4b68      	ldr	r3, [pc, #416]	; (800cf34 <mem_malloc+0x1e8>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff fcfd 	bl	800c794 <mem_to_ptr>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	83fb      	strh	r3, [r7, #30]
 800cd9e:	e0b7      	b.n	800cf10 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cda0:	8bfb      	ldrh	r3, [r7, #30]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7ff fce4 	bl	800c770 <ptr_to_mem>
 800cda8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	791b      	ldrb	r3, [r3, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f040 80a7 	bne.w	800cf02 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	8bfb      	ldrh	r3, [r7, #30]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	f1a3 0208 	sub.w	r2, r3, #8
 800cdc2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	f0c0 809c 	bcc.w	800cf02 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	8bfb      	ldrh	r3, [r7, #30]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	f1a3 0208 	sub.w	r2, r3, #8
 800cdd8:	8bbb      	ldrh	r3, [r7, #28]
 800cdda:	3314      	adds	r3, #20
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d333      	bcc.n	800ce48 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cde0:	8bfa      	ldrh	r2, [r7, #30]
 800cde2:	8bbb      	ldrh	r3, [r7, #28]
 800cde4:	4413      	add	r3, r2
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	3308      	adds	r3, #8
 800cdea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cdec:	8a7b      	ldrh	r3, [r7, #18]
 800cdee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdf2:	d106      	bne.n	800ce02 <mem_malloc+0xb6>
 800cdf4:	4b50      	ldr	r3, [pc, #320]	; (800cf38 <mem_malloc+0x1ec>)
 800cdf6:	f240 3287 	movw	r2, #903	; 0x387
 800cdfa:	4950      	ldr	r1, [pc, #320]	; (800cf3c <mem_malloc+0x1f0>)
 800cdfc:	4850      	ldr	r0, [pc, #320]	; (800cf40 <mem_malloc+0x1f4>)
 800cdfe:	f00a fd1d 	bl	801783c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ce02:	8a7b      	ldrh	r3, [r7, #18]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff fcb3 	bl	800c770 <ptr_to_mem>
 800ce0a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	881a      	ldrh	r2, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	8bfa      	ldrh	r2, [r7, #30]
 800ce1e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	8a7a      	ldrh	r2, [r7, #18]
 800ce24:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce34:	d00b      	beq.n	800ce4e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff fc98 	bl	800c770 <ptr_to_mem>
 800ce40:	4602      	mov	r2, r0
 800ce42:	8a7b      	ldrh	r3, [r7, #18]
 800ce44:	8053      	strh	r3, [r2, #2]
 800ce46:	e002      	b.n	800ce4e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce4e:	4b39      	ldr	r3, [pc, #228]	; (800cf34 <mem_malloc+0x1e8>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d127      	bne.n	800cea8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ce58:	4b36      	ldr	r3, [pc, #216]	; (800cf34 <mem_malloc+0x1e8>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ce5e:	e005      	b.n	800ce6c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7ff fc83 	bl	800c770 <ptr_to_mem>
 800ce6a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	791b      	ldrb	r3, [r3, #4]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d004      	beq.n	800ce7e <mem_malloc+0x132>
 800ce74:	4b33      	ldr	r3, [pc, #204]	; (800cf44 <mem_malloc+0x1f8>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	69ba      	ldr	r2, [r7, #24]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d1f0      	bne.n	800ce60 <mem_malloc+0x114>
          }
          lfree = cur;
 800ce7e:	4a2d      	ldr	r2, [pc, #180]	; (800cf34 <mem_malloc+0x1e8>)
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce84:	4b2b      	ldr	r3, [pc, #172]	; (800cf34 <mem_malloc+0x1e8>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	4b2e      	ldr	r3, [pc, #184]	; (800cf44 <mem_malloc+0x1f8>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d00b      	beq.n	800cea8 <mem_malloc+0x15c>
 800ce90:	4b28      	ldr	r3, [pc, #160]	; (800cf34 <mem_malloc+0x1e8>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	791b      	ldrb	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d006      	beq.n	800cea8 <mem_malloc+0x15c>
 800ce9a:	4b27      	ldr	r3, [pc, #156]	; (800cf38 <mem_malloc+0x1ec>)
 800ce9c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cea0:	4929      	ldr	r1, [pc, #164]	; (800cf48 <mem_malloc+0x1fc>)
 800cea2:	4827      	ldr	r0, [pc, #156]	; (800cf40 <mem_malloc+0x1f4>)
 800cea4:	f00a fcca 	bl	801783c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cea8:	4821      	ldr	r0, [pc, #132]	; (800cf30 <mem_malloc+0x1e4>)
 800ceaa:	f00a fc1a 	bl	80176e2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ceae:	8bba      	ldrh	r2, [r7, #28]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	4a23      	ldr	r2, [pc, #140]	; (800cf44 <mem_malloc+0x1f8>)
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d906      	bls.n	800cecc <mem_malloc+0x180>
 800cebe:	4b1e      	ldr	r3, [pc, #120]	; (800cf38 <mem_malloc+0x1ec>)
 800cec0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cec4:	4921      	ldr	r1, [pc, #132]	; (800cf4c <mem_malloc+0x200>)
 800cec6:	481e      	ldr	r0, [pc, #120]	; (800cf40 <mem_malloc+0x1f4>)
 800cec8:	f00a fcb8 	bl	801783c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <mem_malloc+0x198>
 800ced6:	4b18      	ldr	r3, [pc, #96]	; (800cf38 <mem_malloc+0x1ec>)
 800ced8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cedc:	491c      	ldr	r1, [pc, #112]	; (800cf50 <mem_malloc+0x204>)
 800cede:	4818      	ldr	r0, [pc, #96]	; (800cf40 <mem_malloc+0x1f4>)
 800cee0:	f00a fcac 	bl	801783c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	f003 0303 	and.w	r3, r3, #3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d006      	beq.n	800cefc <mem_malloc+0x1b0>
 800ceee:	4b12      	ldr	r3, [pc, #72]	; (800cf38 <mem_malloc+0x1ec>)
 800cef0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cef4:	4917      	ldr	r1, [pc, #92]	; (800cf54 <mem_malloc+0x208>)
 800cef6:	4812      	ldr	r0, [pc, #72]	; (800cf40 <mem_malloc+0x1f4>)
 800cef8:	f00a fca0 	bl	801783c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	3308      	adds	r3, #8
 800cf00:	e011      	b.n	800cf26 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cf02:	8bfb      	ldrh	r3, [r7, #30]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff fc33 	bl	800c770 <ptr_to_mem>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf10:	8bfa      	ldrh	r2, [r7, #30]
 800cf12:	8bbb      	ldrh	r3, [r7, #28]
 800cf14:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	f4ff af41 	bcc.w	800cda0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cf1e:	4804      	ldr	r0, [pc, #16]	; (800cf30 <mem_malloc+0x1e4>)
 800cf20:	f00a fbdf 	bl	80176e2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3720      	adds	r7, #32
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20004dac 	.word	0x20004dac
 800cf34:	20004db0 	.word	0x20004db0
 800cf38:	080199b8 	.word	0x080199b8
 800cf3c:	08019b7c 	.word	0x08019b7c
 800cf40:	08019a00 	.word	0x08019a00
 800cf44:	20004da8 	.word	0x20004da8
 800cf48:	08019b90 	.word	0x08019b90
 800cf4c:	08019bac 	.word	0x08019bac
 800cf50:	08019bdc 	.word	0x08019bdc
 800cf54:	08019c0c 	.word	0x08019c0c

0800cf58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	3303      	adds	r3, #3
 800cf6e:	f023 0303 	bic.w	r3, r3, #3
 800cf72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	e011      	b.n	800cf9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	4413      	add	r3, r2
 800cf96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	885b      	ldrh	r3, [r3, #2]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	dbe7      	blt.n	800cf7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cfaa:	bf00      	nop
 800cfac:	bf00      	nop
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	80fb      	strh	r3, [r7, #6]
 800cfc2:	e009      	b.n	800cfd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cfc4:	88fb      	ldrh	r3, [r7, #6]
 800cfc6:	4a08      	ldr	r2, [pc, #32]	; (800cfe8 <memp_init+0x30>)
 800cfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff ffc3 	bl	800cf58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cfd2:	88fb      	ldrh	r3, [r7, #6]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	80fb      	strh	r3, [r7, #6]
 800cfd8:	88fb      	ldrh	r3, [r7, #6]
 800cfda:	2b0c      	cmp	r3, #12
 800cfdc:	d9f2      	bls.n	800cfc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cfde:	bf00      	nop
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	0801c478 	.word	0x0801c478

0800cfec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cff4:	f00a fba2 	bl	801773c <sys_arch_protect>
 800cff8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d015      	beq.n	800d034 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	6812      	ldr	r2, [r2, #0]
 800d010:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f003 0303 	and.w	r3, r3, #3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d006      	beq.n	800d02a <do_memp_malloc_pool+0x3e>
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <do_memp_malloc_pool+0x58>)
 800d01e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d022:	4909      	ldr	r1, [pc, #36]	; (800d048 <do_memp_malloc_pool+0x5c>)
 800d024:	4809      	ldr	r0, [pc, #36]	; (800d04c <do_memp_malloc_pool+0x60>)
 800d026:	f00a fc09 	bl	801783c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f00a fb94 	bl	8017758 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	e003      	b.n	800d03c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f00a fb8f 	bl	8017758 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	08019c30 	.word	0x08019c30
 800d048:	08019c60 	.word	0x08019c60
 800d04c:	08019c84 	.word	0x08019c84

0800d050 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	2b0c      	cmp	r3, #12
 800d05e:	d908      	bls.n	800d072 <memp_malloc+0x22>
 800d060:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <memp_malloc+0x3c>)
 800d062:	f240 1257 	movw	r2, #343	; 0x157
 800d066:	490a      	ldr	r1, [pc, #40]	; (800d090 <memp_malloc+0x40>)
 800d068:	480a      	ldr	r0, [pc, #40]	; (800d094 <memp_malloc+0x44>)
 800d06a:	f00a fbe7 	bl	801783c <iprintf>
 800d06e:	2300      	movs	r3, #0
 800d070:	e008      	b.n	800d084 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	4a08      	ldr	r2, [pc, #32]	; (800d098 <memp_malloc+0x48>)
 800d076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff ffb6 	bl	800cfec <do_memp_malloc_pool>
 800d080:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d082:	68fb      	ldr	r3, [r7, #12]
}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	08019c30 	.word	0x08019c30
 800d090:	08019cc0 	.word	0x08019cc0
 800d094:	08019c84 	.word	0x08019c84
 800d098:	0801c478 	.word	0x0801c478

0800d09c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	f003 0303 	and.w	r3, r3, #3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <do_memp_free_pool+0x22>
 800d0b0:	4b0d      	ldr	r3, [pc, #52]	; (800d0e8 <do_memp_free_pool+0x4c>)
 800d0b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d0b6:	490d      	ldr	r1, [pc, #52]	; (800d0ec <do_memp_free_pool+0x50>)
 800d0b8:	480d      	ldr	r0, [pc, #52]	; (800d0f0 <do_memp_free_pool+0x54>)
 800d0ba:	f00a fbbf 	bl	801783c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d0c2:	f00a fb3b 	bl	801773c <sys_arch_protect>
 800d0c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d0da:	68b8      	ldr	r0, [r7, #8]
 800d0dc:	f00a fb3c 	bl	8017758 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d0e0:	bf00      	nop
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	08019c30 	.word	0x08019c30
 800d0ec:	08019ce0 	.word	0x08019ce0
 800d0f0:	08019c84 	.word	0x08019c84

0800d0f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	2b0c      	cmp	r3, #12
 800d104:	d907      	bls.n	800d116 <memp_free+0x22>
 800d106:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <memp_free+0x44>)
 800d108:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d10c:	490b      	ldr	r1, [pc, #44]	; (800d13c <memp_free+0x48>)
 800d10e:	480c      	ldr	r0, [pc, #48]	; (800d140 <memp_free+0x4c>)
 800d110:	f00a fb94 	bl	801783c <iprintf>
 800d114:	e00c      	b.n	800d130 <memp_free+0x3c>

  if (mem == NULL) {
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	4a09      	ldr	r2, [pc, #36]	; (800d144 <memp_free+0x50>)
 800d120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff ffb8 	bl	800d09c <do_memp_free_pool>
 800d12c:	e000      	b.n	800d130 <memp_free+0x3c>
    return;
 800d12e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	08019c30 	.word	0x08019c30
 800d13c:	08019d00 	.word	0x08019d00
 800d140:	08019c84 	.word	0x08019c84
 800d144:	0801c478 	.word	0x0801c478

0800d148 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d148:	b480      	push	{r7}
 800d14a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d14c:	bf00      	nop
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
	...

0800d158 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d108      	bne.n	800d17e <netif_add+0x26>
 800d16c:	4b57      	ldr	r3, [pc, #348]	; (800d2cc <netif_add+0x174>)
 800d16e:	f240 1227 	movw	r2, #295	; 0x127
 800d172:	4957      	ldr	r1, [pc, #348]	; (800d2d0 <netif_add+0x178>)
 800d174:	4857      	ldr	r0, [pc, #348]	; (800d2d4 <netif_add+0x17c>)
 800d176:	f00a fb61 	bl	801783c <iprintf>
 800d17a:	2300      	movs	r3, #0
 800d17c:	e0a2      	b.n	800d2c4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	2b00      	cmp	r3, #0
 800d182:	d108      	bne.n	800d196 <netif_add+0x3e>
 800d184:	4b51      	ldr	r3, [pc, #324]	; (800d2cc <netif_add+0x174>)
 800d186:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d18a:	4953      	ldr	r1, [pc, #332]	; (800d2d8 <netif_add+0x180>)
 800d18c:	4851      	ldr	r0, [pc, #324]	; (800d2d4 <netif_add+0x17c>)
 800d18e:	f00a fb55 	bl	801783c <iprintf>
 800d192:	2300      	movs	r3, #0
 800d194:	e096      	b.n	800d2c4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d19c:	4b4f      	ldr	r3, [pc, #316]	; (800d2dc <netif_add+0x184>)
 800d19e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d1a6:	4b4d      	ldr	r3, [pc, #308]	; (800d2dc <netif_add+0x184>)
 800d1a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d1b0:	4b4a      	ldr	r3, [pc, #296]	; (800d2dc <netif_add+0x184>)
 800d1b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	4a45      	ldr	r2, [pc, #276]	; (800d2e0 <netif_add+0x188>)
 800d1ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6a3a      	ldr	r2, [r7, #32]
 800d1e4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d1e6:	4b3f      	ldr	r3, [pc, #252]	; (800d2e4 <netif_add+0x18c>)
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	68b9      	ldr	r1, [r7, #8]
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f000 f913 	bl	800d428 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	4798      	blx	r3
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <netif_add+0xba>
    return NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	e058      	b.n	800d2c4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d218:	2bff      	cmp	r3, #255	; 0xff
 800d21a:	d103      	bne.n	800d224 <netif_add+0xcc>
        netif->num = 0;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d224:	2300      	movs	r3, #0
 800d226:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d228:	4b2f      	ldr	r3, [pc, #188]	; (800d2e8 <netif_add+0x190>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	e02b      	b.n	800d288 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	429a      	cmp	r2, r3
 800d236:	d106      	bne.n	800d246 <netif_add+0xee>
 800d238:	4b24      	ldr	r3, [pc, #144]	; (800d2cc <netif_add+0x174>)
 800d23a:	f240 128b 	movw	r2, #395	; 0x18b
 800d23e:	492b      	ldr	r1, [pc, #172]	; (800d2ec <netif_add+0x194>)
 800d240:	4824      	ldr	r0, [pc, #144]	; (800d2d4 <netif_add+0x17c>)
 800d242:	f00a fafb 	bl	801783c <iprintf>
        num_netifs++;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	3301      	adds	r3, #1
 800d24a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2bff      	cmp	r3, #255	; 0xff
 800d250:	dd06      	ble.n	800d260 <netif_add+0x108>
 800d252:	4b1e      	ldr	r3, [pc, #120]	; (800d2cc <netif_add+0x174>)
 800d254:	f240 128d 	movw	r2, #397	; 0x18d
 800d258:	4925      	ldr	r1, [pc, #148]	; (800d2f0 <netif_add+0x198>)
 800d25a:	481e      	ldr	r0, [pc, #120]	; (800d2d4 <netif_add+0x17c>)
 800d25c:	f00a faee 	bl	801783c <iprintf>
        if (netif2->num == netif->num) {
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d108      	bne.n	800d282 <netif_add+0x12a>
          netif->num++;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d276:	3301      	adds	r3, #1
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d280:	e005      	b.n	800d28e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	617b      	str	r3, [r7, #20]
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1d0      	bne.n	800d230 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1be      	bne.n	800d212 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d29a:	2bfe      	cmp	r3, #254	; 0xfe
 800d29c:	d103      	bne.n	800d2a6 <netif_add+0x14e>
    netif_num = 0;
 800d29e:	4b11      	ldr	r3, [pc, #68]	; (800d2e4 <netif_add+0x18c>)
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	701a      	strb	r2, [r3, #0]
 800d2a4:	e006      	b.n	800d2b4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	4b0c      	ldr	r3, [pc, #48]	; (800d2e4 <netif_add+0x18c>)
 800d2b2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d2b4:	4b0c      	ldr	r3, [pc, #48]	; (800d2e8 <netif_add+0x190>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d2bc:	4a0a      	ldr	r2, [pc, #40]	; (800d2e8 <netif_add+0x190>)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3718      	adds	r7, #24
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	08019d1c 	.word	0x08019d1c
 800d2d0:	08019db0 	.word	0x08019db0
 800d2d4:	08019d6c 	.word	0x08019d6c
 800d2d8:	08019dcc 	.word	0x08019dcc
 800d2dc:	0801c4ec 	.word	0x0801c4ec
 800d2e0:	0800d703 	.word	0x0800d703
 800d2e4:	20004de8 	.word	0x20004de8
 800d2e8:	2000bd1c 	.word	0x2000bd1c
 800d2ec:	08019df0 	.word	0x08019df0
 800d2f0:	08019e04 	.word	0x08019e04

0800d2f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f002 fe4f 	bl	800ffa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f007 fcfd 	bl	8014d08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <netif_do_set_ipaddr+0x20>
 800d32a:	4b1d      	ldr	r3, [pc, #116]	; (800d3a0 <netif_do_set_ipaddr+0x88>)
 800d32c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d330:	491c      	ldr	r1, [pc, #112]	; (800d3a4 <netif_do_set_ipaddr+0x8c>)
 800d332:	481d      	ldr	r0, [pc, #116]	; (800d3a8 <netif_do_set_ipaddr+0x90>)
 800d334:	f00a fa82 	bl	801783c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <netif_do_set_ipaddr+0x34>
 800d33e:	4b18      	ldr	r3, [pc, #96]	; (800d3a0 <netif_do_set_ipaddr+0x88>)
 800d340:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d344:	4917      	ldr	r1, [pc, #92]	; (800d3a4 <netif_do_set_ipaddr+0x8c>)
 800d346:	4818      	ldr	r0, [pc, #96]	; (800d3a8 <netif_do_set_ipaddr+0x90>)
 800d348:	f00a fa78 	bl	801783c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3304      	adds	r3, #4
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d01c      	beq.n	800d394 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	3304      	adds	r3, #4
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d36a:	f107 0314 	add.w	r3, r7, #20
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff ffbf 	bl	800d2f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <netif_do_set_ipaddr+0x6a>
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	e000      	b.n	800d384 <netif_do_set_ipaddr+0x6c>
 800d382:	2300      	movs	r3, #0
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d388:	2101      	movs	r1, #1
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 f8d2 	bl	800d534 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d390:	2301      	movs	r3, #1
 800d392:	e000      	b.n	800d396 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	08019d1c 	.word	0x08019d1c
 800d3a4:	08019e34 	.word	0x08019e34
 800d3a8:	08019d6c 	.word	0x08019d6c

0800d3ac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d00a      	beq.n	800d3dc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <netif_do_set_netmask+0x26>
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	e000      	b.n	800d3d4 <netif_do_set_netmask+0x28>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e000      	b.n	800d3de <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3714      	adds	r7, #20
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b085      	sub	sp, #20
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	330c      	adds	r3, #12
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d00a      	beq.n	800d41a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <netif_do_set_gw+0x26>
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	e000      	b.n	800d412 <netif_do_set_gw+0x28>
 800d410:	2300      	movs	r3, #0
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d416:	2301      	movs	r3, #1
 800d418:	e000      	b.n	800d41c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d41a:	2300      	movs	r3, #0
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3714      	adds	r7, #20
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b088      	sub	sp, #32
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d436:	2300      	movs	r3, #0
 800d438:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d444:	4b1c      	ldr	r3, [pc, #112]	; (800d4b8 <netif_set_addr+0x90>)
 800d446:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d44e:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <netif_set_addr+0x90>)
 800d450:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d458:	4b17      	ldr	r3, [pc, #92]	; (800d4b8 <netif_set_addr+0x90>)
 800d45a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <netif_set_addr+0x42>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <netif_set_addr+0x46>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e000      	b.n	800d470 <netif_set_addr+0x48>
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d478:	f107 0310 	add.w	r3, r7, #16
 800d47c:	461a      	mov	r2, r3
 800d47e:	68b9      	ldr	r1, [r7, #8]
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7ff ff49 	bl	800d318 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d486:	69fa      	ldr	r2, [r7, #28]
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7ff ff8e 	bl	800d3ac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f7ff ffa8 	bl	800d3ea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d106      	bne.n	800d4ae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d4a0:	f107 0310 	add.w	r3, r7, #16
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f7ff ff35 	bl	800d318 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d4ae:	bf00      	nop
 800d4b0:	3720      	adds	r7, #32
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	0801c4ec 	.word	0x0801c4ec

0800d4bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d4c4:	4a04      	ldr	r2, [pc, #16]	; (800d4d8 <netif_set_default+0x1c>)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d4ca:	bf00      	nop
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	2000bd20 	.word	0x2000bd20

0800d4dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d107      	bne.n	800d4fa <netif_set_up+0x1e>
 800d4ea:	4b0f      	ldr	r3, [pc, #60]	; (800d528 <netif_set_up+0x4c>)
 800d4ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d4f0:	490e      	ldr	r1, [pc, #56]	; (800d52c <netif_set_up+0x50>)
 800d4f2:	480f      	ldr	r0, [pc, #60]	; (800d530 <netif_set_up+0x54>)
 800d4f4:	f00a f9a2 	bl	801783c <iprintf>
 800d4f8:	e013      	b.n	800d522 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10c      	bne.n	800d522 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d50e:	f043 0301 	orr.w	r3, r3, #1
 800d512:	b2da      	uxtb	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d51a:	2103      	movs	r1, #3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f809 	bl	800d534 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	08019d1c 	.word	0x08019d1c
 800d52c:	08019ea4 	.word	0x08019ea4
 800d530:	08019d6c 	.word	0x08019d6c

0800d534 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <netif_issue_reports+0x20>
 800d546:	4b18      	ldr	r3, [pc, #96]	; (800d5a8 <netif_issue_reports+0x74>)
 800d548:	f240 326d 	movw	r2, #877	; 0x36d
 800d54c:	4917      	ldr	r1, [pc, #92]	; (800d5ac <netif_issue_reports+0x78>)
 800d54e:	4818      	ldr	r0, [pc, #96]	; (800d5b0 <netif_issue_reports+0x7c>)
 800d550:	f00a f974 	bl	801783c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d55a:	f003 0304 	and.w	r3, r3, #4
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d01e      	beq.n	800d5a0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d568:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d017      	beq.n	800d5a0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	d013      	beq.n	800d5a2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	3304      	adds	r3, #4
 800d57e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00e      	beq.n	800d5a2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d58a:	f003 0308 	and.w	r3, r3, #8
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d007      	beq.n	800d5a2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	3304      	adds	r3, #4
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f008 fb1f 	bl	8015bdc <etharp_request>
 800d59e:	e000      	b.n	800d5a2 <netif_issue_reports+0x6e>
    return;
 800d5a0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	08019d1c 	.word	0x08019d1c
 800d5ac:	08019ec0 	.word	0x08019ec0
 800d5b0:	08019d6c 	.word	0x08019d6c

0800d5b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d107      	bne.n	800d5d2 <netif_set_down+0x1e>
 800d5c2:	4b12      	ldr	r3, [pc, #72]	; (800d60c <netif_set_down+0x58>)
 800d5c4:	f240 329b 	movw	r2, #923	; 0x39b
 800d5c8:	4911      	ldr	r1, [pc, #68]	; (800d610 <netif_set_down+0x5c>)
 800d5ca:	4812      	ldr	r0, [pc, #72]	; (800d614 <netif_set_down+0x60>)
 800d5cc:	f00a f936 	bl	801783c <iprintf>
 800d5d0:	e019      	b.n	800d606 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d012      	beq.n	800d606 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5f8:	f003 0308 	and.w	r3, r3, #8
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f007 fea9 	bl	8015358 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	08019d1c 	.word	0x08019d1c
 800d610:	08019ee4 	.word	0x08019ee4
 800d614:	08019d6c 	.word	0x08019d6c

0800d618 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d107      	bne.n	800d636 <netif_set_link_up+0x1e>
 800d626:	4b13      	ldr	r3, [pc, #76]	; (800d674 <netif_set_link_up+0x5c>)
 800d628:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d62c:	4912      	ldr	r1, [pc, #72]	; (800d678 <netif_set_link_up+0x60>)
 800d62e:	4813      	ldr	r0, [pc, #76]	; (800d67c <netif_set_link_up+0x64>)
 800d630:	f00a f904 	bl	801783c <iprintf>
 800d634:	e01b      	b.n	800d66e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d63c:	f003 0304 	and.w	r3, r3, #4
 800d640:	2b00      	cmp	r3, #0
 800d642:	d114      	bne.n	800d66e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d64a:	f043 0304 	orr.w	r3, r3, #4
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d656:	2103      	movs	r1, #3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7ff ff6b 	bl	800d534 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	69db      	ldr	r3, [r3, #28]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <netif_set_link_up+0x56>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	08019d1c 	.word	0x08019d1c
 800d678:	08019f04 	.word	0x08019f04
 800d67c:	08019d6c 	.word	0x08019d6c

0800d680 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d107      	bne.n	800d69e <netif_set_link_down+0x1e>
 800d68e:	4b11      	ldr	r3, [pc, #68]	; (800d6d4 <netif_set_link_down+0x54>)
 800d690:	f240 4206 	movw	r2, #1030	; 0x406
 800d694:	4910      	ldr	r1, [pc, #64]	; (800d6d8 <netif_set_link_down+0x58>)
 800d696:	4811      	ldr	r0, [pc, #68]	; (800d6dc <netif_set_link_down+0x5c>)
 800d698:	f00a f8d0 	bl	801783c <iprintf>
 800d69c:	e017      	b.n	800d6ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6a4:	f003 0304 	and.w	r3, r3, #4
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d010      	beq.n	800d6ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6b2:	f023 0304 	bic.w	r3, r3, #4
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <netif_set_link_down+0x4e>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	69db      	ldr	r3, [r3, #28]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	08019d1c 	.word	0x08019d1c
 800d6d8:	08019f28 	.word	0x08019f28
 800d6dc:	08019d6c 	.word	0x08019d6c

0800d6e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	61da      	str	r2, [r3, #28]
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d702:	b480      	push	{r7}
 800d704:	b085      	sub	sp, #20
 800d706:	af00      	add	r7, sp, #0
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	60b9      	str	r1, [r7, #8]
 800d70c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d70e:	f06f 030b 	mvn.w	r3, #11
}
 800d712:	4618      	mov	r0, r3
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
	...

0800d720 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	4603      	mov	r3, r0
 800d728:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d72a:	79fb      	ldrb	r3, [r7, #7]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d013      	beq.n	800d758 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d730:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <netif_get_by_index+0x48>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	e00c      	b.n	800d752 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d73e:	3301      	adds	r3, #1
 800d740:	b2db      	uxtb	r3, r3
 800d742:	79fa      	ldrb	r2, [r7, #7]
 800d744:	429a      	cmp	r2, r3
 800d746:	d101      	bne.n	800d74c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	e006      	b.n	800d75a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1ef      	bne.n	800d738 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3714      	adds	r7, #20
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	2000bd1c 	.word	0x2000bd1c

0800d76c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d772:	f009 ffe3 	bl	801773c <sys_arch_protect>
 800d776:	6038      	str	r0, [r7, #0]
 800d778:	4b0d      	ldr	r3, [pc, #52]	; (800d7b0 <pbuf_free_ooseq+0x44>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	6838      	ldr	r0, [r7, #0]
 800d780:	f009 ffea 	bl	8017758 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d784:	4b0b      	ldr	r3, [pc, #44]	; (800d7b4 <pbuf_free_ooseq+0x48>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	607b      	str	r3, [r7, #4]
 800d78a:	e00a      	b.n	800d7a2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d790:	2b00      	cmp	r3, #0
 800d792:	d003      	beq.n	800d79c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f002 fc43 	bl	8010020 <tcp_free_ooseq>
      return;
 800d79a:	e005      	b.n	800d7a8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	607b      	str	r3, [r7, #4]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1f1      	bne.n	800d78c <pbuf_free_ooseq+0x20>
    }
  }
}
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	2000bd24 	.word	0x2000bd24
 800d7b4:	2000bd2c 	.word	0x2000bd2c

0800d7b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d7c0:	f7ff ffd4 	bl	800d76c <pbuf_free_ooseq>
}
 800d7c4:	bf00      	nop
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d7d2:	f009 ffb3 	bl	801773c <sys_arch_protect>
 800d7d6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d7d8:	4b0f      	ldr	r3, [pc, #60]	; (800d818 <pbuf_pool_is_empty+0x4c>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d7de:	4b0e      	ldr	r3, [pc, #56]	; (800d818 <pbuf_pool_is_empty+0x4c>)
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f009 ffb7 	bl	8017758 <sys_arch_unprotect>

  if (!queued) {
 800d7ea:	78fb      	ldrb	r3, [r7, #3]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10f      	bne.n	800d810 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	480a      	ldr	r0, [pc, #40]	; (800d81c <pbuf_pool_is_empty+0x50>)
 800d7f4:	f7fe fed6 	bl	800c5a4 <tcpip_try_callback>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d008      	beq.n	800d810 <pbuf_pool_is_empty+0x44>
 800d7fe:	f009 ff9d 	bl	801773c <sys_arch_protect>
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	4b04      	ldr	r3, [pc, #16]	; (800d818 <pbuf_pool_is_empty+0x4c>)
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f009 ffa4 	bl	8017758 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	2000bd24 	.word	0x2000bd24
 800d81c:	0800d7b9 	.word	0x0800d7b9

0800d820 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	460b      	mov	r3, r1
 800d830:	80fb      	strh	r3, [r7, #6]
 800d832:	4613      	mov	r3, r2
 800d834:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	88fa      	ldrh	r2, [r7, #6]
 800d846:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	88ba      	ldrh	r2, [r7, #4]
 800d84c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d84e:	8b3b      	ldrh	r3, [r7, #24]
 800d850:	b2da      	uxtb	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	7f3a      	ldrb	r2, [r7, #28]
 800d85a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2201      	movs	r2, #1
 800d860:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	73da      	strb	r2, [r3, #15]
}
 800d868:	bf00      	nop
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08c      	sub	sp, #48	; 0x30
 800d878:	af02      	add	r7, sp, #8
 800d87a:	4603      	mov	r3, r0
 800d87c:	71fb      	strb	r3, [r7, #7]
 800d87e:	460b      	mov	r3, r1
 800d880:	80bb      	strh	r3, [r7, #4]
 800d882:	4613      	mov	r3, r2
 800d884:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d886:	79fb      	ldrb	r3, [r7, #7]
 800d888:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d88a:	887b      	ldrh	r3, [r7, #2]
 800d88c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d890:	d07f      	beq.n	800d992 <pbuf_alloc+0x11e>
 800d892:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d896:	f300 80c8 	bgt.w	800da2a <pbuf_alloc+0x1b6>
 800d89a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d89e:	d010      	beq.n	800d8c2 <pbuf_alloc+0x4e>
 800d8a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d8a4:	f300 80c1 	bgt.w	800da2a <pbuf_alloc+0x1b6>
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d002      	beq.n	800d8b2 <pbuf_alloc+0x3e>
 800d8ac:	2b41      	cmp	r3, #65	; 0x41
 800d8ae:	f040 80bc 	bne.w	800da2a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d8b2:	887a      	ldrh	r2, [r7, #2]
 800d8b4:	88bb      	ldrh	r3, [r7, #4]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f000 f8d1 	bl	800da60 <pbuf_alloc_reference>
 800d8be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d8c0:	e0bd      	b.n	800da3e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d8ca:	88bb      	ldrh	r3, [r7, #4]
 800d8cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d8ce:	200c      	movs	r0, #12
 800d8d0:	f7ff fbbe 	bl	800d050 <memp_malloc>
 800d8d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d109      	bne.n	800d8f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d8dc:	f7ff ff76 	bl	800d7cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <pbuf_alloc+0x78>
            pbuf_free(p);
 800d8e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8e8:	f000 faa8 	bl	800de3c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	e0a7      	b.n	800da40 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d8f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8f2:	3303      	adds	r3, #3
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	f023 0303 	bic.w	r3, r3, #3
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d900:	b29b      	uxth	r3, r3
 800d902:	8b7a      	ldrh	r2, [r7, #26]
 800d904:	4293      	cmp	r3, r2
 800d906:	bf28      	it	cs
 800d908:	4613      	movcs	r3, r2
 800d90a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d90c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90e:	3310      	adds	r3, #16
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	4413      	add	r3, r2
 800d914:	3303      	adds	r3, #3
 800d916:	f023 0303 	bic.w	r3, r3, #3
 800d91a:	4618      	mov	r0, r3
 800d91c:	89f9      	ldrh	r1, [r7, #14]
 800d91e:	8b7a      	ldrh	r2, [r7, #26]
 800d920:	2300      	movs	r3, #0
 800d922:	9301      	str	r3, [sp, #4]
 800d924:	887b      	ldrh	r3, [r7, #2]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	460b      	mov	r3, r1
 800d92a:	4601      	mov	r1, r0
 800d92c:	6938      	ldr	r0, [r7, #16]
 800d92e:	f7ff ff77 	bl	800d820 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f003 0303 	and.w	r3, r3, #3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <pbuf_alloc+0xd8>
 800d93e:	4b42      	ldr	r3, [pc, #264]	; (800da48 <pbuf_alloc+0x1d4>)
 800d940:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d944:	4941      	ldr	r1, [pc, #260]	; (800da4c <pbuf_alloc+0x1d8>)
 800d946:	4842      	ldr	r0, [pc, #264]	; (800da50 <pbuf_alloc+0x1dc>)
 800d948:	f009 ff78 	bl	801783c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d94c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d94e:	3303      	adds	r3, #3
 800d950:	f023 0303 	bic.w	r3, r3, #3
 800d954:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d958:	d106      	bne.n	800d968 <pbuf_alloc+0xf4>
 800d95a:	4b3b      	ldr	r3, [pc, #236]	; (800da48 <pbuf_alloc+0x1d4>)
 800d95c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d960:	493c      	ldr	r1, [pc, #240]	; (800da54 <pbuf_alloc+0x1e0>)
 800d962:	483b      	ldr	r0, [pc, #236]	; (800da50 <pbuf_alloc+0x1dc>)
 800d964:	f009 ff6a 	bl	801783c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d102      	bne.n	800d974 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	627b      	str	r3, [r7, #36]	; 0x24
 800d972:	e002      	b.n	800d97a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	693a      	ldr	r2, [r7, #16]
 800d978:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d97e:	8b7a      	ldrh	r2, [r7, #26]
 800d980:	89fb      	ldrh	r3, [r7, #14]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d98a:	8b7b      	ldrh	r3, [r7, #26]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d19e      	bne.n	800d8ce <pbuf_alloc+0x5a>
      break;
 800d990:	e055      	b.n	800da3e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d994:	3303      	adds	r3, #3
 800d996:	b29b      	uxth	r3, r3
 800d998:	f023 0303 	bic.w	r3, r3, #3
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	88bb      	ldrh	r3, [r7, #4]
 800d9a0:	3303      	adds	r3, #3
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	f023 0303 	bic.w	r3, r3, #3
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	4413      	add	r3, r2
 800d9ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d9ae:	8b3b      	ldrh	r3, [r7, #24]
 800d9b0:	3310      	adds	r3, #16
 800d9b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d9b4:	8b3a      	ldrh	r2, [r7, #24]
 800d9b6:	88bb      	ldrh	r3, [r7, #4]
 800d9b8:	3303      	adds	r3, #3
 800d9ba:	f023 0303 	bic.w	r3, r3, #3
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d306      	bcc.n	800d9d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d9c2:	8afa      	ldrh	r2, [r7, #22]
 800d9c4:	88bb      	ldrh	r3, [r7, #4]
 800d9c6:	3303      	adds	r3, #3
 800d9c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d201      	bcs.n	800d9d4 <pbuf_alloc+0x160>
        return NULL;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e035      	b.n	800da40 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d9d4:	8afb      	ldrh	r3, [r7, #22]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff f9b8 	bl	800cd4c <mem_malloc>
 800d9dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <pbuf_alloc+0x174>
        return NULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e02b      	b.n	800da40 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d9e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9ea:	3310      	adds	r3, #16
 800d9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ee:	4413      	add	r3, r2
 800d9f0:	3303      	adds	r3, #3
 800d9f2:	f023 0303 	bic.w	r3, r3, #3
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	88b9      	ldrh	r1, [r7, #4]
 800d9fa:	88ba      	ldrh	r2, [r7, #4]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	887b      	ldrh	r3, [r7, #2]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	460b      	mov	r3, r1
 800da06:	4601      	mov	r1, r0
 800da08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da0a:	f7ff ff09 	bl	800d820 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	f003 0303 	and.w	r3, r3, #3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d010      	beq.n	800da3c <pbuf_alloc+0x1c8>
 800da1a:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <pbuf_alloc+0x1d4>)
 800da1c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800da20:	490d      	ldr	r1, [pc, #52]	; (800da58 <pbuf_alloc+0x1e4>)
 800da22:	480b      	ldr	r0, [pc, #44]	; (800da50 <pbuf_alloc+0x1dc>)
 800da24:	f009 ff0a 	bl	801783c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800da28:	e008      	b.n	800da3c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800da2a:	4b07      	ldr	r3, [pc, #28]	; (800da48 <pbuf_alloc+0x1d4>)
 800da2c:	f240 1227 	movw	r2, #295	; 0x127
 800da30:	490a      	ldr	r1, [pc, #40]	; (800da5c <pbuf_alloc+0x1e8>)
 800da32:	4807      	ldr	r0, [pc, #28]	; (800da50 <pbuf_alloc+0x1dc>)
 800da34:	f009 ff02 	bl	801783c <iprintf>
      return NULL;
 800da38:	2300      	movs	r3, #0
 800da3a:	e001      	b.n	800da40 <pbuf_alloc+0x1cc>
      break;
 800da3c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da40:	4618      	mov	r0, r3
 800da42:	3728      	adds	r7, #40	; 0x28
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	08019f4c 	.word	0x08019f4c
 800da4c:	08019f7c 	.word	0x08019f7c
 800da50:	08019fac 	.word	0x08019fac
 800da54:	08019fd4 	.word	0x08019fd4
 800da58:	0801a008 	.word	0x0801a008
 800da5c:	0801a034 	.word	0x0801a034

0800da60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af02      	add	r7, sp, #8
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	460b      	mov	r3, r1
 800da6a:	807b      	strh	r3, [r7, #2]
 800da6c:	4613      	mov	r3, r2
 800da6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da70:	883b      	ldrh	r3, [r7, #0]
 800da72:	2b41      	cmp	r3, #65	; 0x41
 800da74:	d009      	beq.n	800da8a <pbuf_alloc_reference+0x2a>
 800da76:	883b      	ldrh	r3, [r7, #0]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d006      	beq.n	800da8a <pbuf_alloc_reference+0x2a>
 800da7c:	4b0f      	ldr	r3, [pc, #60]	; (800dabc <pbuf_alloc_reference+0x5c>)
 800da7e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da82:	490f      	ldr	r1, [pc, #60]	; (800dac0 <pbuf_alloc_reference+0x60>)
 800da84:	480f      	ldr	r0, [pc, #60]	; (800dac4 <pbuf_alloc_reference+0x64>)
 800da86:	f009 fed9 	bl	801783c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da8a:	200b      	movs	r0, #11
 800da8c:	f7ff fae0 	bl	800d050 <memp_malloc>
 800da90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da98:	2300      	movs	r3, #0
 800da9a:	e00b      	b.n	800dab4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da9c:	8879      	ldrh	r1, [r7, #2]
 800da9e:	887a      	ldrh	r2, [r7, #2]
 800daa0:	2300      	movs	r3, #0
 800daa2:	9301      	str	r3, [sp, #4]
 800daa4:	883b      	ldrh	r3, [r7, #0]
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	460b      	mov	r3, r1
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7ff feb7 	bl	800d820 <pbuf_init_alloced_pbuf>
  return p;
 800dab2:	68fb      	ldr	r3, [r7, #12]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	08019f4c 	.word	0x08019f4c
 800dac0:	0801a050 	.word	0x0801a050
 800dac4:	08019fac 	.word	0x08019fac

0800dac8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af02      	add	r7, sp, #8
 800dace:	607b      	str	r3, [r7, #4]
 800dad0:	4603      	mov	r3, r0
 800dad2:	73fb      	strb	r3, [r7, #15]
 800dad4:	460b      	mov	r3, r1
 800dad6:	81bb      	strh	r3, [r7, #12]
 800dad8:	4613      	mov	r3, r2
 800dada:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dae0:	8a7b      	ldrh	r3, [r7, #18]
 800dae2:	3303      	adds	r3, #3
 800dae4:	f023 0203 	bic.w	r2, r3, #3
 800dae8:	89bb      	ldrh	r3, [r7, #12]
 800daea:	441a      	add	r2, r3
 800daec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daee:	429a      	cmp	r2, r3
 800daf0:	d901      	bls.n	800daf6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800daf2:	2300      	movs	r3, #0
 800daf4:	e018      	b.n	800db28 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d007      	beq.n	800db0c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dafc:	8a7b      	ldrh	r3, [r7, #18]
 800dafe:	3303      	adds	r3, #3
 800db00:	f023 0303 	bic.w	r3, r3, #3
 800db04:	6a3a      	ldr	r2, [r7, #32]
 800db06:	4413      	add	r3, r2
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	e001      	b.n	800db10 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800db0c:	2300      	movs	r3, #0
 800db0e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	89b9      	ldrh	r1, [r7, #12]
 800db14:	89ba      	ldrh	r2, [r7, #12]
 800db16:	2302      	movs	r3, #2
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	897b      	ldrh	r3, [r7, #10]
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	460b      	mov	r3, r1
 800db20:	6979      	ldr	r1, [r7, #20]
 800db22:	f7ff fe7d 	bl	800d820 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800db26:	687b      	ldr	r3, [r7, #4]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3718      	adds	r7, #24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d106      	bne.n	800db50 <pbuf_realloc+0x20>
 800db42:	4b3a      	ldr	r3, [pc, #232]	; (800dc2c <pbuf_realloc+0xfc>)
 800db44:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800db48:	4939      	ldr	r1, [pc, #228]	; (800dc30 <pbuf_realloc+0x100>)
 800db4a:	483a      	ldr	r0, [pc, #232]	; (800dc34 <pbuf_realloc+0x104>)
 800db4c:	f009 fe76 	bl	801783c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	891b      	ldrh	r3, [r3, #8]
 800db54:	887a      	ldrh	r2, [r7, #2]
 800db56:	429a      	cmp	r2, r3
 800db58:	d263      	bcs.n	800dc22 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	891a      	ldrh	r2, [r3, #8]
 800db5e:	887b      	ldrh	r3, [r7, #2]
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db64:	887b      	ldrh	r3, [r7, #2]
 800db66:	817b      	strh	r3, [r7, #10]
  q = p;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db6c:	e018      	b.n	800dba0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	895b      	ldrh	r3, [r3, #10]
 800db72:	897a      	ldrh	r2, [r7, #10]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	891a      	ldrh	r2, [r3, #8]
 800db7c:	893b      	ldrh	r3, [r7, #8]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	b29a      	uxth	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d106      	bne.n	800dba0 <pbuf_realloc+0x70>
 800db92:	4b26      	ldr	r3, [pc, #152]	; (800dc2c <pbuf_realloc+0xfc>)
 800db94:	f240 12af 	movw	r2, #431	; 0x1af
 800db98:	4927      	ldr	r1, [pc, #156]	; (800dc38 <pbuf_realloc+0x108>)
 800db9a:	4826      	ldr	r0, [pc, #152]	; (800dc34 <pbuf_realloc+0x104>)
 800db9c:	f009 fe4e 	bl	801783c <iprintf>
  while (rem_len > q->len) {
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	895b      	ldrh	r3, [r3, #10]
 800dba4:	897a      	ldrh	r2, [r7, #10]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d8e1      	bhi.n	800db6e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	7b1b      	ldrb	r3, [r3, #12]
 800dbae:	f003 030f 	and.w	r3, r3, #15
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d121      	bne.n	800dbfa <pbuf_realloc+0xca>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	895b      	ldrh	r3, [r3, #10]
 800dbba:	897a      	ldrh	r2, [r7, #10]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d01c      	beq.n	800dbfa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	7b5b      	ldrb	r3, [r3, #13]
 800dbc4:	f003 0302 	and.w	r3, r3, #2
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d116      	bne.n	800dbfa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	897b      	ldrh	r3, [r7, #10]
 800dbd8:	4413      	add	r3, r2
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	4619      	mov	r1, r3
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7fe ffaa 	bl	800cb38 <mem_trim>
 800dbe4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d106      	bne.n	800dbfa <pbuf_realloc+0xca>
 800dbec:	4b0f      	ldr	r3, [pc, #60]	; (800dc2c <pbuf_realloc+0xfc>)
 800dbee:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dbf2:	4912      	ldr	r1, [pc, #72]	; (800dc3c <pbuf_realloc+0x10c>)
 800dbf4:	480f      	ldr	r0, [pc, #60]	; (800dc34 <pbuf_realloc+0x104>)
 800dbf6:	f009 fe21 	bl	801783c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	897a      	ldrh	r2, [r7, #10]
 800dbfe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	895a      	ldrh	r2, [r3, #10]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d004      	beq.n	800dc1a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 f911 	bl	800de3c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	e000      	b.n	800dc24 <pbuf_realloc+0xf4>
    return;
 800dc22:	bf00      	nop

}
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	08019f4c 	.word	0x08019f4c
 800dc30:	0801a064 	.word	0x0801a064
 800dc34:	08019fac 	.word	0x08019fac
 800dc38:	0801a07c 	.word	0x0801a07c
 800dc3c:	0801a094 	.word	0x0801a094

0800dc40 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d106      	bne.n	800dc62 <pbuf_add_header_impl+0x22>
 800dc54:	4b2b      	ldr	r3, [pc, #172]	; (800dd04 <pbuf_add_header_impl+0xc4>)
 800dc56:	f240 12df 	movw	r2, #479	; 0x1df
 800dc5a:	492b      	ldr	r1, [pc, #172]	; (800dd08 <pbuf_add_header_impl+0xc8>)
 800dc5c:	482b      	ldr	r0, [pc, #172]	; (800dd0c <pbuf_add_header_impl+0xcc>)
 800dc5e:	f009 fded 	bl	801783c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d003      	beq.n	800dc70 <pbuf_add_header_impl+0x30>
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc6e:	d301      	bcc.n	800dc74 <pbuf_add_header_impl+0x34>
    return 1;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e043      	b.n	800dcfc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d101      	bne.n	800dc7e <pbuf_add_header_impl+0x3e>
    return 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e03e      	b.n	800dcfc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	891a      	ldrh	r2, [r3, #8]
 800dc86:	8a7b      	ldrh	r3, [r7, #18]
 800dc88:	4413      	add	r3, r2
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	8a7a      	ldrh	r2, [r7, #18]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d901      	bls.n	800dc96 <pbuf_add_header_impl+0x56>
    return 1;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e032      	b.n	800dcfc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	7b1b      	ldrb	r3, [r3, #12]
 800dc9a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc9c:	8a3b      	ldrh	r3, [r7, #16]
 800dc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00c      	beq.n	800dcc0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	425b      	negs	r3, r3
 800dcae:	4413      	add	r3, r2
 800dcb0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3310      	adds	r3, #16
 800dcb6:	697a      	ldr	r2, [r7, #20]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d20d      	bcs.n	800dcd8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e01d      	b.n	800dcfc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	685a      	ldr	r2, [r3, #4]
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	425b      	negs	r3, r3
 800dcce:	4413      	add	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e001      	b.n	800dcd8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e011      	b.n	800dcfc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	895a      	ldrh	r2, [r3, #10]
 800dce2:	8a7b      	ldrh	r3, [r7, #18]
 800dce4:	4413      	add	r3, r2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	891a      	ldrh	r2, [r3, #8]
 800dcf0:	8a7b      	ldrh	r3, [r7, #18]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	811a      	strh	r2, [r3, #8]


  return 0;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3718      	adds	r7, #24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	08019f4c 	.word	0x08019f4c
 800dd08:	0801a0b0 	.word	0x0801a0b0
 800dd0c:	08019fac 	.word	0x08019fac

0800dd10 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	6839      	ldr	r1, [r7, #0]
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff ff8e 	bl	800dc40 <pbuf_add_header_impl>
 800dd24:	4603      	mov	r3, r0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
	...

0800dd30 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <pbuf_remove_header+0x1e>
 800dd40:	4b20      	ldr	r3, [pc, #128]	; (800ddc4 <pbuf_remove_header+0x94>)
 800dd42:	f240 224b 	movw	r2, #587	; 0x24b
 800dd46:	4920      	ldr	r1, [pc, #128]	; (800ddc8 <pbuf_remove_header+0x98>)
 800dd48:	4820      	ldr	r0, [pc, #128]	; (800ddcc <pbuf_remove_header+0x9c>)
 800dd4a:	f009 fd77 	bl	801783c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d003      	beq.n	800dd5c <pbuf_remove_header+0x2c>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd5a:	d301      	bcc.n	800dd60 <pbuf_remove_header+0x30>
    return 1;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e02c      	b.n	800ddba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <pbuf_remove_header+0x3a>
    return 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	e027      	b.n	800ddba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	895b      	ldrh	r3, [r3, #10]
 800dd72:	89fa      	ldrh	r2, [r7, #14]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d908      	bls.n	800dd8a <pbuf_remove_header+0x5a>
 800dd78:	4b12      	ldr	r3, [pc, #72]	; (800ddc4 <pbuf_remove_header+0x94>)
 800dd7a:	f240 2255 	movw	r2, #597	; 0x255
 800dd7e:	4914      	ldr	r1, [pc, #80]	; (800ddd0 <pbuf_remove_header+0xa0>)
 800dd80:	4812      	ldr	r0, [pc, #72]	; (800ddcc <pbuf_remove_header+0x9c>)
 800dd82:	f009 fd5b 	bl	801783c <iprintf>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e017      	b.n	800ddba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	441a      	add	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	895a      	ldrh	r2, [r3, #10]
 800dda0:	89fb      	ldrh	r3, [r7, #14]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	891a      	ldrh	r2, [r3, #8]
 800ddae:	89fb      	ldrh	r3, [r7, #14]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	08019f4c 	.word	0x08019f4c
 800ddc8:	0801a0b0 	.word	0x0801a0b0
 800ddcc:	08019fac 	.word	0x08019fac
 800ddd0:	0801a0bc 	.word	0x0801a0bc

0800ddd4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	807b      	strh	r3, [r7, #2]
 800dde0:	4613      	mov	r3, r2
 800dde2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dde4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	da08      	bge.n	800ddfe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ddec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddf0:	425b      	negs	r3, r3
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ff9b 	bl	800dd30 <pbuf_remove_header>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	e007      	b.n	800de0e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ddfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de02:	787a      	ldrb	r2, [r7, #1]
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff ff1a 	bl	800dc40 <pbuf_add_header_impl>
 800de0c:	4603      	mov	r3, r0
  }
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	460b      	mov	r3, r1
 800de20:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800de22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de26:	2201      	movs	r2, #1
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7ff ffd2 	bl	800ddd4 <pbuf_header_impl>
 800de30:	4603      	mov	r3, r0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
	...

0800de3c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d106      	bne.n	800de5e <pbuf_free+0x22>
 800de50:	4b3b      	ldr	r3, [pc, #236]	; (800df40 <pbuf_free+0x104>)
 800de52:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de56:	493b      	ldr	r1, [pc, #236]	; (800df44 <pbuf_free+0x108>)
 800de58:	483b      	ldr	r0, [pc, #236]	; (800df48 <pbuf_free+0x10c>)
 800de5a:	f009 fcef 	bl	801783c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de5e:	2300      	movs	r3, #0
 800de60:	e069      	b.n	800df36 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de62:	2300      	movs	r3, #0
 800de64:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de66:	e062      	b.n	800df2e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de68:	f009 fc68 	bl	801773c <sys_arch_protect>
 800de6c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	7b9b      	ldrb	r3, [r3, #14]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d106      	bne.n	800de84 <pbuf_free+0x48>
 800de76:	4b32      	ldr	r3, [pc, #200]	; (800df40 <pbuf_free+0x104>)
 800de78:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de7c:	4933      	ldr	r1, [pc, #204]	; (800df4c <pbuf_free+0x110>)
 800de7e:	4832      	ldr	r0, [pc, #200]	; (800df48 <pbuf_free+0x10c>)
 800de80:	f009 fcdc 	bl	801783c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7b9b      	ldrb	r3, [r3, #14]
 800de88:	3b01      	subs	r3, #1
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	739a      	strb	r2, [r3, #14]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	7b9b      	ldrb	r3, [r3, #14]
 800de94:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de96:	69b8      	ldr	r0, [r7, #24]
 800de98:	f009 fc5e 	bl	8017758 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de9c:	7dfb      	ldrb	r3, [r7, #23]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d143      	bne.n	800df2a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7b1b      	ldrb	r3, [r3, #12]
 800deac:	f003 030f 	and.w	r3, r3, #15
 800deb0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	7b5b      	ldrb	r3, [r3, #13]
 800deb6:	f003 0302 	and.w	r3, r3, #2
 800deba:	2b00      	cmp	r3, #0
 800debc:	d011      	beq.n	800dee2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <pbuf_free+0x9c>
 800deca:	4b1d      	ldr	r3, [pc, #116]	; (800df40 <pbuf_free+0x104>)
 800decc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ded0:	491f      	ldr	r1, [pc, #124]	; (800df50 <pbuf_free+0x114>)
 800ded2:	481d      	ldr	r0, [pc, #116]	; (800df48 <pbuf_free+0x10c>)
 800ded4:	f009 fcb2 	bl	801783c <iprintf>
        pc->custom_free_function(p);
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	4798      	blx	r3
 800dee0:	e01d      	b.n	800df1e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d104      	bne.n	800def2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	200c      	movs	r0, #12
 800deec:	f7ff f902 	bl	800d0f4 <memp_free>
 800def0:	e015      	b.n	800df1e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800def2:	7bfb      	ldrb	r3, [r7, #15]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d104      	bne.n	800df02 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800def8:	6879      	ldr	r1, [r7, #4]
 800defa:	200b      	movs	r0, #11
 800defc:	f7ff f8fa 	bl	800d0f4 <memp_free>
 800df00:	e00d      	b.n	800df1e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800df02:	7bfb      	ldrb	r3, [r7, #15]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <pbuf_free+0xd4>
          mem_free(p);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7fe fd85 	bl	800ca18 <mem_free>
 800df0e:	e006      	b.n	800df1e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800df10:	4b0b      	ldr	r3, [pc, #44]	; (800df40 <pbuf_free+0x104>)
 800df12:	f240 320f 	movw	r2, #783	; 0x30f
 800df16:	490f      	ldr	r1, [pc, #60]	; (800df54 <pbuf_free+0x118>)
 800df18:	480b      	ldr	r0, [pc, #44]	; (800df48 <pbuf_free+0x10c>)
 800df1a:	f009 fc8f 	bl	801783c <iprintf>
        }
      }
      count++;
 800df1e:	7ffb      	ldrb	r3, [r7, #31]
 800df20:	3301      	adds	r3, #1
 800df22:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	607b      	str	r3, [r7, #4]
 800df28:	e001      	b.n	800df2e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d199      	bne.n	800de68 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df34:	7ffb      	ldrb	r3, [r7, #31]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	08019f4c 	.word	0x08019f4c
 800df44:	0801a0b0 	.word	0x0801a0b0
 800df48:	08019fac 	.word	0x08019fac
 800df4c:	0801a0dc 	.word	0x0801a0dc
 800df50:	0801a0f4 	.word	0x0801a0f4
 800df54:	0801a118 	.word	0x0801a118

0800df58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df64:	e005      	b.n	800df72 <pbuf_clen+0x1a>
    ++len;
 800df66:	89fb      	ldrh	r3, [r7, #14]
 800df68:	3301      	adds	r3, #1
 800df6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1f6      	bne.n	800df66 <pbuf_clen+0xe>
  }
  return len;
 800df78:	89fb      	ldrh	r3, [r7, #14]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3714      	adds	r7, #20
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
	...

0800df88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d016      	beq.n	800dfc4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df96:	f009 fbd1 	bl	801773c <sys_arch_protect>
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	7b9b      	ldrb	r3, [r3, #14]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	739a      	strb	r2, [r3, #14]
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f009 fbd5 	bl	8017758 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	7b9b      	ldrb	r3, [r3, #14]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <pbuf_ref+0x3c>
 800dfb6:	4b05      	ldr	r3, [pc, #20]	; (800dfcc <pbuf_ref+0x44>)
 800dfb8:	f240 3242 	movw	r2, #834	; 0x342
 800dfbc:	4904      	ldr	r1, [pc, #16]	; (800dfd0 <pbuf_ref+0x48>)
 800dfbe:	4805      	ldr	r0, [pc, #20]	; (800dfd4 <pbuf_ref+0x4c>)
 800dfc0:	f009 fc3c 	bl	801783c <iprintf>
  }
}
 800dfc4:	bf00      	nop
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	08019f4c 	.word	0x08019f4c
 800dfd0:	0801a12c 	.word	0x0801a12c
 800dfd4:	08019fac 	.word	0x08019fac

0800dfd8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <pbuf_cat+0x16>
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d107      	bne.n	800dffe <pbuf_cat+0x26>
 800dfee:	4b20      	ldr	r3, [pc, #128]	; (800e070 <pbuf_cat+0x98>)
 800dff0:	f240 3259 	movw	r2, #857	; 0x359
 800dff4:	491f      	ldr	r1, [pc, #124]	; (800e074 <pbuf_cat+0x9c>)
 800dff6:	4820      	ldr	r0, [pc, #128]	; (800e078 <pbuf_cat+0xa0>)
 800dff8:	f009 fc20 	bl	801783c <iprintf>
 800dffc:	e034      	b.n	800e068 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	60fb      	str	r3, [r7, #12]
 800e002:	e00a      	b.n	800e01a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	891a      	ldrh	r2, [r3, #8]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	891b      	ldrh	r3, [r3, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	b29a      	uxth	r2, r3
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1f0      	bne.n	800e004 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	891a      	ldrh	r2, [r3, #8]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	895b      	ldrh	r3, [r3, #10]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d006      	beq.n	800e03c <pbuf_cat+0x64>
 800e02e:	4b10      	ldr	r3, [pc, #64]	; (800e070 <pbuf_cat+0x98>)
 800e030:	f240 3262 	movw	r2, #866	; 0x362
 800e034:	4911      	ldr	r1, [pc, #68]	; (800e07c <pbuf_cat+0xa4>)
 800e036:	4810      	ldr	r0, [pc, #64]	; (800e078 <pbuf_cat+0xa0>)
 800e038:	f009 fc00 	bl	801783c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d006      	beq.n	800e052 <pbuf_cat+0x7a>
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <pbuf_cat+0x98>)
 800e046:	f240 3263 	movw	r2, #867	; 0x363
 800e04a:	490d      	ldr	r1, [pc, #52]	; (800e080 <pbuf_cat+0xa8>)
 800e04c:	480a      	ldr	r0, [pc, #40]	; (800e078 <pbuf_cat+0xa0>)
 800e04e:	f009 fbf5 	bl	801783c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	891a      	ldrh	r2, [r3, #8]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	891b      	ldrh	r3, [r3, #8]
 800e05a:	4413      	add	r3, r2
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	08019f4c 	.word	0x08019f4c
 800e074:	0801a140 	.word	0x0801a140
 800e078:	08019fac 	.word	0x08019fac
 800e07c:	0801a178 	.word	0x0801a178
 800e080:	0801a1a8 	.word	0x0801a1a8

0800e084 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e08e:	2300      	movs	r3, #0
 800e090:	617b      	str	r3, [r7, #20]
 800e092:	2300      	movs	r3, #0
 800e094:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d008      	beq.n	800e0ae <pbuf_copy+0x2a>
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d005      	beq.n	800e0ae <pbuf_copy+0x2a>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	891a      	ldrh	r2, [r3, #8]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	891b      	ldrh	r3, [r3, #8]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d209      	bcs.n	800e0c2 <pbuf_copy+0x3e>
 800e0ae:	4b57      	ldr	r3, [pc, #348]	; (800e20c <pbuf_copy+0x188>)
 800e0b0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e0b4:	4956      	ldr	r1, [pc, #344]	; (800e210 <pbuf_copy+0x18c>)
 800e0b6:	4857      	ldr	r0, [pc, #348]	; (800e214 <pbuf_copy+0x190>)
 800e0b8:	f009 fbc0 	bl	801783c <iprintf>
 800e0bc:	f06f 030f 	mvn.w	r3, #15
 800e0c0:	e09f      	b.n	800e202 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	895b      	ldrh	r3, [r3, #10]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	1ad2      	subs	r2, r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	895b      	ldrh	r3, [r3, #10]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	1acb      	subs	r3, r1, r3
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d306      	bcc.n	800e0e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	895b      	ldrh	r3, [r3, #10]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	e005      	b.n	800e0f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	895b      	ldrh	r3, [r3, #10]
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	18d0      	adds	r0, r2, r3
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	4413      	add	r3, r2
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	4619      	mov	r1, r3
 800e108:	f009 fb68 	bl	80177dc <memcpy>
    offset_to += len;
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	4413      	add	r3, r2
 800e112:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e114:	693a      	ldr	r2, [r7, #16]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	4413      	add	r3, r2
 800e11a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	895b      	ldrh	r3, [r3, #10]
 800e120:	461a      	mov	r2, r3
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	4293      	cmp	r3, r2
 800e126:	d906      	bls.n	800e136 <pbuf_copy+0xb2>
 800e128:	4b38      	ldr	r3, [pc, #224]	; (800e20c <pbuf_copy+0x188>)
 800e12a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e12e:	493a      	ldr	r1, [pc, #232]	; (800e218 <pbuf_copy+0x194>)
 800e130:	4838      	ldr	r0, [pc, #224]	; (800e214 <pbuf_copy+0x190>)
 800e132:	f009 fb83 	bl	801783c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	895b      	ldrh	r3, [r3, #10]
 800e13a:	461a      	mov	r2, r3
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	4293      	cmp	r3, r2
 800e140:	d906      	bls.n	800e150 <pbuf_copy+0xcc>
 800e142:	4b32      	ldr	r3, [pc, #200]	; (800e20c <pbuf_copy+0x188>)
 800e144:	f240 32da 	movw	r2, #986	; 0x3da
 800e148:	4934      	ldr	r1, [pc, #208]	; (800e21c <pbuf_copy+0x198>)
 800e14a:	4832      	ldr	r0, [pc, #200]	; (800e214 <pbuf_copy+0x190>)
 800e14c:	f009 fb76 	bl	801783c <iprintf>
    if (offset_from >= p_from->len) {
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	895b      	ldrh	r3, [r3, #10]
 800e154:	461a      	mov	r2, r3
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	4293      	cmp	r3, r2
 800e15a:	d304      	bcc.n	800e166 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e15c:	2300      	movs	r3, #0
 800e15e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	895b      	ldrh	r3, [r3, #10]
 800e16a:	461a      	mov	r2, r3
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	4293      	cmp	r3, r2
 800e170:	d114      	bne.n	800e19c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10c      	bne.n	800e19c <pbuf_copy+0x118>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d009      	beq.n	800e19c <pbuf_copy+0x118>
 800e188:	4b20      	ldr	r3, [pc, #128]	; (800e20c <pbuf_copy+0x188>)
 800e18a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e18e:	4924      	ldr	r1, [pc, #144]	; (800e220 <pbuf_copy+0x19c>)
 800e190:	4820      	ldr	r0, [pc, #128]	; (800e214 <pbuf_copy+0x190>)
 800e192:	f009 fb53 	bl	801783c <iprintf>
 800e196:	f06f 030f 	mvn.w	r3, #15
 800e19a:	e032      	b.n	800e202 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d013      	beq.n	800e1ca <pbuf_copy+0x146>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	895a      	ldrh	r2, [r3, #10]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	891b      	ldrh	r3, [r3, #8]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d10d      	bne.n	800e1ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d009      	beq.n	800e1ca <pbuf_copy+0x146>
 800e1b6:	4b15      	ldr	r3, [pc, #84]	; (800e20c <pbuf_copy+0x188>)
 800e1b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e1bc:	4919      	ldr	r1, [pc, #100]	; (800e224 <pbuf_copy+0x1a0>)
 800e1be:	4815      	ldr	r0, [pc, #84]	; (800e214 <pbuf_copy+0x190>)
 800e1c0:	f009 fb3c 	bl	801783c <iprintf>
 800e1c4:	f06f 0305 	mvn.w	r3, #5
 800e1c8:	e01b      	b.n	800e202 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d013      	beq.n	800e1f8 <pbuf_copy+0x174>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	895a      	ldrh	r2, [r3, #10]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	891b      	ldrh	r3, [r3, #8]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d10d      	bne.n	800e1f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d009      	beq.n	800e1f8 <pbuf_copy+0x174>
 800e1e4:	4b09      	ldr	r3, [pc, #36]	; (800e20c <pbuf_copy+0x188>)
 800e1e6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e1ea:	490e      	ldr	r1, [pc, #56]	; (800e224 <pbuf_copy+0x1a0>)
 800e1ec:	4809      	ldr	r0, [pc, #36]	; (800e214 <pbuf_copy+0x190>)
 800e1ee:	f009 fb25 	bl	801783c <iprintf>
 800e1f2:	f06f 0305 	mvn.w	r3, #5
 800e1f6:	e004      	b.n	800e202 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	f47f af61 	bne.w	800e0c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3718      	adds	r7, #24
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	08019f4c 	.word	0x08019f4c
 800e210:	0801a1f4 	.word	0x0801a1f4
 800e214:	08019fac 	.word	0x08019fac
 800e218:	0801a224 	.word	0x0801a224
 800e21c:	0801a23c 	.word	0x0801a23c
 800e220:	0801a258 	.word	0x0801a258
 800e224:	0801a268 	.word	0x0801a268

0800e228 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	4611      	mov	r1, r2
 800e234:	461a      	mov	r2, r3
 800e236:	460b      	mov	r3, r1
 800e238:	80fb      	strh	r3, [r7, #6]
 800e23a:	4613      	mov	r3, r2
 800e23c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d108      	bne.n	800e25e <pbuf_copy_partial+0x36>
 800e24c:	4b2b      	ldr	r3, [pc, #172]	; (800e2fc <pbuf_copy_partial+0xd4>)
 800e24e:	f240 420a 	movw	r2, #1034	; 0x40a
 800e252:	492b      	ldr	r1, [pc, #172]	; (800e300 <pbuf_copy_partial+0xd8>)
 800e254:	482b      	ldr	r0, [pc, #172]	; (800e304 <pbuf_copy_partial+0xdc>)
 800e256:	f009 faf1 	bl	801783c <iprintf>
 800e25a:	2300      	movs	r3, #0
 800e25c:	e04a      	b.n	800e2f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d108      	bne.n	800e276 <pbuf_copy_partial+0x4e>
 800e264:	4b25      	ldr	r3, [pc, #148]	; (800e2fc <pbuf_copy_partial+0xd4>)
 800e266:	f240 420b 	movw	r2, #1035	; 0x40b
 800e26a:	4927      	ldr	r1, [pc, #156]	; (800e308 <pbuf_copy_partial+0xe0>)
 800e26c:	4825      	ldr	r0, [pc, #148]	; (800e304 <pbuf_copy_partial+0xdc>)
 800e26e:	f009 fae5 	bl	801783c <iprintf>
 800e272:	2300      	movs	r3, #0
 800e274:	e03e      	b.n	800e2f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	61fb      	str	r3, [r7, #28]
 800e27a:	e034      	b.n	800e2e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e27c:	88bb      	ldrh	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <pbuf_copy_partial+0x70>
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	895b      	ldrh	r3, [r3, #10]
 800e286:	88ba      	ldrh	r2, [r7, #4]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d305      	bcc.n	800e298 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	895b      	ldrh	r3, [r3, #10]
 800e290:	88ba      	ldrh	r2, [r7, #4]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	80bb      	strh	r3, [r7, #4]
 800e296:	e023      	b.n	800e2e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	895a      	ldrh	r2, [r3, #10]
 800e29c:	88bb      	ldrh	r3, [r7, #4]
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e2a2:	8b3a      	ldrh	r2, [r7, #24]
 800e2a4:	88fb      	ldrh	r3, [r7, #6]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d901      	bls.n	800e2ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e2ae:	8b7b      	ldrh	r3, [r7, #26]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	18d0      	adds	r0, r2, r3
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	88bb      	ldrh	r3, [r7, #4]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	8b3a      	ldrh	r2, [r7, #24]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f009 fa8c 	bl	80177dc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e2c4:	8afa      	ldrh	r2, [r7, #22]
 800e2c6:	8b3b      	ldrh	r3, [r7, #24]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e2cc:	8b7a      	ldrh	r2, [r7, #26]
 800e2ce:	8b3b      	ldrh	r3, [r7, #24]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e2d4:	88fa      	ldrh	r2, [r7, #6]
 800e2d6:	8b3b      	ldrh	r3, [r7, #24]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	61fb      	str	r3, [r7, #28]
 800e2e6:	88fb      	ldrh	r3, [r7, #6]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <pbuf_copy_partial+0xca>
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1c4      	bne.n	800e27c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e2f2:	8afb      	ldrh	r3, [r7, #22]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3720      	adds	r7, #32
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	08019f4c 	.word	0x08019f4c
 800e300:	0801a294 	.word	0x0801a294
 800e304:	08019fac 	.word	0x08019fac
 800e308:	0801a2b4 	.word	0x0801a2b4

0800e30c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	603a      	str	r2, [r7, #0]
 800e316:	71fb      	strb	r3, [r7, #7]
 800e318:	460b      	mov	r3, r1
 800e31a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	8919      	ldrh	r1, [r3, #8]
 800e320:	88ba      	ldrh	r2, [r7, #4]
 800e322:	79fb      	ldrb	r3, [r7, #7]
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff faa5 	bl	800d874 <pbuf_alloc>
 800e32a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <pbuf_clone+0x2a>
    return NULL;
 800e332:	2300      	movs	r3, #0
 800e334:	e011      	b.n	800e35a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e336:	6839      	ldr	r1, [r7, #0]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff fea3 	bl	800e084 <pbuf_copy>
 800e33e:	4603      	mov	r3, r0
 800e340:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e342:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d006      	beq.n	800e358 <pbuf_clone+0x4c>
 800e34a:	4b06      	ldr	r3, [pc, #24]	; (800e364 <pbuf_clone+0x58>)
 800e34c:	f240 5224 	movw	r2, #1316	; 0x524
 800e350:	4905      	ldr	r1, [pc, #20]	; (800e368 <pbuf_clone+0x5c>)
 800e352:	4806      	ldr	r0, [pc, #24]	; (800e36c <pbuf_clone+0x60>)
 800e354:	f009 fa72 	bl	801783c <iprintf>
  return q;
 800e358:	68fb      	ldr	r3, [r7, #12]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	08019f4c 	.word	0x08019f4c
 800e368:	0801a3c0 	.word	0x0801a3c0
 800e36c:	08019fac 	.word	0x08019fac

0800e370 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e374:	f009 fa7a 	bl	801786c <rand>
 800e378:	4603      	mov	r3, r0
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e380:	b29b      	uxth	r3, r3
 800e382:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e386:	b29a      	uxth	r2, r3
 800e388:	4b01      	ldr	r3, [pc, #4]	; (800e390 <tcp_init+0x20>)
 800e38a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e38c:	bf00      	nop
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	20000010 	.word	0x20000010

0800e394 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	7d1b      	ldrb	r3, [r3, #20]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d105      	bne.n	800e3b0 <tcp_free+0x1c>
 800e3a4:	4b06      	ldr	r3, [pc, #24]	; (800e3c0 <tcp_free+0x2c>)
 800e3a6:	22d4      	movs	r2, #212	; 0xd4
 800e3a8:	4906      	ldr	r1, [pc, #24]	; (800e3c4 <tcp_free+0x30>)
 800e3aa:	4807      	ldr	r0, [pc, #28]	; (800e3c8 <tcp_free+0x34>)
 800e3ac:	f009 fa46 	bl	801783c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	f7fe fe9e 	bl	800d0f4 <memp_free>
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	0801a44c 	.word	0x0801a44c
 800e3c4:	0801a47c 	.word	0x0801a47c
 800e3c8:	0801a490 	.word	0x0801a490

0800e3cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	7d1b      	ldrb	r3, [r3, #20]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d105      	bne.n	800e3e8 <tcp_free_listen+0x1c>
 800e3dc:	4b06      	ldr	r3, [pc, #24]	; (800e3f8 <tcp_free_listen+0x2c>)
 800e3de:	22df      	movs	r2, #223	; 0xdf
 800e3e0:	4906      	ldr	r1, [pc, #24]	; (800e3fc <tcp_free_listen+0x30>)
 800e3e2:	4807      	ldr	r0, [pc, #28]	; (800e400 <tcp_free_listen+0x34>)
 800e3e4:	f009 fa2a 	bl	801783c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	2002      	movs	r0, #2
 800e3ec:	f7fe fe82 	bl	800d0f4 <memp_free>
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	0801a44c 	.word	0x0801a44c
 800e3fc:	0801a4b8 	.word	0x0801a4b8
 800e400:	0801a490 	.word	0x0801a490

0800e404 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e408:	f001 f8a6 	bl	800f558 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e40c:	4b07      	ldr	r3, [pc, #28]	; (800e42c <tcp_tmr+0x28>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	3301      	adds	r3, #1
 800e412:	b2da      	uxtb	r2, r3
 800e414:	4b05      	ldr	r3, [pc, #20]	; (800e42c <tcp_tmr+0x28>)
 800e416:	701a      	strb	r2, [r3, #0]
 800e418:	4b04      	ldr	r3, [pc, #16]	; (800e42c <tcp_tmr+0x28>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	f003 0301 	and.w	r3, r3, #1
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e424:	f000 fd58 	bl	800eed8 <tcp_slowtmr>
  }
}
 800e428:	bf00      	nop
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	20004de9 	.word	0x20004de9

0800e430 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d105      	bne.n	800e44c <tcp_remove_listener+0x1c>
 800e440:	4b0d      	ldr	r3, [pc, #52]	; (800e478 <tcp_remove_listener+0x48>)
 800e442:	22ff      	movs	r2, #255	; 0xff
 800e444:	490d      	ldr	r1, [pc, #52]	; (800e47c <tcp_remove_listener+0x4c>)
 800e446:	480e      	ldr	r0, [pc, #56]	; (800e480 <tcp_remove_listener+0x50>)
 800e448:	f009 f9f8 	bl	801783c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	60fb      	str	r3, [r7, #12]
 800e450:	e00a      	b.n	800e468 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d102      	bne.n	800e462 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1f1      	bne.n	800e452 <tcp_remove_listener+0x22>
    }
  }
}
 800e46e:	bf00      	nop
 800e470:	bf00      	nop
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	0801a44c 	.word	0x0801a44c
 800e47c:	0801a4d4 	.word	0x0801a4d4
 800e480:	0801a490 	.word	0x0801a490

0800e484 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d106      	bne.n	800e4a0 <tcp_listen_closed+0x1c>
 800e492:	4b14      	ldr	r3, [pc, #80]	; (800e4e4 <tcp_listen_closed+0x60>)
 800e494:	f240 1211 	movw	r2, #273	; 0x111
 800e498:	4913      	ldr	r1, [pc, #76]	; (800e4e8 <tcp_listen_closed+0x64>)
 800e49a:	4814      	ldr	r0, [pc, #80]	; (800e4ec <tcp_listen_closed+0x68>)
 800e49c:	f009 f9ce 	bl	801783c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	7d1b      	ldrb	r3, [r3, #20]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d006      	beq.n	800e4b6 <tcp_listen_closed+0x32>
 800e4a8:	4b0e      	ldr	r3, [pc, #56]	; (800e4e4 <tcp_listen_closed+0x60>)
 800e4aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e4ae:	4910      	ldr	r1, [pc, #64]	; (800e4f0 <tcp_listen_closed+0x6c>)
 800e4b0:	480e      	ldr	r0, [pc, #56]	; (800e4ec <tcp_listen_closed+0x68>)
 800e4b2:	f009 f9c3 	bl	801783c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	60fb      	str	r3, [r7, #12]
 800e4ba:	e00b      	b.n	800e4d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e4bc:	4a0d      	ldr	r2, [pc, #52]	; (800e4f4 <tcp_listen_closed+0x70>)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7ff ffb1 	bl	800e430 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	60fb      	str	r3, [r7, #12]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d9f0      	bls.n	800e4bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e4da:	bf00      	nop
 800e4dc:	bf00      	nop
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	0801a44c 	.word	0x0801a44c
 800e4e8:	0801a4fc 	.word	0x0801a4fc
 800e4ec:	0801a490 	.word	0x0801a490
 800e4f0:	0801a508 	.word	0x0801a508
 800e4f4:	0801c4c4 	.word	0x0801c4c4

0800e4f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e4f8:	b5b0      	push	{r4, r5, r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af04      	add	r7, sp, #16
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	460b      	mov	r3, r1
 800e502:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d106      	bne.n	800e518 <tcp_close_shutdown+0x20>
 800e50a:	4b63      	ldr	r3, [pc, #396]	; (800e698 <tcp_close_shutdown+0x1a0>)
 800e50c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e510:	4962      	ldr	r1, [pc, #392]	; (800e69c <tcp_close_shutdown+0x1a4>)
 800e512:	4863      	ldr	r0, [pc, #396]	; (800e6a0 <tcp_close_shutdown+0x1a8>)
 800e514:	f009 f992 	bl	801783c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e518:	78fb      	ldrb	r3, [r7, #3]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d066      	beq.n	800e5ec <tcp_close_shutdown+0xf4>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	7d1b      	ldrb	r3, [r3, #20]
 800e522:	2b04      	cmp	r3, #4
 800e524:	d003      	beq.n	800e52e <tcp_close_shutdown+0x36>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7d1b      	ldrb	r3, [r3, #20]
 800e52a:	2b07      	cmp	r3, #7
 800e52c:	d15e      	bne.n	800e5ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e532:	2b00      	cmp	r3, #0
 800e534:	d104      	bne.n	800e540 <tcp_close_shutdown+0x48>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e53a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e53e:	d055      	beq.n	800e5ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	8b5b      	ldrh	r3, [r3, #26]
 800e544:	f003 0310 	and.w	r3, r3, #16
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d106      	bne.n	800e55a <tcp_close_shutdown+0x62>
 800e54c:	4b52      	ldr	r3, [pc, #328]	; (800e698 <tcp_close_shutdown+0x1a0>)
 800e54e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e552:	4954      	ldr	r1, [pc, #336]	; (800e6a4 <tcp_close_shutdown+0x1ac>)
 800e554:	4852      	ldr	r0, [pc, #328]	; (800e6a0 <tcp_close_shutdown+0x1a8>)
 800e556:	f009 f971 	bl	801783c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e562:	687d      	ldr	r5, [r7, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	3304      	adds	r3, #4
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	8ad2      	ldrh	r2, [r2, #22]
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	8b09      	ldrh	r1, [r1, #24]
 800e570:	9102      	str	r1, [sp, #8]
 800e572:	9201      	str	r2, [sp, #4]
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	462b      	mov	r3, r5
 800e578:	4622      	mov	r2, r4
 800e57a:	4601      	mov	r1, r0
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f005 fdb7 	bl	80140f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f001 fb98 	bl	800fcb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e588:	4b47      	ldr	r3, [pc, #284]	; (800e6a8 <tcp_close_shutdown+0x1b0>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d105      	bne.n	800e59e <tcp_close_shutdown+0xa6>
 800e592:	4b45      	ldr	r3, [pc, #276]	; (800e6a8 <tcp_close_shutdown+0x1b0>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	4a43      	ldr	r2, [pc, #268]	; (800e6a8 <tcp_close_shutdown+0x1b0>)
 800e59a:	6013      	str	r3, [r2, #0]
 800e59c:	e013      	b.n	800e5c6 <tcp_close_shutdown+0xce>
 800e59e:	4b42      	ldr	r3, [pc, #264]	; (800e6a8 <tcp_close_shutdown+0x1b0>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	e00c      	b.n	800e5c0 <tcp_close_shutdown+0xc8>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d104      	bne.n	800e5ba <tcp_close_shutdown+0xc2>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68da      	ldr	r2, [r3, #12]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	60da      	str	r2, [r3, #12]
 800e5b8:	e005      	b.n	800e5c6 <tcp_close_shutdown+0xce>
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	60fb      	str	r3, [r7, #12]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1ef      	bne.n	800e5a6 <tcp_close_shutdown+0xae>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	60da      	str	r2, [r3, #12]
 800e5cc:	4b37      	ldr	r3, [pc, #220]	; (800e6ac <tcp_close_shutdown+0x1b4>)
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e5d2:	4b37      	ldr	r3, [pc, #220]	; (800e6b0 <tcp_close_shutdown+0x1b8>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d102      	bne.n	800e5e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e5dc:	f004 f82c 	bl	8012638 <tcp_trigger_input_pcb_close>
 800e5e0:	e002      	b.n	800e5e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff fed6 	bl	800e394 <tcp_free>
      }
      return ERR_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	e050      	b.n	800e68e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	7d1b      	ldrb	r3, [r3, #20]
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d03b      	beq.n	800e66c <tcp_close_shutdown+0x174>
 800e5f4:	2b02      	cmp	r3, #2
 800e5f6:	dc44      	bgt.n	800e682 <tcp_close_shutdown+0x18a>
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <tcp_close_shutdown+0x10a>
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d02a      	beq.n	800e656 <tcp_close_shutdown+0x15e>
 800e600:	e03f      	b.n	800e682 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	8adb      	ldrh	r3, [r3, #22]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d021      	beq.n	800e64e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e60a:	4b2a      	ldr	r3, [pc, #168]	; (800e6b4 <tcp_close_shutdown+0x1bc>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	429a      	cmp	r2, r3
 800e612:	d105      	bne.n	800e620 <tcp_close_shutdown+0x128>
 800e614:	4b27      	ldr	r3, [pc, #156]	; (800e6b4 <tcp_close_shutdown+0x1bc>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	4a26      	ldr	r2, [pc, #152]	; (800e6b4 <tcp_close_shutdown+0x1bc>)
 800e61c:	6013      	str	r3, [r2, #0]
 800e61e:	e013      	b.n	800e648 <tcp_close_shutdown+0x150>
 800e620:	4b24      	ldr	r3, [pc, #144]	; (800e6b4 <tcp_close_shutdown+0x1bc>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	60bb      	str	r3, [r7, #8]
 800e626:	e00c      	b.n	800e642 <tcp_close_shutdown+0x14a>
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d104      	bne.n	800e63c <tcp_close_shutdown+0x144>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	68da      	ldr	r2, [r3, #12]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	60da      	str	r2, [r3, #12]
 800e63a:	e005      	b.n	800e648 <tcp_close_shutdown+0x150>
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	60bb      	str	r3, [r7, #8]
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1ef      	bne.n	800e628 <tcp_close_shutdown+0x130>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff fea0 	bl	800e394 <tcp_free>
      break;
 800e654:	e01a      	b.n	800e68c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff ff14 	bl	800e484 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e65c:	6879      	ldr	r1, [r7, #4]
 800e65e:	4816      	ldr	r0, [pc, #88]	; (800e6b8 <tcp_close_shutdown+0x1c0>)
 800e660:	f001 fb7a 	bl	800fd58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff feb1 	bl	800e3cc <tcp_free_listen>
      break;
 800e66a:	e00f      	b.n	800e68c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	480e      	ldr	r0, [pc, #56]	; (800e6a8 <tcp_close_shutdown+0x1b0>)
 800e670:	f001 fb72 	bl	800fd58 <tcp_pcb_remove>
 800e674:	4b0d      	ldr	r3, [pc, #52]	; (800e6ac <tcp_close_shutdown+0x1b4>)
 800e676:	2201      	movs	r2, #1
 800e678:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7ff fe8a 	bl	800e394 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e680:	e004      	b.n	800e68c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f81a 	bl	800e6bc <tcp_close_shutdown_fin>
 800e688:	4603      	mov	r3, r0
 800e68a:	e000      	b.n	800e68e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bdb0      	pop	{r4, r5, r7, pc}
 800e696:	bf00      	nop
 800e698:	0801a44c 	.word	0x0801a44c
 800e69c:	0801a520 	.word	0x0801a520
 800e6a0:	0801a490 	.word	0x0801a490
 800e6a4:	0801a540 	.word	0x0801a540
 800e6a8:	2000bd2c 	.word	0x2000bd2c
 800e6ac:	2000bd28 	.word	0x2000bd28
 800e6b0:	2000bd40 	.word	0x2000bd40
 800e6b4:	2000bd38 	.word	0x2000bd38
 800e6b8:	2000bd34 	.word	0x2000bd34

0800e6bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d106      	bne.n	800e6d8 <tcp_close_shutdown_fin+0x1c>
 800e6ca:	4b2e      	ldr	r3, [pc, #184]	; (800e784 <tcp_close_shutdown_fin+0xc8>)
 800e6cc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e6d0:	492d      	ldr	r1, [pc, #180]	; (800e788 <tcp_close_shutdown_fin+0xcc>)
 800e6d2:	482e      	ldr	r0, [pc, #184]	; (800e78c <tcp_close_shutdown_fin+0xd0>)
 800e6d4:	f009 f8b2 	bl	801783c <iprintf>

  switch (pcb->state) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	7d1b      	ldrb	r3, [r3, #20]
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	d020      	beq.n	800e722 <tcp_close_shutdown_fin+0x66>
 800e6e0:	2b07      	cmp	r3, #7
 800e6e2:	dc2b      	bgt.n	800e73c <tcp_close_shutdown_fin+0x80>
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d002      	beq.n	800e6ee <tcp_close_shutdown_fin+0x32>
 800e6e8:	2b04      	cmp	r3, #4
 800e6ea:	d00d      	beq.n	800e708 <tcp_close_shutdown_fin+0x4c>
 800e6ec:	e026      	b.n	800e73c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f004 fe0c 	bl	801330c <tcp_send_fin>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d11f      	bne.n	800e740 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2205      	movs	r2, #5
 800e704:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e706:	e01b      	b.n	800e740 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f004 fdff 	bl	801330c <tcp_send_fin>
 800e70e:	4603      	mov	r3, r0
 800e710:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d114      	bne.n	800e744 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2205      	movs	r2, #5
 800e71e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e720:	e010      	b.n	800e744 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f004 fdf2 	bl	801330c <tcp_send_fin>
 800e728:	4603      	mov	r3, r0
 800e72a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e72c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d109      	bne.n	800e748 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2209      	movs	r2, #9
 800e738:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e73a:	e005      	b.n	800e748 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	e01c      	b.n	800e77a <tcp_close_shutdown_fin+0xbe>
      break;
 800e740:	bf00      	nop
 800e742:	e002      	b.n	800e74a <tcp_close_shutdown_fin+0x8e>
      break;
 800e744:	bf00      	nop
 800e746:	e000      	b.n	800e74a <tcp_close_shutdown_fin+0x8e>
      break;
 800e748:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d103      	bne.n	800e75a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f004 ff18 	bl	8013588 <tcp_output>
 800e758:	e00d      	b.n	800e776 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e762:	d108      	bne.n	800e776 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	8b5b      	ldrh	r3, [r3, #26]
 800e768:	f043 0308 	orr.w	r3, r3, #8
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	e001      	b.n	800e77a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	0801a44c 	.word	0x0801a44c
 800e788:	0801a4fc 	.word	0x0801a4fc
 800e78c:	0801a490 	.word	0x0801a490

0800e790 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d109      	bne.n	800e7b2 <tcp_close+0x22>
 800e79e:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <tcp_close+0x4c>)
 800e7a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e7a4:	490e      	ldr	r1, [pc, #56]	; (800e7e0 <tcp_close+0x50>)
 800e7a6:	480f      	ldr	r0, [pc, #60]	; (800e7e4 <tcp_close+0x54>)
 800e7a8:	f009 f848 	bl	801783c <iprintf>
 800e7ac:	f06f 030f 	mvn.w	r3, #15
 800e7b0:	e00f      	b.n	800e7d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7d1b      	ldrb	r3, [r3, #20]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d006      	beq.n	800e7c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8b5b      	ldrh	r3, [r3, #26]
 800e7be:	f043 0310 	orr.w	r3, r3, #16
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff fe94 	bl	800e4f8 <tcp_close_shutdown>
 800e7d0:	4603      	mov	r3, r0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	0801a44c 	.word	0x0801a44c
 800e7e0:	0801a55c 	.word	0x0801a55c
 800e7e4:	0801a490 	.word	0x0801a490

0800e7e8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d109      	bne.n	800e80e <tcp_shutdown+0x26>
 800e7fa:	4b26      	ldr	r3, [pc, #152]	; (800e894 <tcp_shutdown+0xac>)
 800e7fc:	f240 2207 	movw	r2, #519	; 0x207
 800e800:	4925      	ldr	r1, [pc, #148]	; (800e898 <tcp_shutdown+0xb0>)
 800e802:	4826      	ldr	r0, [pc, #152]	; (800e89c <tcp_shutdown+0xb4>)
 800e804:	f009 f81a 	bl	801783c <iprintf>
 800e808:	f06f 030f 	mvn.w	r3, #15
 800e80c:	e03d      	b.n	800e88a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	7d1b      	ldrb	r3, [r3, #20]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d102      	bne.n	800e81c <tcp_shutdown+0x34>
    return ERR_CONN;
 800e816:	f06f 030a 	mvn.w	r3, #10
 800e81a:	e036      	b.n	800e88a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d01b      	beq.n	800e85a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	8b5b      	ldrh	r3, [r3, #26]
 800e826:	f043 0310 	orr.w	r3, r3, #16
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d005      	beq.n	800e842 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e836:	2101      	movs	r1, #1
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f7ff fe5d 	bl	800e4f8 <tcp_close_shutdown>
 800e83e:	4603      	mov	r3, r0
 800e840:	e023      	b.n	800e88a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e846:	2b00      	cmp	r3, #0
 800e848:	d007      	beq.n	800e85a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff faf4 	bl	800de3c <pbuf_free>
      pcb->refused_data = NULL;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2200      	movs	r2, #0
 800e858:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d013      	beq.n	800e888 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	2b04      	cmp	r3, #4
 800e866:	dc02      	bgt.n	800e86e <tcp_shutdown+0x86>
 800e868:	2b03      	cmp	r3, #3
 800e86a:	da02      	bge.n	800e872 <tcp_shutdown+0x8a>
 800e86c:	e009      	b.n	800e882 <tcp_shutdown+0x9a>
 800e86e:	2b07      	cmp	r3, #7
 800e870:	d107      	bne.n	800e882 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	b2db      	uxtb	r3, r3
 800e876:	4619      	mov	r1, r3
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f7ff fe3d 	bl	800e4f8 <tcp_close_shutdown>
 800e87e:	4603      	mov	r3, r0
 800e880:	e003      	b.n	800e88a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e882:	f06f 030a 	mvn.w	r3, #10
 800e886:	e000      	b.n	800e88a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	0801a44c 	.word	0x0801a44c
 800e898:	0801a574 	.word	0x0801a574
 800e89c:	0801a490 	.word	0x0801a490

0800e8a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b08e      	sub	sp, #56	; 0x38
 800e8a4:	af04      	add	r7, sp, #16
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d107      	bne.n	800e8c0 <tcp_abandon+0x20>
 800e8b0:	4b52      	ldr	r3, [pc, #328]	; (800e9fc <tcp_abandon+0x15c>)
 800e8b2:	f240 223d 	movw	r2, #573	; 0x23d
 800e8b6:	4952      	ldr	r1, [pc, #328]	; (800ea00 <tcp_abandon+0x160>)
 800e8b8:	4852      	ldr	r0, [pc, #328]	; (800ea04 <tcp_abandon+0x164>)
 800e8ba:	f008 ffbf 	bl	801783c <iprintf>
 800e8be:	e099      	b.n	800e9f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7d1b      	ldrb	r3, [r3, #20]
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d106      	bne.n	800e8d6 <tcp_abandon+0x36>
 800e8c8:	4b4c      	ldr	r3, [pc, #304]	; (800e9fc <tcp_abandon+0x15c>)
 800e8ca:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e8ce:	494e      	ldr	r1, [pc, #312]	; (800ea08 <tcp_abandon+0x168>)
 800e8d0:	484c      	ldr	r0, [pc, #304]	; (800ea04 <tcp_abandon+0x164>)
 800e8d2:	f008 ffb3 	bl	801783c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7d1b      	ldrb	r3, [r3, #20]
 800e8da:	2b0a      	cmp	r3, #10
 800e8dc:	d107      	bne.n	800e8ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e8de:	6879      	ldr	r1, [r7, #4]
 800e8e0:	484a      	ldr	r0, [pc, #296]	; (800ea0c <tcp_abandon+0x16c>)
 800e8e2:	f001 fa39 	bl	800fd58 <tcp_pcb_remove>
    tcp_free(pcb);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7ff fd54 	bl	800e394 <tcp_free>
 800e8ec:	e082      	b.n	800e9f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e900:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e908:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	7d1b      	ldrb	r3, [r3, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d126      	bne.n	800e966 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	8adb      	ldrh	r3, [r3, #22]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d02e      	beq.n	800e97e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e920:	4b3b      	ldr	r3, [pc, #236]	; (800ea10 <tcp_abandon+0x170>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	429a      	cmp	r2, r3
 800e928:	d105      	bne.n	800e936 <tcp_abandon+0x96>
 800e92a:	4b39      	ldr	r3, [pc, #228]	; (800ea10 <tcp_abandon+0x170>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	4a37      	ldr	r2, [pc, #220]	; (800ea10 <tcp_abandon+0x170>)
 800e932:	6013      	str	r3, [r2, #0]
 800e934:	e013      	b.n	800e95e <tcp_abandon+0xbe>
 800e936:	4b36      	ldr	r3, [pc, #216]	; (800ea10 <tcp_abandon+0x170>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	e00c      	b.n	800e958 <tcp_abandon+0xb8>
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	429a      	cmp	r2, r3
 800e946:	d104      	bne.n	800e952 <tcp_abandon+0xb2>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68da      	ldr	r2, [r3, #12]
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	60da      	str	r2, [r3, #12]
 800e950:	e005      	b.n	800e95e <tcp_abandon+0xbe>
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	61fb      	str	r3, [r7, #28]
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1ef      	bne.n	800e93e <tcp_abandon+0x9e>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	60da      	str	r2, [r3, #12]
 800e964:	e00b      	b.n	800e97e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	8adb      	ldrh	r3, [r3, #22]
 800e96e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e970:	6879      	ldr	r1, [r7, #4]
 800e972:	4828      	ldr	r0, [pc, #160]	; (800ea14 <tcp_abandon+0x174>)
 800e974:	f001 f9f0 	bl	800fd58 <tcp_pcb_remove>
 800e978:	4b27      	ldr	r3, [pc, #156]	; (800ea18 <tcp_abandon+0x178>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e982:	2b00      	cmp	r3, #0
 800e984:	d004      	beq.n	800e990 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 fec4 	bl	800f718 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d004      	beq.n	800e9a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e99c:	4618      	mov	r0, r3
 800e99e:	f000 febb 	bl	800f718 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d004      	beq.n	800e9b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 feb2 	bl	800f718 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00e      	beq.n	800e9d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e9ba:	6879      	ldr	r1, [r7, #4]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	3304      	adds	r3, #4
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	8b12      	ldrh	r2, [r2, #24]
 800e9c4:	9202      	str	r2, [sp, #8]
 800e9c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9c8:	9201      	str	r2, [sp, #4]
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	69b9      	ldr	r1, [r7, #24]
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f005 fb8c 	bl	80140f0 <tcp_rst>
    }
    last_state = pcb->state;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7d1b      	ldrb	r3, [r3, #20]
 800e9dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7ff fcd8 	bl	800e394 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d004      	beq.n	800e9f4 <tcp_abandon+0x154>
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f06f 010c 	mvn.w	r1, #12
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	4798      	blx	r3
  }
}
 800e9f4:	3728      	adds	r7, #40	; 0x28
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	0801a44c 	.word	0x0801a44c
 800ea00:	0801a590 	.word	0x0801a590
 800ea04:	0801a490 	.word	0x0801a490
 800ea08:	0801a5ac 	.word	0x0801a5ac
 800ea0c:	2000bd3c 	.word	0x2000bd3c
 800ea10:	2000bd38 	.word	0x2000bd38
 800ea14:	2000bd2c 	.word	0x2000bd2c
 800ea18:	2000bd28 	.word	0x2000bd28

0800ea1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ea24:	2101      	movs	r1, #1
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff ff3a 	bl	800e8a0 <tcp_abandon>
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ea42:	2304      	movs	r3, #4
 800ea44:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d101      	bne.n	800ea50 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ea4c:	4b3e      	ldr	r3, [pc, #248]	; (800eb48 <tcp_bind+0x114>)
 800ea4e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d109      	bne.n	800ea6a <tcp_bind+0x36>
 800ea56:	4b3d      	ldr	r3, [pc, #244]	; (800eb4c <tcp_bind+0x118>)
 800ea58:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ea5c:	493c      	ldr	r1, [pc, #240]	; (800eb50 <tcp_bind+0x11c>)
 800ea5e:	483d      	ldr	r0, [pc, #244]	; (800eb54 <tcp_bind+0x120>)
 800ea60:	f008 feec 	bl	801783c <iprintf>
 800ea64:	f06f 030f 	mvn.w	r3, #15
 800ea68:	e06a      	b.n	800eb40 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	7d1b      	ldrb	r3, [r3, #20]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d009      	beq.n	800ea86 <tcp_bind+0x52>
 800ea72:	4b36      	ldr	r3, [pc, #216]	; (800eb4c <tcp_bind+0x118>)
 800ea74:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ea78:	4937      	ldr	r1, [pc, #220]	; (800eb58 <tcp_bind+0x124>)
 800ea7a:	4836      	ldr	r0, [pc, #216]	; (800eb54 <tcp_bind+0x120>)
 800ea7c:	f008 fede 	bl	801783c <iprintf>
 800ea80:	f06f 0305 	mvn.w	r3, #5
 800ea84:	e05c      	b.n	800eb40 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ea86:	88fb      	ldrh	r3, [r7, #6]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d109      	bne.n	800eaa0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ea8c:	f000 f9de 	bl	800ee4c <tcp_new_port>
 800ea90:	4603      	mov	r3, r0
 800ea92:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea94:	88fb      	ldrh	r3, [r7, #6]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d135      	bne.n	800eb06 <tcp_bind+0xd2>
      return ERR_BUF;
 800ea9a:	f06f 0301 	mvn.w	r3, #1
 800ea9e:	e04f      	b.n	800eb40 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	61fb      	str	r3, [r7, #28]
 800eaa4:	e02b      	b.n	800eafe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eaa6:	4a2d      	ldr	r2, [pc, #180]	; (800eb5c <tcp_bind+0x128>)
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	61bb      	str	r3, [r7, #24]
 800eab2:	e01e      	b.n	800eaf2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	8adb      	ldrh	r3, [r3, #22]
 800eab8:	88fa      	ldrh	r2, [r7, #6]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d116      	bne.n	800eaec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800eabe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d010      	beq.n	800eae6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00c      	beq.n	800eae6 <tcp_bind+0xb2>
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d009      	beq.n	800eae6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d102      	bne.n	800eaec <tcp_bind+0xb8>
              return ERR_USE;
 800eae6:	f06f 0307 	mvn.w	r3, #7
 800eaea:	e029      	b.n	800eb40 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	61bb      	str	r3, [r7, #24]
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1dd      	bne.n	800eab4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	3301      	adds	r3, #1
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	69fa      	ldr	r2, [r7, #28]
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	dbcf      	blt.n	800eaa6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00c      	beq.n	800eb26 <tcp_bind+0xf2>
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d008      	beq.n	800eb26 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <tcp_bind+0xec>
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	e000      	b.n	800eb22 <tcp_bind+0xee>
 800eb20:	2300      	movs	r3, #0
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	88fa      	ldrh	r2, [r7, #6]
 800eb2a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	; (800eb60 <tcp_bind+0x12c>)
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	60da      	str	r2, [r3, #12]
 800eb34:	4a0a      	ldr	r2, [pc, #40]	; (800eb60 <tcp_bind+0x12c>)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6013      	str	r3, [r2, #0]
 800eb3a:	f005 fc9b 	bl	8014474 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3720      	adds	r7, #32
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	0801c4ec 	.word	0x0801c4ec
 800eb4c:	0801a44c 	.word	0x0801a44c
 800eb50:	0801a5e0 	.word	0x0801a5e0
 800eb54:	0801a490 	.word	0x0801a490
 800eb58:	0801a5f8 	.word	0x0801a5f8
 800eb5c:	0801c4c4 	.word	0x0801c4c4
 800eb60:	2000bd38 	.word	0x2000bd38

0800eb64 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d106      	bne.n	800eb86 <tcp_accept_null+0x22>
 800eb78:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <tcp_accept_null+0x34>)
 800eb7a:	f240 320f 	movw	r2, #783	; 0x30f
 800eb7e:	4907      	ldr	r1, [pc, #28]	; (800eb9c <tcp_accept_null+0x38>)
 800eb80:	4807      	ldr	r0, [pc, #28]	; (800eba0 <tcp_accept_null+0x3c>)
 800eb82:	f008 fe5b 	bl	801783c <iprintf>

  tcp_abort(pcb);
 800eb86:	68b8      	ldr	r0, [r7, #8]
 800eb88:	f7ff ff48 	bl	800ea1c <tcp_abort>

  return ERR_ABRT;
 800eb8c:	f06f 030c 	mvn.w	r3, #12
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	0801a44c 	.word	0x0801a44c
 800eb9c:	0801a620 	.word	0x0801a620
 800eba0:	0801a490 	.word	0x0801a490

0800eba4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b088      	sub	sp, #32
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	460b      	mov	r3, r1
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d109      	bne.n	800ebd0 <tcp_listen_with_backlog_and_err+0x2c>
 800ebbc:	4b47      	ldr	r3, [pc, #284]	; (800ecdc <tcp_listen_with_backlog_and_err+0x138>)
 800ebbe:	f240 3259 	movw	r2, #857	; 0x359
 800ebc2:	4947      	ldr	r1, [pc, #284]	; (800ece0 <tcp_listen_with_backlog_and_err+0x13c>)
 800ebc4:	4847      	ldr	r0, [pc, #284]	; (800ece4 <tcp_listen_with_backlog_and_err+0x140>)
 800ebc6:	f008 fe39 	bl	801783c <iprintf>
 800ebca:	23f0      	movs	r3, #240	; 0xf0
 800ebcc:	76fb      	strb	r3, [r7, #27]
 800ebce:	e079      	b.n	800ecc4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	7d1b      	ldrb	r3, [r3, #20]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d009      	beq.n	800ebec <tcp_listen_with_backlog_and_err+0x48>
 800ebd8:	4b40      	ldr	r3, [pc, #256]	; (800ecdc <tcp_listen_with_backlog_and_err+0x138>)
 800ebda:	f240 325a 	movw	r2, #858	; 0x35a
 800ebde:	4942      	ldr	r1, [pc, #264]	; (800ece8 <tcp_listen_with_backlog_and_err+0x144>)
 800ebe0:	4840      	ldr	r0, [pc, #256]	; (800ece4 <tcp_listen_with_backlog_and_err+0x140>)
 800ebe2:	f008 fe2b 	bl	801783c <iprintf>
 800ebe6:	23f1      	movs	r3, #241	; 0xf1
 800ebe8:	76fb      	strb	r3, [r7, #27]
 800ebea:	e06b      	b.n	800ecc4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	7d1b      	ldrb	r3, [r3, #20]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d104      	bne.n	800ebfe <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ebf8:	23f7      	movs	r3, #247	; 0xf7
 800ebfa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebfc:	e062      	b.n	800ecc4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ebfe:	2002      	movs	r0, #2
 800ec00:	f7fe fa26 	bl	800d050 <memp_malloc>
 800ec04:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ec0c:	23ff      	movs	r3, #255	; 0xff
 800ec0e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ec10:	e058      	b.n	800ecc4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	691a      	ldr	r2, [r3, #16]
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	8ada      	ldrh	r2, [r3, #22]
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	2201      	movs	r2, #1
 800ec26:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	7d5a      	ldrb	r2, [r3, #21]
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	7a5a      	ldrb	r2, [r3, #9]
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	7ada      	ldrb	r2, [r3, #11]
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	7a9a      	ldrb	r2, [r3, #10]
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	8adb      	ldrh	r3, [r3, #22]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d021      	beq.n	800eca2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec5e:	4b23      	ldr	r3, [pc, #140]	; (800ecec <tcp_listen_with_backlog_and_err+0x148>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d105      	bne.n	800ec74 <tcp_listen_with_backlog_and_err+0xd0>
 800ec68:	4b20      	ldr	r3, [pc, #128]	; (800ecec <tcp_listen_with_backlog_and_err+0x148>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	4a1f      	ldr	r2, [pc, #124]	; (800ecec <tcp_listen_with_backlog_and_err+0x148>)
 800ec70:	6013      	str	r3, [r2, #0]
 800ec72:	e013      	b.n	800ec9c <tcp_listen_with_backlog_and_err+0xf8>
 800ec74:	4b1d      	ldr	r3, [pc, #116]	; (800ecec <tcp_listen_with_backlog_and_err+0x148>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	617b      	str	r3, [r7, #20]
 800ec7a:	e00c      	b.n	800ec96 <tcp_listen_with_backlog_and_err+0xf2>
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d104      	bne.n	800ec90 <tcp_listen_with_backlog_and_err+0xec>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	68da      	ldr	r2, [r3, #12]
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	60da      	str	r2, [r3, #12]
 800ec8e:	e005      	b.n	800ec9c <tcp_listen_with_backlog_and_err+0xf8>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	617b      	str	r3, [r7, #20]
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1ef      	bne.n	800ec7c <tcp_listen_with_backlog_and_err+0xd8>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7ff fb76 	bl	800e394 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	4a11      	ldr	r2, [pc, #68]	; (800ecf0 <tcp_listen_with_backlog_and_err+0x14c>)
 800ecac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ecae:	4b11      	ldr	r3, [pc, #68]	; (800ecf4 <tcp_listen_with_backlog_and_err+0x150>)
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	60da      	str	r2, [r3, #12]
 800ecb6:	4a0f      	ldr	r2, [pc, #60]	; (800ecf4 <tcp_listen_with_backlog_and_err+0x150>)
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	6013      	str	r3, [r2, #0]
 800ecbc:	f005 fbda 	bl	8014474 <tcp_timer_needed>
  res = ERR_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d002      	beq.n	800ecd0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	7efa      	ldrb	r2, [r7, #27]
 800ecce:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ecd0:	69fb      	ldr	r3, [r7, #28]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	0801a44c 	.word	0x0801a44c
 800ece0:	0801a640 	.word	0x0801a640
 800ece4:	0801a490 	.word	0x0801a490
 800ece8:	0801a670 	.word	0x0801a670
 800ecec:	2000bd38 	.word	0x2000bd38
 800ecf0:	0800eb65 	.word	0x0800eb65
 800ecf4:	2000bd34 	.word	0x2000bd34

0800ecf8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d106      	bne.n	800ed14 <tcp_update_rcv_ann_wnd+0x1c>
 800ed06:	4b25      	ldr	r3, [pc, #148]	; (800ed9c <tcp_update_rcv_ann_wnd+0xa4>)
 800ed08:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ed0c:	4924      	ldr	r1, [pc, #144]	; (800eda0 <tcp_update_rcv_ann_wnd+0xa8>)
 800ed0e:	4825      	ldr	r0, [pc, #148]	; (800eda4 <tcp_update_rcv_ann_wnd+0xac>)
 800ed10:	f008 fd94 	bl	801783c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ed1c:	4413      	add	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ed28:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ed2c:	bf28      	it	cs
 800ed2e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ed32:	b292      	uxth	r2, r2
 800ed34:	4413      	add	r3, r2
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	db08      	blt.n	800ed50 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	e020      	b.n	800ed92 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	dd03      	ble.n	800ed66 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed64:	e014      	b.n	800ed90 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed78:	d306      	bcc.n	800ed88 <tcp_update_rcv_ann_wnd+0x90>
 800ed7a:	4b08      	ldr	r3, [pc, #32]	; (800ed9c <tcp_update_rcv_ann_wnd+0xa4>)
 800ed7c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ed80:	4909      	ldr	r1, [pc, #36]	; (800eda8 <tcp_update_rcv_ann_wnd+0xb0>)
 800ed82:	4808      	ldr	r0, [pc, #32]	; (800eda4 <tcp_update_rcv_ann_wnd+0xac>)
 800ed84:	f008 fd5a 	bl	801783c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ed90:	2300      	movs	r3, #0
  }
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	0801a44c 	.word	0x0801a44c
 800eda0:	0801a6a8 	.word	0x0801a6a8
 800eda4:	0801a490 	.word	0x0801a490
 800eda8:	0801a6cc 	.word	0x0801a6cc

0800edac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	460b      	mov	r3, r1
 800edb6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d107      	bne.n	800edce <tcp_recved+0x22>
 800edbe:	4b1f      	ldr	r3, [pc, #124]	; (800ee3c <tcp_recved+0x90>)
 800edc0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800edc4:	491e      	ldr	r1, [pc, #120]	; (800ee40 <tcp_recved+0x94>)
 800edc6:	481f      	ldr	r0, [pc, #124]	; (800ee44 <tcp_recved+0x98>)
 800edc8:	f008 fd38 	bl	801783c <iprintf>
 800edcc:	e032      	b.n	800ee34 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	7d1b      	ldrb	r3, [r3, #20]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d106      	bne.n	800ede4 <tcp_recved+0x38>
 800edd6:	4b19      	ldr	r3, [pc, #100]	; (800ee3c <tcp_recved+0x90>)
 800edd8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eddc:	491a      	ldr	r1, [pc, #104]	; (800ee48 <tcp_recved+0x9c>)
 800edde:	4819      	ldr	r0, [pc, #100]	; (800ee44 <tcp_recved+0x98>)
 800ede0:	f008 fd2c 	bl	801783c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ede8:	887b      	ldrh	r3, [r7, #2]
 800edea:	4413      	add	r3, r2
 800edec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800edee:	89fb      	ldrh	r3, [r7, #14]
 800edf0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800edf4:	d804      	bhi.n	800ee00 <tcp_recved+0x54>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edfa:	89fa      	ldrh	r2, [r7, #14]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d204      	bcs.n	800ee0a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee06:	851a      	strh	r2, [r3, #40]	; 0x28
 800ee08:	e002      	b.n	800ee10 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	89fa      	ldrh	r2, [r7, #14]
 800ee0e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff ff71 	bl	800ecf8 <tcp_update_rcv_ann_wnd>
 800ee16:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ee1e:	d309      	bcc.n	800ee34 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	8b5b      	ldrh	r3, [r3, #26]
 800ee24:	f043 0302 	orr.w	r3, r3, #2
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f004 fbaa 	bl	8013588 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	0801a44c 	.word	0x0801a44c
 800ee40:	0801a6e8 	.word	0x0801a6e8
 800ee44:	0801a490 	.word	0x0801a490
 800ee48:	0801a700 	.word	0x0801a700

0800ee4c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ee56:	4b1e      	ldr	r3, [pc, #120]	; (800eed0 <tcp_new_port+0x84>)
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	4b1c      	ldr	r3, [pc, #112]	; (800eed0 <tcp_new_port+0x84>)
 800ee60:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ee62:	4b1b      	ldr	r3, [pc, #108]	; (800eed0 <tcp_new_port+0x84>)
 800ee64:	881b      	ldrh	r3, [r3, #0]
 800ee66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d103      	bne.n	800ee76 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ee6e:	4b18      	ldr	r3, [pc, #96]	; (800eed0 <tcp_new_port+0x84>)
 800ee70:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ee74:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee76:	2300      	movs	r3, #0
 800ee78:	71fb      	strb	r3, [r7, #7]
 800ee7a:	e01e      	b.n	800eeba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	4a15      	ldr	r2, [pc, #84]	; (800eed4 <tcp_new_port+0x88>)
 800ee80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	e011      	b.n	800eeae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	8ada      	ldrh	r2, [r3, #22]
 800ee8e:	4b10      	ldr	r3, [pc, #64]	; (800eed0 <tcp_new_port+0x84>)
 800ee90:	881b      	ldrh	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d108      	bne.n	800eea8 <tcp_new_port+0x5c>
        n++;
 800ee96:	88bb      	ldrh	r3, [r7, #4]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ee9c:	88bb      	ldrh	r3, [r7, #4]
 800ee9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eea2:	d3d8      	bcc.n	800ee56 <tcp_new_port+0xa>
          return 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	e00d      	b.n	800eec4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	603b      	str	r3, [r7, #0]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1ea      	bne.n	800ee8a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eeb4:	79fb      	ldrb	r3, [r7, #7]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	71fb      	strb	r3, [r7, #7]
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	2b03      	cmp	r3, #3
 800eebe:	d9dd      	bls.n	800ee7c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800eec0:	4b03      	ldr	r3, [pc, #12]	; (800eed0 <tcp_new_port+0x84>)
 800eec2:	881b      	ldrh	r3, [r3, #0]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	20000010 	.word	0x20000010
 800eed4:	0801c4c4 	.word	0x0801c4c4

0800eed8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eed8:	b5b0      	push	{r4, r5, r7, lr}
 800eeda:	b090      	sub	sp, #64	; 0x40
 800eedc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800eee4:	4b94      	ldr	r3, [pc, #592]	; (800f138 <tcp_slowtmr+0x260>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	3301      	adds	r3, #1
 800eeea:	4a93      	ldr	r2, [pc, #588]	; (800f138 <tcp_slowtmr+0x260>)
 800eeec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eeee:	4b93      	ldr	r3, [pc, #588]	; (800f13c <tcp_slowtmr+0x264>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	3301      	adds	r3, #1
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	4b91      	ldr	r3, [pc, #580]	; (800f13c <tcp_slowtmr+0x264>)
 800eef8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eefe:	4b90      	ldr	r3, [pc, #576]	; (800f140 <tcp_slowtmr+0x268>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ef04:	e29d      	b.n	800f442 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef08:	7d1b      	ldrb	r3, [r3, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <tcp_slowtmr+0x44>
 800ef0e:	4b8d      	ldr	r3, [pc, #564]	; (800f144 <tcp_slowtmr+0x26c>)
 800ef10:	f240 42be 	movw	r2, #1214	; 0x4be
 800ef14:	498c      	ldr	r1, [pc, #560]	; (800f148 <tcp_slowtmr+0x270>)
 800ef16:	488d      	ldr	r0, [pc, #564]	; (800f14c <tcp_slowtmr+0x274>)
 800ef18:	f008 fc90 	bl	801783c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	7d1b      	ldrb	r3, [r3, #20]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d106      	bne.n	800ef32 <tcp_slowtmr+0x5a>
 800ef24:	4b87      	ldr	r3, [pc, #540]	; (800f144 <tcp_slowtmr+0x26c>)
 800ef26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ef2a:	4989      	ldr	r1, [pc, #548]	; (800f150 <tcp_slowtmr+0x278>)
 800ef2c:	4887      	ldr	r0, [pc, #540]	; (800f14c <tcp_slowtmr+0x274>)
 800ef2e:	f008 fc85 	bl	801783c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ef32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	2b0a      	cmp	r3, #10
 800ef38:	d106      	bne.n	800ef48 <tcp_slowtmr+0x70>
 800ef3a:	4b82      	ldr	r3, [pc, #520]	; (800f144 <tcp_slowtmr+0x26c>)
 800ef3c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ef40:	4984      	ldr	r1, [pc, #528]	; (800f154 <tcp_slowtmr+0x27c>)
 800ef42:	4882      	ldr	r0, [pc, #520]	; (800f14c <tcp_slowtmr+0x274>)
 800ef44:	f008 fc7a 	bl	801783c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ef48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4a:	7f9a      	ldrb	r2, [r3, #30]
 800ef4c:	4b7b      	ldr	r3, [pc, #492]	; (800f13c <tcp_slowtmr+0x264>)
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d105      	bne.n	800ef60 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ef54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ef5e:	e270      	b.n	800f442 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ef60:	4b76      	ldr	r3, [pc, #472]	; (800f13c <tcp_slowtmr+0x264>)
 800ef62:	781a      	ldrb	r2, [r3, #0]
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d10a      	bne.n	800ef92 <tcp_slowtmr+0xba>
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d905      	bls.n	800ef92 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ef86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef90:	e11e      	b.n	800f1d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef98:	2b0b      	cmp	r3, #11
 800ef9a:	d905      	bls.n	800efa8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa0:	3301      	adds	r3, #1
 800efa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efa6:	e113      	b.n	800f1d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d075      	beq.n	800f09e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800efb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d006      	beq.n	800efc8 <tcp_slowtmr+0xf0>
 800efba:	4b62      	ldr	r3, [pc, #392]	; (800f144 <tcp_slowtmr+0x26c>)
 800efbc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800efc0:	4965      	ldr	r1, [pc, #404]	; (800f158 <tcp_slowtmr+0x280>)
 800efc2:	4862      	ldr	r0, [pc, #392]	; (800f14c <tcp_slowtmr+0x274>)
 800efc4:	f008 fc3a 	bl	801783c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d106      	bne.n	800efde <tcp_slowtmr+0x106>
 800efd0:	4b5c      	ldr	r3, [pc, #368]	; (800f144 <tcp_slowtmr+0x26c>)
 800efd2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800efd6:	4961      	ldr	r1, [pc, #388]	; (800f15c <tcp_slowtmr+0x284>)
 800efd8:	485c      	ldr	r0, [pc, #368]	; (800f14c <tcp_slowtmr+0x274>)
 800efda:	f008 fc2f 	bl	801783c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efe4:	2b0b      	cmp	r3, #11
 800efe6:	d905      	bls.n	800eff4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800efe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efec:	3301      	adds	r3, #1
 800efee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eff2:	e0ed      	b.n	800f1d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800effa:	3b01      	subs	r3, #1
 800effc:	4a58      	ldr	r2, [pc, #352]	; (800f160 <tcp_slowtmr+0x288>)
 800effe:	5cd3      	ldrb	r3, [r2, r3]
 800f000:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f004:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f008:	7c7a      	ldrb	r2, [r7, #17]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d907      	bls.n	800f01e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f010:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f014:	3301      	adds	r3, #1
 800f016:	b2da      	uxtb	r2, r3
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f024:	7c7a      	ldrb	r2, [r7, #17]
 800f026:	429a      	cmp	r2, r3
 800f028:	f200 80d2 	bhi.w	800f1d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f02c:	2301      	movs	r3, #1
 800f02e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f036:	2b00      	cmp	r3, #0
 800f038:	d108      	bne.n	800f04c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f03a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f03c:	f005 f94c 	bl	80142d8 <tcp_zero_window_probe>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d014      	beq.n	800f070 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f046:	2300      	movs	r3, #0
 800f048:	623b      	str	r3, [r7, #32]
 800f04a:	e011      	b.n	800f070 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f052:	4619      	mov	r1, r3
 800f054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f056:	f004 f811 	bl	801307c <tcp_split_unsent_seg>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d107      	bne.n	800f070 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f062:	f004 fa91 	bl	8013588 <tcp_output>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d101      	bne.n	800f070 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f06c:	2300      	movs	r3, #0
 800f06e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	2b00      	cmp	r3, #0
 800f074:	f000 80ac 	beq.w	800f1d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f086:	2b06      	cmp	r3, #6
 800f088:	f200 80a2 	bhi.w	800f1d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f092:	3301      	adds	r3, #1
 800f094:	b2da      	uxtb	r2, r3
 800f096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f098:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f09c:	e098      	b.n	800f1d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	db0f      	blt.n	800f0c8 <tcp_slowtmr+0x1f0>
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f0ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d008      	beq.n	800f0c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	3301      	adds	r3, #1
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	b21a      	sxth	r2, r3
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	db7b      	blt.n	800f1d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0da:	f004 fd47 	bl	8013b6c <tcp_rexmit_rto_prepare>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d007      	beq.n	800f0f4 <tcp_slowtmr+0x21c>
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d171      	bne.n	800f1d0 <tcp_slowtmr+0x2f8>
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d06d      	beq.n	800f1d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	7d1b      	ldrb	r3, [r3, #20]
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d03a      	beq.n	800f172 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f102:	2b0c      	cmp	r3, #12
 800f104:	bf28      	it	cs
 800f106:	230c      	movcs	r3, #12
 800f108:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f110:	10db      	asrs	r3, r3, #3
 800f112:	b21b      	sxth	r3, r3
 800f114:	461a      	mov	r2, r3
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f11c:	4413      	add	r3, r2
 800f11e:	7efa      	ldrb	r2, [r7, #27]
 800f120:	4910      	ldr	r1, [pc, #64]	; (800f164 <tcp_slowtmr+0x28c>)
 800f122:	5c8a      	ldrb	r2, [r1, r2]
 800f124:	4093      	lsls	r3, r2
 800f126:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f12e:	4293      	cmp	r3, r2
 800f130:	dc1a      	bgt.n	800f168 <tcp_slowtmr+0x290>
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	b21a      	sxth	r2, r3
 800f136:	e019      	b.n	800f16c <tcp_slowtmr+0x294>
 800f138:	2000bd30 	.word	0x2000bd30
 800f13c:	20004dea 	.word	0x20004dea
 800f140:	2000bd2c 	.word	0x2000bd2c
 800f144:	0801a44c 	.word	0x0801a44c
 800f148:	0801a790 	.word	0x0801a790
 800f14c:	0801a490 	.word	0x0801a490
 800f150:	0801a7bc 	.word	0x0801a7bc
 800f154:	0801a7e8 	.word	0x0801a7e8
 800f158:	0801a818 	.word	0x0801a818
 800f15c:	0801a84c 	.word	0x0801a84c
 800f160:	0801c4bc 	.word	0x0801c4bc
 800f164:	0801c4ac 	.word	0x0801c4ac
 800f168:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f174:	2200      	movs	r2, #0
 800f176:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f180:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f184:	4293      	cmp	r3, r2
 800f186:	bf28      	it	cs
 800f188:	4613      	movcs	r3, r2
 800f18a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f18c:	8a7b      	ldrh	r3, [r7, #18]
 800f18e:	085b      	lsrs	r3, r3, #1
 800f190:	b29a      	uxth	r2, r3
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d206      	bcs.n	800f1b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1cc:	f004 fd3e 	bl	8013c4c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d2:	7d1b      	ldrb	r3, [r3, #20]
 800f1d4:	2b06      	cmp	r3, #6
 800f1d6:	d111      	bne.n	800f1fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	8b5b      	ldrh	r3, [r3, #26]
 800f1dc:	f003 0310 	and.w	r3, r3, #16
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d00b      	beq.n	800f1fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1e4:	4b9c      	ldr	r3, [pc, #624]	; (800f458 <tcp_slowtmr+0x580>)
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	6a1b      	ldr	r3, [r3, #32]
 800f1ec:	1ad3      	subs	r3, r2, r3
 800f1ee:	2b28      	cmp	r3, #40	; 0x28
 800f1f0:	d904      	bls.n	800f1fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	7a5b      	ldrb	r3, [r3, #9]
 800f200:	f003 0308 	and.w	r3, r3, #8
 800f204:	2b00      	cmp	r3, #0
 800f206:	d04a      	beq.n	800f29e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f20c:	2b04      	cmp	r3, #4
 800f20e:	d003      	beq.n	800f218 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f214:	2b07      	cmp	r3, #7
 800f216:	d142      	bne.n	800f29e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f218:	4b8f      	ldr	r3, [pc, #572]	; (800f458 <tcp_slowtmr+0x580>)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f228:	4b8c      	ldr	r3, [pc, #560]	; (800f45c <tcp_slowtmr+0x584>)
 800f22a:	440b      	add	r3, r1
 800f22c:	498c      	ldr	r1, [pc, #560]	; (800f460 <tcp_slowtmr+0x588>)
 800f22e:	fba1 1303 	umull	r1, r3, r1, r3
 800f232:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f234:	429a      	cmp	r2, r3
 800f236:	d90a      	bls.n	800f24e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f23c:	3301      	adds	r3, #1
 800f23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f246:	3301      	adds	r3, #1
 800f248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f24c:	e027      	b.n	800f29e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f24e:	4b82      	ldr	r3, [pc, #520]	; (800f458 <tcp_slowtmr+0x580>)
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f264:	4618      	mov	r0, r3
 800f266:	4b7f      	ldr	r3, [pc, #508]	; (800f464 <tcp_slowtmr+0x58c>)
 800f268:	fb03 f300 	mul.w	r3, r3, r0
 800f26c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f26e:	497c      	ldr	r1, [pc, #496]	; (800f460 <tcp_slowtmr+0x588>)
 800f270:	fba1 1303 	umull	r1, r3, r1, r3
 800f274:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f276:	429a      	cmp	r2, r3
 800f278:	d911      	bls.n	800f29e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f27c:	f004 ffec 	bl	8014258 <tcp_keepalive>
 800f280:	4603      	mov	r3, r0
 800f282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f286:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d107      	bne.n	800f29e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f294:	3301      	adds	r3, #1
 800f296:	b2da      	uxtb	r2, r3
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d011      	beq.n	800f2ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f2a6:	4b6c      	ldr	r3, [pc, #432]	; (800f458 <tcp_slowtmr+0x580>)
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	6a1b      	ldr	r3, [r3, #32]
 800f2ae:	1ad2      	subs	r2, r2, r3
 800f2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	005b      	lsls	r3, r3, #1
 800f2bc:	440b      	add	r3, r1
 800f2be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d302      	bcc.n	800f2ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f2c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2c6:	f000 feab 	bl	8010020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	7d1b      	ldrb	r3, [r3, #20]
 800f2ce:	2b03      	cmp	r3, #3
 800f2d0:	d10b      	bne.n	800f2ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2d2:	4b61      	ldr	r3, [pc, #388]	; (800f458 <tcp_slowtmr+0x580>)
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	2b28      	cmp	r3, #40	; 0x28
 800f2de:	d904      	bls.n	800f2ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ec:	7d1b      	ldrb	r3, [r3, #20]
 800f2ee:	2b09      	cmp	r3, #9
 800f2f0:	d10b      	bne.n	800f30a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2f2:	4b59      	ldr	r3, [pc, #356]	; (800f458 <tcp_slowtmr+0x580>)
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	6a1b      	ldr	r3, [r3, #32]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	2bf0      	cmp	r3, #240	; 0xf0
 800f2fe:	d904      	bls.n	800f30a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f304:	3301      	adds	r3, #1
 800f306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d060      	beq.n	800f3d4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f318:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f31c:	f000 fccc 	bl	800fcb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	2b00      	cmp	r3, #0
 800f324:	d010      	beq.n	800f348 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f326:	4b50      	ldr	r3, [pc, #320]	; (800f468 <tcp_slowtmr+0x590>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d106      	bne.n	800f33e <tcp_slowtmr+0x466>
 800f330:	4b4e      	ldr	r3, [pc, #312]	; (800f46c <tcp_slowtmr+0x594>)
 800f332:	f240 526d 	movw	r2, #1389	; 0x56d
 800f336:	494e      	ldr	r1, [pc, #312]	; (800f470 <tcp_slowtmr+0x598>)
 800f338:	484e      	ldr	r0, [pc, #312]	; (800f474 <tcp_slowtmr+0x59c>)
 800f33a:	f008 fa7f 	bl	801783c <iprintf>
        prev->next = pcb->next;
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	68da      	ldr	r2, [r3, #12]
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	60da      	str	r2, [r3, #12]
 800f346:	e00f      	b.n	800f368 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f348:	4b47      	ldr	r3, [pc, #284]	; (800f468 <tcp_slowtmr+0x590>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f34e:	429a      	cmp	r2, r3
 800f350:	d006      	beq.n	800f360 <tcp_slowtmr+0x488>
 800f352:	4b46      	ldr	r3, [pc, #280]	; (800f46c <tcp_slowtmr+0x594>)
 800f354:	f240 5271 	movw	r2, #1393	; 0x571
 800f358:	4947      	ldr	r1, [pc, #284]	; (800f478 <tcp_slowtmr+0x5a0>)
 800f35a:	4846      	ldr	r0, [pc, #280]	; (800f474 <tcp_slowtmr+0x59c>)
 800f35c:	f008 fa6e 	bl	801783c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	4a40      	ldr	r2, [pc, #256]	; (800f468 <tcp_slowtmr+0x590>)
 800f366:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d013      	beq.n	800f398 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f378:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37c:	3304      	adds	r3, #4
 800f37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f380:	8ad2      	ldrh	r2, [r2, #22]
 800f382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f384:	8b09      	ldrh	r1, [r1, #24]
 800f386:	9102      	str	r1, [sp, #8]
 800f388:	9201      	str	r2, [sp, #4]
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	462b      	mov	r3, r5
 800f38e:	4622      	mov	r2, r4
 800f390:	4601      	mov	r1, r0
 800f392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f394:	f004 feac 	bl	80140f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	691b      	ldr	r3, [r3, #16]
 800f39c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	7d1b      	ldrb	r3, [r3, #20]
 800f3a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f3ae:	6838      	ldr	r0, [r7, #0]
 800f3b0:	f7fe fff0 	bl	800e394 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f3b4:	4b31      	ldr	r3, [pc, #196]	; (800f47c <tcp_slowtmr+0x5a4>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <tcp_slowtmr+0x4f2>
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f06f 010c 	mvn.w	r1, #12
 800f3c6:	68b8      	ldr	r0, [r7, #8]
 800f3c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f3ca:	4b2c      	ldr	r3, [pc, #176]	; (800f47c <tcp_slowtmr+0x5a4>)
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d037      	beq.n	800f442 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f3d2:	e592      	b.n	800eefa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	7f1b      	ldrb	r3, [r3, #28]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ec:	7f1a      	ldrb	r2, [r3, #28]
 800f3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f0:	7f5b      	ldrb	r3, [r3, #29]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d325      	bcc.n	800f442 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f3fc:	4b1f      	ldr	r3, [pc, #124]	; (800f47c <tcp_slowtmr+0x5a4>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d00b      	beq.n	800f424 <tcp_slowtmr+0x54c>
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f414:	6912      	ldr	r2, [r2, #16]
 800f416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f418:	4610      	mov	r0, r2
 800f41a:	4798      	blx	r3
 800f41c:	4603      	mov	r3, r0
 800f41e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f422:	e002      	b.n	800f42a <tcp_slowtmr+0x552>
 800f424:	2300      	movs	r3, #0
 800f426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f42a:	4b14      	ldr	r3, [pc, #80]	; (800f47c <tcp_slowtmr+0x5a4>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d000      	beq.n	800f434 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f432:	e562      	b.n	800eefa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f434:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d102      	bne.n	800f442 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f43e:	f004 f8a3 	bl	8013588 <tcp_output>
  while (pcb != NULL) {
 800f442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f444:	2b00      	cmp	r3, #0
 800f446:	f47f ad5e 	bne.w	800ef06 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f44a:	2300      	movs	r3, #0
 800f44c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f44e:	4b0c      	ldr	r3, [pc, #48]	; (800f480 <tcp_slowtmr+0x5a8>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f454:	e069      	b.n	800f52a <tcp_slowtmr+0x652>
 800f456:	bf00      	nop
 800f458:	2000bd30 	.word	0x2000bd30
 800f45c:	000a4cb8 	.word	0x000a4cb8
 800f460:	10624dd3 	.word	0x10624dd3
 800f464:	000124f8 	.word	0x000124f8
 800f468:	2000bd2c 	.word	0x2000bd2c
 800f46c:	0801a44c 	.word	0x0801a44c
 800f470:	0801a884 	.word	0x0801a884
 800f474:	0801a490 	.word	0x0801a490
 800f478:	0801a8b0 	.word	0x0801a8b0
 800f47c:	2000bd28 	.word	0x2000bd28
 800f480:	2000bd3c 	.word	0x2000bd3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	7d1b      	ldrb	r3, [r3, #20]
 800f488:	2b0a      	cmp	r3, #10
 800f48a:	d006      	beq.n	800f49a <tcp_slowtmr+0x5c2>
 800f48c:	4b2b      	ldr	r3, [pc, #172]	; (800f53c <tcp_slowtmr+0x664>)
 800f48e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f492:	492b      	ldr	r1, [pc, #172]	; (800f540 <tcp_slowtmr+0x668>)
 800f494:	482b      	ldr	r0, [pc, #172]	; (800f544 <tcp_slowtmr+0x66c>)
 800f496:	f008 f9d1 	bl	801783c <iprintf>
    pcb_remove = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f4a0:	4b29      	ldr	r3, [pc, #164]	; (800f548 <tcp_slowtmr+0x670>)
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	6a1b      	ldr	r3, [r3, #32]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	2bf0      	cmp	r3, #240	; 0xf0
 800f4ac:	d904      	bls.n	800f4b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f4ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d02f      	beq.n	800f520 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f4c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4c2:	f000 fbf9 	bl	800fcb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d010      	beq.n	800f4ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f4cc:	4b1f      	ldr	r3, [pc, #124]	; (800f54c <tcp_slowtmr+0x674>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d106      	bne.n	800f4e4 <tcp_slowtmr+0x60c>
 800f4d6:	4b19      	ldr	r3, [pc, #100]	; (800f53c <tcp_slowtmr+0x664>)
 800f4d8:	f240 52af 	movw	r2, #1455	; 0x5af
 800f4dc:	491c      	ldr	r1, [pc, #112]	; (800f550 <tcp_slowtmr+0x678>)
 800f4de:	4819      	ldr	r0, [pc, #100]	; (800f544 <tcp_slowtmr+0x66c>)
 800f4e0:	f008 f9ac 	bl	801783c <iprintf>
        prev->next = pcb->next;
 800f4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e6:	68da      	ldr	r2, [r3, #12]
 800f4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ea:	60da      	str	r2, [r3, #12]
 800f4ec:	e00f      	b.n	800f50e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f4ee:	4b17      	ldr	r3, [pc, #92]	; (800f54c <tcp_slowtmr+0x674>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d006      	beq.n	800f506 <tcp_slowtmr+0x62e>
 800f4f8:	4b10      	ldr	r3, [pc, #64]	; (800f53c <tcp_slowtmr+0x664>)
 800f4fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f4fe:	4915      	ldr	r1, [pc, #84]	; (800f554 <tcp_slowtmr+0x67c>)
 800f500:	4810      	ldr	r0, [pc, #64]	; (800f544 <tcp_slowtmr+0x66c>)
 800f502:	f008 f99b 	bl	801783c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	4a10      	ldr	r2, [pc, #64]	; (800f54c <tcp_slowtmr+0x674>)
 800f50c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f510:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f518:	69f8      	ldr	r0, [r7, #28]
 800f51a:	f7fe ff3b 	bl	800e394 <tcp_free>
 800f51e:	e004      	b.n	800f52a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f522:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1a9      	bne.n	800f484 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	3730      	adds	r7, #48	; 0x30
 800f536:	46bd      	mov	sp, r7
 800f538:	bdb0      	pop	{r4, r5, r7, pc}
 800f53a:	bf00      	nop
 800f53c:	0801a44c 	.word	0x0801a44c
 800f540:	0801a8dc 	.word	0x0801a8dc
 800f544:	0801a490 	.word	0x0801a490
 800f548:	2000bd30 	.word	0x2000bd30
 800f54c:	2000bd3c 	.word	0x2000bd3c
 800f550:	0801a90c 	.word	0x0801a90c
 800f554:	0801a934 	.word	0x0801a934

0800f558 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f55e:	4b2d      	ldr	r3, [pc, #180]	; (800f614 <tcp_fasttmr+0xbc>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	3301      	adds	r3, #1
 800f564:	b2da      	uxtb	r2, r3
 800f566:	4b2b      	ldr	r3, [pc, #172]	; (800f614 <tcp_fasttmr+0xbc>)
 800f568:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f56a:	4b2b      	ldr	r3, [pc, #172]	; (800f618 <tcp_fasttmr+0xc0>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f570:	e048      	b.n	800f604 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	7f9a      	ldrb	r2, [r3, #30]
 800f576:	4b27      	ldr	r3, [pc, #156]	; (800f614 <tcp_fasttmr+0xbc>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d03f      	beq.n	800f5fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f57e:	4b25      	ldr	r3, [pc, #148]	; (800f614 <tcp_fasttmr+0xbc>)
 800f580:	781a      	ldrb	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	8b5b      	ldrh	r3, [r3, #26]
 800f58a:	f003 0301 	and.w	r3, r3, #1
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d010      	beq.n	800f5b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	8b5b      	ldrh	r3, [r3, #26]
 800f596:	f043 0302 	orr.w	r3, r3, #2
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f003 fff1 	bl	8013588 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	8b5b      	ldrh	r3, [r3, #26]
 800f5aa:	f023 0303 	bic.w	r3, r3, #3
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	8b5b      	ldrh	r3, [r3, #26]
 800f5b8:	f003 0308 	and.w	r3, r3, #8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d009      	beq.n	800f5d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	8b5b      	ldrh	r3, [r3, #26]
 800f5c4:	f023 0308 	bic.w	r3, r3, #8
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff f874 	bl	800e6bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f5e2:	4b0e      	ldr	r3, [pc, #56]	; (800f61c <tcp_fasttmr+0xc4>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f819 	bl	800f620 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f5ee:	4b0b      	ldr	r3, [pc, #44]	; (800f61c <tcp_fasttmr+0xc4>)
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d000      	beq.n	800f5f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f5f6:	e7b8      	b.n	800f56a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	607b      	str	r3, [r7, #4]
 800f5fc:	e002      	b.n	800f604 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d1b3      	bne.n	800f572 <tcp_fasttmr+0x1a>
    }
  }
}
 800f60a:	bf00      	nop
 800f60c:	bf00      	nop
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	20004dea 	.word	0x20004dea
 800f618:	2000bd2c 	.word	0x2000bd2c
 800f61c:	2000bd28 	.word	0x2000bd28

0800f620 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f620:	b590      	push	{r4, r7, lr}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <tcp_process_refused_data+0x22>
 800f62e:	4b37      	ldr	r3, [pc, #220]	; (800f70c <tcp_process_refused_data+0xec>)
 800f630:	f240 6209 	movw	r2, #1545	; 0x609
 800f634:	4936      	ldr	r1, [pc, #216]	; (800f710 <tcp_process_refused_data+0xf0>)
 800f636:	4837      	ldr	r0, [pc, #220]	; (800f714 <tcp_process_refused_data+0xf4>)
 800f638:	f008 f900 	bl	801783c <iprintf>
 800f63c:	f06f 030f 	mvn.w	r3, #15
 800f640:	e060      	b.n	800f704 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f646:	7b5b      	ldrb	r3, [r3, #13]
 800f648:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f64e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00b      	beq.n	800f678 <tcp_process_refused_data+0x58>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6918      	ldr	r0, [r3, #16]
 800f66a:	2300      	movs	r3, #0
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	6879      	ldr	r1, [r7, #4]
 800f670:	47a0      	blx	r4
 800f672:	4603      	mov	r3, r0
 800f674:	73fb      	strb	r3, [r7, #15]
 800f676:	e007      	b.n	800f688 <tcp_process_refused_data+0x68>
 800f678:	2300      	movs	r3, #0
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	2000      	movs	r0, #0
 800f680:	f000 f8a4 	bl	800f7cc <tcp_recv_null>
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d12a      	bne.n	800f6e6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f690:	7bbb      	ldrb	r3, [r7, #14]
 800f692:	f003 0320 	and.w	r3, r3, #32
 800f696:	2b00      	cmp	r3, #0
 800f698:	d033      	beq.n	800f702 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f69e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f6a2:	d005      	beq.n	800f6b0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00b      	beq.n	800f6d2 <tcp_process_refused_data+0xb2>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6918      	ldr	r0, [r3, #16]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	6879      	ldr	r1, [r7, #4]
 800f6ca:	47a0      	blx	r4
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]
 800f6d0:	e001      	b.n	800f6d6 <tcp_process_refused_data+0xb6>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6da:	f113 0f0d 	cmn.w	r3, #13
 800f6de:	d110      	bne.n	800f702 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f6e0:	f06f 030c 	mvn.w	r3, #12
 800f6e4:	e00e      	b.n	800f704 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ea:	f113 0f0d 	cmn.w	r3, #13
 800f6ee:	d102      	bne.n	800f6f6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f6f0:	f06f 030c 	mvn.w	r3, #12
 800f6f4:	e006      	b.n	800f704 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f6fc:	f06f 0304 	mvn.w	r3, #4
 800f700:	e000      	b.n	800f704 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd90      	pop	{r4, r7, pc}
 800f70c:	0801a44c 	.word	0x0801a44c
 800f710:	0801a95c 	.word	0x0801a95c
 800f714:	0801a490 	.word	0x0801a490

0800f718 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f720:	e007      	b.n	800f732 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f80a 	bl	800f742 <tcp_seg_free>
    seg = next;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1f4      	bne.n	800f722 <tcp_segs_free+0xa>
  }
}
 800f738:	bf00      	nop
 800f73a:	bf00      	nop
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00c      	beq.n	800f76a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d004      	beq.n	800f762 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fe fb6d 	bl	800de3c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	2003      	movs	r0, #3
 800f766:	f7fd fcc5 	bl	800d0f4 <memp_free>
  }
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
	...

0800f774 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <tcp_seg_copy+0x1c>
 800f782:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <tcp_seg_copy+0x4c>)
 800f784:	f240 6282 	movw	r2, #1666	; 0x682
 800f788:	490e      	ldr	r1, [pc, #56]	; (800f7c4 <tcp_seg_copy+0x50>)
 800f78a:	480f      	ldr	r0, [pc, #60]	; (800f7c8 <tcp_seg_copy+0x54>)
 800f78c:	f008 f856 	bl	801783c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f790:	2003      	movs	r0, #3
 800f792:	f7fd fc5d 	bl	800d050 <memp_malloc>
 800f796:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d101      	bne.n	800f7a2 <tcp_seg_copy+0x2e>
    return NULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e00a      	b.n	800f7b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f7a2:	2210      	movs	r2, #16
 800f7a4:	6879      	ldr	r1, [r7, #4]
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f008 f818 	bl	80177dc <memcpy>
  pbuf_ref(cseg->p);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fe fbe9 	bl	800df88 <pbuf_ref>
  return cseg;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	0801a44c 	.word	0x0801a44c
 800f7c4:	0801a9a0 	.word	0x0801a9a0
 800f7c8:	0801a490 	.word	0x0801a490

0800f7cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
 800f7d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d109      	bne.n	800f7f4 <tcp_recv_null+0x28>
 800f7e0:	4b12      	ldr	r3, [pc, #72]	; (800f82c <tcp_recv_null+0x60>)
 800f7e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f7e6:	4912      	ldr	r1, [pc, #72]	; (800f830 <tcp_recv_null+0x64>)
 800f7e8:	4812      	ldr	r0, [pc, #72]	; (800f834 <tcp_recv_null+0x68>)
 800f7ea:	f008 f827 	bl	801783c <iprintf>
 800f7ee:	f06f 030f 	mvn.w	r3, #15
 800f7f2:	e016      	b.n	800f822 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d009      	beq.n	800f80e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	891b      	ldrh	r3, [r3, #8]
 800f7fe:	4619      	mov	r1, r3
 800f800:	68b8      	ldr	r0, [r7, #8]
 800f802:	f7ff fad3 	bl	800edac <tcp_recved>
    pbuf_free(p);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7fe fb18 	bl	800de3c <pbuf_free>
 800f80c:	e008      	b.n	800f820 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f80e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d104      	bne.n	800f820 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f816:	68b8      	ldr	r0, [r7, #8]
 800f818:	f7fe ffba 	bl	800e790 <tcp_close>
 800f81c:	4603      	mov	r3, r0
 800f81e:	e000      	b.n	800f822 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	0801a44c 	.word	0x0801a44c
 800f830:	0801a9bc 	.word	0x0801a9bc
 800f834:	0801a490 	.word	0x0801a490

0800f838 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b086      	sub	sp, #24
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f846:	2b00      	cmp	r3, #0
 800f848:	db01      	blt.n	800f84e <tcp_kill_prio+0x16>
 800f84a:	79fb      	ldrb	r3, [r7, #7]
 800f84c:	e000      	b.n	800f850 <tcp_kill_prio+0x18>
 800f84e:	237f      	movs	r3, #127	; 0x7f
 800f850:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f852:	7afb      	ldrb	r3, [r7, #11]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d034      	beq.n	800f8c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f858:	7afb      	ldrb	r3, [r7, #11]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f866:	4b19      	ldr	r3, [pc, #100]	; (800f8cc <tcp_kill_prio+0x94>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	617b      	str	r3, [r7, #20]
 800f86c:	e01f      	b.n	800f8ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	7d5b      	ldrb	r3, [r3, #21]
 800f872:	7afa      	ldrb	r2, [r7, #11]
 800f874:	429a      	cmp	r2, r3
 800f876:	d80c      	bhi.n	800f892 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f87c:	7afa      	ldrb	r2, [r7, #11]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d112      	bne.n	800f8a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f882:	4b13      	ldr	r3, [pc, #76]	; (800f8d0 <tcp_kill_prio+0x98>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d80a      	bhi.n	800f8a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f892:	4b0f      	ldr	r3, [pc, #60]	; (800f8d0 <tcp_kill_prio+0x98>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	7d5b      	ldrb	r3, [r3, #21]
 800f8a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	617b      	str	r3, [r7, #20]
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1dc      	bne.n	800f86e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d004      	beq.n	800f8c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f8ba:	6938      	ldr	r0, [r7, #16]
 800f8bc:	f7ff f8ae 	bl	800ea1c <tcp_abort>
 800f8c0:	e000      	b.n	800f8c4 <tcp_kill_prio+0x8c>
    return;
 800f8c2:	bf00      	nop
  }
}
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	2000bd2c 	.word	0x2000bd2c
 800f8d0:	2000bd30 	.word	0x2000bd30

0800f8d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	4603      	mov	r3, r0
 800f8dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f8de:	79fb      	ldrb	r3, [r7, #7]
 800f8e0:	2b08      	cmp	r3, #8
 800f8e2:	d009      	beq.n	800f8f8 <tcp_kill_state+0x24>
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	2b09      	cmp	r3, #9
 800f8e8:	d006      	beq.n	800f8f8 <tcp_kill_state+0x24>
 800f8ea:	4b1a      	ldr	r3, [pc, #104]	; (800f954 <tcp_kill_state+0x80>)
 800f8ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f8f0:	4919      	ldr	r1, [pc, #100]	; (800f958 <tcp_kill_state+0x84>)
 800f8f2:	481a      	ldr	r0, [pc, #104]	; (800f95c <tcp_kill_state+0x88>)
 800f8f4:	f007 ffa2 	bl	801783c <iprintf>

  inactivity = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f900:	4b17      	ldr	r3, [pc, #92]	; (800f960 <tcp_kill_state+0x8c>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	617b      	str	r3, [r7, #20]
 800f906:	e017      	b.n	800f938 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	7d1b      	ldrb	r3, [r3, #20]
 800f90c:	79fa      	ldrb	r2, [r7, #7]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d10f      	bne.n	800f932 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f912:	4b14      	ldr	r3, [pc, #80]	; (800f964 <tcp_kill_state+0x90>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	1ad3      	subs	r3, r2, r3
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d807      	bhi.n	800f932 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f922:	4b10      	ldr	r3, [pc, #64]	; (800f964 <tcp_kill_state+0x90>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	6a1b      	ldr	r3, [r3, #32]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1e4      	bne.n	800f908 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d003      	beq.n	800f94c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f944:	2100      	movs	r1, #0
 800f946:	6938      	ldr	r0, [r7, #16]
 800f948:	f7fe ffaa 	bl	800e8a0 <tcp_abandon>
  }
}
 800f94c:	bf00      	nop
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0801a44c 	.word	0x0801a44c
 800f958:	0801a9d8 	.word	0x0801a9d8
 800f95c:	0801a490 	.word	0x0801a490
 800f960:	2000bd2c 	.word	0x2000bd2c
 800f964:	2000bd30 	.word	0x2000bd30

0800f968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f972:	2300      	movs	r3, #0
 800f974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f976:	4b12      	ldr	r3, [pc, #72]	; (800f9c0 <tcp_kill_timewait+0x58>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	60fb      	str	r3, [r7, #12]
 800f97c:	e012      	b.n	800f9a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f97e:	4b11      	ldr	r3, [pc, #68]	; (800f9c4 <tcp_kill_timewait+0x5c>)
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d807      	bhi.n	800f99e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <tcp_kill_timewait+0x5c>)
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6a1b      	ldr	r3, [r3, #32]
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1e9      	bne.n	800f97e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d002      	beq.n	800f9b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f9b0:	68b8      	ldr	r0, [r7, #8]
 800f9b2:	f7ff f833 	bl	800ea1c <tcp_abort>
  }
}
 800f9b6:	bf00      	nop
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	2000bd3c 	.word	0x2000bd3c
 800f9c4:	2000bd30 	.word	0x2000bd30

0800f9c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f9ce:	4b10      	ldr	r3, [pc, #64]	; (800fa10 <tcp_handle_closepend+0x48>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f9d4:	e014      	b.n	800fa00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	8b5b      	ldrh	r3, [r3, #26]
 800f9e0:	f003 0308 	and.w	r3, r3, #8
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d009      	beq.n	800f9fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	8b5b      	ldrh	r3, [r3, #26]
 800f9ec:	f023 0308 	bic.w	r3, r3, #8
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7fe fe60 	bl	800e6bc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1e7      	bne.n	800f9d6 <tcp_handle_closepend+0xe>
  }
}
 800fa06:	bf00      	nop
 800fa08:	bf00      	nop
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	2000bd2c 	.word	0x2000bd2c

0800fa14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa1e:	2001      	movs	r0, #1
 800fa20:	f7fd fb16 	bl	800d050 <memp_malloc>
 800fa24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d126      	bne.n	800fa7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fa2c:	f7ff ffcc 	bl	800f9c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fa30:	f7ff ff9a 	bl	800f968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa34:	2001      	movs	r0, #1
 800fa36:	f7fd fb0b 	bl	800d050 <memp_malloc>
 800fa3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d11b      	bne.n	800fa7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fa42:	2009      	movs	r0, #9
 800fa44:	f7ff ff46 	bl	800f8d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa48:	2001      	movs	r0, #1
 800fa4a:	f7fd fb01 	bl	800d050 <memp_malloc>
 800fa4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d111      	bne.n	800fa7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fa56:	2008      	movs	r0, #8
 800fa58:	f7ff ff3c 	bl	800f8d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa5c:	2001      	movs	r0, #1
 800fa5e:	f7fd faf7 	bl	800d050 <memp_malloc>
 800fa62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d107      	bne.n	800fa7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa6a:	79fb      	ldrb	r3, [r7, #7]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7ff fee3 	bl	800f838 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa72:	2001      	movs	r0, #1
 800fa74:	f7fd faec 	bl	800d050 <memp_malloc>
 800fa78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d03f      	beq.n	800fb00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa80:	229c      	movs	r2, #156	; 0x9c
 800fa82:	2100      	movs	r1, #0
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f007 fed1 	bl	801782c <memset>
    pcb->prio = prio;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	79fa      	ldrb	r2, [r7, #7]
 800fa8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800faa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	22ff      	movs	r2, #255	; 0xff
 800faae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fab6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2206      	movs	r2, #6
 800fabc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2206      	movs	r2, #6
 800fac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800facc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fad6:	4b0d      	ldr	r3, [pc, #52]	; (800fb0c <tcp_alloc+0xf8>)
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fade:	4b0c      	ldr	r3, [pc, #48]	; (800fb10 <tcp_alloc+0xfc>)
 800fae0:	781a      	ldrb	r2, [r3, #0]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800faec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	4a08      	ldr	r2, [pc, #32]	; (800fb14 <tcp_alloc+0x100>)
 800faf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	4a07      	ldr	r2, [pc, #28]	; (800fb18 <tcp_alloc+0x104>)
 800fafc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fb00:	68fb      	ldr	r3, [r7, #12]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	2000bd30 	.word	0x2000bd30
 800fb10:	20004dea 	.word	0x20004dea
 800fb14:	0800f7cd 	.word	0x0800f7cd
 800fb18:	006ddd00 	.word	0x006ddd00

0800fb1c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	4603      	mov	r3, r0
 800fb24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fb26:	2040      	movs	r0, #64	; 0x40
 800fb28:	f7ff ff74 	bl	800fa14 <tcp_alloc>
 800fb2c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	683a      	ldr	r2, [r7, #0]
 800fb4c:	611a      	str	r2, [r3, #16]
  }
}
 800fb4e:	bf00      	nop
 800fb50:	370c      	adds	r7, #12
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
	...

0800fb5c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00e      	beq.n	800fb8a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d106      	bne.n	800fb82 <tcp_recv+0x26>
 800fb74:	4b07      	ldr	r3, [pc, #28]	; (800fb94 <tcp_recv+0x38>)
 800fb76:	f240 72df 	movw	r2, #2015	; 0x7df
 800fb7a:	4907      	ldr	r1, [pc, #28]	; (800fb98 <tcp_recv+0x3c>)
 800fb7c:	4807      	ldr	r0, [pc, #28]	; (800fb9c <tcp_recv+0x40>)
 800fb7e:	f007 fe5d 	bl	801783c <iprintf>
    pcb->recv = recv;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	683a      	ldr	r2, [r7, #0]
 800fb86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fb8a:	bf00      	nop
 800fb8c:	3708      	adds	r7, #8
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	0801a44c 	.word	0x0801a44c
 800fb98:	0801a9e8 	.word	0x0801a9e8
 800fb9c:	0801a490 	.word	0x0801a490

0800fba0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00e      	beq.n	800fbce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	7d1b      	ldrb	r3, [r3, #20]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d106      	bne.n	800fbc6 <tcp_sent+0x26>
 800fbb8:	4b07      	ldr	r3, [pc, #28]	; (800fbd8 <tcp_sent+0x38>)
 800fbba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fbbe:	4907      	ldr	r1, [pc, #28]	; (800fbdc <tcp_sent+0x3c>)
 800fbc0:	4807      	ldr	r0, [pc, #28]	; (800fbe0 <tcp_sent+0x40>)
 800fbc2:	f007 fe3b 	bl	801783c <iprintf>
    pcb->sent = sent;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fbce:	bf00      	nop
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	0801a44c 	.word	0x0801a44c
 800fbdc:	0801aa10 	.word	0x0801aa10
 800fbe0:	0801a490 	.word	0x0801a490

0800fbe4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00e      	beq.n	800fc12 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	7d1b      	ldrb	r3, [r3, #20]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d106      	bne.n	800fc0a <tcp_err+0x26>
 800fbfc:	4b07      	ldr	r3, [pc, #28]	; (800fc1c <tcp_err+0x38>)
 800fbfe:	f640 020d 	movw	r2, #2061	; 0x80d
 800fc02:	4907      	ldr	r1, [pc, #28]	; (800fc20 <tcp_err+0x3c>)
 800fc04:	4807      	ldr	r0, [pc, #28]	; (800fc24 <tcp_err+0x40>)
 800fc06:	f007 fe19 	bl	801783c <iprintf>
    pcb->errf = err;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fc12:	bf00      	nop
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	0801a44c 	.word	0x0801a44c
 800fc20:	0801aa38 	.word	0x0801aa38
 800fc24:	0801a490 	.word	0x0801a490

0800fc28 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d008      	beq.n	800fc4a <tcp_accept+0x22>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	7d1b      	ldrb	r3, [r3, #20]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d104      	bne.n	800fc4a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	683a      	ldr	r2, [r7, #0]
 800fc48:	619a      	str	r2, [r3, #24]
  }
}
 800fc4a:	bf00      	nop
 800fc4c:	3714      	adds	r7, #20
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
	...

0800fc58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	4613      	mov	r3, r2
 800fc64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d107      	bne.n	800fc7c <tcp_poll+0x24>
 800fc6c:	4b0e      	ldr	r3, [pc, #56]	; (800fca8 <tcp_poll+0x50>)
 800fc6e:	f640 023d 	movw	r2, #2109	; 0x83d
 800fc72:	490e      	ldr	r1, [pc, #56]	; (800fcac <tcp_poll+0x54>)
 800fc74:	480e      	ldr	r0, [pc, #56]	; (800fcb0 <tcp_poll+0x58>)
 800fc76:	f007 fde1 	bl	801783c <iprintf>
 800fc7a:	e011      	b.n	800fca0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	7d1b      	ldrb	r3, [r3, #20]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d106      	bne.n	800fc92 <tcp_poll+0x3a>
 800fc84:	4b08      	ldr	r3, [pc, #32]	; (800fca8 <tcp_poll+0x50>)
 800fc86:	f640 023e 	movw	r2, #2110	; 0x83e
 800fc8a:	490a      	ldr	r1, [pc, #40]	; (800fcb4 <tcp_poll+0x5c>)
 800fc8c:	4808      	ldr	r0, [pc, #32]	; (800fcb0 <tcp_poll+0x58>)
 800fc8e:	f007 fdd5 	bl	801783c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	79fa      	ldrb	r2, [r7, #7]
 800fc9e:	775a      	strb	r2, [r3, #29]
}
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	0801a44c 	.word	0x0801a44c
 800fcac:	0801aa60 	.word	0x0801aa60
 800fcb0:	0801a490 	.word	0x0801a490
 800fcb4:	0801aa78 	.word	0x0801aa78

0800fcb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d107      	bne.n	800fcd6 <tcp_pcb_purge+0x1e>
 800fcc6:	4b21      	ldr	r3, [pc, #132]	; (800fd4c <tcp_pcb_purge+0x94>)
 800fcc8:	f640 0251 	movw	r2, #2129	; 0x851
 800fccc:	4920      	ldr	r1, [pc, #128]	; (800fd50 <tcp_pcb_purge+0x98>)
 800fcce:	4821      	ldr	r0, [pc, #132]	; (800fd54 <tcp_pcb_purge+0x9c>)
 800fcd0:	f007 fdb4 	bl	801783c <iprintf>
 800fcd4:	e037      	b.n	800fd46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	7d1b      	ldrb	r3, [r3, #20]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d033      	beq.n	800fd46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fce2:	2b0a      	cmp	r3, #10
 800fce4:	d02f      	beq.n	800fd46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d02b      	beq.n	800fd46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d007      	beq.n	800fd06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe f89e 	bl	800de3c <pbuf_free>
      pcb->refused_data = NULL;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d002      	beq.n	800fd14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 f986 	bl	8010020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff fcf9 	bl	800f718 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7ff fcf4 	bl	800f718 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	0801a44c 	.word	0x0801a44c
 800fd50:	0801aa98 	.word	0x0801aa98
 800fd54:	0801a490 	.word	0x0801a490

0800fd58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d106      	bne.n	800fd76 <tcp_pcb_remove+0x1e>
 800fd68:	4b3e      	ldr	r3, [pc, #248]	; (800fe64 <tcp_pcb_remove+0x10c>)
 800fd6a:	f640 0283 	movw	r2, #2179	; 0x883
 800fd6e:	493e      	ldr	r1, [pc, #248]	; (800fe68 <tcp_pcb_remove+0x110>)
 800fd70:	483e      	ldr	r0, [pc, #248]	; (800fe6c <tcp_pcb_remove+0x114>)
 800fd72:	f007 fd63 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d106      	bne.n	800fd8a <tcp_pcb_remove+0x32>
 800fd7c:	4b39      	ldr	r3, [pc, #228]	; (800fe64 <tcp_pcb_remove+0x10c>)
 800fd7e:	f640 0284 	movw	r2, #2180	; 0x884
 800fd82:	493b      	ldr	r1, [pc, #236]	; (800fe70 <tcp_pcb_remove+0x118>)
 800fd84:	4839      	ldr	r0, [pc, #228]	; (800fe6c <tcp_pcb_remove+0x114>)
 800fd86:	f007 fd59 	bl	801783c <iprintf>

  TCP_RMV(pcblist, pcb);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	683a      	ldr	r2, [r7, #0]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d105      	bne.n	800fda0 <tcp_pcb_remove+0x48>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68da      	ldr	r2, [r3, #12]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	601a      	str	r2, [r3, #0]
 800fd9e:	e013      	b.n	800fdc8 <tcp_pcb_remove+0x70>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	60fb      	str	r3, [r7, #12]
 800fda6:	e00c      	b.n	800fdc2 <tcp_pcb_remove+0x6a>
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	683a      	ldr	r2, [r7, #0]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d104      	bne.n	800fdbc <tcp_pcb_remove+0x64>
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	68da      	ldr	r2, [r3, #12]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	e005      	b.n	800fdc8 <tcp_pcb_remove+0x70>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1ef      	bne.n	800fda8 <tcp_pcb_remove+0x50>
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fdce:	6838      	ldr	r0, [r7, #0]
 800fdd0:	f7ff ff72 	bl	800fcb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	7d1b      	ldrb	r3, [r3, #20]
 800fdd8:	2b0a      	cmp	r3, #10
 800fdda:	d013      	beq.n	800fe04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d00f      	beq.n	800fe04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	8b5b      	ldrh	r3, [r3, #26]
 800fde8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d009      	beq.n	800fe04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	8b5b      	ldrh	r3, [r3, #26]
 800fdf4:	f043 0302 	orr.w	r3, r3, #2
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdfe:	6838      	ldr	r0, [r7, #0]
 800fe00:	f003 fbc2 	bl	8013588 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	7d1b      	ldrb	r3, [r3, #20]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d020      	beq.n	800fe4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d006      	beq.n	800fe22 <tcp_pcb_remove+0xca>
 800fe14:	4b13      	ldr	r3, [pc, #76]	; (800fe64 <tcp_pcb_remove+0x10c>)
 800fe16:	f640 0293 	movw	r2, #2195	; 0x893
 800fe1a:	4916      	ldr	r1, [pc, #88]	; (800fe74 <tcp_pcb_remove+0x11c>)
 800fe1c:	4813      	ldr	r0, [pc, #76]	; (800fe6c <tcp_pcb_remove+0x114>)
 800fe1e:	f007 fd0d 	bl	801783c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d006      	beq.n	800fe38 <tcp_pcb_remove+0xe0>
 800fe2a:	4b0e      	ldr	r3, [pc, #56]	; (800fe64 <tcp_pcb_remove+0x10c>)
 800fe2c:	f640 0294 	movw	r2, #2196	; 0x894
 800fe30:	4911      	ldr	r1, [pc, #68]	; (800fe78 <tcp_pcb_remove+0x120>)
 800fe32:	480e      	ldr	r0, [pc, #56]	; (800fe6c <tcp_pcb_remove+0x114>)
 800fe34:	f007 fd02 	bl	801783c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d006      	beq.n	800fe4e <tcp_pcb_remove+0xf6>
 800fe40:	4b08      	ldr	r3, [pc, #32]	; (800fe64 <tcp_pcb_remove+0x10c>)
 800fe42:	f640 0296 	movw	r2, #2198	; 0x896
 800fe46:	490d      	ldr	r1, [pc, #52]	; (800fe7c <tcp_pcb_remove+0x124>)
 800fe48:	4808      	ldr	r0, [pc, #32]	; (800fe6c <tcp_pcb_remove+0x114>)
 800fe4a:	f007 fcf7 	bl	801783c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2200      	movs	r2, #0
 800fe52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	2200      	movs	r2, #0
 800fe58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fe5a:	bf00      	nop
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	0801a44c 	.word	0x0801a44c
 800fe68:	0801aab4 	.word	0x0801aab4
 800fe6c:	0801a490 	.word	0x0801a490
 800fe70:	0801aad0 	.word	0x0801aad0
 800fe74:	0801aaf0 	.word	0x0801aaf0
 800fe78:	0801ab08 	.word	0x0801ab08
 800fe7c:	0801ab24 	.word	0x0801ab24

0800fe80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d106      	bne.n	800fe9c <tcp_next_iss+0x1c>
 800fe8e:	4b0a      	ldr	r3, [pc, #40]	; (800feb8 <tcp_next_iss+0x38>)
 800fe90:	f640 02af 	movw	r2, #2223	; 0x8af
 800fe94:	4909      	ldr	r1, [pc, #36]	; (800febc <tcp_next_iss+0x3c>)
 800fe96:	480a      	ldr	r0, [pc, #40]	; (800fec0 <tcp_next_iss+0x40>)
 800fe98:	f007 fcd0 	bl	801783c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe9c:	4b09      	ldr	r3, [pc, #36]	; (800fec4 <tcp_next_iss+0x44>)
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	4b09      	ldr	r3, [pc, #36]	; (800fec8 <tcp_next_iss+0x48>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4413      	add	r3, r2
 800fea6:	4a07      	ldr	r2, [pc, #28]	; (800fec4 <tcp_next_iss+0x44>)
 800fea8:	6013      	str	r3, [r2, #0]
  return iss;
 800feaa:	4b06      	ldr	r3, [pc, #24]	; (800fec4 <tcp_next_iss+0x44>)
 800feac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	0801a44c 	.word	0x0801a44c
 800febc:	0801ab3c 	.word	0x0801ab3c
 800fec0:	0801a490 	.word	0x0801a490
 800fec4:	20000014 	.word	0x20000014
 800fec8:	2000bd30 	.word	0x2000bd30

0800fecc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	4603      	mov	r3, r0
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
 800fed8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d106      	bne.n	800feee <tcp_eff_send_mss_netif+0x22>
 800fee0:	4b14      	ldr	r3, [pc, #80]	; (800ff34 <tcp_eff_send_mss_netif+0x68>)
 800fee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fee6:	4914      	ldr	r1, [pc, #80]	; (800ff38 <tcp_eff_send_mss_netif+0x6c>)
 800fee8:	4814      	ldr	r0, [pc, #80]	; (800ff3c <tcp_eff_send_mss_netif+0x70>)
 800feea:	f007 fca7 	bl	801783c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d101      	bne.n	800fef8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fef4:	89fb      	ldrh	r3, [r7, #14]
 800fef6:	e019      	b.n	800ff2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fefc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fefe:	8afb      	ldrh	r3, [r7, #22]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d012      	beq.n	800ff2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ff04:	2328      	movs	r3, #40	; 0x28
 800ff06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ff08:	8afa      	ldrh	r2, [r7, #22]
 800ff0a:	8abb      	ldrh	r3, [r7, #20]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d904      	bls.n	800ff1a <tcp_eff_send_mss_netif+0x4e>
 800ff10:	8afa      	ldrh	r2, [r7, #22]
 800ff12:	8abb      	ldrh	r3, [r7, #20]
 800ff14:	1ad3      	subs	r3, r2, r3
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	e000      	b.n	800ff1c <tcp_eff_send_mss_netif+0x50>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ff1e:	8a7a      	ldrh	r2, [r7, #18]
 800ff20:	89fb      	ldrh	r3, [r7, #14]
 800ff22:	4293      	cmp	r3, r2
 800ff24:	bf28      	it	cs
 800ff26:	4613      	movcs	r3, r2
 800ff28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ff2a:	89fb      	ldrh	r3, [r7, #14]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3718      	adds	r7, #24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	0801a44c 	.word	0x0801a44c
 800ff38:	0801ab58 	.word	0x0801ab58
 800ff3c:	0801a490 	.word	0x0801a490

0800ff40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d119      	bne.n	800ff88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ff54:	4b10      	ldr	r3, [pc, #64]	; (800ff98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ff56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ff5a:	4910      	ldr	r1, [pc, #64]	; (800ff9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ff5c:	4810      	ldr	r0, [pc, #64]	; (800ffa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ff5e:	f007 fc6d 	bl	801783c <iprintf>

  while (pcb != NULL) {
 800ff62:	e011      	b.n	800ff88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d108      	bne.n	800ff82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ff76:	68f8      	ldr	r0, [r7, #12]
 800ff78:	f7fe fd50 	bl	800ea1c <tcp_abort>
      pcb = next;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	60fb      	str	r3, [r7, #12]
 800ff80:	e002      	b.n	800ff88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1ea      	bne.n	800ff64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ff8e:	bf00      	nop
 800ff90:	bf00      	nop
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	0801a44c 	.word	0x0801a44c
 800ff9c:	0801ab80 	.word	0x0801ab80
 800ffa0:	0801a490 	.word	0x0801a490

0800ffa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d02a      	beq.n	801000a <tcp_netif_ip_addr_changed+0x66>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d026      	beq.n	801000a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ffbc:	4b15      	ldr	r3, [pc, #84]	; (8010014 <tcp_netif_ip_addr_changed+0x70>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7ff ffbc 	bl	800ff40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ffc8:	4b13      	ldr	r3, [pc, #76]	; (8010018 <tcp_netif_ip_addr_changed+0x74>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7ff ffb6 	bl	800ff40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d017      	beq.n	801000a <tcp_netif_ip_addr_changed+0x66>
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d013      	beq.n	801000a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffe2:	4b0e      	ldr	r3, [pc, #56]	; (801001c <tcp_netif_ip_addr_changed+0x78>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	60fb      	str	r3, [r7, #12]
 800ffe8:	e00c      	b.n	8010004 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d103      	bne.n	800fffe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	60fb      	str	r3, [r7, #12]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1ef      	bne.n	800ffea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801000a:	bf00      	nop
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	2000bd2c 	.word	0x2000bd2c
 8010018:	2000bd38 	.word	0x2000bd38
 801001c:	2000bd34 	.word	0x2000bd34

08010020 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801002c:	2b00      	cmp	r3, #0
 801002e:	d007      	beq.n	8010040 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010034:	4618      	mov	r0, r3
 8010036:	f7ff fb6f 	bl	800f718 <tcp_segs_free>
    pcb->ooseq = NULL;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010048:	b590      	push	{r4, r7, lr}
 801004a:	b08d      	sub	sp, #52	; 0x34
 801004c:	af04      	add	r7, sp, #16
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d105      	bne.n	8010064 <tcp_input+0x1c>
 8010058:	4b9b      	ldr	r3, [pc, #620]	; (80102c8 <tcp_input+0x280>)
 801005a:	2283      	movs	r2, #131	; 0x83
 801005c:	499b      	ldr	r1, [pc, #620]	; (80102cc <tcp_input+0x284>)
 801005e:	489c      	ldr	r0, [pc, #624]	; (80102d0 <tcp_input+0x288>)
 8010060:	f007 fbec 	bl	801783c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	4a9a      	ldr	r2, [pc, #616]	; (80102d4 <tcp_input+0x28c>)
 801006a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	895b      	ldrh	r3, [r3, #10]
 8010070:	2b13      	cmp	r3, #19
 8010072:	f240 83c4 	bls.w	80107fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010076:	4b98      	ldr	r3, [pc, #608]	; (80102d8 <tcp_input+0x290>)
 8010078:	695b      	ldr	r3, [r3, #20]
 801007a:	4a97      	ldr	r2, [pc, #604]	; (80102d8 <tcp_input+0x290>)
 801007c:	6812      	ldr	r2, [r2, #0]
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f006 f9e1 	bl	8016448 <ip4_addr_isbroadcast_u32>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	f040 83ba 	bne.w	8010802 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801008e:	4b92      	ldr	r3, [pc, #584]	; (80102d8 <tcp_input+0x290>)
 8010090:	695b      	ldr	r3, [r3, #20]
 8010092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010096:	2be0      	cmp	r3, #224	; 0xe0
 8010098:	f000 83b3 	beq.w	8010802 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801009c:	4b8d      	ldr	r3, [pc, #564]	; (80102d4 <tcp_input+0x28c>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	899b      	ldrh	r3, [r3, #12]
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fc fb1d 	bl	800c6e4 <lwip_htons>
 80100aa:	4603      	mov	r3, r0
 80100ac:	0b1b      	lsrs	r3, r3, #12
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80100b6:	7cbb      	ldrb	r3, [r7, #18]
 80100b8:	2b13      	cmp	r3, #19
 80100ba:	f240 83a4 	bls.w	8010806 <tcp_input+0x7be>
 80100be:	7cbb      	ldrb	r3, [r7, #18]
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	891b      	ldrh	r3, [r3, #8]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	f200 839d 	bhi.w	8010806 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80100cc:	7cbb      	ldrb	r3, [r7, #18]
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	3b14      	subs	r3, #20
 80100d2:	b29a      	uxth	r2, r3
 80100d4:	4b81      	ldr	r3, [pc, #516]	; (80102dc <tcp_input+0x294>)
 80100d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80100d8:	4b81      	ldr	r3, [pc, #516]	; (80102e0 <tcp_input+0x298>)
 80100da:	2200      	movs	r2, #0
 80100dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	895a      	ldrh	r2, [r3, #10]
 80100e2:	7cbb      	ldrb	r3, [r7, #18]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d309      	bcc.n	80100fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80100ea:	4b7c      	ldr	r3, [pc, #496]	; (80102dc <tcp_input+0x294>)
 80100ec:	881a      	ldrh	r2, [r3, #0]
 80100ee:	4b7d      	ldr	r3, [pc, #500]	; (80102e4 <tcp_input+0x29c>)
 80100f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80100f2:	7cbb      	ldrb	r3, [r7, #18]
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7fd fe1a 	bl	800dd30 <pbuf_remove_header>
 80100fc:	e04e      	b.n	801019c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d105      	bne.n	8010112 <tcp_input+0xca>
 8010106:	4b70      	ldr	r3, [pc, #448]	; (80102c8 <tcp_input+0x280>)
 8010108:	22c2      	movs	r2, #194	; 0xc2
 801010a:	4977      	ldr	r1, [pc, #476]	; (80102e8 <tcp_input+0x2a0>)
 801010c:	4870      	ldr	r0, [pc, #448]	; (80102d0 <tcp_input+0x288>)
 801010e:	f007 fb95 	bl	801783c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010112:	2114      	movs	r1, #20
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f7fd fe0b 	bl	800dd30 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	895a      	ldrh	r2, [r3, #10]
 801011e:	4b71      	ldr	r3, [pc, #452]	; (80102e4 <tcp_input+0x29c>)
 8010120:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010122:	4b6e      	ldr	r3, [pc, #440]	; (80102dc <tcp_input+0x294>)
 8010124:	881a      	ldrh	r2, [r3, #0]
 8010126:	4b6f      	ldr	r3, [pc, #444]	; (80102e4 <tcp_input+0x29c>)
 8010128:	881b      	ldrh	r3, [r3, #0]
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801012e:	4b6d      	ldr	r3, [pc, #436]	; (80102e4 <tcp_input+0x29c>)
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	4619      	mov	r1, r3
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fd fdfb 	bl	800dd30 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	895b      	ldrh	r3, [r3, #10]
 8010140:	8a3a      	ldrh	r2, [r7, #16]
 8010142:	429a      	cmp	r2, r3
 8010144:	f200 8361 	bhi.w	801080a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	4a64      	ldr	r2, [pc, #400]	; (80102e0 <tcp_input+0x298>)
 8010150:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	8a3a      	ldrh	r2, [r7, #16]
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f7fd fde8 	bl	800dd30 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	891a      	ldrh	r2, [r3, #8]
 8010164:	8a3b      	ldrh	r3, [r7, #16]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	b29a      	uxth	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	895b      	ldrh	r3, [r3, #10]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d005      	beq.n	8010182 <tcp_input+0x13a>
 8010176:	4b54      	ldr	r3, [pc, #336]	; (80102c8 <tcp_input+0x280>)
 8010178:	22df      	movs	r2, #223	; 0xdf
 801017a:	495c      	ldr	r1, [pc, #368]	; (80102ec <tcp_input+0x2a4>)
 801017c:	4854      	ldr	r0, [pc, #336]	; (80102d0 <tcp_input+0x288>)
 801017e:	f007 fb5d 	bl	801783c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	891a      	ldrh	r2, [r3, #8]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	891b      	ldrh	r3, [r3, #8]
 801018c:	429a      	cmp	r2, r3
 801018e:	d005      	beq.n	801019c <tcp_input+0x154>
 8010190:	4b4d      	ldr	r3, [pc, #308]	; (80102c8 <tcp_input+0x280>)
 8010192:	22e0      	movs	r2, #224	; 0xe0
 8010194:	4956      	ldr	r1, [pc, #344]	; (80102f0 <tcp_input+0x2a8>)
 8010196:	484e      	ldr	r0, [pc, #312]	; (80102d0 <tcp_input+0x288>)
 8010198:	f007 fb50 	bl	801783c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801019c:	4b4d      	ldr	r3, [pc, #308]	; (80102d4 <tcp_input+0x28c>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	4a4b      	ldr	r2, [pc, #300]	; (80102d4 <tcp_input+0x28c>)
 80101a6:	6814      	ldr	r4, [r2, #0]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fc fa9b 	bl	800c6e4 <lwip_htons>
 80101ae:	4603      	mov	r3, r0
 80101b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80101b2:	4b48      	ldr	r3, [pc, #288]	; (80102d4 <tcp_input+0x28c>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	885b      	ldrh	r3, [r3, #2]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	4a46      	ldr	r2, [pc, #280]	; (80102d4 <tcp_input+0x28c>)
 80101bc:	6814      	ldr	r4, [r2, #0]
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fc fa90 	bl	800c6e4 <lwip_htons>
 80101c4:	4603      	mov	r3, r0
 80101c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80101c8:	4b42      	ldr	r3, [pc, #264]	; (80102d4 <tcp_input+0x28c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	4a41      	ldr	r2, [pc, #260]	; (80102d4 <tcp_input+0x28c>)
 80101d0:	6814      	ldr	r4, [r2, #0]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fc fa9b 	bl	800c70e <lwip_htonl>
 80101d8:	4603      	mov	r3, r0
 80101da:	6063      	str	r3, [r4, #4]
 80101dc:	6863      	ldr	r3, [r4, #4]
 80101de:	4a45      	ldr	r2, [pc, #276]	; (80102f4 <tcp_input+0x2ac>)
 80101e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80101e2:	4b3c      	ldr	r3, [pc, #240]	; (80102d4 <tcp_input+0x28c>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	4a3a      	ldr	r2, [pc, #232]	; (80102d4 <tcp_input+0x28c>)
 80101ea:	6814      	ldr	r4, [r2, #0]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fc fa8e 	bl	800c70e <lwip_htonl>
 80101f2:	4603      	mov	r3, r0
 80101f4:	60a3      	str	r3, [r4, #8]
 80101f6:	68a3      	ldr	r3, [r4, #8]
 80101f8:	4a3f      	ldr	r2, [pc, #252]	; (80102f8 <tcp_input+0x2b0>)
 80101fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80101fc:	4b35      	ldr	r3, [pc, #212]	; (80102d4 <tcp_input+0x28c>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	89db      	ldrh	r3, [r3, #14]
 8010202:	b29b      	uxth	r3, r3
 8010204:	4a33      	ldr	r2, [pc, #204]	; (80102d4 <tcp_input+0x28c>)
 8010206:	6814      	ldr	r4, [r2, #0]
 8010208:	4618      	mov	r0, r3
 801020a:	f7fc fa6b 	bl	800c6e4 <lwip_htons>
 801020e:	4603      	mov	r3, r0
 8010210:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010212:	4b30      	ldr	r3, [pc, #192]	; (80102d4 <tcp_input+0x28c>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	899b      	ldrh	r3, [r3, #12]
 8010218:	b29b      	uxth	r3, r3
 801021a:	4618      	mov	r0, r3
 801021c:	f7fc fa62 	bl	800c6e4 <lwip_htons>
 8010220:	4603      	mov	r3, r0
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010228:	b2da      	uxtb	r2, r3
 801022a:	4b34      	ldr	r3, [pc, #208]	; (80102fc <tcp_input+0x2b4>)
 801022c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	891a      	ldrh	r2, [r3, #8]
 8010232:	4b33      	ldr	r3, [pc, #204]	; (8010300 <tcp_input+0x2b8>)
 8010234:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010236:	4b31      	ldr	r3, [pc, #196]	; (80102fc <tcp_input+0x2b4>)
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	f003 0303 	and.w	r3, r3, #3
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00c      	beq.n	801025c <tcp_input+0x214>
    tcplen++;
 8010242:	4b2f      	ldr	r3, [pc, #188]	; (8010300 <tcp_input+0x2b8>)
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	3301      	adds	r3, #1
 8010248:	b29a      	uxth	r2, r3
 801024a:	4b2d      	ldr	r3, [pc, #180]	; (8010300 <tcp_input+0x2b8>)
 801024c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	891a      	ldrh	r2, [r3, #8]
 8010252:	4b2b      	ldr	r3, [pc, #172]	; (8010300 <tcp_input+0x2b8>)
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	429a      	cmp	r2, r3
 8010258:	f200 82d9 	bhi.w	801080e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801025c:	2300      	movs	r3, #0
 801025e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010260:	4b28      	ldr	r3, [pc, #160]	; (8010304 <tcp_input+0x2bc>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	61fb      	str	r3, [r7, #28]
 8010266:	e09d      	b.n	80103a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	7d1b      	ldrb	r3, [r3, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d105      	bne.n	801027c <tcp_input+0x234>
 8010270:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <tcp_input+0x280>)
 8010272:	22fb      	movs	r2, #251	; 0xfb
 8010274:	4924      	ldr	r1, [pc, #144]	; (8010308 <tcp_input+0x2c0>)
 8010276:	4816      	ldr	r0, [pc, #88]	; (80102d0 <tcp_input+0x288>)
 8010278:	f007 fae0 	bl	801783c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	7d1b      	ldrb	r3, [r3, #20]
 8010280:	2b0a      	cmp	r3, #10
 8010282:	d105      	bne.n	8010290 <tcp_input+0x248>
 8010284:	4b10      	ldr	r3, [pc, #64]	; (80102c8 <tcp_input+0x280>)
 8010286:	22fc      	movs	r2, #252	; 0xfc
 8010288:	4920      	ldr	r1, [pc, #128]	; (801030c <tcp_input+0x2c4>)
 801028a:	4811      	ldr	r0, [pc, #68]	; (80102d0 <tcp_input+0x288>)
 801028c:	f007 fad6 	bl	801783c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	7d1b      	ldrb	r3, [r3, #20]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d105      	bne.n	80102a4 <tcp_input+0x25c>
 8010298:	4b0b      	ldr	r3, [pc, #44]	; (80102c8 <tcp_input+0x280>)
 801029a:	22fd      	movs	r2, #253	; 0xfd
 801029c:	491c      	ldr	r1, [pc, #112]	; (8010310 <tcp_input+0x2c8>)
 801029e:	480c      	ldr	r0, [pc, #48]	; (80102d0 <tcp_input+0x288>)
 80102a0:	f007 facc 	bl	801783c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	7a1b      	ldrb	r3, [r3, #8]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d033      	beq.n	8010314 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	7a1a      	ldrb	r2, [r3, #8]
 80102b0:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <tcp_input+0x290>)
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102b8:	3301      	adds	r3, #1
 80102ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102bc:	429a      	cmp	r2, r3
 80102be:	d029      	beq.n	8010314 <tcp_input+0x2cc>
      prev = pcb;
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	61bb      	str	r3, [r7, #24]
      continue;
 80102c4:	e06b      	b.n	801039e <tcp_input+0x356>
 80102c6:	bf00      	nop
 80102c8:	0801abb4 	.word	0x0801abb4
 80102cc:	0801abe8 	.word	0x0801abe8
 80102d0:	0801ac00 	.word	0x0801ac00
 80102d4:	20004dfc 	.word	0x20004dfc
 80102d8:	20008618 	.word	0x20008618
 80102dc:	20004e00 	.word	0x20004e00
 80102e0:	20004e04 	.word	0x20004e04
 80102e4:	20004e02 	.word	0x20004e02
 80102e8:	0801ac28 	.word	0x0801ac28
 80102ec:	0801ac38 	.word	0x0801ac38
 80102f0:	0801ac44 	.word	0x0801ac44
 80102f4:	20004e0c 	.word	0x20004e0c
 80102f8:	20004e10 	.word	0x20004e10
 80102fc:	20004e18 	.word	0x20004e18
 8010300:	20004e16 	.word	0x20004e16
 8010304:	2000bd2c 	.word	0x2000bd2c
 8010308:	0801ac64 	.word	0x0801ac64
 801030c:	0801ac8c 	.word	0x0801ac8c
 8010310:	0801acb8 	.word	0x0801acb8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	8b1a      	ldrh	r2, [r3, #24]
 8010318:	4b94      	ldr	r3, [pc, #592]	; (801056c <tcp_input+0x524>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	881b      	ldrh	r3, [r3, #0]
 801031e:	b29b      	uxth	r3, r3
 8010320:	429a      	cmp	r2, r3
 8010322:	d13a      	bne.n	801039a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	8ada      	ldrh	r2, [r3, #22]
 8010328:	4b90      	ldr	r3, [pc, #576]	; (801056c <tcp_input+0x524>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	885b      	ldrh	r3, [r3, #2]
 801032e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010330:	429a      	cmp	r2, r3
 8010332:	d132      	bne.n	801039a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	685a      	ldr	r2, [r3, #4]
 8010338:	4b8d      	ldr	r3, [pc, #564]	; (8010570 <tcp_input+0x528>)
 801033a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801033c:	429a      	cmp	r2, r3
 801033e:	d12c      	bne.n	801039a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	4b8a      	ldr	r3, [pc, #552]	; (8010570 <tcp_input+0x528>)
 8010346:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010348:	429a      	cmp	r2, r3
 801034a:	d126      	bne.n	801039a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	69fa      	ldr	r2, [r7, #28]
 8010352:	429a      	cmp	r2, r3
 8010354:	d106      	bne.n	8010364 <tcp_input+0x31c>
 8010356:	4b87      	ldr	r3, [pc, #540]	; (8010574 <tcp_input+0x52c>)
 8010358:	f240 120d 	movw	r2, #269	; 0x10d
 801035c:	4986      	ldr	r1, [pc, #536]	; (8010578 <tcp_input+0x530>)
 801035e:	4887      	ldr	r0, [pc, #540]	; (801057c <tcp_input+0x534>)
 8010360:	f007 fa6c 	bl	801783c <iprintf>
      if (prev != NULL) {
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00a      	beq.n	8010380 <tcp_input+0x338>
        prev->next = pcb->next;
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	68da      	ldr	r2, [r3, #12]
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010372:	4b83      	ldr	r3, [pc, #524]	; (8010580 <tcp_input+0x538>)
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801037a:	4a81      	ldr	r2, [pc, #516]	; (8010580 <tcp_input+0x538>)
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	69fa      	ldr	r2, [r7, #28]
 8010386:	429a      	cmp	r2, r3
 8010388:	d111      	bne.n	80103ae <tcp_input+0x366>
 801038a:	4b7a      	ldr	r3, [pc, #488]	; (8010574 <tcp_input+0x52c>)
 801038c:	f240 1215 	movw	r2, #277	; 0x115
 8010390:	497c      	ldr	r1, [pc, #496]	; (8010584 <tcp_input+0x53c>)
 8010392:	487a      	ldr	r0, [pc, #488]	; (801057c <tcp_input+0x534>)
 8010394:	f007 fa52 	bl	801783c <iprintf>
      break;
 8010398:	e009      	b.n	80103ae <tcp_input+0x366>
    }
    prev = pcb;
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	61fb      	str	r3, [r7, #28]
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f47f af5e 	bne.w	8010268 <tcp_input+0x220>
 80103ac:	e000      	b.n	80103b0 <tcp_input+0x368>
      break;
 80103ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f040 8095 	bne.w	80104e2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103b8:	4b73      	ldr	r3, [pc, #460]	; (8010588 <tcp_input+0x540>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	61fb      	str	r3, [r7, #28]
 80103be:	e03f      	b.n	8010440 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	7d1b      	ldrb	r3, [r3, #20]
 80103c4:	2b0a      	cmp	r3, #10
 80103c6:	d006      	beq.n	80103d6 <tcp_input+0x38e>
 80103c8:	4b6a      	ldr	r3, [pc, #424]	; (8010574 <tcp_input+0x52c>)
 80103ca:	f240 121f 	movw	r2, #287	; 0x11f
 80103ce:	496f      	ldr	r1, [pc, #444]	; (801058c <tcp_input+0x544>)
 80103d0:	486a      	ldr	r0, [pc, #424]	; (801057c <tcp_input+0x534>)
 80103d2:	f007 fa33 	bl	801783c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	7a1b      	ldrb	r3, [r3, #8]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d009      	beq.n	80103f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	7a1a      	ldrb	r2, [r3, #8]
 80103e2:	4b63      	ldr	r3, [pc, #396]	; (8010570 <tcp_input+0x528>)
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103ea:	3301      	adds	r3, #1
 80103ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d122      	bne.n	8010438 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	8b1a      	ldrh	r2, [r3, #24]
 80103f6:	4b5d      	ldr	r3, [pc, #372]	; (801056c <tcp_input+0x524>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	429a      	cmp	r2, r3
 8010400:	d11b      	bne.n	801043a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	8ada      	ldrh	r2, [r3, #22]
 8010406:	4b59      	ldr	r3, [pc, #356]	; (801056c <tcp_input+0x524>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	885b      	ldrh	r3, [r3, #2]
 801040c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801040e:	429a      	cmp	r2, r3
 8010410:	d113      	bne.n	801043a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	685a      	ldr	r2, [r3, #4]
 8010416:	4b56      	ldr	r3, [pc, #344]	; (8010570 <tcp_input+0x528>)
 8010418:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801041a:	429a      	cmp	r2, r3
 801041c:	d10d      	bne.n	801043a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	4b53      	ldr	r3, [pc, #332]	; (8010570 <tcp_input+0x528>)
 8010424:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010426:	429a      	cmp	r2, r3
 8010428:	d107      	bne.n	801043a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801042a:	69f8      	ldr	r0, [r7, #28]
 801042c:	f000 fb54 	bl	8010ad8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7fd fd03 	bl	800de3c <pbuf_free>
        return;
 8010436:	e1f0      	b.n	801081a <tcp_input+0x7d2>
        continue;
 8010438:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	68db      	ldr	r3, [r3, #12]
 801043e:	61fb      	str	r3, [r7, #28]
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1bc      	bne.n	80103c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010446:	2300      	movs	r3, #0
 8010448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801044a:	4b51      	ldr	r3, [pc, #324]	; (8010590 <tcp_input+0x548>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	617b      	str	r3, [r7, #20]
 8010450:	e02a      	b.n	80104a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	7a1b      	ldrb	r3, [r3, #8]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00c      	beq.n	8010474 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	7a1a      	ldrb	r2, [r3, #8]
 801045e:	4b44      	ldr	r3, [pc, #272]	; (8010570 <tcp_input+0x528>)
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010466:	3301      	adds	r3, #1
 8010468:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801046a:	429a      	cmp	r2, r3
 801046c:	d002      	beq.n	8010474 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	61bb      	str	r3, [r7, #24]
        continue;
 8010472:	e016      	b.n	80104a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	8ada      	ldrh	r2, [r3, #22]
 8010478:	4b3c      	ldr	r3, [pc, #240]	; (801056c <tcp_input+0x524>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	885b      	ldrh	r3, [r3, #2]
 801047e:	b29b      	uxth	r3, r3
 8010480:	429a      	cmp	r2, r3
 8010482:	d10c      	bne.n	801049e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	4b39      	ldr	r3, [pc, #228]	; (8010570 <tcp_input+0x528>)
 801048a:	695b      	ldr	r3, [r3, #20]
 801048c:	429a      	cmp	r2, r3
 801048e:	d00f      	beq.n	80104b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d00d      	beq.n	80104b2 <tcp_input+0x46a>
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d009      	beq.n	80104b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	617b      	str	r3, [r7, #20]
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1d1      	bne.n	8010452 <tcp_input+0x40a>
 80104ae:	e000      	b.n	80104b2 <tcp_input+0x46a>
            break;
 80104b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d014      	beq.n	80104e2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00a      	beq.n	80104d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	68da      	ldr	r2, [r3, #12]
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80104c6:	4b32      	ldr	r3, [pc, #200]	; (8010590 <tcp_input+0x548>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80104ce:	4a30      	ldr	r2, [pc, #192]	; (8010590 <tcp_input+0x548>)
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80104d4:	6978      	ldr	r0, [r7, #20]
 80104d6:	f000 fa01 	bl	80108dc <tcp_listen_input>
      }
      pbuf_free(p);
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f7fd fcae 	bl	800de3c <pbuf_free>
      return;
 80104e0:	e19b      	b.n	801081a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 8160 	beq.w	80107aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80104ea:	4b2a      	ldr	r3, [pc, #168]	; (8010594 <tcp_input+0x54c>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	891a      	ldrh	r2, [r3, #8]
 80104f4:	4b27      	ldr	r3, [pc, #156]	; (8010594 <tcp_input+0x54c>)
 80104f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80104f8:	4a26      	ldr	r2, [pc, #152]	; (8010594 <tcp_input+0x54c>)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80104fe:	4b1b      	ldr	r3, [pc, #108]	; (801056c <tcp_input+0x524>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a24      	ldr	r2, [pc, #144]	; (8010594 <tcp_input+0x54c>)
 8010504:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010506:	4b24      	ldr	r3, [pc, #144]	; (8010598 <tcp_input+0x550>)
 8010508:	2200      	movs	r2, #0
 801050a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801050c:	4b23      	ldr	r3, [pc, #140]	; (801059c <tcp_input+0x554>)
 801050e:	2200      	movs	r2, #0
 8010510:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010512:	4b23      	ldr	r3, [pc, #140]	; (80105a0 <tcp_input+0x558>)
 8010514:	2200      	movs	r2, #0
 8010516:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010518:	4b22      	ldr	r3, [pc, #136]	; (80105a4 <tcp_input+0x55c>)
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	f003 0308 	and.w	r3, r3, #8
 8010520:	2b00      	cmp	r3, #0
 8010522:	d006      	beq.n	8010532 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	7b5b      	ldrb	r3, [r3, #13]
 8010528:	f043 0301 	orr.w	r3, r3, #1
 801052c:	b2da      	uxtb	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010536:	2b00      	cmp	r3, #0
 8010538:	d038      	beq.n	80105ac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801053a:	69f8      	ldr	r0, [r7, #28]
 801053c:	f7ff f870 	bl	800f620 <tcp_process_refused_data>
 8010540:	4603      	mov	r3, r0
 8010542:	f113 0f0d 	cmn.w	r3, #13
 8010546:	d007      	beq.n	8010558 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801054c:	2b00      	cmp	r3, #0
 801054e:	d02d      	beq.n	80105ac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010550:	4b15      	ldr	r3, [pc, #84]	; (80105a8 <tcp_input+0x560>)
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d029      	beq.n	80105ac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801055c:	2b00      	cmp	r3, #0
 801055e:	f040 8104 	bne.w	801076a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010562:	69f8      	ldr	r0, [r7, #28]
 8010564:	f003 fe16 	bl	8014194 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010568:	e0ff      	b.n	801076a <tcp_input+0x722>
 801056a:	bf00      	nop
 801056c:	20004dfc 	.word	0x20004dfc
 8010570:	20008618 	.word	0x20008618
 8010574:	0801abb4 	.word	0x0801abb4
 8010578:	0801ace0 	.word	0x0801ace0
 801057c:	0801ac00 	.word	0x0801ac00
 8010580:	2000bd2c 	.word	0x2000bd2c
 8010584:	0801ad0c 	.word	0x0801ad0c
 8010588:	2000bd3c 	.word	0x2000bd3c
 801058c:	0801ad38 	.word	0x0801ad38
 8010590:	2000bd34 	.word	0x2000bd34
 8010594:	20004dec 	.word	0x20004dec
 8010598:	20004e1c 	.word	0x20004e1c
 801059c:	20004e19 	.word	0x20004e19
 80105a0:	20004e14 	.word	0x20004e14
 80105a4:	20004e18 	.word	0x20004e18
 80105a8:	20004e16 	.word	0x20004e16
      }
    }
    tcp_input_pcb = pcb;
 80105ac:	4a9c      	ldr	r2, [pc, #624]	; (8010820 <tcp_input+0x7d8>)
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80105b2:	69f8      	ldr	r0, [r7, #28]
 80105b4:	f000 fb0a 	bl	8010bcc <tcp_process>
 80105b8:	4603      	mov	r3, r0
 80105ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80105bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105c0:	f113 0f0d 	cmn.w	r3, #13
 80105c4:	f000 80d3 	beq.w	801076e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80105c8:	4b96      	ldr	r3, [pc, #600]	; (8010824 <tcp_input+0x7dc>)
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	f003 0308 	and.w	r3, r3, #8
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d015      	beq.n	8010600 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d008      	beq.n	80105f0 <tcp_input+0x5a8>
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105e4:	69fa      	ldr	r2, [r7, #28]
 80105e6:	6912      	ldr	r2, [r2, #16]
 80105e8:	f06f 010d 	mvn.w	r1, #13
 80105ec:	4610      	mov	r0, r2
 80105ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105f0:	69f9      	ldr	r1, [r7, #28]
 80105f2:	488d      	ldr	r0, [pc, #564]	; (8010828 <tcp_input+0x7e0>)
 80105f4:	f7ff fbb0 	bl	800fd58 <tcp_pcb_remove>
        tcp_free(pcb);
 80105f8:	69f8      	ldr	r0, [r7, #28]
 80105fa:	f7fd fecb 	bl	800e394 <tcp_free>
 80105fe:	e0c1      	b.n	8010784 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010600:	2300      	movs	r3, #0
 8010602:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010604:	4b89      	ldr	r3, [pc, #548]	; (801082c <tcp_input+0x7e4>)
 8010606:	881b      	ldrh	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01d      	beq.n	8010648 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801060c:	4b87      	ldr	r3, [pc, #540]	; (801082c <tcp_input+0x7e4>)
 801060e:	881b      	ldrh	r3, [r3, #0]
 8010610:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00a      	beq.n	8010632 <tcp_input+0x5ea>
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010622:	69fa      	ldr	r2, [r7, #28]
 8010624:	6910      	ldr	r0, [r2, #16]
 8010626:	89fa      	ldrh	r2, [r7, #14]
 8010628:	69f9      	ldr	r1, [r7, #28]
 801062a:	4798      	blx	r3
 801062c:	4603      	mov	r3, r0
 801062e:	74fb      	strb	r3, [r7, #19]
 8010630:	e001      	b.n	8010636 <tcp_input+0x5ee>
 8010632:	2300      	movs	r3, #0
 8010634:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010636:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801063a:	f113 0f0d 	cmn.w	r3, #13
 801063e:	f000 8098 	beq.w	8010772 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010642:	4b7a      	ldr	r3, [pc, #488]	; (801082c <tcp_input+0x7e4>)
 8010644:	2200      	movs	r2, #0
 8010646:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010648:	69f8      	ldr	r0, [r7, #28]
 801064a:	f000 f907 	bl	801085c <tcp_input_delayed_close>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	f040 8090 	bne.w	8010776 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010656:	4b76      	ldr	r3, [pc, #472]	; (8010830 <tcp_input+0x7e8>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d041      	beq.n	80106e2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010662:	2b00      	cmp	r3, #0
 8010664:	d006      	beq.n	8010674 <tcp_input+0x62c>
 8010666:	4b73      	ldr	r3, [pc, #460]	; (8010834 <tcp_input+0x7ec>)
 8010668:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801066c:	4972      	ldr	r1, [pc, #456]	; (8010838 <tcp_input+0x7f0>)
 801066e:	4873      	ldr	r0, [pc, #460]	; (801083c <tcp_input+0x7f4>)
 8010670:	f007 f8e4 	bl	801783c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	8b5b      	ldrh	r3, [r3, #26]
 8010678:	f003 0310 	and.w	r3, r3, #16
 801067c:	2b00      	cmp	r3, #0
 801067e:	d008      	beq.n	8010692 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010680:	4b6b      	ldr	r3, [pc, #428]	; (8010830 <tcp_input+0x7e8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4618      	mov	r0, r3
 8010686:	f7fd fbd9 	bl	800de3c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801068a:	69f8      	ldr	r0, [r7, #28]
 801068c:	f7fe f9c6 	bl	800ea1c <tcp_abort>
            goto aborted;
 8010690:	e078      	b.n	8010784 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00c      	beq.n	80106b6 <tcp_input+0x66e>
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	6918      	ldr	r0, [r3, #16]
 80106a6:	4b62      	ldr	r3, [pc, #392]	; (8010830 <tcp_input+0x7e8>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	2300      	movs	r3, #0
 80106ac:	69f9      	ldr	r1, [r7, #28]
 80106ae:	47a0      	blx	r4
 80106b0:	4603      	mov	r3, r0
 80106b2:	74fb      	strb	r3, [r7, #19]
 80106b4:	e008      	b.n	80106c8 <tcp_input+0x680>
 80106b6:	4b5e      	ldr	r3, [pc, #376]	; (8010830 <tcp_input+0x7e8>)
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	2300      	movs	r3, #0
 80106bc:	69f9      	ldr	r1, [r7, #28]
 80106be:	2000      	movs	r0, #0
 80106c0:	f7ff f884 	bl	800f7cc <tcp_recv_null>
 80106c4:	4603      	mov	r3, r0
 80106c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80106c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106cc:	f113 0f0d 	cmn.w	r3, #13
 80106d0:	d053      	beq.n	801077a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80106d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d003      	beq.n	80106e2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80106da:	4b55      	ldr	r3, [pc, #340]	; (8010830 <tcp_input+0x7e8>)
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80106e2:	4b50      	ldr	r3, [pc, #320]	; (8010824 <tcp_input+0x7dc>)
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	f003 0320 	and.w	r3, r3, #32
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d030      	beq.n	8010750 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106fa:	7b5a      	ldrb	r2, [r3, #13]
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010700:	f042 0220 	orr.w	r2, r2, #32
 8010704:	b2d2      	uxtb	r2, r2
 8010706:	735a      	strb	r2, [r3, #13]
 8010708:	e022      	b.n	8010750 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801070e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010712:	d005      	beq.n	8010720 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010718:	3301      	adds	r3, #1
 801071a:	b29a      	uxth	r2, r3
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00b      	beq.n	8010742 <tcp_input+0x6fa>
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	6918      	ldr	r0, [r3, #16]
 8010734:	2300      	movs	r3, #0
 8010736:	2200      	movs	r2, #0
 8010738:	69f9      	ldr	r1, [r7, #28]
 801073a:	47a0      	blx	r4
 801073c:	4603      	mov	r3, r0
 801073e:	74fb      	strb	r3, [r7, #19]
 8010740:	e001      	b.n	8010746 <tcp_input+0x6fe>
 8010742:	2300      	movs	r3, #0
 8010744:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801074a:	f113 0f0d 	cmn.w	r3, #13
 801074e:	d016      	beq.n	801077e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010750:	4b33      	ldr	r3, [pc, #204]	; (8010820 <tcp_input+0x7d8>)
 8010752:	2200      	movs	r2, #0
 8010754:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010756:	69f8      	ldr	r0, [r7, #28]
 8010758:	f000 f880 	bl	801085c <tcp_input_delayed_close>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d10f      	bne.n	8010782 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010762:	69f8      	ldr	r0, [r7, #28]
 8010764:	f002 ff10 	bl	8013588 <tcp_output>
 8010768:	e00c      	b.n	8010784 <tcp_input+0x73c>
        goto aborted;
 801076a:	bf00      	nop
 801076c:	e00a      	b.n	8010784 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801076e:	bf00      	nop
 8010770:	e008      	b.n	8010784 <tcp_input+0x73c>
              goto aborted;
 8010772:	bf00      	nop
 8010774:	e006      	b.n	8010784 <tcp_input+0x73c>
          goto aborted;
 8010776:	bf00      	nop
 8010778:	e004      	b.n	8010784 <tcp_input+0x73c>
            goto aborted;
 801077a:	bf00      	nop
 801077c:	e002      	b.n	8010784 <tcp_input+0x73c>
              goto aborted;
 801077e:	bf00      	nop
 8010780:	e000      	b.n	8010784 <tcp_input+0x73c>
          goto aborted;
 8010782:	bf00      	nop
    tcp_input_pcb = NULL;
 8010784:	4b26      	ldr	r3, [pc, #152]	; (8010820 <tcp_input+0x7d8>)
 8010786:	2200      	movs	r2, #0
 8010788:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801078a:	4b29      	ldr	r3, [pc, #164]	; (8010830 <tcp_input+0x7e8>)
 801078c:	2200      	movs	r2, #0
 801078e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010790:	4b2b      	ldr	r3, [pc, #172]	; (8010840 <tcp_input+0x7f8>)
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d03f      	beq.n	8010818 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010798:	4b29      	ldr	r3, [pc, #164]	; (8010840 <tcp_input+0x7f8>)
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	4618      	mov	r0, r3
 801079e:	f7fd fb4d 	bl	800de3c <pbuf_free>
      inseg.p = NULL;
 80107a2:	4b27      	ldr	r3, [pc, #156]	; (8010840 <tcp_input+0x7f8>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80107a8:	e036      	b.n	8010818 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80107aa:	4b26      	ldr	r3, [pc, #152]	; (8010844 <tcp_input+0x7fc>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	899b      	ldrh	r3, [r3, #12]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fb ff96 	bl	800c6e4 <lwip_htons>
 80107b8:	4603      	mov	r3, r0
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d118      	bne.n	80107f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107c4:	4b20      	ldr	r3, [pc, #128]	; (8010848 <tcp_input+0x800>)
 80107c6:	6819      	ldr	r1, [r3, #0]
 80107c8:	4b20      	ldr	r3, [pc, #128]	; (801084c <tcp_input+0x804>)
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	461a      	mov	r2, r3
 80107ce:	4b20      	ldr	r3, [pc, #128]	; (8010850 <tcp_input+0x808>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107d4:	4b1b      	ldr	r3, [pc, #108]	; (8010844 <tcp_input+0x7fc>)
 80107d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107d8:	885b      	ldrh	r3, [r3, #2]
 80107da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107dc:	4a19      	ldr	r2, [pc, #100]	; (8010844 <tcp_input+0x7fc>)
 80107de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107e0:	8812      	ldrh	r2, [r2, #0]
 80107e2:	b292      	uxth	r2, r2
 80107e4:	9202      	str	r2, [sp, #8]
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	4b1a      	ldr	r3, [pc, #104]	; (8010854 <tcp_input+0x80c>)
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	4b1a      	ldr	r3, [pc, #104]	; (8010858 <tcp_input+0x810>)
 80107ee:	4602      	mov	r2, r0
 80107f0:	2000      	movs	r0, #0
 80107f2:	f003 fc7d 	bl	80140f0 <tcp_rst>
    pbuf_free(p);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f7fd fb20 	bl	800de3c <pbuf_free>
  return;
 80107fc:	e00c      	b.n	8010818 <tcp_input+0x7d0>
    goto dropped;
 80107fe:	bf00      	nop
 8010800:	e006      	b.n	8010810 <tcp_input+0x7c8>
    goto dropped;
 8010802:	bf00      	nop
 8010804:	e004      	b.n	8010810 <tcp_input+0x7c8>
    goto dropped;
 8010806:	bf00      	nop
 8010808:	e002      	b.n	8010810 <tcp_input+0x7c8>
      goto dropped;
 801080a:	bf00      	nop
 801080c:	e000      	b.n	8010810 <tcp_input+0x7c8>
      goto dropped;
 801080e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7fd fb13 	bl	800de3c <pbuf_free>
 8010816:	e000      	b.n	801081a <tcp_input+0x7d2>
  return;
 8010818:	bf00      	nop
}
 801081a:	3724      	adds	r7, #36	; 0x24
 801081c:	46bd      	mov	sp, r7
 801081e:	bd90      	pop	{r4, r7, pc}
 8010820:	2000bd40 	.word	0x2000bd40
 8010824:	20004e19 	.word	0x20004e19
 8010828:	2000bd2c 	.word	0x2000bd2c
 801082c:	20004e14 	.word	0x20004e14
 8010830:	20004e1c 	.word	0x20004e1c
 8010834:	0801abb4 	.word	0x0801abb4
 8010838:	0801ad68 	.word	0x0801ad68
 801083c:	0801ac00 	.word	0x0801ac00
 8010840:	20004dec 	.word	0x20004dec
 8010844:	20004dfc 	.word	0x20004dfc
 8010848:	20004e10 	.word	0x20004e10
 801084c:	20004e16 	.word	0x20004e16
 8010850:	20004e0c 	.word	0x20004e0c
 8010854:	20008628 	.word	0x20008628
 8010858:	2000862c 	.word	0x2000862c

0801085c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <tcp_input_delayed_close+0x1c>
 801086a:	4b17      	ldr	r3, [pc, #92]	; (80108c8 <tcp_input_delayed_close+0x6c>)
 801086c:	f240 225a 	movw	r2, #602	; 0x25a
 8010870:	4916      	ldr	r1, [pc, #88]	; (80108cc <tcp_input_delayed_close+0x70>)
 8010872:	4817      	ldr	r0, [pc, #92]	; (80108d0 <tcp_input_delayed_close+0x74>)
 8010874:	f006 ffe2 	bl	801783c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010878:	4b16      	ldr	r3, [pc, #88]	; (80108d4 <tcp_input_delayed_close+0x78>)
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	f003 0310 	and.w	r3, r3, #16
 8010880:	2b00      	cmp	r3, #0
 8010882:	d01c      	beq.n	80108be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	8b5b      	ldrh	r3, [r3, #26]
 8010888:	f003 0310 	and.w	r3, r3, #16
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10d      	bne.n	80108ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010896:	2b00      	cmp	r3, #0
 8010898:	d008      	beq.n	80108ac <tcp_input_delayed_close+0x50>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	6912      	ldr	r2, [r2, #16]
 80108a4:	f06f 010e 	mvn.w	r1, #14
 80108a8:	4610      	mov	r0, r2
 80108aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80108ac:	6879      	ldr	r1, [r7, #4]
 80108ae:	480a      	ldr	r0, [pc, #40]	; (80108d8 <tcp_input_delayed_close+0x7c>)
 80108b0:	f7ff fa52 	bl	800fd58 <tcp_pcb_remove>
    tcp_free(pcb);
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7fd fd6d 	bl	800e394 <tcp_free>
    return 1;
 80108ba:	2301      	movs	r3, #1
 80108bc:	e000      	b.n	80108c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80108be:	2300      	movs	r3, #0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	0801abb4 	.word	0x0801abb4
 80108cc:	0801ad84 	.word	0x0801ad84
 80108d0:	0801ac00 	.word	0x0801ac00
 80108d4:	20004e19 	.word	0x20004e19
 80108d8:	2000bd2c 	.word	0x2000bd2c

080108dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80108dc:	b590      	push	{r4, r7, lr}
 80108de:	b08b      	sub	sp, #44	; 0x2c
 80108e0:	af04      	add	r7, sp, #16
 80108e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80108e4:	4b6f      	ldr	r3, [pc, #444]	; (8010aa4 <tcp_listen_input+0x1c8>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0304 	and.w	r3, r3, #4
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f040 80d2 	bne.w	8010a96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d106      	bne.n	8010906 <tcp_listen_input+0x2a>
 80108f8:	4b6b      	ldr	r3, [pc, #428]	; (8010aa8 <tcp_listen_input+0x1cc>)
 80108fa:	f240 2281 	movw	r2, #641	; 0x281
 80108fe:	496b      	ldr	r1, [pc, #428]	; (8010aac <tcp_listen_input+0x1d0>)
 8010900:	486b      	ldr	r0, [pc, #428]	; (8010ab0 <tcp_listen_input+0x1d4>)
 8010902:	f006 ff9b 	bl	801783c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010906:	4b67      	ldr	r3, [pc, #412]	; (8010aa4 <tcp_listen_input+0x1c8>)
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	f003 0310 	and.w	r3, r3, #16
 801090e:	2b00      	cmp	r3, #0
 8010910:	d019      	beq.n	8010946 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010912:	4b68      	ldr	r3, [pc, #416]	; (8010ab4 <tcp_listen_input+0x1d8>)
 8010914:	6819      	ldr	r1, [r3, #0]
 8010916:	4b68      	ldr	r3, [pc, #416]	; (8010ab8 <tcp_listen_input+0x1dc>)
 8010918:	881b      	ldrh	r3, [r3, #0]
 801091a:	461a      	mov	r2, r3
 801091c:	4b67      	ldr	r3, [pc, #412]	; (8010abc <tcp_listen_input+0x1e0>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010922:	4b67      	ldr	r3, [pc, #412]	; (8010ac0 <tcp_listen_input+0x1e4>)
 8010924:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010926:	885b      	ldrh	r3, [r3, #2]
 8010928:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801092a:	4a65      	ldr	r2, [pc, #404]	; (8010ac0 <tcp_listen_input+0x1e4>)
 801092c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801092e:	8812      	ldrh	r2, [r2, #0]
 8010930:	b292      	uxth	r2, r2
 8010932:	9202      	str	r2, [sp, #8]
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	4b63      	ldr	r3, [pc, #396]	; (8010ac4 <tcp_listen_input+0x1e8>)
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	4b63      	ldr	r3, [pc, #396]	; (8010ac8 <tcp_listen_input+0x1ec>)
 801093c:	4602      	mov	r2, r0
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f003 fbd6 	bl	80140f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010944:	e0a9      	b.n	8010a9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010946:	4b57      	ldr	r3, [pc, #348]	; (8010aa4 <tcp_listen_input+0x1c8>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 0302 	and.w	r3, r3, #2
 801094e:	2b00      	cmp	r3, #0
 8010950:	f000 80a3 	beq.w	8010a9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	7d5b      	ldrb	r3, [r3, #21]
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff f85b 	bl	800fa14 <tcp_alloc>
 801095e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d111      	bne.n	801098a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <tcp_listen_input+0xa8>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	699b      	ldr	r3, [r3, #24]
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	6910      	ldr	r0, [r2, #16]
 8010976:	f04f 32ff 	mov.w	r2, #4294967295
 801097a:	2100      	movs	r1, #0
 801097c:	4798      	blx	r3
 801097e:	4603      	mov	r3, r0
 8010980:	73bb      	strb	r3, [r7, #14]
      return;
 8010982:	e08b      	b.n	8010a9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010984:	23f0      	movs	r3, #240	; 0xf0
 8010986:	73bb      	strb	r3, [r7, #14]
      return;
 8010988:	e088      	b.n	8010a9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801098a:	4b50      	ldr	r3, [pc, #320]	; (8010acc <tcp_listen_input+0x1f0>)
 801098c:	695a      	ldr	r2, [r3, #20]
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010992:	4b4e      	ldr	r3, [pc, #312]	; (8010acc <tcp_listen_input+0x1f0>)
 8010994:	691a      	ldr	r2, [r3, #16]
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	8ada      	ldrh	r2, [r3, #22]
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80109a2:	4b47      	ldr	r3, [pc, #284]	; (8010ac0 <tcp_listen_input+0x1e4>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2203      	movs	r2, #3
 80109b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80109b4:	4b41      	ldr	r3, [pc, #260]	; (8010abc <tcp_listen_input+0x1e0>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	1c5a      	adds	r2, r3, #1
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80109c6:	6978      	ldr	r0, [r7, #20]
 80109c8:	f7ff fa5a 	bl	800fe80 <tcp_next_iss>
 80109cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	693a      	ldr	r2, [r7, #16]
 80109d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	693a      	ldr	r2, [r7, #16]
 80109d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	693a      	ldr	r2, [r7, #16]
 80109de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	693a      	ldr	r2, [r7, #16]
 80109e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80109e6:	4b35      	ldr	r3, [pc, #212]	; (8010abc <tcp_listen_input+0x1e0>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	1e5a      	subs	r2, r3, #1
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	691a      	ldr	r2, [r3, #16]
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	7a5b      	ldrb	r3, [r3, #9]
 8010a02:	f003 030c 	and.w	r3, r3, #12
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	7a1a      	ldrb	r2, [r3, #8]
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010a14:	4b2e      	ldr	r3, [pc, #184]	; (8010ad0 <tcp_listen_input+0x1f4>)
 8010a16:	681a      	ldr	r2, [r3, #0]
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	60da      	str	r2, [r3, #12]
 8010a1c:	4a2c      	ldr	r2, [pc, #176]	; (8010ad0 <tcp_listen_input+0x1f4>)
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	6013      	str	r3, [r2, #0]
 8010a22:	f003 fd27 	bl	8014474 <tcp_timer_needed>
 8010a26:	4b2b      	ldr	r3, [pc, #172]	; (8010ad4 <tcp_listen_input+0x1f8>)
 8010a28:	2201      	movs	r2, #1
 8010a2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010a2c:	6978      	ldr	r0, [r7, #20]
 8010a2e:	f001 fd8d 	bl	801254c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010a32:	4b23      	ldr	r3, [pc, #140]	; (8010ac0 <tcp_listen_input+0x1e4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	89db      	ldrh	r3, [r3, #14]
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	3304      	adds	r3, #4
 8010a54:	4618      	mov	r0, r3
 8010a56:	f005 fa61 	bl	8015f1c <ip4_route>
 8010a5a:	4601      	mov	r1, r0
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	3304      	adds	r3, #4
 8010a60:	461a      	mov	r2, r3
 8010a62:	4620      	mov	r0, r4
 8010a64:	f7ff fa32 	bl	800fecc <tcp_eff_send_mss_netif>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010a70:	2112      	movs	r1, #18
 8010a72:	6978      	ldr	r0, [r7, #20]
 8010a74:	f002 fc9a 	bl	80133ac <tcp_enqueue_flags>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d004      	beq.n	8010a8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010a84:	2100      	movs	r1, #0
 8010a86:	6978      	ldr	r0, [r7, #20]
 8010a88:	f7fd ff0a 	bl	800e8a0 <tcp_abandon>
      return;
 8010a8c:	e006      	b.n	8010a9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010a8e:	6978      	ldr	r0, [r7, #20]
 8010a90:	f002 fd7a 	bl	8013588 <tcp_output>
  return;
 8010a94:	e001      	b.n	8010a9a <tcp_listen_input+0x1be>
    return;
 8010a96:	bf00      	nop
 8010a98:	e000      	b.n	8010a9c <tcp_listen_input+0x1c0>
  return;
 8010a9a:	bf00      	nop
}
 8010a9c:	371c      	adds	r7, #28
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd90      	pop	{r4, r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	20004e18 	.word	0x20004e18
 8010aa8:	0801abb4 	.word	0x0801abb4
 8010aac:	0801adac 	.word	0x0801adac
 8010ab0:	0801ac00 	.word	0x0801ac00
 8010ab4:	20004e10 	.word	0x20004e10
 8010ab8:	20004e16 	.word	0x20004e16
 8010abc:	20004e0c 	.word	0x20004e0c
 8010ac0:	20004dfc 	.word	0x20004dfc
 8010ac4:	20008628 	.word	0x20008628
 8010ac8:	2000862c 	.word	0x2000862c
 8010acc:	20008618 	.word	0x20008618
 8010ad0:	2000bd2c 	.word	0x2000bd2c
 8010ad4:	2000bd28 	.word	0x2000bd28

08010ad8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b086      	sub	sp, #24
 8010adc:	af04      	add	r7, sp, #16
 8010ade:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010ae0:	4b2f      	ldr	r3, [pc, #188]	; (8010ba0 <tcp_timewait_input+0xc8>)
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	f003 0304 	and.w	r3, r3, #4
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d153      	bne.n	8010b94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d106      	bne.n	8010b00 <tcp_timewait_input+0x28>
 8010af2:	4b2c      	ldr	r3, [pc, #176]	; (8010ba4 <tcp_timewait_input+0xcc>)
 8010af4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010af8:	492b      	ldr	r1, [pc, #172]	; (8010ba8 <tcp_timewait_input+0xd0>)
 8010afa:	482c      	ldr	r0, [pc, #176]	; (8010bac <tcp_timewait_input+0xd4>)
 8010afc:	f006 fe9e 	bl	801783c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010b00:	4b27      	ldr	r3, [pc, #156]	; (8010ba0 <tcp_timewait_input+0xc8>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	f003 0302 	and.w	r3, r3, #2
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d02a      	beq.n	8010b62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010b0c:	4b28      	ldr	r3, [pc, #160]	; (8010bb0 <tcp_timewait_input+0xd8>)
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b14:	1ad3      	subs	r3, r2, r3
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	db2d      	blt.n	8010b76 <tcp_timewait_input+0x9e>
 8010b1a:	4b25      	ldr	r3, [pc, #148]	; (8010bb0 <tcp_timewait_input+0xd8>)
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b22:	6879      	ldr	r1, [r7, #4]
 8010b24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b26:	440b      	add	r3, r1
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	dc23      	bgt.n	8010b76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b2e:	4b21      	ldr	r3, [pc, #132]	; (8010bb4 <tcp_timewait_input+0xdc>)
 8010b30:	6819      	ldr	r1, [r3, #0]
 8010b32:	4b21      	ldr	r3, [pc, #132]	; (8010bb8 <tcp_timewait_input+0xe0>)
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	461a      	mov	r2, r3
 8010b38:	4b1d      	ldr	r3, [pc, #116]	; (8010bb0 <tcp_timewait_input+0xd8>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b3e:	4b1f      	ldr	r3, [pc, #124]	; (8010bbc <tcp_timewait_input+0xe4>)
 8010b40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b42:	885b      	ldrh	r3, [r3, #2]
 8010b44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b46:	4a1d      	ldr	r2, [pc, #116]	; (8010bbc <tcp_timewait_input+0xe4>)
 8010b48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b4a:	8812      	ldrh	r2, [r2, #0]
 8010b4c:	b292      	uxth	r2, r2
 8010b4e:	9202      	str	r2, [sp, #8]
 8010b50:	9301      	str	r3, [sp, #4]
 8010b52:	4b1b      	ldr	r3, [pc, #108]	; (8010bc0 <tcp_timewait_input+0xe8>)
 8010b54:	9300      	str	r3, [sp, #0]
 8010b56:	4b1b      	ldr	r3, [pc, #108]	; (8010bc4 <tcp_timewait_input+0xec>)
 8010b58:	4602      	mov	r2, r0
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f003 fac8 	bl	80140f0 <tcp_rst>
      return;
 8010b60:	e01b      	b.n	8010b9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010b62:	4b0f      	ldr	r3, [pc, #60]	; (8010ba0 <tcp_timewait_input+0xc8>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	f003 0301 	and.w	r3, r3, #1
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d003      	beq.n	8010b76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010b6e:	4b16      	ldr	r3, [pc, #88]	; (8010bc8 <tcp_timewait_input+0xf0>)
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010b76:	4b10      	ldr	r3, [pc, #64]	; (8010bb8 <tcp_timewait_input+0xe0>)
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00c      	beq.n	8010b98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	8b5b      	ldrh	r3, [r3, #26]
 8010b82:	f043 0302 	orr.w	r3, r3, #2
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f002 fcfb 	bl	8013588 <tcp_output>
  }
  return;
 8010b92:	e001      	b.n	8010b98 <tcp_timewait_input+0xc0>
    return;
 8010b94:	bf00      	nop
 8010b96:	e000      	b.n	8010b9a <tcp_timewait_input+0xc2>
  return;
 8010b98:	bf00      	nop
}
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20004e18 	.word	0x20004e18
 8010ba4:	0801abb4 	.word	0x0801abb4
 8010ba8:	0801adcc 	.word	0x0801adcc
 8010bac:	0801ac00 	.word	0x0801ac00
 8010bb0:	20004e0c 	.word	0x20004e0c
 8010bb4:	20004e10 	.word	0x20004e10
 8010bb8:	20004e16 	.word	0x20004e16
 8010bbc:	20004dfc 	.word	0x20004dfc
 8010bc0:	20008628 	.word	0x20008628
 8010bc4:	2000862c 	.word	0x2000862c
 8010bc8:	2000bd30 	.word	0x2000bd30

08010bcc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010bcc:	b590      	push	{r4, r7, lr}
 8010bce:	b08d      	sub	sp, #52	; 0x34
 8010bd0:	af04      	add	r7, sp, #16
 8010bd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <tcp_process+0x24>
 8010be2:	4ba5      	ldr	r3, [pc, #660]	; (8010e78 <tcp_process+0x2ac>)
 8010be4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010be8:	49a4      	ldr	r1, [pc, #656]	; (8010e7c <tcp_process+0x2b0>)
 8010bea:	48a5      	ldr	r0, [pc, #660]	; (8010e80 <tcp_process+0x2b4>)
 8010bec:	f006 fe26 	bl	801783c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010bf0:	4ba4      	ldr	r3, [pc, #656]	; (8010e84 <tcp_process+0x2b8>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	f003 0304 	and.w	r3, r3, #4
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d04e      	beq.n	8010c9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7d1b      	ldrb	r3, [r3, #20]
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d108      	bne.n	8010c16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c08:	4b9f      	ldr	r3, [pc, #636]	; (8010e88 <tcp_process+0x2bc>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d123      	bne.n	8010c58 <tcp_process+0x8c>
        acceptable = 1;
 8010c10:	2301      	movs	r3, #1
 8010c12:	76fb      	strb	r3, [r7, #27]
 8010c14:	e020      	b.n	8010c58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c1a:	4b9c      	ldr	r3, [pc, #624]	; (8010e8c <tcp_process+0x2c0>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d102      	bne.n	8010c28 <tcp_process+0x5c>
        acceptable = 1;
 8010c22:	2301      	movs	r3, #1
 8010c24:	76fb      	strb	r3, [r7, #27]
 8010c26:	e017      	b.n	8010c58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c28:	4b98      	ldr	r3, [pc, #608]	; (8010e8c <tcp_process+0x2c0>)
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	db10      	blt.n	8010c58 <tcp_process+0x8c>
 8010c36:	4b95      	ldr	r3, [pc, #596]	; (8010e8c <tcp_process+0x2c0>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c3e:	6879      	ldr	r1, [r7, #4]
 8010c40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c42:	440b      	add	r3, r1
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dc06      	bgt.n	8010c58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8b5b      	ldrh	r3, [r3, #26]
 8010c4e:	f043 0302 	orr.w	r3, r3, #2
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010c58:	7efb      	ldrb	r3, [r7, #27]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d01b      	beq.n	8010c96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	7d1b      	ldrb	r3, [r3, #20]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d106      	bne.n	8010c74 <tcp_process+0xa8>
 8010c66:	4b84      	ldr	r3, [pc, #528]	; (8010e78 <tcp_process+0x2ac>)
 8010c68:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010c6c:	4988      	ldr	r1, [pc, #544]	; (8010e90 <tcp_process+0x2c4>)
 8010c6e:	4884      	ldr	r0, [pc, #528]	; (8010e80 <tcp_process+0x2b4>)
 8010c70:	f006 fde4 	bl	801783c <iprintf>
      recv_flags |= TF_RESET;
 8010c74:	4b87      	ldr	r3, [pc, #540]	; (8010e94 <tcp_process+0x2c8>)
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	f043 0308 	orr.w	r3, r3, #8
 8010c7c:	b2da      	uxtb	r2, r3
 8010c7e:	4b85      	ldr	r3, [pc, #532]	; (8010e94 <tcp_process+0x2c8>)
 8010c80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	8b5b      	ldrh	r3, [r3, #26]
 8010c86:	f023 0301 	bic.w	r3, r3, #1
 8010c8a:	b29a      	uxth	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c90:	f06f 030d 	mvn.w	r3, #13
 8010c94:	e37a      	b.n	801138c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	e378      	b.n	801138c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c9a:	4b7a      	ldr	r3, [pc, #488]	; (8010e84 <tcp_process+0x2b8>)
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	f003 0302 	and.w	r3, r3, #2
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d010      	beq.n	8010cc8 <tcp_process+0xfc>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7d1b      	ldrb	r3, [r3, #20]
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d00c      	beq.n	8010cc8 <tcp_process+0xfc>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	7d1b      	ldrb	r3, [r3, #20]
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d008      	beq.n	8010cc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	8b5b      	ldrh	r3, [r3, #26]
 8010cba:	f043 0302 	orr.w	r3, r3, #2
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	e361      	b.n	801138c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	8b5b      	ldrh	r3, [r3, #26]
 8010ccc:	f003 0310 	and.w	r3, r3, #16
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d103      	bne.n	8010cdc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010cd4:	4b70      	ldr	r3, [pc, #448]	; (8010e98 <tcp_process+0x2cc>)
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f001 fc2d 	bl	801254c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	7d1b      	ldrb	r3, [r3, #20]
 8010cf6:	3b02      	subs	r3, #2
 8010cf8:	2b07      	cmp	r3, #7
 8010cfa:	f200 8337 	bhi.w	801136c <tcp_process+0x7a0>
 8010cfe:	a201      	add	r2, pc, #4	; (adr r2, 8010d04 <tcp_process+0x138>)
 8010d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d04:	08010d25 	.word	0x08010d25
 8010d08:	08010f55 	.word	0x08010f55
 8010d0c:	080110cd 	.word	0x080110cd
 8010d10:	080110f7 	.word	0x080110f7
 8010d14:	0801121b 	.word	0x0801121b
 8010d18:	080110cd 	.word	0x080110cd
 8010d1c:	080112a7 	.word	0x080112a7
 8010d20:	08011337 	.word	0x08011337
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010d24:	4b57      	ldr	r3, [pc, #348]	; (8010e84 <tcp_process+0x2b8>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	f003 0310 	and.w	r3, r3, #16
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 80e4 	beq.w	8010efa <tcp_process+0x32e>
 8010d32:	4b54      	ldr	r3, [pc, #336]	; (8010e84 <tcp_process+0x2b8>)
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	f003 0302 	and.w	r3, r3, #2
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f000 80dd 	beq.w	8010efa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	4b50      	ldr	r3, [pc, #320]	; (8010e88 <tcp_process+0x2bc>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	f040 80d5 	bne.w	8010efa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010d50:	4b4e      	ldr	r3, [pc, #312]	; (8010e8c <tcp_process+0x2c0>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1c5a      	adds	r2, r3, #1
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010d62:	4b49      	ldr	r3, [pc, #292]	; (8010e88 <tcp_process+0x2bc>)
 8010d64:	681a      	ldr	r2, [r3, #0]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010d6a:	4b4c      	ldr	r3, [pc, #304]	; (8010e9c <tcp_process+0x2d0>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	89db      	ldrh	r3, [r3, #14]
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010d84:	4b41      	ldr	r3, [pc, #260]	; (8010e8c <tcp_process+0x2c0>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	1e5a      	subs	r2, r3, #1
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2204      	movs	r2, #4
 8010d92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f005 f8bd 	bl	8015f1c <ip4_route>
 8010da2:	4601      	mov	r1, r0
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	3304      	adds	r3, #4
 8010da8:	461a      	mov	r2, r3
 8010daa:	4620      	mov	r0, r4
 8010dac:	f7ff f88e 	bl	800fecc <tcp_eff_send_mss_netif>
 8010db0:	4603      	mov	r3, r0
 8010db2:	461a      	mov	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dbc:	009a      	lsls	r2, r3, #2
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dc2:	005b      	lsls	r3, r3, #1
 8010dc4:	f241 111c 	movw	r1, #4380	; 0x111c
 8010dc8:	428b      	cmp	r3, r1
 8010dca:	bf38      	it	cc
 8010dcc:	460b      	movcc	r3, r1
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d204      	bcs.n	8010ddc <tcp_process+0x210>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	e00d      	b.n	8010df8 <tcp_process+0x22c>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	f241 121c 	movw	r2, #4380	; 0x111c
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d904      	bls.n	8010df4 <tcp_process+0x228>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dee:	005b      	lsls	r3, r3, #1
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	e001      	b.n	8010df8 <tcp_process+0x22c>
 8010df4:	f241 131c 	movw	r3, #4380	; 0x111c
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d106      	bne.n	8010e16 <tcp_process+0x24a>
 8010e08:	4b1b      	ldr	r3, [pc, #108]	; (8010e78 <tcp_process+0x2ac>)
 8010e0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010e0e:	4924      	ldr	r1, [pc, #144]	; (8010ea0 <tcp_process+0x2d4>)
 8010e10:	481b      	ldr	r0, [pc, #108]	; (8010e80 <tcp_process+0x2b4>)
 8010e12:	f006 fd13 	bl	801783c <iprintf>
        --pcb->snd_queuelen;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e1c:	3b01      	subs	r3, #1
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d111      	bne.n	8010e56 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010e38:	69fb      	ldr	r3, [r7, #28]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <tcp_process+0x280>
 8010e3e:	4b0e      	ldr	r3, [pc, #56]	; (8010e78 <tcp_process+0x2ac>)
 8010e40:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010e44:	4917      	ldr	r1, [pc, #92]	; (8010ea4 <tcp_process+0x2d8>)
 8010e46:	480e      	ldr	r0, [pc, #56]	; (8010e80 <tcp_process+0x2b4>)
 8010e48:	f006 fcf8 	bl	801783c <iprintf>
          pcb->unsent = rseg->next;
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e54:	e003      	b.n	8010e5e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010e5e:	69f8      	ldr	r0, [r7, #28]
 8010e60:	f7fe fc6f 	bl	800f742 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d11d      	bne.n	8010ea8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e72:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e74:	e01f      	b.n	8010eb6 <tcp_process+0x2ea>
 8010e76:	bf00      	nop
 8010e78:	0801abb4 	.word	0x0801abb4
 8010e7c:	0801adec 	.word	0x0801adec
 8010e80:	0801ac00 	.word	0x0801ac00
 8010e84:	20004e18 	.word	0x20004e18
 8010e88:	20004e10 	.word	0x20004e10
 8010e8c:	20004e0c 	.word	0x20004e0c
 8010e90:	0801ae08 	.word	0x0801ae08
 8010e94:	20004e19 	.word	0x20004e19
 8010e98:	2000bd30 	.word	0x2000bd30
 8010e9c:	20004dfc 	.word	0x20004dfc
 8010ea0:	0801ae28 	.word	0x0801ae28
 8010ea4:	0801ae40 	.word	0x0801ae40
        } else {
          pcb->rtime = 0;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00a      	beq.n	8010ed6 <tcp_process+0x30a>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ec6:	687a      	ldr	r2, [r7, #4]
 8010ec8:	6910      	ldr	r0, [r2, #16]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	6879      	ldr	r1, [r7, #4]
 8010ece:	4798      	blx	r3
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	76bb      	strb	r3, [r7, #26]
 8010ed4:	e001      	b.n	8010eda <tcp_process+0x30e>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010eda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ede:	f113 0f0d 	cmn.w	r3, #13
 8010ee2:	d102      	bne.n	8010eea <tcp_process+0x31e>
          return ERR_ABRT;
 8010ee4:	f06f 030c 	mvn.w	r3, #12
 8010ee8:	e250      	b.n	801138c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	8b5b      	ldrh	r3, [r3, #26]
 8010eee:	f043 0302 	orr.w	r3, r3, #2
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010ef8:	e23a      	b.n	8011370 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010efa:	4b9d      	ldr	r3, [pc, #628]	; (8011170 <tcp_process+0x5a4>)
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	f003 0310 	and.w	r3, r3, #16
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 8234 	beq.w	8011370 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f08:	4b9a      	ldr	r3, [pc, #616]	; (8011174 <tcp_process+0x5a8>)
 8010f0a:	6819      	ldr	r1, [r3, #0]
 8010f0c:	4b9a      	ldr	r3, [pc, #616]	; (8011178 <tcp_process+0x5ac>)
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	461a      	mov	r2, r3
 8010f12:	4b9a      	ldr	r3, [pc, #616]	; (801117c <tcp_process+0x5b0>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f18:	4b99      	ldr	r3, [pc, #612]	; (8011180 <tcp_process+0x5b4>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f1c:	885b      	ldrh	r3, [r3, #2]
 8010f1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f20:	4a97      	ldr	r2, [pc, #604]	; (8011180 <tcp_process+0x5b4>)
 8010f22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f24:	8812      	ldrh	r2, [r2, #0]
 8010f26:	b292      	uxth	r2, r2
 8010f28:	9202      	str	r2, [sp, #8]
 8010f2a:	9301      	str	r3, [sp, #4]
 8010f2c:	4b95      	ldr	r3, [pc, #596]	; (8011184 <tcp_process+0x5b8>)
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	4b95      	ldr	r3, [pc, #596]	; (8011188 <tcp_process+0x5bc>)
 8010f32:	4602      	mov	r2, r0
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f003 f8db 	bl	80140f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f40:	2b05      	cmp	r3, #5
 8010f42:	f200 8215 	bhi.w	8011370 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f002 fea5 	bl	8013c9c <tcp_rexmit_rto>
      break;
 8010f52:	e20d      	b.n	8011370 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010f54:	4b86      	ldr	r3, [pc, #536]	; (8011170 <tcp_process+0x5a4>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	f003 0310 	and.w	r3, r3, #16
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 80a1 	beq.w	80110a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f62:	4b84      	ldr	r3, [pc, #528]	; (8011174 <tcp_process+0x5a8>)
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	db7e      	blt.n	8011070 <tcp_process+0x4a4>
 8010f72:	4b80      	ldr	r3, [pc, #512]	; (8011174 <tcp_process+0x5a8>)
 8010f74:	681a      	ldr	r2, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	dc77      	bgt.n	8011070 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2204      	movs	r2, #4
 8010f84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d102      	bne.n	8010f94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010f8e:	23fa      	movs	r3, #250	; 0xfa
 8010f90:	76bb      	strb	r3, [r7, #26]
 8010f92:	e01d      	b.n	8010fd0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f98:	699b      	ldr	r3, [r3, #24]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d106      	bne.n	8010fac <tcp_process+0x3e0>
 8010f9e:	4b7b      	ldr	r3, [pc, #492]	; (801118c <tcp_process+0x5c0>)
 8010fa0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010fa4:	497a      	ldr	r1, [pc, #488]	; (8011190 <tcp_process+0x5c4>)
 8010fa6:	487b      	ldr	r0, [pc, #492]	; (8011194 <tcp_process+0x5c8>)
 8010fa8:	f006 fc48 	bl	801783c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00a      	beq.n	8010fcc <tcp_process+0x400>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	6910      	ldr	r0, [r2, #16]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	6879      	ldr	r1, [r7, #4]
 8010fc4:	4798      	blx	r3
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	76bb      	strb	r3, [r7, #26]
 8010fca:	e001      	b.n	8010fd0 <tcp_process+0x404>
 8010fcc:	23f0      	movs	r3, #240	; 0xf0
 8010fce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010fd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00a      	beq.n	8010fee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010fd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fdc:	f113 0f0d 	cmn.w	r3, #13
 8010fe0:	d002      	beq.n	8010fe8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f7fd fd1a 	bl	800ea1c <tcp_abort>
            }
            return ERR_ABRT;
 8010fe8:	f06f 030c 	mvn.w	r3, #12
 8010fec:	e1ce      	b.n	801138c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 fae0 	bl	80115b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010ff4:	4b68      	ldr	r3, [pc, #416]	; (8011198 <tcp_process+0x5cc>)
 8010ff6:	881b      	ldrh	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d005      	beq.n	8011008 <tcp_process+0x43c>
            recv_acked--;
 8010ffc:	4b66      	ldr	r3, [pc, #408]	; (8011198 <tcp_process+0x5cc>)
 8010ffe:	881b      	ldrh	r3, [r3, #0]
 8011000:	3b01      	subs	r3, #1
 8011002:	b29a      	uxth	r2, r3
 8011004:	4b64      	ldr	r3, [pc, #400]	; (8011198 <tcp_process+0x5cc>)
 8011006:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801100c:	009a      	lsls	r2, r3, #2
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	f241 111c 	movw	r1, #4380	; 0x111c
 8011018:	428b      	cmp	r3, r1
 801101a:	bf38      	it	cc
 801101c:	460b      	movcc	r3, r1
 801101e:	429a      	cmp	r2, r3
 8011020:	d204      	bcs.n	801102c <tcp_process+0x460>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	b29b      	uxth	r3, r3
 801102a:	e00d      	b.n	8011048 <tcp_process+0x47c>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011030:	005b      	lsls	r3, r3, #1
 8011032:	f241 121c 	movw	r2, #4380	; 0x111c
 8011036:	4293      	cmp	r3, r2
 8011038:	d904      	bls.n	8011044 <tcp_process+0x478>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	b29b      	uxth	r3, r3
 8011042:	e001      	b.n	8011048 <tcp_process+0x47c>
 8011044:	f241 131c 	movw	r3, #4380	; 0x111c
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801104e:	4b53      	ldr	r3, [pc, #332]	; (801119c <tcp_process+0x5d0>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	f003 0320 	and.w	r3, r3, #32
 8011056:	2b00      	cmp	r3, #0
 8011058:	d037      	beq.n	80110ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	8b5b      	ldrh	r3, [r3, #26]
 801105e:	f043 0302 	orr.w	r3, r3, #2
 8011062:	b29a      	uxth	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2207      	movs	r2, #7
 801106c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801106e:	e02c      	b.n	80110ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011070:	4b40      	ldr	r3, [pc, #256]	; (8011174 <tcp_process+0x5a8>)
 8011072:	6819      	ldr	r1, [r3, #0]
 8011074:	4b40      	ldr	r3, [pc, #256]	; (8011178 <tcp_process+0x5ac>)
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	461a      	mov	r2, r3
 801107a:	4b40      	ldr	r3, [pc, #256]	; (801117c <tcp_process+0x5b0>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011080:	4b3f      	ldr	r3, [pc, #252]	; (8011180 <tcp_process+0x5b4>)
 8011082:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011084:	885b      	ldrh	r3, [r3, #2]
 8011086:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011088:	4a3d      	ldr	r2, [pc, #244]	; (8011180 <tcp_process+0x5b4>)
 801108a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801108c:	8812      	ldrh	r2, [r2, #0]
 801108e:	b292      	uxth	r2, r2
 8011090:	9202      	str	r2, [sp, #8]
 8011092:	9301      	str	r3, [sp, #4]
 8011094:	4b3b      	ldr	r3, [pc, #236]	; (8011184 <tcp_process+0x5b8>)
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	4b3b      	ldr	r3, [pc, #236]	; (8011188 <tcp_process+0x5bc>)
 801109a:	4602      	mov	r2, r0
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f003 f827 	bl	80140f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80110a2:	e167      	b.n	8011374 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80110a4:	4b32      	ldr	r3, [pc, #200]	; (8011170 <tcp_process+0x5a4>)
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f003 0302 	and.w	r3, r3, #2
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f000 8161 	beq.w	8011374 <tcp_process+0x7a8>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110b6:	1e5a      	subs	r2, r3, #1
 80110b8:	4b30      	ldr	r3, [pc, #192]	; (801117c <tcp_process+0x5b0>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	429a      	cmp	r2, r3
 80110be:	f040 8159 	bne.w	8011374 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f002 fe0c 	bl	8013ce0 <tcp_rexmit>
      break;
 80110c8:	e154      	b.n	8011374 <tcp_process+0x7a8>
 80110ca:	e153      	b.n	8011374 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fa71 	bl	80115b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80110d2:	4b32      	ldr	r3, [pc, #200]	; (801119c <tcp_process+0x5d0>)
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	f003 0320 	and.w	r3, r3, #32
 80110da:	2b00      	cmp	r3, #0
 80110dc:	f000 814c 	beq.w	8011378 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	8b5b      	ldrh	r3, [r3, #26]
 80110e4:	f043 0302 	orr.w	r3, r3, #2
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2207      	movs	r2, #7
 80110f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110f4:	e140      	b.n	8011378 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 fa5c 	bl	80115b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110fc:	4b27      	ldr	r3, [pc, #156]	; (801119c <tcp_process+0x5d0>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f003 0320 	and.w	r3, r3, #32
 8011104:	2b00      	cmp	r3, #0
 8011106:	d071      	beq.n	80111ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011108:	4b19      	ldr	r3, [pc, #100]	; (8011170 <tcp_process+0x5a4>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	f003 0310 	and.w	r3, r3, #16
 8011110:	2b00      	cmp	r3, #0
 8011112:	d060      	beq.n	80111d6 <tcp_process+0x60a>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011118:	4b16      	ldr	r3, [pc, #88]	; (8011174 <tcp_process+0x5a8>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	429a      	cmp	r2, r3
 801111e:	d15a      	bne.n	80111d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011124:	2b00      	cmp	r3, #0
 8011126:	d156      	bne.n	80111d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	8b5b      	ldrh	r3, [r3, #26]
 801112c:	f043 0302 	orr.w	r3, r3, #2
 8011130:	b29a      	uxth	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7fe fdbe 	bl	800fcb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801113c:	4b18      	ldr	r3, [pc, #96]	; (80111a0 <tcp_process+0x5d4>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d105      	bne.n	8011152 <tcp_process+0x586>
 8011146:	4b16      	ldr	r3, [pc, #88]	; (80111a0 <tcp_process+0x5d4>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	4a14      	ldr	r2, [pc, #80]	; (80111a0 <tcp_process+0x5d4>)
 801114e:	6013      	str	r3, [r2, #0]
 8011150:	e02e      	b.n	80111b0 <tcp_process+0x5e4>
 8011152:	4b13      	ldr	r3, [pc, #76]	; (80111a0 <tcp_process+0x5d4>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	617b      	str	r3, [r7, #20]
 8011158:	e027      	b.n	80111aa <tcp_process+0x5de>
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	429a      	cmp	r2, r3
 8011162:	d11f      	bne.n	80111a4 <tcp_process+0x5d8>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	68da      	ldr	r2, [r3, #12]
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	60da      	str	r2, [r3, #12]
 801116c:	e020      	b.n	80111b0 <tcp_process+0x5e4>
 801116e:	bf00      	nop
 8011170:	20004e18 	.word	0x20004e18
 8011174:	20004e10 	.word	0x20004e10
 8011178:	20004e16 	.word	0x20004e16
 801117c:	20004e0c 	.word	0x20004e0c
 8011180:	20004dfc 	.word	0x20004dfc
 8011184:	20008628 	.word	0x20008628
 8011188:	2000862c 	.word	0x2000862c
 801118c:	0801abb4 	.word	0x0801abb4
 8011190:	0801ae54 	.word	0x0801ae54
 8011194:	0801ac00 	.word	0x0801ac00
 8011198:	20004e14 	.word	0x20004e14
 801119c:	20004e19 	.word	0x20004e19
 80111a0:	2000bd2c 	.word	0x2000bd2c
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	617b      	str	r3, [r7, #20]
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1d4      	bne.n	801115a <tcp_process+0x58e>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	60da      	str	r2, [r3, #12]
 80111b6:	4b77      	ldr	r3, [pc, #476]	; (8011394 <tcp_process+0x7c8>)
 80111b8:	2201      	movs	r2, #1
 80111ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	220a      	movs	r2, #10
 80111c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80111c2:	4b75      	ldr	r3, [pc, #468]	; (8011398 <tcp_process+0x7cc>)
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	60da      	str	r2, [r3, #12]
 80111ca:	4a73      	ldr	r2, [pc, #460]	; (8011398 <tcp_process+0x7cc>)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6013      	str	r3, [r2, #0]
 80111d0:	f003 f950 	bl	8014474 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80111d4:	e0d2      	b.n	801137c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	8b5b      	ldrh	r3, [r3, #26]
 80111da:	f043 0302 	orr.w	r3, r3, #2
 80111de:	b29a      	uxth	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2208      	movs	r2, #8
 80111e8:	751a      	strb	r2, [r3, #20]
      break;
 80111ea:	e0c7      	b.n	801137c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111ec:	4b6b      	ldr	r3, [pc, #428]	; (801139c <tcp_process+0x7d0>)
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	f003 0310 	and.w	r3, r3, #16
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f000 80c1 	beq.w	801137c <tcp_process+0x7b0>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111fe:	4b68      	ldr	r3, [pc, #416]	; (80113a0 <tcp_process+0x7d4>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	429a      	cmp	r2, r3
 8011204:	f040 80ba 	bne.w	801137c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801120c:	2b00      	cmp	r3, #0
 801120e:	f040 80b5 	bne.w	801137c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2206      	movs	r2, #6
 8011216:	751a      	strb	r2, [r3, #20]
      break;
 8011218:	e0b0      	b.n	801137c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f000 f9ca 	bl	80115b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011220:	4b60      	ldr	r3, [pc, #384]	; (80113a4 <tcp_process+0x7d8>)
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	f003 0320 	and.w	r3, r3, #32
 8011228:	2b00      	cmp	r3, #0
 801122a:	f000 80a9 	beq.w	8011380 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	8b5b      	ldrh	r3, [r3, #26]
 8011232:	f043 0302 	orr.w	r3, r3, #2
 8011236:	b29a      	uxth	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7fe fd3b 	bl	800fcb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011242:	4b59      	ldr	r3, [pc, #356]	; (80113a8 <tcp_process+0x7dc>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	429a      	cmp	r2, r3
 801124a:	d105      	bne.n	8011258 <tcp_process+0x68c>
 801124c:	4b56      	ldr	r3, [pc, #344]	; (80113a8 <tcp_process+0x7dc>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	4a55      	ldr	r2, [pc, #340]	; (80113a8 <tcp_process+0x7dc>)
 8011254:	6013      	str	r3, [r2, #0]
 8011256:	e013      	b.n	8011280 <tcp_process+0x6b4>
 8011258:	4b53      	ldr	r3, [pc, #332]	; (80113a8 <tcp_process+0x7dc>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	613b      	str	r3, [r7, #16]
 801125e:	e00c      	b.n	801127a <tcp_process+0x6ae>
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	429a      	cmp	r2, r3
 8011268:	d104      	bne.n	8011274 <tcp_process+0x6a8>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	68da      	ldr	r2, [r3, #12]
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	60da      	str	r2, [r3, #12]
 8011272:	e005      	b.n	8011280 <tcp_process+0x6b4>
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	613b      	str	r3, [r7, #16]
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1ef      	bne.n	8011260 <tcp_process+0x694>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	60da      	str	r2, [r3, #12]
 8011286:	4b43      	ldr	r3, [pc, #268]	; (8011394 <tcp_process+0x7c8>)
 8011288:	2201      	movs	r2, #1
 801128a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	220a      	movs	r2, #10
 8011290:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011292:	4b41      	ldr	r3, [pc, #260]	; (8011398 <tcp_process+0x7cc>)
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	60da      	str	r2, [r3, #12]
 801129a:	4a3f      	ldr	r2, [pc, #252]	; (8011398 <tcp_process+0x7cc>)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6013      	str	r3, [r2, #0]
 80112a0:	f003 f8e8 	bl	8014474 <tcp_timer_needed>
      }
      break;
 80112a4:	e06c      	b.n	8011380 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 f984 	bl	80115b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112ac:	4b3b      	ldr	r3, [pc, #236]	; (801139c <tcp_process+0x7d0>)
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	f003 0310 	and.w	r3, r3, #16
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d065      	beq.n	8011384 <tcp_process+0x7b8>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112bc:	4b38      	ldr	r3, [pc, #224]	; (80113a0 <tcp_process+0x7d4>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d15f      	bne.n	8011384 <tcp_process+0x7b8>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d15b      	bne.n	8011384 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7fe fcf3 	bl	800fcb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80112d2:	4b35      	ldr	r3, [pc, #212]	; (80113a8 <tcp_process+0x7dc>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d105      	bne.n	80112e8 <tcp_process+0x71c>
 80112dc:	4b32      	ldr	r3, [pc, #200]	; (80113a8 <tcp_process+0x7dc>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	4a31      	ldr	r2, [pc, #196]	; (80113a8 <tcp_process+0x7dc>)
 80112e4:	6013      	str	r3, [r2, #0]
 80112e6:	e013      	b.n	8011310 <tcp_process+0x744>
 80112e8:	4b2f      	ldr	r3, [pc, #188]	; (80113a8 <tcp_process+0x7dc>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	60fb      	str	r3, [r7, #12]
 80112ee:	e00c      	b.n	801130a <tcp_process+0x73e>
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d104      	bne.n	8011304 <tcp_process+0x738>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	68da      	ldr	r2, [r3, #12]
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	60da      	str	r2, [r3, #12]
 8011302:	e005      	b.n	8011310 <tcp_process+0x744>
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	60fb      	str	r3, [r7, #12]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1ef      	bne.n	80112f0 <tcp_process+0x724>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	60da      	str	r2, [r3, #12]
 8011316:	4b1f      	ldr	r3, [pc, #124]	; (8011394 <tcp_process+0x7c8>)
 8011318:	2201      	movs	r2, #1
 801131a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	220a      	movs	r2, #10
 8011320:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011322:	4b1d      	ldr	r3, [pc, #116]	; (8011398 <tcp_process+0x7cc>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	60da      	str	r2, [r3, #12]
 801132a:	4a1b      	ldr	r2, [pc, #108]	; (8011398 <tcp_process+0x7cc>)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	f003 f8a0 	bl	8014474 <tcp_timer_needed>
      }
      break;
 8011334:	e026      	b.n	8011384 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f93c 	bl	80115b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801133c:	4b17      	ldr	r3, [pc, #92]	; (801139c <tcp_process+0x7d0>)
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	f003 0310 	and.w	r3, r3, #16
 8011344:	2b00      	cmp	r3, #0
 8011346:	d01f      	beq.n	8011388 <tcp_process+0x7bc>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801134c:	4b14      	ldr	r3, [pc, #80]	; (80113a0 <tcp_process+0x7d4>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	429a      	cmp	r2, r3
 8011352:	d119      	bne.n	8011388 <tcp_process+0x7bc>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011358:	2b00      	cmp	r3, #0
 801135a:	d115      	bne.n	8011388 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801135c:	4b11      	ldr	r3, [pc, #68]	; (80113a4 <tcp_process+0x7d8>)
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	f043 0310 	orr.w	r3, r3, #16
 8011364:	b2da      	uxtb	r2, r3
 8011366:	4b0f      	ldr	r3, [pc, #60]	; (80113a4 <tcp_process+0x7d8>)
 8011368:	701a      	strb	r2, [r3, #0]
      }
      break;
 801136a:	e00d      	b.n	8011388 <tcp_process+0x7bc>
    default:
      break;
 801136c:	bf00      	nop
 801136e:	e00c      	b.n	801138a <tcp_process+0x7be>
      break;
 8011370:	bf00      	nop
 8011372:	e00a      	b.n	801138a <tcp_process+0x7be>
      break;
 8011374:	bf00      	nop
 8011376:	e008      	b.n	801138a <tcp_process+0x7be>
      break;
 8011378:	bf00      	nop
 801137a:	e006      	b.n	801138a <tcp_process+0x7be>
      break;
 801137c:	bf00      	nop
 801137e:	e004      	b.n	801138a <tcp_process+0x7be>
      break;
 8011380:	bf00      	nop
 8011382:	e002      	b.n	801138a <tcp_process+0x7be>
      break;
 8011384:	bf00      	nop
 8011386:	e000      	b.n	801138a <tcp_process+0x7be>
      break;
 8011388:	bf00      	nop
  }
  return ERR_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3724      	adds	r7, #36	; 0x24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd90      	pop	{r4, r7, pc}
 8011394:	2000bd28 	.word	0x2000bd28
 8011398:	2000bd3c 	.word	0x2000bd3c
 801139c:	20004e18 	.word	0x20004e18
 80113a0:	20004e10 	.word	0x20004e10
 80113a4:	20004e19 	.word	0x20004e19
 80113a8:	2000bd2c 	.word	0x2000bd2c

080113ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80113ac:	b590      	push	{r4, r7, lr}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d106      	bne.n	80113ca <tcp_oos_insert_segment+0x1e>
 80113bc:	4b3b      	ldr	r3, [pc, #236]	; (80114ac <tcp_oos_insert_segment+0x100>)
 80113be:	f240 421f 	movw	r2, #1055	; 0x41f
 80113c2:	493b      	ldr	r1, [pc, #236]	; (80114b0 <tcp_oos_insert_segment+0x104>)
 80113c4:	483b      	ldr	r0, [pc, #236]	; (80114b4 <tcp_oos_insert_segment+0x108>)
 80113c6:	f006 fa39 	bl	801783c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	899b      	ldrh	r3, [r3, #12]
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fb f986 	bl	800c6e4 <lwip_htons>
 80113d8:	4603      	mov	r3, r0
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	f003 0301 	and.w	r3, r3, #1
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d028      	beq.n	8011436 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80113e4:	6838      	ldr	r0, [r7, #0]
 80113e6:	f7fe f997 	bl	800f718 <tcp_segs_free>
    next = NULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	603b      	str	r3, [r7, #0]
 80113ee:	e056      	b.n	801149e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	899b      	ldrh	r3, [r3, #12]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fb f973 	bl	800c6e4 <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	b2db      	uxtb	r3, r3
 8011402:	f003 0301 	and.w	r3, r3, #1
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00d      	beq.n	8011426 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	899b      	ldrh	r3, [r3, #12]
 8011410:	b29c      	uxth	r4, r3
 8011412:	2001      	movs	r0, #1
 8011414:	f7fb f966 	bl	800c6e4 <lwip_htons>
 8011418:	4603      	mov	r3, r0
 801141a:	461a      	mov	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	4322      	orrs	r2, r4
 8011422:	b292      	uxth	r2, r2
 8011424:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f7fe f986 	bl	800f742 <tcp_seg_free>
    while (next &&
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00e      	beq.n	801145a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	891b      	ldrh	r3, [r3, #8]
 8011440:	461a      	mov	r2, r3
 8011442:	4b1d      	ldr	r3, [pc, #116]	; (80114b8 <tcp_oos_insert_segment+0x10c>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	441a      	add	r2, r3
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	8909      	ldrh	r1, [r1, #8]
 8011452:	440b      	add	r3, r1
 8011454:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011456:	2b00      	cmp	r3, #0
 8011458:	daca      	bge.n	80113f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d01e      	beq.n	801149e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	891b      	ldrh	r3, [r3, #8]
 8011464:	461a      	mov	r2, r3
 8011466:	4b14      	ldr	r3, [pc, #80]	; (80114b8 <tcp_oos_insert_segment+0x10c>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	441a      	add	r2, r3
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011474:	2b00      	cmp	r3, #0
 8011476:	dd12      	ble.n	801149e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	b29a      	uxth	r2, r3
 8011480:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <tcp_oos_insert_segment+0x10c>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	b29b      	uxth	r3, r3
 8011486:	1ad3      	subs	r3, r2, r3
 8011488:	b29a      	uxth	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685a      	ldr	r2, [r3, #4]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	891b      	ldrh	r3, [r3, #8]
 8011496:	4619      	mov	r1, r3
 8011498:	4610      	mov	r0, r2
 801149a:	f7fc fb49 	bl	800db30 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	601a      	str	r2, [r3, #0]
}
 80114a4:	bf00      	nop
 80114a6:	3714      	adds	r7, #20
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd90      	pop	{r4, r7, pc}
 80114ac:	0801abb4 	.word	0x0801abb4
 80114b0:	0801ae74 	.word	0x0801ae74
 80114b4:	0801ac00 	.word	0x0801ac00
 80114b8:	20004e0c 	.word	0x20004e0c

080114bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80114bc:	b5b0      	push	{r4, r5, r7, lr}
 80114be:	b086      	sub	sp, #24
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80114ca:	e03e      	b.n	801154a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fc fd3c 	bl	800df58 <pbuf_clen>
 80114e0:	4603      	mov	r3, r0
 80114e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114ea:	8a7a      	ldrh	r2, [r7, #18]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d906      	bls.n	80114fe <tcp_free_acked_segments+0x42>
 80114f0:	4b2a      	ldr	r3, [pc, #168]	; (801159c <tcp_free_acked_segments+0xe0>)
 80114f2:	f240 4257 	movw	r2, #1111	; 0x457
 80114f6:	492a      	ldr	r1, [pc, #168]	; (80115a0 <tcp_free_acked_segments+0xe4>)
 80114f8:	482a      	ldr	r0, [pc, #168]	; (80115a4 <tcp_free_acked_segments+0xe8>)
 80114fa:	f006 f99f 	bl	801783c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011504:	8a7b      	ldrh	r3, [r7, #18]
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	b29a      	uxth	r2, r3
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	891a      	ldrh	r2, [r3, #8]
 8011514:	4b24      	ldr	r3, [pc, #144]	; (80115a8 <tcp_free_acked_segments+0xec>)
 8011516:	881b      	ldrh	r3, [r3, #0]
 8011518:	4413      	add	r3, r2
 801151a:	b29a      	uxth	r2, r3
 801151c:	4b22      	ldr	r3, [pc, #136]	; (80115a8 <tcp_free_acked_segments+0xec>)
 801151e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011520:	6978      	ldr	r0, [r7, #20]
 8011522:	f7fe f90e 	bl	800f742 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801152c:	2b00      	cmp	r3, #0
 801152e:	d00c      	beq.n	801154a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d109      	bne.n	801154a <tcp_free_acked_segments+0x8e>
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d106      	bne.n	801154a <tcp_free_acked_segments+0x8e>
 801153c:	4b17      	ldr	r3, [pc, #92]	; (801159c <tcp_free_acked_segments+0xe0>)
 801153e:	f240 4261 	movw	r2, #1121	; 0x461
 8011542:	491a      	ldr	r1, [pc, #104]	; (80115ac <tcp_free_acked_segments+0xf0>)
 8011544:	4817      	ldr	r0, [pc, #92]	; (80115a4 <tcp_free_acked_segments+0xe8>)
 8011546:	f006 f979 	bl	801783c <iprintf>
  while (seg_list != NULL &&
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d020      	beq.n	8011592 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	4618      	mov	r0, r3
 8011558:	f7fb f8d9 	bl	800c70e <lwip_htonl>
 801155c:	4604      	mov	r4, r0
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	891b      	ldrh	r3, [r3, #8]
 8011562:	461d      	mov	r5, r3
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	899b      	ldrh	r3, [r3, #12]
 801156a:	b29b      	uxth	r3, r3
 801156c:	4618      	mov	r0, r3
 801156e:	f7fb f8b9 	bl	800c6e4 <lwip_htons>
 8011572:	4603      	mov	r3, r0
 8011574:	b2db      	uxtb	r3, r3
 8011576:	f003 0303 	and.w	r3, r3, #3
 801157a:	2b00      	cmp	r3, #0
 801157c:	d001      	beq.n	8011582 <tcp_free_acked_segments+0xc6>
 801157e:	2301      	movs	r3, #1
 8011580:	e000      	b.n	8011584 <tcp_free_acked_segments+0xc8>
 8011582:	2300      	movs	r3, #0
 8011584:	442b      	add	r3, r5
 8011586:	18e2      	adds	r2, r4, r3
 8011588:	4b09      	ldr	r3, [pc, #36]	; (80115b0 <tcp_free_acked_segments+0xf4>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801158e:	2b00      	cmp	r3, #0
 8011590:	dd9c      	ble.n	80114cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011592:	68bb      	ldr	r3, [r7, #8]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bdb0      	pop	{r4, r5, r7, pc}
 801159c:	0801abb4 	.word	0x0801abb4
 80115a0:	0801ae9c 	.word	0x0801ae9c
 80115a4:	0801ac00 	.word	0x0801ac00
 80115a8:	20004e14 	.word	0x20004e14
 80115ac:	0801aec4 	.word	0x0801aec4
 80115b0:	20004e10 	.word	0x20004e10

080115b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80115b4:	b5b0      	push	{r4, r5, r7, lr}
 80115b6:	b094      	sub	sp, #80	; 0x50
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d106      	bne.n	80115d4 <tcp_receive+0x20>
 80115c6:	4ba6      	ldr	r3, [pc, #664]	; (8011860 <tcp_receive+0x2ac>)
 80115c8:	f240 427b 	movw	r2, #1147	; 0x47b
 80115cc:	49a5      	ldr	r1, [pc, #660]	; (8011864 <tcp_receive+0x2b0>)
 80115ce:	48a6      	ldr	r0, [pc, #664]	; (8011868 <tcp_receive+0x2b4>)
 80115d0:	f006 f934 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	7d1b      	ldrb	r3, [r3, #20]
 80115d8:	2b03      	cmp	r3, #3
 80115da:	d806      	bhi.n	80115ea <tcp_receive+0x36>
 80115dc:	4ba0      	ldr	r3, [pc, #640]	; (8011860 <tcp_receive+0x2ac>)
 80115de:	f240 427c 	movw	r2, #1148	; 0x47c
 80115e2:	49a2      	ldr	r1, [pc, #648]	; (801186c <tcp_receive+0x2b8>)
 80115e4:	48a0      	ldr	r0, [pc, #640]	; (8011868 <tcp_receive+0x2b4>)
 80115e6:	f006 f929 	bl	801783c <iprintf>

  if (flags & TCP_ACK) {
 80115ea:	4ba1      	ldr	r3, [pc, #644]	; (8011870 <tcp_receive+0x2bc>)
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	f003 0310 	and.w	r3, r3, #16
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f000 8263 	beq.w	8011abe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115fe:	461a      	mov	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011604:	4413      	add	r3, r2
 8011606:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801160c:	4b99      	ldr	r3, [pc, #612]	; (8011874 <tcp_receive+0x2c0>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	2b00      	cmp	r3, #0
 8011614:	db1b      	blt.n	801164e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801161a:	4b96      	ldr	r3, [pc, #600]	; (8011874 <tcp_receive+0x2c0>)
 801161c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801161e:	429a      	cmp	r2, r3
 8011620:	d106      	bne.n	8011630 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011626:	4b94      	ldr	r3, [pc, #592]	; (8011878 <tcp_receive+0x2c4>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	1ad3      	subs	r3, r2, r3
 801162c:	2b00      	cmp	r3, #0
 801162e:	db0e      	blt.n	801164e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011634:	4b90      	ldr	r3, [pc, #576]	; (8011878 <tcp_receive+0x2c4>)
 8011636:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011638:	429a      	cmp	r2, r3
 801163a:	d125      	bne.n	8011688 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801163c:	4b8f      	ldr	r3, [pc, #572]	; (801187c <tcp_receive+0x2c8>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	89db      	ldrh	r3, [r3, #14]
 8011642:	b29a      	uxth	r2, r3
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801164a:	429a      	cmp	r2, r3
 801164c:	d91c      	bls.n	8011688 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801164e:	4b8b      	ldr	r3, [pc, #556]	; (801187c <tcp_receive+0x2c8>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	89db      	ldrh	r3, [r3, #14]
 8011654:	b29a      	uxth	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011668:	429a      	cmp	r2, r3
 801166a:	d205      	bcs.n	8011678 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011678:	4b7e      	ldr	r3, [pc, #504]	; (8011874 <tcp_receive+0x2c0>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011680:	4b7d      	ldr	r3, [pc, #500]	; (8011878 <tcp_receive+0x2c4>)
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011688:	4b7b      	ldr	r3, [pc, #492]	; (8011878 <tcp_receive+0x2c4>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	2b00      	cmp	r3, #0
 8011694:	dc58      	bgt.n	8011748 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011696:	4b7a      	ldr	r3, [pc, #488]	; (8011880 <tcp_receive+0x2cc>)
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d14b      	bne.n	8011736 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80116a8:	4413      	add	r3, r2
 80116aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d142      	bne.n	8011736 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	db3d      	blt.n	8011736 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116be:	4b6e      	ldr	r3, [pc, #440]	; (8011878 <tcp_receive+0x2c4>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d137      	bne.n	8011736 <tcp_receive+0x182>
              found_dupack = 1;
 80116c6:	2301      	movs	r3, #1
 80116c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116d0:	2bff      	cmp	r3, #255	; 0xff
 80116d2:	d007      	beq.n	80116e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116da:	3301      	adds	r3, #1
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116ea:	2b03      	cmp	r3, #3
 80116ec:	d91b      	bls.n	8011726 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f8:	4413      	add	r3, r2
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011702:	429a      	cmp	r2, r3
 8011704:	d30a      	bcc.n	801171c <tcp_receive+0x168>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011710:	4413      	add	r3, r2
 8011712:	b29a      	uxth	r2, r3
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801171a:	e004      	b.n	8011726 <tcp_receive+0x172>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801172c:	2b02      	cmp	r3, #2
 801172e:	d902      	bls.n	8011736 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f002 fb41 	bl	8013db8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011738:	2b00      	cmp	r3, #0
 801173a:	f040 8160 	bne.w	80119fe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011746:	e15a      	b.n	80119fe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011748:	4b4b      	ldr	r3, [pc, #300]	; (8011878 <tcp_receive+0x2c4>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	3b01      	subs	r3, #1
 8011754:	2b00      	cmp	r3, #0
 8011756:	f2c0 814d 	blt.w	80119f4 <tcp_receive+0x440>
 801175a:	4b47      	ldr	r3, [pc, #284]	; (8011878 <tcp_receive+0x2c4>)
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011762:	1ad3      	subs	r3, r2, r3
 8011764:	2b00      	cmp	r3, #0
 8011766:	f300 8145 	bgt.w	80119f4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	8b5b      	ldrh	r3, [r3, #26]
 801176e:	f003 0304 	and.w	r3, r3, #4
 8011772:	2b00      	cmp	r3, #0
 8011774:	d010      	beq.n	8011798 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	8b5b      	ldrh	r3, [r3, #26]
 801177a:	f023 0304 	bic.w	r3, r3, #4
 801177e:	b29a      	uxth	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2200      	movs	r2, #0
 801179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80117a6:	10db      	asrs	r3, r3, #3
 80117a8:	b21b      	sxth	r3, r3
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	4413      	add	r3, r2
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	b21a      	sxth	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80117c0:	4b2d      	ldr	r3, [pc, #180]	; (8011878 <tcp_receive+0x2c4>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	1ad3      	subs	r3, r2, r3
 80117ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80117d8:	4b27      	ldr	r3, [pc, #156]	; (8011878 <tcp_receive+0x2c4>)
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b03      	cmp	r3, #3
 80117e6:	f240 8096 	bls.w	8011916 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d244      	bcs.n	8011884 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8b5b      	ldrh	r3, [r3, #26]
 80117fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011802:	2b00      	cmp	r3, #0
 8011804:	d001      	beq.n	801180a <tcp_receive+0x256>
 8011806:	2301      	movs	r3, #1
 8011808:	e000      	b.n	801180c <tcp_receive+0x258>
 801180a:	2302      	movs	r3, #2
 801180c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011810:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801181a:	fb12 f303 	smulbb	r3, r2, r3
 801181e:	b29b      	uxth	r3, r3
 8011820:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011822:	4293      	cmp	r3, r2
 8011824:	bf28      	it	cs
 8011826:	4613      	movcs	r3, r2
 8011828:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011830:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011832:	4413      	add	r3, r2
 8011834:	b29a      	uxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801183c:	429a      	cmp	r2, r3
 801183e:	d309      	bcc.n	8011854 <tcp_receive+0x2a0>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011848:	4413      	add	r3, r2
 801184a:	b29a      	uxth	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011852:	e060      	b.n	8011916 <tcp_receive+0x362>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801185a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801185e:	e05a      	b.n	8011916 <tcp_receive+0x362>
 8011860:	0801abb4 	.word	0x0801abb4
 8011864:	0801aee4 	.word	0x0801aee4
 8011868:	0801ac00 	.word	0x0801ac00
 801186c:	0801af00 	.word	0x0801af00
 8011870:	20004e18 	.word	0x20004e18
 8011874:	20004e0c 	.word	0x20004e0c
 8011878:	20004e10 	.word	0x20004e10
 801187c:	20004dfc 	.word	0x20004dfc
 8011880:	20004e16 	.word	0x20004e16
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801188a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801188c:	4413      	add	r3, r2
 801188e:	b29a      	uxth	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011896:	429a      	cmp	r2, r3
 8011898:	d309      	bcc.n	80118ae <tcp_receive+0x2fa>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80118a2:	4413      	add	r3, r2
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80118ac:	e004      	b.n	80118b8 <tcp_receive+0x304>
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d326      	bcc.n	8011916 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118e8:	4413      	add	r3, r2
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d30a      	bcc.n	801190c <tcp_receive+0x358>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011900:	4413      	add	r3, r2
 8011902:	b29a      	uxth	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801190a:	e004      	b.n	8011916 <tcp_receive+0x362>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191e:	4a98      	ldr	r2, [pc, #608]	; (8011b80 <tcp_receive+0x5cc>)
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7ff fdcb 	bl	80114bc <tcp_free_acked_segments>
 8011926:	4602      	mov	r2, r0
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011934:	4a93      	ldr	r2, [pc, #588]	; (8011b84 <tcp_receive+0x5d0>)
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7ff fdc0 	bl	80114bc <tcp_free_acked_segments>
 801193c:	4602      	mov	r2, r0
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011946:	2b00      	cmp	r3, #0
 8011948:	d104      	bne.n	8011954 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011950:	861a      	strh	r2, [r3, #48]	; 0x30
 8011952:	e002      	b.n	801195a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011964:	2b00      	cmp	r3, #0
 8011966:	d103      	bne.n	8011970 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011976:	4b84      	ldr	r3, [pc, #528]	; (8011b88 <tcp_receive+0x5d4>)
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	4413      	add	r3, r2
 801197c:	b29a      	uxth	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801198c:	2b00      	cmp	r3, #0
 801198e:	d035      	beq.n	80119fc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011994:	2b00      	cmp	r3, #0
 8011996:	d118      	bne.n	80119ca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801199c:	2b00      	cmp	r3, #0
 801199e:	d00c      	beq.n	80119ba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7fa feae 	bl	800c70e <lwip_htonl>
 80119b2:	4603      	mov	r3, r0
 80119b4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	dc20      	bgt.n	80119fc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	8b5b      	ldrh	r3, [r3, #26]
 80119be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119c8:	e018      	b.n	80119fc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fa fe99 	bl	800c70e <lwip_htonl>
 80119dc:	4603      	mov	r3, r0
 80119de:	1ae3      	subs	r3, r4, r3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	dc0b      	bgt.n	80119fc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	8b5b      	ldrh	r3, [r3, #26]
 80119e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119f2:	e003      	b.n	80119fc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f002 fbcd 	bl	8014194 <tcp_send_empty_ack>
 80119fa:	e000      	b.n	80119fe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119fc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d05b      	beq.n	8011abe <tcp_receive+0x50a>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a0a:	4b60      	ldr	r3, [pc, #384]	; (8011b8c <tcp_receive+0x5d8>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	1ad3      	subs	r3, r2, r3
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	da54      	bge.n	8011abe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011a14:	4b5e      	ldr	r3, [pc, #376]	; (8011b90 <tcp_receive+0x5dc>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011a28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a32:	10db      	asrs	r3, r3, #3
 8011a34:	b21b      	sxth	r3, r3
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a4c:	4413      	add	r3, r2
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	b21a      	sxth	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011a56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	da05      	bge.n	8011a6a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a62:	425b      	negs	r3, r3
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011a6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a74:	109b      	asrs	r3, r3, #2
 8011a76:	b21b      	sxth	r3, r3
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a8e:	4413      	add	r3, r2
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	b21a      	sxth	r2, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a9e:	10db      	asrs	r3, r3, #3
 8011aa0:	b21b      	sxth	r3, r3
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	4413      	add	r3, r2
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	b21a      	sxth	r2, r3
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011abe:	4b35      	ldr	r3, [pc, #212]	; (8011b94 <tcp_receive+0x5e0>)
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	f000 84e1 	beq.w	801248a <tcp_receive+0xed6>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	7d1b      	ldrb	r3, [r3, #20]
 8011acc:	2b06      	cmp	r3, #6
 8011ace:	f200 84dc 	bhi.w	801248a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ad6:	4b30      	ldr	r3, [pc, #192]	; (8011b98 <tcp_receive+0x5e4>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	1ad3      	subs	r3, r2, r3
 8011adc:	3b01      	subs	r3, #1
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f2c0 808e 	blt.w	8011c00 <tcp_receive+0x64c>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ae8:	4b2a      	ldr	r3, [pc, #168]	; (8011b94 <tcp_receive+0x5e0>)
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	4619      	mov	r1, r3
 8011aee:	4b2a      	ldr	r3, [pc, #168]	; (8011b98 <tcp_receive+0x5e4>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	440b      	add	r3, r1
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	3301      	adds	r3, #1
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f300 8081 	bgt.w	8011c00 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011afe:	4b27      	ldr	r3, [pc, #156]	; (8011b9c <tcp_receive+0x5e8>)
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b08:	4b23      	ldr	r3, [pc, #140]	; (8011b98 <tcp_receive+0x5e4>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011b10:	4b22      	ldr	r3, [pc, #136]	; (8011b9c <tcp_receive+0x5e8>)
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d106      	bne.n	8011b26 <tcp_receive+0x572>
 8011b18:	4b21      	ldr	r3, [pc, #132]	; (8011ba0 <tcp_receive+0x5ec>)
 8011b1a:	f240 5294 	movw	r2, #1428	; 0x594
 8011b1e:	4921      	ldr	r1, [pc, #132]	; (8011ba4 <tcp_receive+0x5f0>)
 8011b20:	4821      	ldr	r0, [pc, #132]	; (8011ba8 <tcp_receive+0x5f4>)
 8011b22:	f005 fe8b 	bl	801783c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d906      	bls.n	8011b3e <tcp_receive+0x58a>
 8011b30:	4b1b      	ldr	r3, [pc, #108]	; (8011ba0 <tcp_receive+0x5ec>)
 8011b32:	f240 5295 	movw	r2, #1429	; 0x595
 8011b36:	491d      	ldr	r1, [pc, #116]	; (8011bac <tcp_receive+0x5f8>)
 8011b38:	481b      	ldr	r0, [pc, #108]	; (8011ba8 <tcp_receive+0x5f4>)
 8011b3a:	f005 fe7f 	bl	801783c <iprintf>
      off = (u16_t)off32;
 8011b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011b44:	4b15      	ldr	r3, [pc, #84]	; (8011b9c <tcp_receive+0x5e8>)
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	891b      	ldrh	r3, [r3, #8]
 8011b4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d906      	bls.n	8011b60 <tcp_receive+0x5ac>
 8011b52:	4b13      	ldr	r3, [pc, #76]	; (8011ba0 <tcp_receive+0x5ec>)
 8011b54:	f240 5297 	movw	r2, #1431	; 0x597
 8011b58:	4915      	ldr	r1, [pc, #84]	; (8011bb0 <tcp_receive+0x5fc>)
 8011b5a:	4813      	ldr	r0, [pc, #76]	; (8011ba8 <tcp_receive+0x5f4>)
 8011b5c:	f005 fe6e 	bl	801783c <iprintf>
      inseg.len -= off;
 8011b60:	4b0e      	ldr	r3, [pc, #56]	; (8011b9c <tcp_receive+0x5e8>)
 8011b62:	891a      	ldrh	r2, [r3, #8]
 8011b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	4b0b      	ldr	r3, [pc, #44]	; (8011b9c <tcp_receive+0x5e8>)
 8011b6e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011b70:	4b0a      	ldr	r3, [pc, #40]	; (8011b9c <tcp_receive+0x5e8>)
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	891a      	ldrh	r2, [r3, #8]
 8011b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011b7e:	e029      	b.n	8011bd4 <tcp_receive+0x620>
 8011b80:	0801af1c 	.word	0x0801af1c
 8011b84:	0801af24 	.word	0x0801af24
 8011b88:	20004e14 	.word	0x20004e14
 8011b8c:	20004e10 	.word	0x20004e10
 8011b90:	2000bd30 	.word	0x2000bd30
 8011b94:	20004e16 	.word	0x20004e16
 8011b98:	20004e0c 	.word	0x20004e0c
 8011b9c:	20004dec 	.word	0x20004dec
 8011ba0:	0801abb4 	.word	0x0801abb4
 8011ba4:	0801af2c 	.word	0x0801af2c
 8011ba8:	0801ac00 	.word	0x0801ac00
 8011bac:	0801af3c 	.word	0x0801af3c
 8011bb0:	0801af4c 	.word	0x0801af4c
        off -= p->len;
 8011bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bb6:	895b      	ldrh	r3, [r3, #10]
 8011bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bbc:	1ad3      	subs	r3, r2, r3
 8011bbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011bc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bca:	2200      	movs	r2, #0
 8011bcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d8e9      	bhi.n	8011bb4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011be4:	4619      	mov	r1, r3
 8011be6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011be8:	f7fc f8a2 	bl	800dd30 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf0:	4a91      	ldr	r2, [pc, #580]	; (8011e38 <tcp_receive+0x884>)
 8011bf2:	6013      	str	r3, [r2, #0]
 8011bf4:	4b91      	ldr	r3, [pc, #580]	; (8011e3c <tcp_receive+0x888>)
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	4a8f      	ldr	r2, [pc, #572]	; (8011e38 <tcp_receive+0x884>)
 8011bfa:	6812      	ldr	r2, [r2, #0]
 8011bfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bfe:	e00d      	b.n	8011c1c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011c00:	4b8d      	ldr	r3, [pc, #564]	; (8011e38 <tcp_receive+0x884>)
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c08:	1ad3      	subs	r3, r2, r3
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da06      	bge.n	8011c1c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	8b5b      	ldrh	r3, [r3, #26]
 8011c12:	f043 0302 	orr.w	r3, r3, #2
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c1c:	4b86      	ldr	r3, [pc, #536]	; (8011e38 <tcp_receive+0x884>)
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c24:	1ad3      	subs	r3, r2, r3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f2c0 842a 	blt.w	8012480 <tcp_receive+0xecc>
 8011c2c:	4b82      	ldr	r3, [pc, #520]	; (8011e38 <tcp_receive+0x884>)
 8011c2e:	681a      	ldr	r2, [r3, #0]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c34:	6879      	ldr	r1, [r7, #4]
 8011c36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c38:	440b      	add	r3, r1
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f300 841e 	bgt.w	8012480 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c48:	4b7b      	ldr	r3, [pc, #492]	; (8011e38 <tcp_receive+0x884>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	f040 829a 	bne.w	8012186 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011c52:	4b7a      	ldr	r3, [pc, #488]	; (8011e3c <tcp_receive+0x888>)
 8011c54:	891c      	ldrh	r4, [r3, #8]
 8011c56:	4b79      	ldr	r3, [pc, #484]	; (8011e3c <tcp_receive+0x888>)
 8011c58:	68db      	ldr	r3, [r3, #12]
 8011c5a:	899b      	ldrh	r3, [r3, #12]
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7fa fd40 	bl	800c6e4 <lwip_htons>
 8011c64:	4603      	mov	r3, r0
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	f003 0303 	and.w	r3, r3, #3
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d001      	beq.n	8011c74 <tcp_receive+0x6c0>
 8011c70:	2301      	movs	r3, #1
 8011c72:	e000      	b.n	8011c76 <tcp_receive+0x6c2>
 8011c74:	2300      	movs	r3, #0
 8011c76:	4423      	add	r3, r4
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	4b71      	ldr	r3, [pc, #452]	; (8011e40 <tcp_receive+0x88c>)
 8011c7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c82:	4b6f      	ldr	r3, [pc, #444]	; (8011e40 <tcp_receive+0x88c>)
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d275      	bcs.n	8011d76 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c8a:	4b6c      	ldr	r3, [pc, #432]	; (8011e3c <tcp_receive+0x888>)
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	899b      	ldrh	r3, [r3, #12]
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fa fd26 	bl	800c6e4 <lwip_htons>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	f003 0301 	and.w	r3, r3, #1
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d01f      	beq.n	8011ce4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011ca4:	4b65      	ldr	r3, [pc, #404]	; (8011e3c <tcp_receive+0x888>)
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	899b      	ldrh	r3, [r3, #12]
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	b21b      	sxth	r3, r3
 8011cae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011cb2:	b21c      	sxth	r4, r3
 8011cb4:	4b61      	ldr	r3, [pc, #388]	; (8011e3c <tcp_receive+0x888>)
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	899b      	ldrh	r3, [r3, #12]
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fa fd11 	bl	800c6e4 <lwip_htons>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fa fd08 	bl	800c6e4 <lwip_htons>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	b21b      	sxth	r3, r3
 8011cd8:	4323      	orrs	r3, r4
 8011cda:	b21a      	sxth	r2, r3
 8011cdc:	4b57      	ldr	r3, [pc, #348]	; (8011e3c <tcp_receive+0x888>)
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	b292      	uxth	r2, r2
 8011ce2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ce8:	4b54      	ldr	r3, [pc, #336]	; (8011e3c <tcp_receive+0x888>)
 8011cea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011cec:	4b53      	ldr	r3, [pc, #332]	; (8011e3c <tcp_receive+0x888>)
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	899b      	ldrh	r3, [r3, #12]
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fa fcf5 	bl	800c6e4 <lwip_htons>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	f003 0302 	and.w	r3, r3, #2
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d005      	beq.n	8011d12 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011d06:	4b4d      	ldr	r3, [pc, #308]	; (8011e3c <tcp_receive+0x888>)
 8011d08:	891b      	ldrh	r3, [r3, #8]
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	4b4b      	ldr	r3, [pc, #300]	; (8011e3c <tcp_receive+0x888>)
 8011d10:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011d12:	4b4a      	ldr	r3, [pc, #296]	; (8011e3c <tcp_receive+0x888>)
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	4a49      	ldr	r2, [pc, #292]	; (8011e3c <tcp_receive+0x888>)
 8011d18:	8912      	ldrh	r2, [r2, #8]
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fb ff07 	bl	800db30 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011d22:	4b46      	ldr	r3, [pc, #280]	; (8011e3c <tcp_receive+0x888>)
 8011d24:	891c      	ldrh	r4, [r3, #8]
 8011d26:	4b45      	ldr	r3, [pc, #276]	; (8011e3c <tcp_receive+0x888>)
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	899b      	ldrh	r3, [r3, #12]
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fa fcd8 	bl	800c6e4 <lwip_htons>
 8011d34:	4603      	mov	r3, r0
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	f003 0303 	and.w	r3, r3, #3
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d001      	beq.n	8011d44 <tcp_receive+0x790>
 8011d40:	2301      	movs	r3, #1
 8011d42:	e000      	b.n	8011d46 <tcp_receive+0x792>
 8011d44:	2300      	movs	r3, #0
 8011d46:	4423      	add	r3, r4
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	4b3d      	ldr	r3, [pc, #244]	; (8011e40 <tcp_receive+0x88c>)
 8011d4c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d4e:	4b3c      	ldr	r3, [pc, #240]	; (8011e40 <tcp_receive+0x88c>)
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	4b38      	ldr	r3, [pc, #224]	; (8011e38 <tcp_receive+0x884>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	441a      	add	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d62:	440b      	add	r3, r1
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d006      	beq.n	8011d76 <tcp_receive+0x7c2>
 8011d68:	4b36      	ldr	r3, [pc, #216]	; (8011e44 <tcp_receive+0x890>)
 8011d6a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011d6e:	4936      	ldr	r1, [pc, #216]	; (8011e48 <tcp_receive+0x894>)
 8011d70:	4836      	ldr	r0, [pc, #216]	; (8011e4c <tcp_receive+0x898>)
 8011d72:	f005 fd63 	bl	801783c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f000 80e7 	beq.w	8011f4e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d80:	4b2e      	ldr	r3, [pc, #184]	; (8011e3c <tcp_receive+0x888>)
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	899b      	ldrh	r3, [r3, #12]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fa fcab 	bl	800c6e4 <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f003 0301 	and.w	r3, r3, #1
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d010      	beq.n	8011dbc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d9a:	e00a      	b.n	8011db2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f7fd fcc8 	bl	800f742 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1f0      	bne.n	8011d9c <tcp_receive+0x7e8>
 8011dba:	e0c8      	b.n	8011f4e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011dc2:	e052      	b.n	8011e6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc6:	68db      	ldr	r3, [r3, #12]
 8011dc8:	899b      	ldrh	r3, [r3, #12]
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fa fc89 	bl	800c6e4 <lwip_htons>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	f003 0301 	and.w	r3, r3, #1
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d03d      	beq.n	8011e5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011dde:	4b17      	ldr	r3, [pc, #92]	; (8011e3c <tcp_receive+0x888>)
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	899b      	ldrh	r3, [r3, #12]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fa fc7c 	bl	800c6e4 <lwip_htons>
 8011dec:	4603      	mov	r3, r0
 8011dee:	b2db      	uxtb	r3, r3
 8011df0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d130      	bne.n	8011e5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011df8:	4b10      	ldr	r3, [pc, #64]	; (8011e3c <tcp_receive+0x888>)
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	899b      	ldrh	r3, [r3, #12]
 8011dfe:	b29c      	uxth	r4, r3
 8011e00:	2001      	movs	r0, #1
 8011e02:	f7fa fc6f 	bl	800c6e4 <lwip_htons>
 8011e06:	4603      	mov	r3, r0
 8011e08:	461a      	mov	r2, r3
 8011e0a:	4b0c      	ldr	r3, [pc, #48]	; (8011e3c <tcp_receive+0x888>)
 8011e0c:	68db      	ldr	r3, [r3, #12]
 8011e0e:	4322      	orrs	r2, r4
 8011e10:	b292      	uxth	r2, r2
 8011e12:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011e14:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <tcp_receive+0x888>)
 8011e16:	891c      	ldrh	r4, [r3, #8]
 8011e18:	4b08      	ldr	r3, [pc, #32]	; (8011e3c <tcp_receive+0x888>)
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	899b      	ldrh	r3, [r3, #12]
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fa fc5f 	bl	800c6e4 <lwip_htons>
 8011e26:	4603      	mov	r3, r0
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	f003 0303 	and.w	r3, r3, #3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00e      	beq.n	8011e50 <tcp_receive+0x89c>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e00d      	b.n	8011e52 <tcp_receive+0x89e>
 8011e36:	bf00      	nop
 8011e38:	20004e0c 	.word	0x20004e0c
 8011e3c:	20004dec 	.word	0x20004dec
 8011e40:	20004e16 	.word	0x20004e16
 8011e44:	0801abb4 	.word	0x0801abb4
 8011e48:	0801af5c 	.word	0x0801af5c
 8011e4c:	0801ac00 	.word	0x0801ac00
 8011e50:	2300      	movs	r3, #0
 8011e52:	4423      	add	r3, r4
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	4b98      	ldr	r3, [pc, #608]	; (80120b8 <tcp_receive+0xb04>)
 8011e58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011e64:	6938      	ldr	r0, [r7, #16]
 8011e66:	f7fd fc6c 	bl	800f742 <tcp_seg_free>
            while (next &&
 8011e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00e      	beq.n	8011e8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011e70:	4b91      	ldr	r3, [pc, #580]	; (80120b8 <tcp_receive+0xb04>)
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	461a      	mov	r2, r3
 8011e76:	4b91      	ldr	r3, [pc, #580]	; (80120bc <tcp_receive+0xb08>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	441a      	add	r2, r3
 8011e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e84:	8909      	ldrh	r1, [r1, #8]
 8011e86:	440b      	add	r3, r1
 8011e88:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	da9a      	bge.n	8011dc4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d059      	beq.n	8011f48 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011e94:	4b88      	ldr	r3, [pc, #544]	; (80120b8 <tcp_receive+0xb04>)
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	461a      	mov	r2, r3
 8011e9a:	4b88      	ldr	r3, [pc, #544]	; (80120bc <tcp_receive+0xb08>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	441a      	add	r2, r3
 8011ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	dd4d      	ble.n	8011f48 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	4b81      	ldr	r3, [pc, #516]	; (80120bc <tcp_receive+0xb08>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	1ad3      	subs	r3, r2, r3
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	4b80      	ldr	r3, [pc, #512]	; (80120c0 <tcp_receive+0xb0c>)
 8011ec0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ec2:	4b7f      	ldr	r3, [pc, #508]	; (80120c0 <tcp_receive+0xb0c>)
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	899b      	ldrh	r3, [r3, #12]
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fa fc0a 	bl	800c6e4 <lwip_htons>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	f003 0302 	and.w	r3, r3, #2
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d005      	beq.n	8011ee8 <tcp_receive+0x934>
                inseg.len -= 1;
 8011edc:	4b78      	ldr	r3, [pc, #480]	; (80120c0 <tcp_receive+0xb0c>)
 8011ede:	891b      	ldrh	r3, [r3, #8]
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	b29a      	uxth	r2, r3
 8011ee4:	4b76      	ldr	r3, [pc, #472]	; (80120c0 <tcp_receive+0xb0c>)
 8011ee6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011ee8:	4b75      	ldr	r3, [pc, #468]	; (80120c0 <tcp_receive+0xb0c>)
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	4a74      	ldr	r2, [pc, #464]	; (80120c0 <tcp_receive+0xb0c>)
 8011eee:	8912      	ldrh	r2, [r2, #8]
 8011ef0:	4611      	mov	r1, r2
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fb fe1c 	bl	800db30 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011ef8:	4b71      	ldr	r3, [pc, #452]	; (80120c0 <tcp_receive+0xb0c>)
 8011efa:	891c      	ldrh	r4, [r3, #8]
 8011efc:	4b70      	ldr	r3, [pc, #448]	; (80120c0 <tcp_receive+0xb0c>)
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	899b      	ldrh	r3, [r3, #12]
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fa fbed 	bl	800c6e4 <lwip_htons>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	f003 0303 	and.w	r3, r3, #3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <tcp_receive+0x966>
 8011f16:	2301      	movs	r3, #1
 8011f18:	e000      	b.n	8011f1c <tcp_receive+0x968>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	4423      	add	r3, r4
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	4b65      	ldr	r3, [pc, #404]	; (80120b8 <tcp_receive+0xb04>)
 8011f22:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011f24:	4b64      	ldr	r3, [pc, #400]	; (80120b8 <tcp_receive+0xb04>)
 8011f26:	881b      	ldrh	r3, [r3, #0]
 8011f28:	461a      	mov	r2, r3
 8011f2a:	4b64      	ldr	r3, [pc, #400]	; (80120bc <tcp_receive+0xb08>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	441a      	add	r2, r3
 8011f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d006      	beq.n	8011f48 <tcp_receive+0x994>
 8011f3a:	4b62      	ldr	r3, [pc, #392]	; (80120c4 <tcp_receive+0xb10>)
 8011f3c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011f40:	4961      	ldr	r1, [pc, #388]	; (80120c8 <tcp_receive+0xb14>)
 8011f42:	4862      	ldr	r0, [pc, #392]	; (80120cc <tcp_receive+0xb18>)
 8011f44:	f005 fc7a 	bl	801783c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f4c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011f4e:	4b5a      	ldr	r3, [pc, #360]	; (80120b8 <tcp_receive+0xb04>)
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	461a      	mov	r2, r3
 8011f54:	4b59      	ldr	r3, [pc, #356]	; (80120bc <tcp_receive+0xb08>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	441a      	add	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f62:	4b55      	ldr	r3, [pc, #340]	; (80120b8 <tcp_receive+0xb04>)
 8011f64:	881b      	ldrh	r3, [r3, #0]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d206      	bcs.n	8011f78 <tcp_receive+0x9c4>
 8011f6a:	4b56      	ldr	r3, [pc, #344]	; (80120c4 <tcp_receive+0xb10>)
 8011f6c:	f240 6207 	movw	r2, #1543	; 0x607
 8011f70:	4957      	ldr	r1, [pc, #348]	; (80120d0 <tcp_receive+0xb1c>)
 8011f72:	4856      	ldr	r0, [pc, #344]	; (80120cc <tcp_receive+0xb18>)
 8011f74:	f005 fc62 	bl	801783c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f7c:	4b4e      	ldr	r3, [pc, #312]	; (80120b8 <tcp_receive+0xb04>)
 8011f7e:	881b      	ldrh	r3, [r3, #0]
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7fc feb5 	bl	800ecf8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011f8e:	4b4c      	ldr	r3, [pc, #304]	; (80120c0 <tcp_receive+0xb0c>)
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	891b      	ldrh	r3, [r3, #8]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d006      	beq.n	8011fa6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f98:	4b49      	ldr	r3, [pc, #292]	; (80120c0 <tcp_receive+0xb0c>)
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	4a4d      	ldr	r2, [pc, #308]	; (80120d4 <tcp_receive+0xb20>)
 8011f9e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011fa0:	4b47      	ldr	r3, [pc, #284]	; (80120c0 <tcp_receive+0xb0c>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011fa6:	4b46      	ldr	r3, [pc, #280]	; (80120c0 <tcp_receive+0xb0c>)
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	899b      	ldrh	r3, [r3, #12]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fa fb98 	bl	800c6e4 <lwip_htons>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	f003 0301 	and.w	r3, r3, #1
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 80b8 	beq.w	8012132 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011fc2:	4b45      	ldr	r3, [pc, #276]	; (80120d8 <tcp_receive+0xb24>)
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	f043 0320 	orr.w	r3, r3, #32
 8011fca:	b2da      	uxtb	r2, r3
 8011fcc:	4b42      	ldr	r3, [pc, #264]	; (80120d8 <tcp_receive+0xb24>)
 8011fce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011fd0:	e0af      	b.n	8012132 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fd6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	4a36      	ldr	r2, [pc, #216]	; (80120bc <tcp_receive+0xb08>)
 8011fe2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	891b      	ldrh	r3, [r3, #8]
 8011fe8:	461c      	mov	r4, r3
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	899b      	ldrh	r3, [r3, #12]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fa fb76 	bl	800c6e4 <lwip_htons>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	f003 0303 	and.w	r3, r3, #3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d001      	beq.n	8012008 <tcp_receive+0xa54>
 8012004:	2301      	movs	r3, #1
 8012006:	e000      	b.n	801200a <tcp_receive+0xa56>
 8012008:	2300      	movs	r3, #0
 801200a:	191a      	adds	r2, r3, r4
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012010:	441a      	add	r2, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801201a:	461c      	mov	r4, r3
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	891b      	ldrh	r3, [r3, #8]
 8012020:	461d      	mov	r5, r3
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	899b      	ldrh	r3, [r3, #12]
 8012028:	b29b      	uxth	r3, r3
 801202a:	4618      	mov	r0, r3
 801202c:	f7fa fb5a 	bl	800c6e4 <lwip_htons>
 8012030:	4603      	mov	r3, r0
 8012032:	b2db      	uxtb	r3, r3
 8012034:	f003 0303 	and.w	r3, r3, #3
 8012038:	2b00      	cmp	r3, #0
 801203a:	d001      	beq.n	8012040 <tcp_receive+0xa8c>
 801203c:	2301      	movs	r3, #1
 801203e:	e000      	b.n	8012042 <tcp_receive+0xa8e>
 8012040:	2300      	movs	r3, #0
 8012042:	442b      	add	r3, r5
 8012044:	429c      	cmp	r4, r3
 8012046:	d206      	bcs.n	8012056 <tcp_receive+0xaa2>
 8012048:	4b1e      	ldr	r3, [pc, #120]	; (80120c4 <tcp_receive+0xb10>)
 801204a:	f240 622b 	movw	r2, #1579	; 0x62b
 801204e:	4923      	ldr	r1, [pc, #140]	; (80120dc <tcp_receive+0xb28>)
 8012050:	481e      	ldr	r0, [pc, #120]	; (80120cc <tcp_receive+0xb18>)
 8012052:	f005 fbf3 	bl	801783c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	891b      	ldrh	r3, [r3, #8]
 801205a:	461c      	mov	r4, r3
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	899b      	ldrh	r3, [r3, #12]
 8012062:	b29b      	uxth	r3, r3
 8012064:	4618      	mov	r0, r3
 8012066:	f7fa fb3d 	bl	800c6e4 <lwip_htons>
 801206a:	4603      	mov	r3, r0
 801206c:	b2db      	uxtb	r3, r3
 801206e:	f003 0303 	and.w	r3, r3, #3
 8012072:	2b00      	cmp	r3, #0
 8012074:	d001      	beq.n	801207a <tcp_receive+0xac6>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <tcp_receive+0xac8>
 801207a:	2300      	movs	r3, #0
 801207c:	1919      	adds	r1, r3, r4
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012082:	b28b      	uxth	r3, r1
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	b29a      	uxth	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7fc fe33 	bl	800ecf8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	891b      	ldrh	r3, [r3, #8]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d028      	beq.n	80120ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801209c:	4b0d      	ldr	r3, [pc, #52]	; (80120d4 <tcp_receive+0xb20>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d01d      	beq.n	80120e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80120a4:	4b0b      	ldr	r3, [pc, #44]	; (80120d4 <tcp_receive+0xb20>)
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	4619      	mov	r1, r3
 80120ae:	4610      	mov	r0, r2
 80120b0:	f7fb ff92 	bl	800dfd8 <pbuf_cat>
 80120b4:	e018      	b.n	80120e8 <tcp_receive+0xb34>
 80120b6:	bf00      	nop
 80120b8:	20004e16 	.word	0x20004e16
 80120bc:	20004e0c 	.word	0x20004e0c
 80120c0:	20004dec 	.word	0x20004dec
 80120c4:	0801abb4 	.word	0x0801abb4
 80120c8:	0801af94 	.word	0x0801af94
 80120cc:	0801ac00 	.word	0x0801ac00
 80120d0:	0801afd0 	.word	0x0801afd0
 80120d4:	20004e1c 	.word	0x20004e1c
 80120d8:	20004e19 	.word	0x20004e19
 80120dc:	0801aff0 	.word	0x0801aff0
            } else {
              recv_data = cseg->p;
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	4a70      	ldr	r2, [pc, #448]	; (80122a8 <tcp_receive+0xcf4>)
 80120e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	2200      	movs	r2, #0
 80120ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	68db      	ldr	r3, [r3, #12]
 80120f2:	899b      	ldrh	r3, [r3, #12]
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fa faf4 	bl	800c6e4 <lwip_htons>
 80120fc:	4603      	mov	r3, r0
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	f003 0301 	and.w	r3, r3, #1
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00d      	beq.n	8012124 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012108:	4b68      	ldr	r3, [pc, #416]	; (80122ac <tcp_receive+0xcf8>)
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	f043 0320 	orr.w	r3, r3, #32
 8012110:	b2da      	uxtb	r2, r3
 8012112:	4b66      	ldr	r3, [pc, #408]	; (80122ac <tcp_receive+0xcf8>)
 8012114:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	7d1b      	ldrb	r3, [r3, #20]
 801211a:	2b04      	cmp	r3, #4
 801211c:	d102      	bne.n	8012124 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2207      	movs	r2, #7
 8012122:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801212c:	68b8      	ldr	r0, [r7, #8]
 801212e:	f7fd fb08 	bl	800f742 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012136:	2b00      	cmp	r3, #0
 8012138:	d008      	beq.n	801214c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	685a      	ldr	r2, [r3, #4]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012146:	429a      	cmp	r2, r3
 8012148:	f43f af43 	beq.w	8011fd2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	8b5b      	ldrh	r3, [r3, #26]
 8012150:	f003 0301 	and.w	r3, r3, #1
 8012154:	2b00      	cmp	r3, #0
 8012156:	d00e      	beq.n	8012176 <tcp_receive+0xbc2>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	8b5b      	ldrh	r3, [r3, #26]
 801215c:	f023 0301 	bic.w	r3, r3, #1
 8012160:	b29a      	uxth	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	835a      	strh	r2, [r3, #26]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	8b5b      	ldrh	r3, [r3, #26]
 801216a:	f043 0302 	orr.w	r3, r3, #2
 801216e:	b29a      	uxth	r2, r3
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012174:	e188      	b.n	8012488 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	8b5b      	ldrh	r3, [r3, #26]
 801217a:	f043 0301 	orr.w	r3, r3, #1
 801217e:	b29a      	uxth	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012184:	e180      	b.n	8012488 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801218e:	4848      	ldr	r0, [pc, #288]	; (80122b0 <tcp_receive+0xcfc>)
 8012190:	f7fd faf0 	bl	800f774 <tcp_seg_copy>
 8012194:	4602      	mov	r2, r0
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	675a      	str	r2, [r3, #116]	; 0x74
 801219a:	e16d      	b.n	8012478 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801219c:	2300      	movs	r3, #0
 801219e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80121a6:	e157      	b.n	8012458 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80121a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	685a      	ldr	r2, [r3, #4]
 80121ae:	4b41      	ldr	r3, [pc, #260]	; (80122b4 <tcp_receive+0xd00>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d11d      	bne.n	80121f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80121b6:	4b3e      	ldr	r3, [pc, #248]	; (80122b0 <tcp_receive+0xcfc>)
 80121b8:	891a      	ldrh	r2, [r3, #8]
 80121ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121bc:	891b      	ldrh	r3, [r3, #8]
 80121be:	429a      	cmp	r2, r3
 80121c0:	f240 814f 	bls.w	8012462 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121c4:	483a      	ldr	r0, [pc, #232]	; (80122b0 <tcp_receive+0xcfc>)
 80121c6:	f7fd fad5 	bl	800f774 <tcp_seg_copy>
 80121ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f000 8149 	beq.w	8012466 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80121d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d003      	beq.n	80121e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80121da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121dc:	697a      	ldr	r2, [r7, #20]
 80121de:	601a      	str	r2, [r3, #0]
 80121e0:	e002      	b.n	80121e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80121e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121ea:	6978      	ldr	r0, [r7, #20]
 80121ec:	f7ff f8de 	bl	80113ac <tcp_oos_insert_segment>
                }
                break;
 80121f0:	e139      	b.n	8012466 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80121f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d117      	bne.n	8012228 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80121f8:	4b2e      	ldr	r3, [pc, #184]	; (80122b4 <tcp_receive+0xd00>)
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	1ad3      	subs	r3, r2, r3
 8012204:	2b00      	cmp	r3, #0
 8012206:	da57      	bge.n	80122b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012208:	4829      	ldr	r0, [pc, #164]	; (80122b0 <tcp_receive+0xcfc>)
 801220a:	f7fd fab3 	bl	800f774 <tcp_seg_copy>
 801220e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	2b00      	cmp	r3, #0
 8012214:	f000 8129 	beq.w	801246a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	69ba      	ldr	r2, [r7, #24]
 801221c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801221e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012220:	69b8      	ldr	r0, [r7, #24]
 8012222:	f7ff f8c3 	bl	80113ac <tcp_oos_insert_segment>
                  }
                  break;
 8012226:	e120      	b.n	801246a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012228:	4b22      	ldr	r3, [pc, #136]	; (80122b4 <tcp_receive+0xd00>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	3b01      	subs	r3, #1
 8012236:	2b00      	cmp	r3, #0
 8012238:	db3e      	blt.n	80122b8 <tcp_receive+0xd04>
 801223a:	4b1e      	ldr	r3, [pc, #120]	; (80122b4 <tcp_receive+0xd00>)
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	1ad3      	subs	r3, r2, r3
 8012246:	3301      	adds	r3, #1
 8012248:	2b00      	cmp	r3, #0
 801224a:	dc35      	bgt.n	80122b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801224c:	4818      	ldr	r0, [pc, #96]	; (80122b0 <tcp_receive+0xcfc>)
 801224e:	f7fd fa91 	bl	800f774 <tcp_seg_copy>
 8012252:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	2b00      	cmp	r3, #0
 8012258:	f000 8109 	beq.w	801246e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012264:	8912      	ldrh	r2, [r2, #8]
 8012266:	441a      	add	r2, r3
 8012268:	4b12      	ldr	r3, [pc, #72]	; (80122b4 <tcp_receive+0xd00>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	2b00      	cmp	r3, #0
 8012270:	dd12      	ble.n	8012298 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012272:	4b10      	ldr	r3, [pc, #64]	; (80122b4 <tcp_receive+0xd00>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	b29a      	uxth	r2, r3
 8012278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	b29b      	uxth	r3, r3
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	b29a      	uxth	r2, r3
 8012284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012286:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228a:	685a      	ldr	r2, [r3, #4]
 801228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228e:	891b      	ldrh	r3, [r3, #8]
 8012290:	4619      	mov	r1, r3
 8012292:	4610      	mov	r0, r2
 8012294:	f7fb fc4c 	bl	800db30 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801229a:	69fa      	ldr	r2, [r7, #28]
 801229c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801229e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122a0:	69f8      	ldr	r0, [r7, #28]
 80122a2:	f7ff f883 	bl	80113ac <tcp_oos_insert_segment>
                  }
                  break;
 80122a6:	e0e2      	b.n	801246e <tcp_receive+0xeba>
 80122a8:	20004e1c 	.word	0x20004e1c
 80122ac:	20004e19 	.word	0x20004e19
 80122b0:	20004dec 	.word	0x20004dec
 80122b4:	20004e0c 	.word	0x20004e0c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80122b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80122bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f040 80c6 	bne.w	8012452 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80122c6:	4b80      	ldr	r3, [pc, #512]	; (80124c8 <tcp_receive+0xf14>)
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f340 80bd 	ble.w	8012452 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80122d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	899b      	ldrh	r3, [r3, #12]
 80122de:	b29b      	uxth	r3, r3
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7fa f9ff 	bl	800c6e4 <lwip_htons>
 80122e6:	4603      	mov	r3, r0
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	f003 0301 	and.w	r3, r3, #1
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f040 80bf 	bne.w	8012472 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80122f4:	4875      	ldr	r0, [pc, #468]	; (80124cc <tcp_receive+0xf18>)
 80122f6:	f7fd fa3d 	bl	800f774 <tcp_seg_copy>
 80122fa:	4602      	mov	r2, r0
 80122fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	f000 80b6 	beq.w	8012476 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012312:	8912      	ldrh	r2, [r2, #8]
 8012314:	441a      	add	r2, r3
 8012316:	4b6c      	ldr	r3, [pc, #432]	; (80124c8 <tcp_receive+0xf14>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	2b00      	cmp	r3, #0
 801231e:	dd12      	ble.n	8012346 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012320:	4b69      	ldr	r3, [pc, #420]	; (80124c8 <tcp_receive+0xf14>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	b29a      	uxth	r2, r3
 8012326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	b29b      	uxth	r3, r3
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	b29a      	uxth	r2, r3
 8012332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012334:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012338:	685a      	ldr	r2, [r3, #4]
 801233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233c:	891b      	ldrh	r3, [r3, #8]
 801233e:	4619      	mov	r1, r3
 8012340:	4610      	mov	r0, r2
 8012342:	f7fb fbf5 	bl	800db30 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012346:	4b62      	ldr	r3, [pc, #392]	; (80124d0 <tcp_receive+0xf1c>)
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	461a      	mov	r2, r3
 801234c:	4b5e      	ldr	r3, [pc, #376]	; (80124c8 <tcp_receive+0xf14>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	441a      	add	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012356:	6879      	ldr	r1, [r7, #4]
 8012358:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801235a:	440b      	add	r3, r1
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	2b00      	cmp	r3, #0
 8012360:	f340 8089 	ble.w	8012476 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	899b      	ldrh	r3, [r3, #12]
 801236c:	b29b      	uxth	r3, r3
 801236e:	4618      	mov	r0, r3
 8012370:	f7fa f9b8 	bl	800c6e4 <lwip_htons>
 8012374:	4603      	mov	r3, r0
 8012376:	b2db      	uxtb	r3, r3
 8012378:	f003 0301 	and.w	r3, r3, #1
 801237c:	2b00      	cmp	r3, #0
 801237e:	d022      	beq.n	80123c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	899b      	ldrh	r3, [r3, #12]
 8012388:	b29b      	uxth	r3, r3
 801238a:	b21b      	sxth	r3, r3
 801238c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012390:	b21c      	sxth	r4, r3
 8012392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	899b      	ldrh	r3, [r3, #12]
 801239a:	b29b      	uxth	r3, r3
 801239c:	4618      	mov	r0, r3
 801239e:	f7fa f9a1 	bl	800c6e4 <lwip_htons>
 80123a2:	4603      	mov	r3, r0
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fa f998 	bl	800c6e4 <lwip_htons>
 80123b4:	4603      	mov	r3, r0
 80123b6:	b21b      	sxth	r3, r3
 80123b8:	4323      	orrs	r3, r4
 80123ba:	b21a      	sxth	r2, r3
 80123bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	b292      	uxth	r2, r2
 80123c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123d0:	4413      	add	r3, r2
 80123d2:	b299      	uxth	r1, r3
 80123d4:	4b3c      	ldr	r3, [pc, #240]	; (80124c8 <tcp_receive+0xf14>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	b29a      	uxth	r2, r3
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	1a8a      	subs	r2, r1, r2
 80123e0:	b292      	uxth	r2, r2
 80123e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80123e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	685a      	ldr	r2, [r3, #4]
 80123ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	891b      	ldrh	r3, [r3, #8]
 80123f0:	4619      	mov	r1, r3
 80123f2:	4610      	mov	r0, r2
 80123f4:	f7fb fb9c 	bl	800db30 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80123f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	891c      	ldrh	r4, [r3, #8]
 80123fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	899b      	ldrh	r3, [r3, #12]
 8012406:	b29b      	uxth	r3, r3
 8012408:	4618      	mov	r0, r3
 801240a:	f7fa f96b 	bl	800c6e4 <lwip_htons>
 801240e:	4603      	mov	r3, r0
 8012410:	b2db      	uxtb	r3, r3
 8012412:	f003 0303 	and.w	r3, r3, #3
 8012416:	2b00      	cmp	r3, #0
 8012418:	d001      	beq.n	801241e <tcp_receive+0xe6a>
 801241a:	2301      	movs	r3, #1
 801241c:	e000      	b.n	8012420 <tcp_receive+0xe6c>
 801241e:	2300      	movs	r3, #0
 8012420:	4423      	add	r3, r4
 8012422:	b29a      	uxth	r2, r3
 8012424:	4b2a      	ldr	r3, [pc, #168]	; (80124d0 <tcp_receive+0xf1c>)
 8012426:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012428:	4b29      	ldr	r3, [pc, #164]	; (80124d0 <tcp_receive+0xf1c>)
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	461a      	mov	r2, r3
 801242e:	4b26      	ldr	r3, [pc, #152]	; (80124c8 <tcp_receive+0xf14>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	441a      	add	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012438:	6879      	ldr	r1, [r7, #4]
 801243a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801243c:	440b      	add	r3, r1
 801243e:	429a      	cmp	r2, r3
 8012440:	d019      	beq.n	8012476 <tcp_receive+0xec2>
 8012442:	4b24      	ldr	r3, [pc, #144]	; (80124d4 <tcp_receive+0xf20>)
 8012444:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012448:	4923      	ldr	r1, [pc, #140]	; (80124d8 <tcp_receive+0xf24>)
 801244a:	4824      	ldr	r0, [pc, #144]	; (80124dc <tcp_receive+0xf28>)
 801244c:	f005 f9f6 	bl	801783c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012450:	e011      	b.n	8012476 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	63bb      	str	r3, [r7, #56]	; 0x38
 8012458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245a:	2b00      	cmp	r3, #0
 801245c:	f47f aea4 	bne.w	80121a8 <tcp_receive+0xbf4>
 8012460:	e00a      	b.n	8012478 <tcp_receive+0xec4>
                break;
 8012462:	bf00      	nop
 8012464:	e008      	b.n	8012478 <tcp_receive+0xec4>
                break;
 8012466:	bf00      	nop
 8012468:	e006      	b.n	8012478 <tcp_receive+0xec4>
                  break;
 801246a:	bf00      	nop
 801246c:	e004      	b.n	8012478 <tcp_receive+0xec4>
                  break;
 801246e:	bf00      	nop
 8012470:	e002      	b.n	8012478 <tcp_receive+0xec4>
                  break;
 8012472:	bf00      	nop
 8012474:	e000      	b.n	8012478 <tcp_receive+0xec4>
                break;
 8012476:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f001 fe8b 	bl	8014194 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801247e:	e003      	b.n	8012488 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f001 fe87 	bl	8014194 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012486:	e01a      	b.n	80124be <tcp_receive+0xf0a>
 8012488:	e019      	b.n	80124be <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801248a:	4b0f      	ldr	r3, [pc, #60]	; (80124c8 <tcp_receive+0xf14>)
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	2b00      	cmp	r3, #0
 8012496:	db0a      	blt.n	80124ae <tcp_receive+0xefa>
 8012498:	4b0b      	ldr	r3, [pc, #44]	; (80124c8 <tcp_receive+0xf14>)
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a0:	6879      	ldr	r1, [r7, #4]
 80124a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124a4:	440b      	add	r3, r1
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	3301      	adds	r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	dd07      	ble.n	80124be <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	8b5b      	ldrh	r3, [r3, #26]
 80124b2:	f043 0302 	orr.w	r3, r3, #2
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80124bc:	e7ff      	b.n	80124be <tcp_receive+0xf0a>
 80124be:	bf00      	nop
 80124c0:	3750      	adds	r7, #80	; 0x50
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bdb0      	pop	{r4, r5, r7, pc}
 80124c6:	bf00      	nop
 80124c8:	20004e0c 	.word	0x20004e0c
 80124cc:	20004dec 	.word	0x20004dec
 80124d0:	20004e16 	.word	0x20004e16
 80124d4:	0801abb4 	.word	0x0801abb4
 80124d8:	0801af5c 	.word	0x0801af5c
 80124dc:	0801ac00 	.word	0x0801ac00

080124e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80124e6:	4b15      	ldr	r3, [pc, #84]	; (801253c <tcp_get_next_optbyte+0x5c>)
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	1c5a      	adds	r2, r3, #1
 80124ec:	b291      	uxth	r1, r2
 80124ee:	4a13      	ldr	r2, [pc, #76]	; (801253c <tcp_get_next_optbyte+0x5c>)
 80124f0:	8011      	strh	r1, [r2, #0]
 80124f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80124f4:	4b12      	ldr	r3, [pc, #72]	; (8012540 <tcp_get_next_optbyte+0x60>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <tcp_get_next_optbyte+0x26>
 80124fc:	4b11      	ldr	r3, [pc, #68]	; (8012544 <tcp_get_next_optbyte+0x64>)
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	88fa      	ldrh	r2, [r7, #6]
 8012502:	429a      	cmp	r2, r3
 8012504:	d208      	bcs.n	8012518 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012506:	4b10      	ldr	r3, [pc, #64]	; (8012548 <tcp_get_next_optbyte+0x68>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	3314      	adds	r3, #20
 801250c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801250e:	88fb      	ldrh	r3, [r7, #6]
 8012510:	683a      	ldr	r2, [r7, #0]
 8012512:	4413      	add	r3, r2
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	e00b      	b.n	8012530 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012518:	88fb      	ldrh	r3, [r7, #6]
 801251a:	b2da      	uxtb	r2, r3
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <tcp_get_next_optbyte+0x64>)
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	b2db      	uxtb	r3, r3
 8012522:	1ad3      	subs	r3, r2, r3
 8012524:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012526:	4b06      	ldr	r3, [pc, #24]	; (8012540 <tcp_get_next_optbyte+0x60>)
 8012528:	681a      	ldr	r2, [r3, #0]
 801252a:	797b      	ldrb	r3, [r7, #5]
 801252c:	4413      	add	r3, r2
 801252e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012530:	4618      	mov	r0, r3
 8012532:	370c      	adds	r7, #12
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr
 801253c:	20004e08 	.word	0x20004e08
 8012540:	20004e04 	.word	0x20004e04
 8012544:	20004e02 	.word	0x20004e02
 8012548:	20004dfc 	.word	0x20004dfc

0801254c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d106      	bne.n	8012568 <tcp_parseopt+0x1c>
 801255a:	4b32      	ldr	r3, [pc, #200]	; (8012624 <tcp_parseopt+0xd8>)
 801255c:	f240 727d 	movw	r2, #1917	; 0x77d
 8012560:	4931      	ldr	r1, [pc, #196]	; (8012628 <tcp_parseopt+0xdc>)
 8012562:	4832      	ldr	r0, [pc, #200]	; (801262c <tcp_parseopt+0xe0>)
 8012564:	f005 f96a 	bl	801783c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012568:	4b31      	ldr	r3, [pc, #196]	; (8012630 <tcp_parseopt+0xe4>)
 801256a:	881b      	ldrh	r3, [r3, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d055      	beq.n	801261c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012570:	4b30      	ldr	r3, [pc, #192]	; (8012634 <tcp_parseopt+0xe8>)
 8012572:	2200      	movs	r2, #0
 8012574:	801a      	strh	r2, [r3, #0]
 8012576:	e045      	b.n	8012604 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012578:	f7ff ffb2 	bl	80124e0 <tcp_get_next_optbyte>
 801257c:	4603      	mov	r3, r0
 801257e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012580:	7bfb      	ldrb	r3, [r7, #15]
 8012582:	2b02      	cmp	r3, #2
 8012584:	d006      	beq.n	8012594 <tcp_parseopt+0x48>
 8012586:	2b02      	cmp	r3, #2
 8012588:	dc2b      	bgt.n	80125e2 <tcp_parseopt+0x96>
 801258a:	2b00      	cmp	r3, #0
 801258c:	d041      	beq.n	8012612 <tcp_parseopt+0xc6>
 801258e:	2b01      	cmp	r3, #1
 8012590:	d127      	bne.n	80125e2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012592:	e037      	b.n	8012604 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012594:	f7ff ffa4 	bl	80124e0 <tcp_get_next_optbyte>
 8012598:	4603      	mov	r3, r0
 801259a:	2b04      	cmp	r3, #4
 801259c:	d13b      	bne.n	8012616 <tcp_parseopt+0xca>
 801259e:	4b25      	ldr	r3, [pc, #148]	; (8012634 <tcp_parseopt+0xe8>)
 80125a0:	881b      	ldrh	r3, [r3, #0]
 80125a2:	3301      	adds	r3, #1
 80125a4:	4a22      	ldr	r2, [pc, #136]	; (8012630 <tcp_parseopt+0xe4>)
 80125a6:	8812      	ldrh	r2, [r2, #0]
 80125a8:	4293      	cmp	r3, r2
 80125aa:	da34      	bge.n	8012616 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80125ac:	f7ff ff98 	bl	80124e0 <tcp_get_next_optbyte>
 80125b0:	4603      	mov	r3, r0
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	021b      	lsls	r3, r3, #8
 80125b6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80125b8:	f7ff ff92 	bl	80124e0 <tcp_get_next_optbyte>
 80125bc:	4603      	mov	r3, r0
 80125be:	b29a      	uxth	r2, r3
 80125c0:	89bb      	ldrh	r3, [r7, #12]
 80125c2:	4313      	orrs	r3, r2
 80125c4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80125c6:	89bb      	ldrh	r3, [r7, #12]
 80125c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80125cc:	d804      	bhi.n	80125d8 <tcp_parseopt+0x8c>
 80125ce:	89bb      	ldrh	r3, [r7, #12]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d001      	beq.n	80125d8 <tcp_parseopt+0x8c>
 80125d4:	89ba      	ldrh	r2, [r7, #12]
 80125d6:	e001      	b.n	80125dc <tcp_parseopt+0x90>
 80125d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80125e0:	e010      	b.n	8012604 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80125e2:	f7ff ff7d 	bl	80124e0 <tcp_get_next_optbyte>
 80125e6:	4603      	mov	r3, r0
 80125e8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80125ea:	7afb      	ldrb	r3, [r7, #11]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d914      	bls.n	801261a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80125f0:	7afb      	ldrb	r3, [r7, #11]
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	4b0f      	ldr	r3, [pc, #60]	; (8012634 <tcp_parseopt+0xe8>)
 80125f6:	881b      	ldrh	r3, [r3, #0]
 80125f8:	4413      	add	r3, r2
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	3b02      	subs	r3, #2
 80125fe:	b29a      	uxth	r2, r3
 8012600:	4b0c      	ldr	r3, [pc, #48]	; (8012634 <tcp_parseopt+0xe8>)
 8012602:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012604:	4b0b      	ldr	r3, [pc, #44]	; (8012634 <tcp_parseopt+0xe8>)
 8012606:	881a      	ldrh	r2, [r3, #0]
 8012608:	4b09      	ldr	r3, [pc, #36]	; (8012630 <tcp_parseopt+0xe4>)
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	429a      	cmp	r2, r3
 801260e:	d3b3      	bcc.n	8012578 <tcp_parseopt+0x2c>
 8012610:	e004      	b.n	801261c <tcp_parseopt+0xd0>
          return;
 8012612:	bf00      	nop
 8012614:	e002      	b.n	801261c <tcp_parseopt+0xd0>
            return;
 8012616:	bf00      	nop
 8012618:	e000      	b.n	801261c <tcp_parseopt+0xd0>
            return;
 801261a:	bf00      	nop
      }
    }
  }
}
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	0801abb4 	.word	0x0801abb4
 8012628:	0801b018 	.word	0x0801b018
 801262c:	0801ac00 	.word	0x0801ac00
 8012630:	20004e00 	.word	0x20004e00
 8012634:	20004e08 	.word	0x20004e08

08012638 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012638:	b480      	push	{r7}
 801263a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801263c:	4b05      	ldr	r3, [pc, #20]	; (8012654 <tcp_trigger_input_pcb_close+0x1c>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	f043 0310 	orr.w	r3, r3, #16
 8012644:	b2da      	uxtb	r2, r3
 8012646:	4b03      	ldr	r3, [pc, #12]	; (8012654 <tcp_trigger_input_pcb_close+0x1c>)
 8012648:	701a      	strb	r2, [r3, #0]
}
 801264a:	bf00      	nop
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr
 8012654:	20004e19 	.word	0x20004e19

08012658 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d00a      	beq.n	8012680 <tcp_route+0x28>
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	7a1b      	ldrb	r3, [r3, #8]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d006      	beq.n	8012680 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	7a1b      	ldrb	r3, [r3, #8]
 8012676:	4618      	mov	r0, r3
 8012678:	f7fb f852 	bl	800d720 <netif_get_by_index>
 801267c:	4603      	mov	r3, r0
 801267e:	e003      	b.n	8012688 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f003 fc4b 	bl	8015f1c <ip4_route>
 8012686:	4603      	mov	r3, r0
  }
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012690:	b590      	push	{r4, r7, lr}
 8012692:	b087      	sub	sp, #28
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	603b      	str	r3, [r7, #0]
 801269c:	4613      	mov	r3, r2
 801269e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d105      	bne.n	80126b2 <tcp_create_segment+0x22>
 80126a6:	4b44      	ldr	r3, [pc, #272]	; (80127b8 <tcp_create_segment+0x128>)
 80126a8:	22a3      	movs	r2, #163	; 0xa3
 80126aa:	4944      	ldr	r1, [pc, #272]	; (80127bc <tcp_create_segment+0x12c>)
 80126ac:	4844      	ldr	r0, [pc, #272]	; (80127c0 <tcp_create_segment+0x130>)
 80126ae:	f005 f8c5 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d105      	bne.n	80126c4 <tcp_create_segment+0x34>
 80126b8:	4b3f      	ldr	r3, [pc, #252]	; (80127b8 <tcp_create_segment+0x128>)
 80126ba:	22a4      	movs	r2, #164	; 0xa4
 80126bc:	4941      	ldr	r1, [pc, #260]	; (80127c4 <tcp_create_segment+0x134>)
 80126be:	4840      	ldr	r0, [pc, #256]	; (80127c0 <tcp_create_segment+0x130>)
 80126c0:	f005 f8bc 	bl	801783c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80126c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80126c8:	009b      	lsls	r3, r3, #2
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	f003 0304 	and.w	r3, r3, #4
 80126d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80126d2:	2003      	movs	r0, #3
 80126d4:	f7fa fcbc 	bl	800d050 <memp_malloc>
 80126d8:	6138      	str	r0, [r7, #16]
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d104      	bne.n	80126ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80126e0:	68b8      	ldr	r0, [r7, #8]
 80126e2:	f7fb fbab 	bl	800de3c <pbuf_free>
    return NULL;
 80126e6:	2300      	movs	r3, #0
 80126e8:	e061      	b.n	80127ae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80126f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	2200      	movs	r2, #0
 80126f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	68ba      	ldr	r2, [r7, #8]
 80126fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	891a      	ldrh	r2, [r3, #8]
 8012702:	7dfb      	ldrb	r3, [r7, #23]
 8012704:	b29b      	uxth	r3, r3
 8012706:	429a      	cmp	r2, r3
 8012708:	d205      	bcs.n	8012716 <tcp_create_segment+0x86>
 801270a:	4b2b      	ldr	r3, [pc, #172]	; (80127b8 <tcp_create_segment+0x128>)
 801270c:	22b0      	movs	r2, #176	; 0xb0
 801270e:	492e      	ldr	r1, [pc, #184]	; (80127c8 <tcp_create_segment+0x138>)
 8012710:	482b      	ldr	r0, [pc, #172]	; (80127c0 <tcp_create_segment+0x130>)
 8012712:	f005 f893 	bl	801783c <iprintf>
  seg->len = p->tot_len - optlen;
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	891a      	ldrh	r2, [r3, #8]
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	b29b      	uxth	r3, r3
 801271e:	1ad3      	subs	r3, r2, r3
 8012720:	b29a      	uxth	r2, r3
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012726:	2114      	movs	r1, #20
 8012728:	68b8      	ldr	r0, [r7, #8]
 801272a:	f7fb faf1 	bl	800dd10 <pbuf_add_header>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d004      	beq.n	801273e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012734:	6938      	ldr	r0, [r7, #16]
 8012736:	f7fd f804 	bl	800f742 <tcp_seg_free>
    return NULL;
 801273a:	2300      	movs	r3, #0
 801273c:	e037      	b.n	80127ae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	685a      	ldr	r2, [r3, #4]
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	8ada      	ldrh	r2, [r3, #22]
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	68dc      	ldr	r4, [r3, #12]
 8012750:	4610      	mov	r0, r2
 8012752:	f7f9 ffc7 	bl	800c6e4 <lwip_htons>
 8012756:	4603      	mov	r3, r0
 8012758:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	8b1a      	ldrh	r2, [r3, #24]
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	68dc      	ldr	r4, [r3, #12]
 8012762:	4610      	mov	r0, r2
 8012764:	f7f9 ffbe 	bl	800c6e4 <lwip_htons>
 8012768:	4603      	mov	r3, r0
 801276a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	68dc      	ldr	r4, [r3, #12]
 8012770:	6838      	ldr	r0, [r7, #0]
 8012772:	f7f9 ffcc 	bl	800c70e <lwip_htonl>
 8012776:	4603      	mov	r3, r0
 8012778:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801277a:	7dfb      	ldrb	r3, [r7, #23]
 801277c:	089b      	lsrs	r3, r3, #2
 801277e:	b2db      	uxtb	r3, r3
 8012780:	b29b      	uxth	r3, r3
 8012782:	3305      	adds	r3, #5
 8012784:	b29b      	uxth	r3, r3
 8012786:	031b      	lsls	r3, r3, #12
 8012788:	b29a      	uxth	r2, r3
 801278a:	79fb      	ldrb	r3, [r7, #7]
 801278c:	b29b      	uxth	r3, r3
 801278e:	4313      	orrs	r3, r2
 8012790:	b29a      	uxth	r2, r3
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	68dc      	ldr	r4, [r3, #12]
 8012796:	4610      	mov	r0, r2
 8012798:	f7f9 ffa4 	bl	800c6e4 <lwip_htons>
 801279c:	4603      	mov	r3, r0
 801279e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	2200      	movs	r2, #0
 80127a6:	749a      	strb	r2, [r3, #18]
 80127a8:	2200      	movs	r2, #0
 80127aa:	74da      	strb	r2, [r3, #19]
  return seg;
 80127ac:	693b      	ldr	r3, [r7, #16]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	371c      	adds	r7, #28
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd90      	pop	{r4, r7, pc}
 80127b6:	bf00      	nop
 80127b8:	0801b034 	.word	0x0801b034
 80127bc:	0801b068 	.word	0x0801b068
 80127c0:	0801b088 	.word	0x0801b088
 80127c4:	0801b0b0 	.word	0x0801b0b0
 80127c8:	0801b0d4 	.word	0x0801b0d4

080127cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b086      	sub	sp, #24
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	607b      	str	r3, [r7, #4]
 80127d4:	4603      	mov	r3, r0
 80127d6:	73fb      	strb	r3, [r7, #15]
 80127d8:	460b      	mov	r3, r1
 80127da:	81bb      	strh	r3, [r7, #12]
 80127dc:	4613      	mov	r3, r2
 80127de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80127e0:	89bb      	ldrh	r3, [r7, #12]
 80127e2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d105      	bne.n	80127f6 <tcp_pbuf_prealloc+0x2a>
 80127ea:	4b30      	ldr	r3, [pc, #192]	; (80128ac <tcp_pbuf_prealloc+0xe0>)
 80127ec:	22e8      	movs	r2, #232	; 0xe8
 80127ee:	4930      	ldr	r1, [pc, #192]	; (80128b0 <tcp_pbuf_prealloc+0xe4>)
 80127f0:	4830      	ldr	r0, [pc, #192]	; (80128b4 <tcp_pbuf_prealloc+0xe8>)
 80127f2:	f005 f823 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80127f6:	6a3b      	ldr	r3, [r7, #32]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d105      	bne.n	8012808 <tcp_pbuf_prealloc+0x3c>
 80127fc:	4b2b      	ldr	r3, [pc, #172]	; (80128ac <tcp_pbuf_prealloc+0xe0>)
 80127fe:	22e9      	movs	r2, #233	; 0xe9
 8012800:	492d      	ldr	r1, [pc, #180]	; (80128b8 <tcp_pbuf_prealloc+0xec>)
 8012802:	482c      	ldr	r0, [pc, #176]	; (80128b4 <tcp_pbuf_prealloc+0xe8>)
 8012804:	f005 f81a 	bl	801783c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012808:	89ba      	ldrh	r2, [r7, #12]
 801280a:	897b      	ldrh	r3, [r7, #10]
 801280c:	429a      	cmp	r2, r3
 801280e:	d221      	bcs.n	8012854 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012814:	f003 0302 	and.w	r3, r3, #2
 8012818:	2b00      	cmp	r3, #0
 801281a:	d111      	bne.n	8012840 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801281c:	6a3b      	ldr	r3, [r7, #32]
 801281e:	8b5b      	ldrh	r3, [r3, #26]
 8012820:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012824:	2b00      	cmp	r3, #0
 8012826:	d115      	bne.n	8012854 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801282c:	2b00      	cmp	r3, #0
 801282e:	d007      	beq.n	8012840 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012830:	6a3b      	ldr	r3, [r7, #32]
 8012832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012834:	2b00      	cmp	r3, #0
 8012836:	d103      	bne.n	8012840 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012838:	6a3b      	ldr	r3, [r7, #32]
 801283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801283c:	2b00      	cmp	r3, #0
 801283e:	d009      	beq.n	8012854 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012840:	89bb      	ldrh	r3, [r7, #12]
 8012842:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012846:	f023 0203 	bic.w	r2, r3, #3
 801284a:	897b      	ldrh	r3, [r7, #10]
 801284c:	4293      	cmp	r3, r2
 801284e:	bf28      	it	cs
 8012850:	4613      	movcs	r3, r2
 8012852:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012854:	8af9      	ldrh	r1, [r7, #22]
 8012856:	7bfb      	ldrb	r3, [r7, #15]
 8012858:	f44f 7220 	mov.w	r2, #640	; 0x280
 801285c:	4618      	mov	r0, r3
 801285e:	f7fb f809 	bl	800d874 <pbuf_alloc>
 8012862:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d101      	bne.n	801286e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801286a:	2300      	movs	r3, #0
 801286c:	e019      	b.n	80128a2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d006      	beq.n	8012884 <tcp_pbuf_prealloc+0xb8>
 8012876:	4b0d      	ldr	r3, [pc, #52]	; (80128ac <tcp_pbuf_prealloc+0xe0>)
 8012878:	f240 120b 	movw	r2, #267	; 0x10b
 801287c:	490f      	ldr	r1, [pc, #60]	; (80128bc <tcp_pbuf_prealloc+0xf0>)
 801287e:	480d      	ldr	r0, [pc, #52]	; (80128b4 <tcp_pbuf_prealloc+0xe8>)
 8012880:	f004 ffdc 	bl	801783c <iprintf>
  *oversize = p->len - length;
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	895a      	ldrh	r2, [r3, #10]
 8012888:	89bb      	ldrh	r3, [r7, #12]
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	b29a      	uxth	r2, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	89ba      	ldrh	r2, [r7, #12]
 8012896:	811a      	strh	r2, [r3, #8]
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	891a      	ldrh	r2, [r3, #8]
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	815a      	strh	r2, [r3, #10]
  return p;
 80128a0:	693b      	ldr	r3, [r7, #16]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3718      	adds	r7, #24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	0801b034 	.word	0x0801b034
 80128b0:	0801b0ec 	.word	0x0801b0ec
 80128b4:	0801b088 	.word	0x0801b088
 80128b8:	0801b110 	.word	0x0801b110
 80128bc:	0801b130 	.word	0x0801b130

080128c0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	460b      	mov	r3, r1
 80128ca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d106      	bne.n	80128e0 <tcp_write_checks+0x20>
 80128d2:	4b33      	ldr	r3, [pc, #204]	; (80129a0 <tcp_write_checks+0xe0>)
 80128d4:	f240 1233 	movw	r2, #307	; 0x133
 80128d8:	4932      	ldr	r1, [pc, #200]	; (80129a4 <tcp_write_checks+0xe4>)
 80128da:	4833      	ldr	r0, [pc, #204]	; (80129a8 <tcp_write_checks+0xe8>)
 80128dc:	f004 ffae 	bl	801783c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	7d1b      	ldrb	r3, [r3, #20]
 80128e4:	2b04      	cmp	r3, #4
 80128e6:	d00e      	beq.n	8012906 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80128ec:	2b07      	cmp	r3, #7
 80128ee:	d00a      	beq.n	8012906 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80128f4:	2b02      	cmp	r3, #2
 80128f6:	d006      	beq.n	8012906 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80128fc:	2b03      	cmp	r3, #3
 80128fe:	d002      	beq.n	8012906 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012900:	f06f 030a 	mvn.w	r3, #10
 8012904:	e048      	b.n	8012998 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012906:	887b      	ldrh	r3, [r7, #2]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d101      	bne.n	8012910 <tcp_write_checks+0x50>
    return ERR_OK;
 801290c:	2300      	movs	r3, #0
 801290e:	e043      	b.n	8012998 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012916:	887a      	ldrh	r2, [r7, #2]
 8012918:	429a      	cmp	r2, r3
 801291a:	d909      	bls.n	8012930 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	8b5b      	ldrh	r3, [r3, #26]
 8012920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012924:	b29a      	uxth	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801292a:	f04f 33ff 	mov.w	r3, #4294967295
 801292e:	e033      	b.n	8012998 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012936:	2b08      	cmp	r3, #8
 8012938:	d909      	bls.n	801294e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	8b5b      	ldrh	r3, [r3, #26]
 801293e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012948:	f04f 33ff 	mov.w	r3, #4294967295
 801294c:	e024      	b.n	8012998 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012954:	2b00      	cmp	r3, #0
 8012956:	d00f      	beq.n	8012978 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801295c:	2b00      	cmp	r3, #0
 801295e:	d11a      	bne.n	8012996 <tcp_write_checks+0xd6>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012964:	2b00      	cmp	r3, #0
 8012966:	d116      	bne.n	8012996 <tcp_write_checks+0xd6>
 8012968:	4b0d      	ldr	r3, [pc, #52]	; (80129a0 <tcp_write_checks+0xe0>)
 801296a:	f240 1255 	movw	r2, #341	; 0x155
 801296e:	490f      	ldr	r1, [pc, #60]	; (80129ac <tcp_write_checks+0xec>)
 8012970:	480d      	ldr	r0, [pc, #52]	; (80129a8 <tcp_write_checks+0xe8>)
 8012972:	f004 ff63 	bl	801783c <iprintf>
 8012976:	e00e      	b.n	8012996 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801297c:	2b00      	cmp	r3, #0
 801297e:	d103      	bne.n	8012988 <tcp_write_checks+0xc8>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012984:	2b00      	cmp	r3, #0
 8012986:	d006      	beq.n	8012996 <tcp_write_checks+0xd6>
 8012988:	4b05      	ldr	r3, [pc, #20]	; (80129a0 <tcp_write_checks+0xe0>)
 801298a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801298e:	4908      	ldr	r1, [pc, #32]	; (80129b0 <tcp_write_checks+0xf0>)
 8012990:	4805      	ldr	r0, [pc, #20]	; (80129a8 <tcp_write_checks+0xe8>)
 8012992:	f004 ff53 	bl	801783c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012996:	2300      	movs	r3, #0
}
 8012998:	4618      	mov	r0, r3
 801299a:	3708      	adds	r7, #8
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	0801b034 	.word	0x0801b034
 80129a4:	0801b144 	.word	0x0801b144
 80129a8:	0801b088 	.word	0x0801b088
 80129ac:	0801b164 	.word	0x0801b164
 80129b0:	0801b1a0 	.word	0x0801b1a0

080129b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80129b4:	b590      	push	{r4, r7, lr}
 80129b6:	b09b      	sub	sp, #108	; 0x6c
 80129b8:	af04      	add	r7, sp, #16
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	4611      	mov	r1, r2
 80129c0:	461a      	mov	r2, r3
 80129c2:	460b      	mov	r3, r1
 80129c4:	80fb      	strh	r3, [r7, #6]
 80129c6:	4613      	mov	r3, r2
 80129c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80129ca:	2300      	movs	r3, #0
 80129cc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80129ce:	2300      	movs	r3, #0
 80129d0:	653b      	str	r3, [r7, #80]	; 0x50
 80129d2:	2300      	movs	r3, #0
 80129d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129d6:	2300      	movs	r3, #0
 80129d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80129da:	2300      	movs	r3, #0
 80129dc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80129de:	2300      	movs	r3, #0
 80129e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80129e4:	2300      	movs	r3, #0
 80129e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80129ea:	2300      	movs	r3, #0
 80129ec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80129f2:	2300      	movs	r3, #0
 80129f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d109      	bne.n	8012a10 <tcp_write+0x5c>
 80129fc:	4ba4      	ldr	r3, [pc, #656]	; (8012c90 <tcp_write+0x2dc>)
 80129fe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012a02:	49a4      	ldr	r1, [pc, #656]	; (8012c94 <tcp_write+0x2e0>)
 8012a04:	48a4      	ldr	r0, [pc, #656]	; (8012c98 <tcp_write+0x2e4>)
 8012a06:	f004 ff19 	bl	801783c <iprintf>
 8012a0a:	f06f 030f 	mvn.w	r3, #15
 8012a0e:	e32a      	b.n	8013066 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012a16:	085b      	lsrs	r3, r3, #1
 8012a18:	b29a      	uxth	r2, r3
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	bf28      	it	cs
 8012a22:	4613      	movcs	r3, r2
 8012a24:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d102      	bne.n	8012a32 <tcp_write+0x7e>
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a30:	e000      	b.n	8012a34 <tcp_write+0x80>
 8012a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a34:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d109      	bne.n	8012a50 <tcp_write+0x9c>
 8012a3c:	4b94      	ldr	r3, [pc, #592]	; (8012c90 <tcp_write+0x2dc>)
 8012a3e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012a42:	4996      	ldr	r1, [pc, #600]	; (8012c9c <tcp_write+0x2e8>)
 8012a44:	4894      	ldr	r0, [pc, #592]	; (8012c98 <tcp_write+0x2e4>)
 8012a46:	f004 fef9 	bl	801783c <iprintf>
 8012a4a:	f06f 030f 	mvn.w	r3, #15
 8012a4e:	e30a      	b.n	8013066 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012a50:	88fb      	ldrh	r3, [r7, #6]
 8012a52:	4619      	mov	r1, r3
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f7ff ff33 	bl	80128c0 <tcp_write_checks>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012a60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d002      	beq.n	8012a6e <tcp_write+0xba>
    return err;
 8012a68:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a6c:	e2fb      	b.n	8013066 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a78:	2300      	movs	r3, #0
 8012a7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 80f6 	beq.w	8012c74 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8012a8e:	e002      	b.n	8012a96 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d1f8      	bne.n	8012a90 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aa0:	7a9b      	ldrb	r3, [r3, #10]
 8012aa2:	009b      	lsls	r3, r3, #2
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	f003 0304 	and.w	r3, r3, #4
 8012aaa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012aac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab0:	891b      	ldrh	r3, [r3, #8]
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	8c3b      	ldrh	r3, [r7, #32]
 8012ab6:	440b      	add	r3, r1
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	da06      	bge.n	8012aca <tcp_write+0x116>
 8012abc:	4b74      	ldr	r3, [pc, #464]	; (8012c90 <tcp_write+0x2dc>)
 8012abe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012ac2:	4977      	ldr	r1, [pc, #476]	; (8012ca0 <tcp_write+0x2ec>)
 8012ac4:	4874      	ldr	r0, [pc, #464]	; (8012c98 <tcp_write+0x2e4>)
 8012ac6:	f004 feb9 	bl	801783c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012acc:	891a      	ldrh	r2, [r3, #8]
 8012ace:	8c3b      	ldrh	r3, [r7, #32]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012ae0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012ae2:	8a7b      	ldrh	r3, [r7, #18]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d026      	beq.n	8012b36 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012ae8:	8a7b      	ldrh	r3, [r7, #18]
 8012aea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d206      	bcs.n	8012afe <tcp_write+0x14a>
 8012af0:	4b67      	ldr	r3, [pc, #412]	; (8012c90 <tcp_write+0x2dc>)
 8012af2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012af6:	496b      	ldr	r1, [pc, #428]	; (8012ca4 <tcp_write+0x2f0>)
 8012af8:	4867      	ldr	r0, [pc, #412]	; (8012c98 <tcp_write+0x2e4>)
 8012afa:	f004 fe9f 	bl	801783c <iprintf>
      seg = last_unsent;
 8012afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b00:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012b02:	8a7b      	ldrh	r3, [r7, #18]
 8012b04:	88fa      	ldrh	r2, [r7, #6]
 8012b06:	4293      	cmp	r3, r2
 8012b08:	bf28      	it	cs
 8012b0a:	4613      	movcs	r3, r2
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b10:	4293      	cmp	r3, r2
 8012b12:	bf28      	it	cs
 8012b14:	4613      	movcs	r3, r2
 8012b16:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012b18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b1e:	4413      	add	r3, r2
 8012b20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012b24:	8a7a      	ldrh	r2, [r7, #18]
 8012b26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b28:	1ad3      	subs	r3, r2, r3
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012b2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012b36:	8a7b      	ldrh	r3, [r7, #18]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00b      	beq.n	8012b54 <tcp_write+0x1a0>
 8012b3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b40:	88fb      	ldrh	r3, [r7, #6]
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d006      	beq.n	8012b54 <tcp_write+0x1a0>
 8012b46:	4b52      	ldr	r3, [pc, #328]	; (8012c90 <tcp_write+0x2dc>)
 8012b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b4c:	4956      	ldr	r1, [pc, #344]	; (8012ca8 <tcp_write+0x2f4>)
 8012b4e:	4852      	ldr	r0, [pc, #328]	; (8012c98 <tcp_write+0x2e4>)
 8012b50:	f004 fe74 	bl	801783c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012b54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b58:	88fb      	ldrh	r3, [r7, #6]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	f080 8167 	bcs.w	8012e2e <tcp_write+0x47a>
 8012b60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 8163 	beq.w	8012e2e <tcp_write+0x47a>
 8012b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b6a:	891b      	ldrh	r3, [r3, #8]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f000 815e 	beq.w	8012e2e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012b72:	88fa      	ldrh	r2, [r7, #6]
 8012b74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b78:	1ad2      	subs	r2, r2, r3
 8012b7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	bfa8      	it	ge
 8012b80:	4613      	movge	r3, r2
 8012b82:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b86:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012b88:	797b      	ldrb	r3, [r7, #5]
 8012b8a:	f003 0301 	and.w	r3, r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d027      	beq.n	8012be2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012b92:	f107 0012 	add.w	r0, r7, #18
 8012b96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b98:	8bf9      	ldrh	r1, [r7, #30]
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	9302      	str	r3, [sp, #8]
 8012b9e:	797b      	ldrb	r3, [r7, #5]
 8012ba0:	9301      	str	r3, [sp, #4]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2000      	movs	r0, #0
 8012baa:	f7ff fe0f 	bl	80127cc <tcp_pbuf_prealloc>
 8012bae:	6578      	str	r0, [r7, #84]	; 0x54
 8012bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 8225 	beq.w	8013002 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bba:	6858      	ldr	r0, [r3, #4]
 8012bbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	8bfa      	ldrh	r2, [r7, #30]
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	f004 fe08 	bl	80177dc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012bcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012bce:	f7fb f9c3 	bl	800df58 <pbuf_clen>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bda:	4413      	add	r3, r2
 8012bdc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012be0:	e041      	b.n	8012c66 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	637b      	str	r3, [r7, #52]	; 0x34
 8012be8:	e002      	b.n	8012bf0 <tcp_write+0x23c>
 8012bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	637b      	str	r3, [r7, #52]	; 0x34
 8012bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1f8      	bne.n	8012bea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bfa:	7b1b      	ldrb	r3, [r3, #12]
 8012bfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d115      	bne.n	8012c30 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c0a:	8952      	ldrh	r2, [r2, #10]
 8012c0c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c0e:	68ba      	ldr	r2, [r7, #8]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d10d      	bne.n	8012c30 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d006      	beq.n	8012c2a <tcp_write+0x276>
 8012c1c:	4b1c      	ldr	r3, [pc, #112]	; (8012c90 <tcp_write+0x2dc>)
 8012c1e:	f240 2231 	movw	r2, #561	; 0x231
 8012c22:	4922      	ldr	r1, [pc, #136]	; (8012cac <tcp_write+0x2f8>)
 8012c24:	481c      	ldr	r0, [pc, #112]	; (8012c98 <tcp_write+0x2e4>)
 8012c26:	f004 fe09 	bl	801783c <iprintf>
          extendlen = seglen;
 8012c2a:	8bfb      	ldrh	r3, [r7, #30]
 8012c2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012c2e:	e01a      	b.n	8012c66 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012c30:	8bfb      	ldrh	r3, [r7, #30]
 8012c32:	2201      	movs	r2, #1
 8012c34:	4619      	mov	r1, r3
 8012c36:	2000      	movs	r0, #0
 8012c38:	f7fa fe1c 	bl	800d874 <pbuf_alloc>
 8012c3c:	6578      	str	r0, [r7, #84]	; 0x54
 8012c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 81e0 	beq.w	8013006 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012c46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c4a:	68ba      	ldr	r2, [r7, #8]
 8012c4c:	441a      	add	r2, r3
 8012c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c50:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012c52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c54:	f7fb f980 	bl	800df58 <pbuf_clen>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c60:	4413      	add	r3, r2
 8012c62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012c66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c6a:	8bfb      	ldrh	r3, [r7, #30]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012c72:	e0dc      	b.n	8012e2e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f000 80d7 	beq.w	8012e2e <tcp_write+0x47a>
 8012c80:	4b03      	ldr	r3, [pc, #12]	; (8012c90 <tcp_write+0x2dc>)
 8012c82:	f240 224a 	movw	r2, #586	; 0x24a
 8012c86:	490a      	ldr	r1, [pc, #40]	; (8012cb0 <tcp_write+0x2fc>)
 8012c88:	4803      	ldr	r0, [pc, #12]	; (8012c98 <tcp_write+0x2e4>)
 8012c8a:	f004 fdd7 	bl	801783c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012c8e:	e0ce      	b.n	8012e2e <tcp_write+0x47a>
 8012c90:	0801b034 	.word	0x0801b034
 8012c94:	0801b1d4 	.word	0x0801b1d4
 8012c98:	0801b088 	.word	0x0801b088
 8012c9c:	0801b1ec 	.word	0x0801b1ec
 8012ca0:	0801b220 	.word	0x0801b220
 8012ca4:	0801b238 	.word	0x0801b238
 8012ca8:	0801b258 	.word	0x0801b258
 8012cac:	0801b278 	.word	0x0801b278
 8012cb0:	0801b2a4 	.word	0x0801b2a4
    struct pbuf *p;
    u16_t left = len - pos;
 8012cb4:	88fa      	ldrh	r2, [r7, #6]
 8012cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cba:	1ad3      	subs	r3, r2, r3
 8012cbc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012cbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012cca:	8b7a      	ldrh	r2, [r7, #26]
 8012ccc:	8bbb      	ldrh	r3, [r7, #28]
 8012cce:	4293      	cmp	r3, r2
 8012cd0:	bf28      	it	cs
 8012cd2:	4613      	movcs	r3, r2
 8012cd4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012cd6:	797b      	ldrb	r3, [r7, #5]
 8012cd8:	f003 0301 	and.w	r3, r3, #1
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d036      	beq.n	8012d4e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012ce0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	8b3b      	ldrh	r3, [r7, #24]
 8012ce8:	4413      	add	r3, r2
 8012cea:	b299      	uxth	r1, r3
 8012cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	bf0c      	ite	eq
 8012cf2:	2301      	moveq	r3, #1
 8012cf4:	2300      	movne	r3, #0
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	f107 0012 	add.w	r0, r7, #18
 8012cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cfe:	9302      	str	r3, [sp, #8]
 8012d00:	797b      	ldrb	r3, [r7, #5]
 8012d02:	9301      	str	r3, [sp, #4]
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2036      	movs	r0, #54	; 0x36
 8012d0c:	f7ff fd5e 	bl	80127cc <tcp_pbuf_prealloc>
 8012d10:	6338      	str	r0, [r7, #48]	; 0x30
 8012d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	f000 8178 	beq.w	801300a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1c:	895b      	ldrh	r3, [r3, #10]
 8012d1e:	8b3a      	ldrh	r2, [r7, #24]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d906      	bls.n	8012d32 <tcp_write+0x37e>
 8012d24:	4b8c      	ldr	r3, [pc, #560]	; (8012f58 <tcp_write+0x5a4>)
 8012d26:	f240 2266 	movw	r2, #614	; 0x266
 8012d2a:	498c      	ldr	r1, [pc, #560]	; (8012f5c <tcp_write+0x5a8>)
 8012d2c:	488c      	ldr	r0, [pc, #560]	; (8012f60 <tcp_write+0x5ac>)
 8012d2e:	f004 fd85 	bl	801783c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d3a:	18d0      	adds	r0, r2, r3
 8012d3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d40:	68ba      	ldr	r2, [r7, #8]
 8012d42:	4413      	add	r3, r2
 8012d44:	8b3a      	ldrh	r2, [r7, #24]
 8012d46:	4619      	mov	r1, r3
 8012d48:	f004 fd48 	bl	80177dc <memcpy>
 8012d4c:	e02f      	b.n	8012dae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012d4e:	8a7b      	ldrh	r3, [r7, #18]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d006      	beq.n	8012d62 <tcp_write+0x3ae>
 8012d54:	4b80      	ldr	r3, [pc, #512]	; (8012f58 <tcp_write+0x5a4>)
 8012d56:	f240 2271 	movw	r2, #625	; 0x271
 8012d5a:	4982      	ldr	r1, [pc, #520]	; (8012f64 <tcp_write+0x5b0>)
 8012d5c:	4880      	ldr	r0, [pc, #512]	; (8012f60 <tcp_write+0x5ac>)
 8012d5e:	f004 fd6d 	bl	801783c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012d62:	8b3b      	ldrh	r3, [r7, #24]
 8012d64:	2201      	movs	r2, #1
 8012d66:	4619      	mov	r1, r3
 8012d68:	2036      	movs	r0, #54	; 0x36
 8012d6a:	f7fa fd83 	bl	800d874 <pbuf_alloc>
 8012d6e:	6178      	str	r0, [r7, #20]
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	f000 814b 	beq.w	801300e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012d78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d7c:	68ba      	ldr	r2, [r7, #8]
 8012d7e:	441a      	add	r2, r3
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d8e:	4619      	mov	r1, r3
 8012d90:	2036      	movs	r0, #54	; 0x36
 8012d92:	f7fa fd6f 	bl	800d874 <pbuf_alloc>
 8012d96:	6338      	str	r0, [r7, #48]	; 0x30
 8012d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d103      	bne.n	8012da6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d9e:	6978      	ldr	r0, [r7, #20]
 8012da0:	f7fb f84c 	bl	800de3c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012da4:	e136      	b.n	8013014 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012da6:	6979      	ldr	r1, [r7, #20]
 8012da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012daa:	f7fb f915 	bl	800dfd8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012db0:	f7fb f8d2 	bl	800df58 <pbuf_clen>
 8012db4:	4603      	mov	r3, r0
 8012db6:	461a      	mov	r2, r3
 8012db8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012dbc:	4413      	add	r3, r2
 8012dbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012dc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012dc6:	2b09      	cmp	r3, #9
 8012dc8:	d903      	bls.n	8012dd2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dcc:	f7fb f836 	bl	800de3c <pbuf_free>
      goto memerr;
 8012dd0:	e120      	b.n	8013014 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012dd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dda:	441a      	add	r2, r3
 8012ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012de0:	9300      	str	r3, [sp, #0]
 8012de2:	4613      	mov	r3, r2
 8012de4:	2200      	movs	r2, #0
 8012de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f7ff fc51 	bl	8012690 <tcp_create_segment>
 8012dee:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f000 810d 	beq.w	8013012 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d102      	bne.n	8012e04 <tcp_write+0x450>
      queue = seg;
 8012dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e00:	647b      	str	r3, [r7, #68]	; 0x44
 8012e02:	e00c      	b.n	8012e1e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <tcp_write+0x464>
 8012e0a:	4b53      	ldr	r3, [pc, #332]	; (8012f58 <tcp_write+0x5a4>)
 8012e0c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012e10:	4955      	ldr	r1, [pc, #340]	; (8012f68 <tcp_write+0x5b4>)
 8012e12:	4853      	ldr	r0, [pc, #332]	; (8012f60 <tcp_write+0x5ac>)
 8012e14:	f004 fd12 	bl	801783c <iprintf>
      prev_seg->next = seg;
 8012e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e1c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e20:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e26:	8b3b      	ldrh	r3, [r7, #24]
 8012e28:	4413      	add	r3, r2
 8012e2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012e2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e32:	88fb      	ldrh	r3, [r7, #6]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	f4ff af3d 	bcc.w	8012cb4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012e3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d02c      	beq.n	8012e9a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e46:	e01e      	b.n	8012e86 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4a:	891a      	ldrh	r2, [r3, #8]
 8012e4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e4e:	4413      	add	r3, r2
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e54:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d110      	bne.n	8012e80 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e64:	8952      	ldrh	r2, [r2, #10]
 8012e66:	4413      	add	r3, r2
 8012e68:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e6a:	68b9      	ldr	r1, [r7, #8]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f004 fcb5 	bl	80177dc <memcpy>
        p->len += oversize_used;
 8012e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e74:	895a      	ldrh	r2, [r3, #10]
 8012e76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e78:	4413      	add	r3, r2
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d1dd      	bne.n	8012e48 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e8e:	891a      	ldrh	r2, [r3, #8]
 8012e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e92:	4413      	add	r3, r2
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e98:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e9a:	8a7a      	ldrh	r2, [r7, #18]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d018      	beq.n	8012eda <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d106      	bne.n	8012ebc <tcp_write+0x508>
 8012eae:	4b2a      	ldr	r3, [pc, #168]	; (8012f58 <tcp_write+0x5a4>)
 8012eb0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012eb4:	492d      	ldr	r1, [pc, #180]	; (8012f6c <tcp_write+0x5b8>)
 8012eb6:	482a      	ldr	r0, [pc, #168]	; (8012f60 <tcp_write+0x5ac>)
 8012eb8:	f004 fcc0 	bl	801783c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fb f888 	bl	800dfd8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eca:	891a      	ldrh	r2, [r3, #8]
 8012ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ece:	891b      	ldrh	r3, [r3, #8]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	b29a      	uxth	r2, r3
 8012ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ed6:	811a      	strh	r2, [r3, #8]
 8012ed8:	e037      	b.n	8012f4a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012eda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d034      	beq.n	8012f4a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d003      	beq.n	8012eee <tcp_write+0x53a>
 8012ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d106      	bne.n	8012efc <tcp_write+0x548>
 8012eee:	4b1a      	ldr	r3, [pc, #104]	; (8012f58 <tcp_write+0x5a4>)
 8012ef0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012ef4:	491e      	ldr	r1, [pc, #120]	; (8012f70 <tcp_write+0x5bc>)
 8012ef6:	481a      	ldr	r0, [pc, #104]	; (8012f60 <tcp_write+0x5ac>)
 8012ef8:	f004 fca0 	bl	801783c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f02:	e009      	b.n	8012f18 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f06:	891a      	ldrh	r2, [r3, #8]
 8012f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f0a:	4413      	add	r3, r2
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f10:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d1f1      	bne.n	8012f04 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f22:	891a      	ldrh	r2, [r3, #8]
 8012f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f26:	4413      	add	r3, r2
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f30:	895a      	ldrh	r2, [r3, #10]
 8012f32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f34:	4413      	add	r3, r2
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f3a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f3e:	891a      	ldrh	r2, [r3, #8]
 8012f40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f42:	4413      	add	r3, r2
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f48:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d111      	bne.n	8012f74 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f54:	66da      	str	r2, [r3, #108]	; 0x6c
 8012f56:	e010      	b.n	8012f7a <tcp_write+0x5c6>
 8012f58:	0801b034 	.word	0x0801b034
 8012f5c:	0801b2d4 	.word	0x0801b2d4
 8012f60:	0801b088 	.word	0x0801b088
 8012f64:	0801b314 	.word	0x0801b314
 8012f68:	0801b324 	.word	0x0801b324
 8012f6c:	0801b338 	.word	0x0801b338
 8012f70:	0801b370 	.word	0x0801b370
  } else {
    last_unsent->next = queue;
 8012f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f78:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	441a      	add	r2, r3
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012f8c:	88fb      	ldrh	r3, [r7, #6]
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00e      	beq.n	8012fca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d10a      	bne.n	8012fca <tcp_write+0x616>
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d106      	bne.n	8012fca <tcp_write+0x616>
 8012fbc:	4b2c      	ldr	r3, [pc, #176]	; (8013070 <tcp_write+0x6bc>)
 8012fbe:	f240 3212 	movw	r2, #786	; 0x312
 8012fc2:	492c      	ldr	r1, [pc, #176]	; (8013074 <tcp_write+0x6c0>)
 8012fc4:	482c      	ldr	r0, [pc, #176]	; (8013078 <tcp_write+0x6c4>)
 8012fc6:	f004 fc39 	bl	801783c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d016      	beq.n	8012ffe <tcp_write+0x64a>
 8012fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d012      	beq.n	8012ffe <tcp_write+0x64a>
 8012fd8:	797b      	ldrb	r3, [r7, #5]
 8012fda:	f003 0302 	and.w	r3, r3, #2
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10d      	bne.n	8012ffe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	899b      	ldrh	r3, [r3, #12]
 8012fe8:	b29c      	uxth	r4, r3
 8012fea:	2008      	movs	r0, #8
 8012fec:	f7f9 fb7a 	bl	800c6e4 <lwip_htons>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	4322      	orrs	r2, r4
 8012ffa:	b292      	uxth	r2, r2
 8012ffc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012ffe:	2300      	movs	r3, #0
 8013000:	e031      	b.n	8013066 <tcp_write+0x6b2>
          goto memerr;
 8013002:	bf00      	nop
 8013004:	e006      	b.n	8013014 <tcp_write+0x660>
            goto memerr;
 8013006:	bf00      	nop
 8013008:	e004      	b.n	8013014 <tcp_write+0x660>
        goto memerr;
 801300a:	bf00      	nop
 801300c:	e002      	b.n	8013014 <tcp_write+0x660>
        goto memerr;
 801300e:	bf00      	nop
 8013010:	e000      	b.n	8013014 <tcp_write+0x660>
      goto memerr;
 8013012:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	8b5b      	ldrh	r3, [r3, #26]
 8013018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801301c:	b29a      	uxth	r2, r3
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013024:	2b00      	cmp	r3, #0
 8013026:	d002      	beq.n	801302e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013028:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801302a:	f7fa ff07 	bl	800de3c <pbuf_free>
  }
  if (queue != NULL) {
 801302e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013030:	2b00      	cmp	r3, #0
 8013032:	d002      	beq.n	801303a <tcp_write+0x686>
    tcp_segs_free(queue);
 8013034:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013036:	f7fc fb6f 	bl	800f718 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00e      	beq.n	8013062 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013048:	2b00      	cmp	r3, #0
 801304a:	d10a      	bne.n	8013062 <tcp_write+0x6ae>
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013050:	2b00      	cmp	r3, #0
 8013052:	d106      	bne.n	8013062 <tcp_write+0x6ae>
 8013054:	4b06      	ldr	r3, [pc, #24]	; (8013070 <tcp_write+0x6bc>)
 8013056:	f240 3227 	movw	r2, #807	; 0x327
 801305a:	4906      	ldr	r1, [pc, #24]	; (8013074 <tcp_write+0x6c0>)
 801305c:	4806      	ldr	r0, [pc, #24]	; (8013078 <tcp_write+0x6c4>)
 801305e:	f004 fbed 	bl	801783c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013066:	4618      	mov	r0, r3
 8013068:	375c      	adds	r7, #92	; 0x5c
 801306a:	46bd      	mov	sp, r7
 801306c:	bd90      	pop	{r4, r7, pc}
 801306e:	bf00      	nop
 8013070:	0801b034 	.word	0x0801b034
 8013074:	0801b3a8 	.word	0x0801b3a8
 8013078:	0801b088 	.word	0x0801b088

0801307c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801307c:	b590      	push	{r4, r7, lr}
 801307e:	b08b      	sub	sp, #44	; 0x2c
 8013080:	af02      	add	r7, sp, #8
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	460b      	mov	r3, r1
 8013086:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013088:	2300      	movs	r3, #0
 801308a:	61fb      	str	r3, [r7, #28]
 801308c:	2300      	movs	r3, #0
 801308e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013090:	2300      	movs	r3, #0
 8013092:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d106      	bne.n	80130a8 <tcp_split_unsent_seg+0x2c>
 801309a:	4b95      	ldr	r3, [pc, #596]	; (80132f0 <tcp_split_unsent_seg+0x274>)
 801309c:	f240 324b 	movw	r2, #843	; 0x34b
 80130a0:	4994      	ldr	r1, [pc, #592]	; (80132f4 <tcp_split_unsent_seg+0x278>)
 80130a2:	4895      	ldr	r0, [pc, #596]	; (80132f8 <tcp_split_unsent_seg+0x27c>)
 80130a4:	f004 fbca 	bl	801783c <iprintf>

  useg = pcb->unsent;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d102      	bne.n	80130ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80130b4:	f04f 33ff 	mov.w	r3, #4294967295
 80130b8:	e116      	b.n	80132e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80130ba:	887b      	ldrh	r3, [r7, #2]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d109      	bne.n	80130d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80130c0:	4b8b      	ldr	r3, [pc, #556]	; (80132f0 <tcp_split_unsent_seg+0x274>)
 80130c2:	f240 3253 	movw	r2, #851	; 0x353
 80130c6:	498d      	ldr	r1, [pc, #564]	; (80132fc <tcp_split_unsent_seg+0x280>)
 80130c8:	488b      	ldr	r0, [pc, #556]	; (80132f8 <tcp_split_unsent_seg+0x27c>)
 80130ca:	f004 fbb7 	bl	801783c <iprintf>
    return ERR_VAL;
 80130ce:	f06f 0305 	mvn.w	r3, #5
 80130d2:	e109      	b.n	80132e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	891b      	ldrh	r3, [r3, #8]
 80130d8:	887a      	ldrh	r2, [r7, #2]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d301      	bcc.n	80130e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80130de:	2300      	movs	r3, #0
 80130e0:	e102      	b.n	80132e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130e6:	887a      	ldrh	r2, [r7, #2]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d906      	bls.n	80130fa <tcp_split_unsent_seg+0x7e>
 80130ec:	4b80      	ldr	r3, [pc, #512]	; (80132f0 <tcp_split_unsent_seg+0x274>)
 80130ee:	f240 325b 	movw	r2, #859	; 0x35b
 80130f2:	4983      	ldr	r1, [pc, #524]	; (8013300 <tcp_split_unsent_seg+0x284>)
 80130f4:	4880      	ldr	r0, [pc, #512]	; (80132f8 <tcp_split_unsent_seg+0x27c>)
 80130f6:	f004 fba1 	bl	801783c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	891b      	ldrh	r3, [r3, #8]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d106      	bne.n	8013110 <tcp_split_unsent_seg+0x94>
 8013102:	4b7b      	ldr	r3, [pc, #492]	; (80132f0 <tcp_split_unsent_seg+0x274>)
 8013104:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013108:	497e      	ldr	r1, [pc, #504]	; (8013304 <tcp_split_unsent_seg+0x288>)
 801310a:	487b      	ldr	r0, [pc, #492]	; (80132f8 <tcp_split_unsent_seg+0x27c>)
 801310c:	f004 fb96 	bl	801783c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	7a9b      	ldrb	r3, [r3, #10]
 8013114:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013116:	7bfb      	ldrb	r3, [r7, #15]
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	b2db      	uxtb	r3, r3
 801311c:	f003 0304 	and.w	r3, r3, #4
 8013120:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	891a      	ldrh	r2, [r3, #8]
 8013126:	887b      	ldrh	r3, [r7, #2]
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801312c:	7bbb      	ldrb	r3, [r7, #14]
 801312e:	b29a      	uxth	r2, r3
 8013130:	89bb      	ldrh	r3, [r7, #12]
 8013132:	4413      	add	r3, r2
 8013134:	b29b      	uxth	r3, r3
 8013136:	f44f 7220 	mov.w	r2, #640	; 0x280
 801313a:	4619      	mov	r1, r3
 801313c:	2036      	movs	r0, #54	; 0x36
 801313e:	f7fa fb99 	bl	800d874 <pbuf_alloc>
 8013142:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	2b00      	cmp	r3, #0
 8013148:	f000 80b7 	beq.w	80132ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	891a      	ldrh	r2, [r3, #8]
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	891b      	ldrh	r3, [r3, #8]
 8013156:	1ad3      	subs	r3, r2, r3
 8013158:	b29a      	uxth	r2, r3
 801315a:	887b      	ldrh	r3, [r7, #2]
 801315c:	4413      	add	r3, r2
 801315e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	6858      	ldr	r0, [r3, #4]
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	685a      	ldr	r2, [r3, #4]
 8013168:	7bbb      	ldrb	r3, [r7, #14]
 801316a:	18d1      	adds	r1, r2, r3
 801316c:	897b      	ldrh	r3, [r7, #10]
 801316e:	89ba      	ldrh	r2, [r7, #12]
 8013170:	f7fb f85a 	bl	800e228 <pbuf_copy_partial>
 8013174:	4603      	mov	r3, r0
 8013176:	461a      	mov	r2, r3
 8013178:	89bb      	ldrh	r3, [r7, #12]
 801317a:	4293      	cmp	r3, r2
 801317c:	f040 809f 	bne.w	80132be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	899b      	ldrh	r3, [r3, #12]
 8013186:	b29b      	uxth	r3, r3
 8013188:	4618      	mov	r0, r3
 801318a:	f7f9 faab 	bl	800c6e4 <lwip_htons>
 801318e:	4603      	mov	r3, r0
 8013190:	b2db      	uxtb	r3, r3
 8013192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013196:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013198:	2300      	movs	r3, #0
 801319a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801319c:	7efb      	ldrb	r3, [r7, #27]
 801319e:	f003 0308 	and.w	r3, r3, #8
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d007      	beq.n	80131b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80131a6:	7efb      	ldrb	r3, [r7, #27]
 80131a8:	f023 0308 	bic.w	r3, r3, #8
 80131ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80131ae:	7ebb      	ldrb	r3, [r7, #26]
 80131b0:	f043 0308 	orr.w	r3, r3, #8
 80131b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80131b6:	7efb      	ldrb	r3, [r7, #27]
 80131b8:	f003 0301 	and.w	r3, r3, #1
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d007      	beq.n	80131d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80131c0:	7efb      	ldrb	r3, [r7, #27]
 80131c2:	f023 0301 	bic.w	r3, r3, #1
 80131c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80131c8:	7ebb      	ldrb	r3, [r7, #26]
 80131ca:	f043 0301 	orr.w	r3, r3, #1
 80131ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f9 fa99 	bl	800c70e <lwip_htonl>
 80131dc:	4602      	mov	r2, r0
 80131de:	887b      	ldrh	r3, [r7, #2]
 80131e0:	18d1      	adds	r1, r2, r3
 80131e2:	7eba      	ldrb	r2, [r7, #26]
 80131e4:	7bfb      	ldrb	r3, [r7, #15]
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	460b      	mov	r3, r1
 80131ea:	6939      	ldr	r1, [r7, #16]
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7ff fa4f 	bl	8012690 <tcp_create_segment>
 80131f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d063      	beq.n	80132c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fa feaa 	bl	800df58 <pbuf_clen>
 8013204:	4603      	mov	r3, r0
 8013206:	461a      	mov	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801320e:	1a9b      	subs	r3, r3, r2
 8013210:	b29a      	uxth	r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	6858      	ldr	r0, [r3, #4]
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	891a      	ldrh	r2, [r3, #8]
 8013222:	89bb      	ldrh	r3, [r7, #12]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	b29b      	uxth	r3, r3
 8013228:	4619      	mov	r1, r3
 801322a:	f7fa fc81 	bl	800db30 <pbuf_realloc>
  useg->len -= remainder;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	891a      	ldrh	r2, [r3, #8]
 8013232:	89bb      	ldrh	r3, [r7, #12]
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	b29a      	uxth	r2, r3
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	899b      	ldrh	r3, [r3, #12]
 8013242:	b29c      	uxth	r4, r3
 8013244:	7efb      	ldrb	r3, [r7, #27]
 8013246:	b29b      	uxth	r3, r3
 8013248:	4618      	mov	r0, r3
 801324a:	f7f9 fa4b 	bl	800c6e4 <lwip_htons>
 801324e:	4603      	mov	r3, r0
 8013250:	461a      	mov	r2, r3
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	4322      	orrs	r2, r4
 8013258:	b292      	uxth	r2, r2
 801325a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	4618      	mov	r0, r3
 8013262:	f7fa fe79 	bl	800df58 <pbuf_clen>
 8013266:	4603      	mov	r3, r0
 8013268:	461a      	mov	r2, r3
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013270:	4413      	add	r3, r2
 8013272:	b29a      	uxth	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	4618      	mov	r0, r3
 8013280:	f7fa fe6a 	bl	800df58 <pbuf_clen>
 8013284:	4603      	mov	r3, r0
 8013286:	461a      	mov	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801328e:	4413      	add	r3, r2
 8013290:	b29a      	uxth	r2, r3
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	69fb      	ldr	r3, [r7, #28]
 801329e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	69fa      	ldr	r2, [r7, #28]
 80132a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d103      	bne.n	80132b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2200      	movs	r2, #0
 80132b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e016      	b.n	80132e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80132ba:	bf00      	nop
 80132bc:	e002      	b.n	80132c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80132be:	bf00      	nop
 80132c0:	e000      	b.n	80132c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80132c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d006      	beq.n	80132d8 <tcp_split_unsent_seg+0x25c>
 80132ca:	4b09      	ldr	r3, [pc, #36]	; (80132f0 <tcp_split_unsent_seg+0x274>)
 80132cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80132d0:	490d      	ldr	r1, [pc, #52]	; (8013308 <tcp_split_unsent_seg+0x28c>)
 80132d2:	4809      	ldr	r0, [pc, #36]	; (80132f8 <tcp_split_unsent_seg+0x27c>)
 80132d4:	f004 fab2 	bl	801783c <iprintf>
  if (p != NULL) {
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d002      	beq.n	80132e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80132de:	6938      	ldr	r0, [r7, #16]
 80132e0:	f7fa fdac 	bl	800de3c <pbuf_free>
  }

  return ERR_MEM;
 80132e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3724      	adds	r7, #36	; 0x24
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd90      	pop	{r4, r7, pc}
 80132f0:	0801b034 	.word	0x0801b034
 80132f4:	0801b3c8 	.word	0x0801b3c8
 80132f8:	0801b088 	.word	0x0801b088
 80132fc:	0801b3ec 	.word	0x0801b3ec
 8013300:	0801b410 	.word	0x0801b410
 8013304:	0801b420 	.word	0x0801b420
 8013308:	0801b430 	.word	0x0801b430

0801330c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801330c:	b590      	push	{r4, r7, lr}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d106      	bne.n	8013328 <tcp_send_fin+0x1c>
 801331a:	4b21      	ldr	r3, [pc, #132]	; (80133a0 <tcp_send_fin+0x94>)
 801331c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013320:	4920      	ldr	r1, [pc, #128]	; (80133a4 <tcp_send_fin+0x98>)
 8013322:	4821      	ldr	r0, [pc, #132]	; (80133a8 <tcp_send_fin+0x9c>)
 8013324:	f004 fa8a 	bl	801783c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801332c:	2b00      	cmp	r3, #0
 801332e:	d02e      	beq.n	801338e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013334:	60fb      	str	r3, [r7, #12]
 8013336:	e002      	b.n	801333e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d1f8      	bne.n	8013338 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	899b      	ldrh	r3, [r3, #12]
 801334c:	b29b      	uxth	r3, r3
 801334e:	4618      	mov	r0, r3
 8013350:	f7f9 f9c8 	bl	800c6e4 <lwip_htons>
 8013354:	4603      	mov	r3, r0
 8013356:	b2db      	uxtb	r3, r3
 8013358:	f003 0307 	and.w	r3, r3, #7
 801335c:	2b00      	cmp	r3, #0
 801335e:	d116      	bne.n	801338e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	899b      	ldrh	r3, [r3, #12]
 8013366:	b29c      	uxth	r4, r3
 8013368:	2001      	movs	r0, #1
 801336a:	f7f9 f9bb 	bl	800c6e4 <lwip_htons>
 801336e:	4603      	mov	r3, r0
 8013370:	461a      	mov	r2, r3
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	4322      	orrs	r2, r4
 8013378:	b292      	uxth	r2, r2
 801337a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	8b5b      	ldrh	r3, [r3, #26]
 8013380:	f043 0320 	orr.w	r3, r3, #32
 8013384:	b29a      	uxth	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801338a:	2300      	movs	r3, #0
 801338c:	e004      	b.n	8013398 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801338e:	2101      	movs	r1, #1
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f000 f80b 	bl	80133ac <tcp_enqueue_flags>
 8013396:	4603      	mov	r3, r0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3714      	adds	r7, #20
 801339c:	46bd      	mov	sp, r7
 801339e:	bd90      	pop	{r4, r7, pc}
 80133a0:	0801b034 	.word	0x0801b034
 80133a4:	0801b43c 	.word	0x0801b43c
 80133a8:	0801b088 	.word	0x0801b088

080133ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b08a      	sub	sp, #40	; 0x28
 80133b0:	af02      	add	r7, sp, #8
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	460b      	mov	r3, r1
 80133b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80133b8:	2300      	movs	r3, #0
 80133ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80133bc:	2300      	movs	r3, #0
 80133be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80133c0:	78fb      	ldrb	r3, [r7, #3]
 80133c2:	f003 0303 	and.w	r3, r3, #3
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d106      	bne.n	80133d8 <tcp_enqueue_flags+0x2c>
 80133ca:	4b67      	ldr	r3, [pc, #412]	; (8013568 <tcp_enqueue_flags+0x1bc>)
 80133cc:	f240 4211 	movw	r2, #1041	; 0x411
 80133d0:	4966      	ldr	r1, [pc, #408]	; (801356c <tcp_enqueue_flags+0x1c0>)
 80133d2:	4867      	ldr	r0, [pc, #412]	; (8013570 <tcp_enqueue_flags+0x1c4>)
 80133d4:	f004 fa32 	bl	801783c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d106      	bne.n	80133ec <tcp_enqueue_flags+0x40>
 80133de:	4b62      	ldr	r3, [pc, #392]	; (8013568 <tcp_enqueue_flags+0x1bc>)
 80133e0:	f240 4213 	movw	r2, #1043	; 0x413
 80133e4:	4963      	ldr	r1, [pc, #396]	; (8013574 <tcp_enqueue_flags+0x1c8>)
 80133e6:	4862      	ldr	r0, [pc, #392]	; (8013570 <tcp_enqueue_flags+0x1c4>)
 80133e8:	f004 fa28 	bl	801783c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80133ec:	78fb      	ldrb	r3, [r7, #3]
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d001      	beq.n	80133fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80133f6:	2301      	movs	r3, #1
 80133f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133fa:	7ffb      	ldrb	r3, [r7, #31]
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	f003 0304 	and.w	r3, r3, #4
 8013404:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013406:	7dfb      	ldrb	r3, [r7, #23]
 8013408:	b29b      	uxth	r3, r3
 801340a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801340e:	4619      	mov	r1, r3
 8013410:	2036      	movs	r0, #54	; 0x36
 8013412:	f7fa fa2f 	bl	800d874 <pbuf_alloc>
 8013416:	6138      	str	r0, [r7, #16]
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d109      	bne.n	8013432 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	8b5b      	ldrh	r3, [r3, #26]
 8013422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013426:	b29a      	uxth	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801342c:	f04f 33ff 	mov.w	r3, #4294967295
 8013430:	e095      	b.n	801355e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	895a      	ldrh	r2, [r3, #10]
 8013436:	7dfb      	ldrb	r3, [r7, #23]
 8013438:	b29b      	uxth	r3, r3
 801343a:	429a      	cmp	r2, r3
 801343c:	d206      	bcs.n	801344c <tcp_enqueue_flags+0xa0>
 801343e:	4b4a      	ldr	r3, [pc, #296]	; (8013568 <tcp_enqueue_flags+0x1bc>)
 8013440:	f240 4239 	movw	r2, #1081	; 0x439
 8013444:	494c      	ldr	r1, [pc, #304]	; (8013578 <tcp_enqueue_flags+0x1cc>)
 8013446:	484a      	ldr	r0, [pc, #296]	; (8013570 <tcp_enqueue_flags+0x1c4>)
 8013448:	f004 f9f8 	bl	801783c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013450:	78fa      	ldrb	r2, [r7, #3]
 8013452:	7ffb      	ldrb	r3, [r7, #31]
 8013454:	9300      	str	r3, [sp, #0]
 8013456:	460b      	mov	r3, r1
 8013458:	6939      	ldr	r1, [r7, #16]
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f7ff f918 	bl	8012690 <tcp_create_segment>
 8013460:	60f8      	str	r0, [r7, #12]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d109      	bne.n	801347c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	8b5b      	ldrh	r3, [r3, #26]
 801346c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013470:	b29a      	uxth	r2, r3
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013476:	f04f 33ff 	mov.w	r3, #4294967295
 801347a:	e070      	b.n	801355e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	f003 0303 	and.w	r3, r3, #3
 8013484:	2b00      	cmp	r3, #0
 8013486:	d006      	beq.n	8013496 <tcp_enqueue_flags+0xea>
 8013488:	4b37      	ldr	r3, [pc, #220]	; (8013568 <tcp_enqueue_flags+0x1bc>)
 801348a:	f240 4242 	movw	r2, #1090	; 0x442
 801348e:	493b      	ldr	r1, [pc, #236]	; (801357c <tcp_enqueue_flags+0x1d0>)
 8013490:	4837      	ldr	r0, [pc, #220]	; (8013570 <tcp_enqueue_flags+0x1c4>)
 8013492:	f004 f9d3 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	891b      	ldrh	r3, [r3, #8]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d006      	beq.n	80134ac <tcp_enqueue_flags+0x100>
 801349e:	4b32      	ldr	r3, [pc, #200]	; (8013568 <tcp_enqueue_flags+0x1bc>)
 80134a0:	f240 4243 	movw	r2, #1091	; 0x443
 80134a4:	4936      	ldr	r1, [pc, #216]	; (8013580 <tcp_enqueue_flags+0x1d4>)
 80134a6:	4832      	ldr	r0, [pc, #200]	; (8013570 <tcp_enqueue_flags+0x1c4>)
 80134a8:	f004 f9c8 	bl	801783c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d103      	bne.n	80134bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	68fa      	ldr	r2, [r7, #12]
 80134b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80134ba:	e00d      	b.n	80134d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134c0:	61bb      	str	r3, [r7, #24]
 80134c2:	e002      	b.n	80134ca <tcp_enqueue_flags+0x11e>
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	61bb      	str	r3, [r7, #24]
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d1f8      	bne.n	80134c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80134d2:	69bb      	ldr	r3, [r7, #24]
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2200      	movs	r2, #0
 80134dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	f003 0302 	and.w	r3, r3, #2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d104      	bne.n	80134f4 <tcp_enqueue_flags+0x148>
 80134ea:	78fb      	ldrb	r3, [r7, #3]
 80134ec:	f003 0301 	and.w	r3, r3, #1
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d004      	beq.n	80134fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134f8:	1c5a      	adds	r2, r3, #1
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80134fe:	78fb      	ldrb	r3, [r7, #3]
 8013500:	f003 0301 	and.w	r3, r3, #1
 8013504:	2b00      	cmp	r3, #0
 8013506:	d006      	beq.n	8013516 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	8b5b      	ldrh	r3, [r3, #26]
 801350c:	f043 0320 	orr.w	r3, r3, #32
 8013510:	b29a      	uxth	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	4618      	mov	r0, r3
 801351c:	f7fa fd1c 	bl	800df58 <pbuf_clen>
 8013520:	4603      	mov	r3, r0
 8013522:	461a      	mov	r2, r3
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801352a:	4413      	add	r3, r2
 801352c:	b29a      	uxth	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801353a:	2b00      	cmp	r3, #0
 801353c:	d00e      	beq.n	801355c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013542:	2b00      	cmp	r3, #0
 8013544:	d10a      	bne.n	801355c <tcp_enqueue_flags+0x1b0>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801354a:	2b00      	cmp	r3, #0
 801354c:	d106      	bne.n	801355c <tcp_enqueue_flags+0x1b0>
 801354e:	4b06      	ldr	r3, [pc, #24]	; (8013568 <tcp_enqueue_flags+0x1bc>)
 8013550:	f240 4265 	movw	r2, #1125	; 0x465
 8013554:	490b      	ldr	r1, [pc, #44]	; (8013584 <tcp_enqueue_flags+0x1d8>)
 8013556:	4806      	ldr	r0, [pc, #24]	; (8013570 <tcp_enqueue_flags+0x1c4>)
 8013558:	f004 f970 	bl	801783c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3720      	adds	r7, #32
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	0801b034 	.word	0x0801b034
 801356c:	0801b458 	.word	0x0801b458
 8013570:	0801b088 	.word	0x0801b088
 8013574:	0801b4b0 	.word	0x0801b4b0
 8013578:	0801b4d0 	.word	0x0801b4d0
 801357c:	0801b50c 	.word	0x0801b50c
 8013580:	0801b524 	.word	0x0801b524
 8013584:	0801b550 	.word	0x0801b550

08013588 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013588:	b5b0      	push	{r4, r5, r7, lr}
 801358a:	b08a      	sub	sp, #40	; 0x28
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d106      	bne.n	80135a4 <tcp_output+0x1c>
 8013596:	4b9e      	ldr	r3, [pc, #632]	; (8013810 <tcp_output+0x288>)
 8013598:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801359c:	499d      	ldr	r1, [pc, #628]	; (8013814 <tcp_output+0x28c>)
 801359e:	489e      	ldr	r0, [pc, #632]	; (8013818 <tcp_output+0x290>)
 80135a0:	f004 f94c 	bl	801783c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	7d1b      	ldrb	r3, [r3, #20]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d106      	bne.n	80135ba <tcp_output+0x32>
 80135ac:	4b98      	ldr	r3, [pc, #608]	; (8013810 <tcp_output+0x288>)
 80135ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80135b2:	499a      	ldr	r1, [pc, #616]	; (801381c <tcp_output+0x294>)
 80135b4:	4898      	ldr	r0, [pc, #608]	; (8013818 <tcp_output+0x290>)
 80135b6:	f004 f941 	bl	801783c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80135ba:	4b99      	ldr	r3, [pc, #612]	; (8013820 <tcp_output+0x298>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d101      	bne.n	80135c8 <tcp_output+0x40>
    return ERR_OK;
 80135c4:	2300      	movs	r3, #0
 80135c6:	e1ce      	b.n	8013966 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135d4:	4293      	cmp	r3, r2
 80135d6:	bf28      	it	cs
 80135d8:	4613      	movcs	r3, r2
 80135da:	b29b      	uxth	r3, r3
 80135dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80135e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d10b      	bne.n	8013602 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	8b5b      	ldrh	r3, [r3, #26]
 80135ee:	f003 0302 	and.w	r3, r3, #2
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f000 81aa 	beq.w	801394c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f000 fdcb 	bl	8014194 <tcp_send_empty_ack>
 80135fe:	4603      	mov	r3, r0
 8013600:	e1b1      	b.n	8013966 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013602:	6879      	ldr	r1, [r7, #4]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3304      	adds	r3, #4
 8013608:	461a      	mov	r2, r3
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f7ff f824 	bl	8012658 <tcp_route>
 8013610:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <tcp_output+0x96>
    return ERR_RTE;
 8013618:	f06f 0303 	mvn.w	r3, #3
 801361c:	e1a3      	b.n	8013966 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d003      	beq.n	801362c <tcp_output+0xa4>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d111      	bne.n	8013650 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d002      	beq.n	8013638 <tcp_output+0xb0>
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	3304      	adds	r3, #4
 8013636:	e000      	b.n	801363a <tcp_output+0xb2>
 8013638:	2300      	movs	r3, #0
 801363a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d102      	bne.n	8013648 <tcp_output+0xc0>
      return ERR_RTE;
 8013642:	f06f 0303 	mvn.w	r3, #3
 8013646:	e18e      	b.n	8013966 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	4618      	mov	r0, r3
 8013658:	f7f9 f859 	bl	800c70e <lwip_htonl>
 801365c:	4602      	mov	r2, r0
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013662:	1ad3      	subs	r3, r2, r3
 8013664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013666:	8912      	ldrh	r2, [r2, #8]
 8013668:	4413      	add	r3, r2
 801366a:	69ba      	ldr	r2, [r7, #24]
 801366c:	429a      	cmp	r2, r3
 801366e:	d227      	bcs.n	80136c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013676:	461a      	mov	r2, r3
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	4293      	cmp	r3, r2
 801367c:	d114      	bne.n	80136a8 <tcp_output+0x120>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013682:	2b00      	cmp	r3, #0
 8013684:	d110      	bne.n	80136a8 <tcp_output+0x120>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801368c:	2b00      	cmp	r3, #0
 801368e:	d10b      	bne.n	80136a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2200      	movs	r2, #0
 8013694:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2201      	movs	r2, #1
 801369c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2200      	movs	r2, #0
 80136a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8b5b      	ldrh	r3, [r3, #26]
 80136ac:	f003 0302 	and.w	r3, r3, #2
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f000 814d 	beq.w	8013950 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f000 fd6c 	bl	8014194 <tcp_send_empty_ack>
 80136bc:	4603      	mov	r3, r0
 80136be:	e152      	b.n	8013966 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2200      	movs	r2, #0
 80136c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80136ce:	6a3b      	ldr	r3, [r7, #32]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f000 811c 	beq.w	801390e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80136d6:	e002      	b.n	80136de <tcp_output+0x156>
 80136d8:	6a3b      	ldr	r3, [r7, #32]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	623b      	str	r3, [r7, #32]
 80136de:	6a3b      	ldr	r3, [r7, #32]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d1f8      	bne.n	80136d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80136e6:	e112      	b.n	801390e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80136e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	899b      	ldrh	r3, [r3, #12]
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f8 fff7 	bl	800c6e4 <lwip_htons>
 80136f6:	4603      	mov	r3, r0
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	f003 0304 	and.w	r3, r3, #4
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d006      	beq.n	8013710 <tcp_output+0x188>
 8013702:	4b43      	ldr	r3, [pc, #268]	; (8013810 <tcp_output+0x288>)
 8013704:	f240 5236 	movw	r2, #1334	; 0x536
 8013708:	4946      	ldr	r1, [pc, #280]	; (8013824 <tcp_output+0x29c>)
 801370a:	4843      	ldr	r0, [pc, #268]	; (8013818 <tcp_output+0x290>)
 801370c:	f004 f896 	bl	801783c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013714:	2b00      	cmp	r3, #0
 8013716:	d01f      	beq.n	8013758 <tcp_output+0x1d0>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	8b5b      	ldrh	r3, [r3, #26]
 801371c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013720:	2b00      	cmp	r3, #0
 8013722:	d119      	bne.n	8013758 <tcp_output+0x1d0>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013728:	2b00      	cmp	r3, #0
 801372a:	d00b      	beq.n	8013744 <tcp_output+0x1bc>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d110      	bne.n	8013758 <tcp_output+0x1d0>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801373a:	891a      	ldrh	r2, [r3, #8]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013740:	429a      	cmp	r2, r3
 8013742:	d209      	bcs.n	8013758 <tcp_output+0x1d0>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801374a:	2b00      	cmp	r3, #0
 801374c:	d004      	beq.n	8013758 <tcp_output+0x1d0>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013754:	2b08      	cmp	r3, #8
 8013756:	d901      	bls.n	801375c <tcp_output+0x1d4>
 8013758:	2301      	movs	r3, #1
 801375a:	e000      	b.n	801375e <tcp_output+0x1d6>
 801375c:	2300      	movs	r3, #0
 801375e:	2b00      	cmp	r3, #0
 8013760:	d106      	bne.n	8013770 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	8b5b      	ldrh	r3, [r3, #26]
 8013766:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801376a:	2b00      	cmp	r3, #0
 801376c:	f000 80e4 	beq.w	8013938 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	7d1b      	ldrb	r3, [r3, #20]
 8013774:	2b02      	cmp	r3, #2
 8013776:	d00d      	beq.n	8013794 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	899b      	ldrh	r3, [r3, #12]
 801377e:	b29c      	uxth	r4, r3
 8013780:	2010      	movs	r0, #16
 8013782:	f7f8 ffaf 	bl	800c6e4 <lwip_htons>
 8013786:	4603      	mov	r3, r0
 8013788:	461a      	mov	r2, r3
 801378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378c:	68db      	ldr	r3, [r3, #12]
 801378e:	4322      	orrs	r2, r4
 8013790:	b292      	uxth	r2, r2
 8013792:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013794:	697a      	ldr	r2, [r7, #20]
 8013796:	6879      	ldr	r1, [r7, #4]
 8013798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801379a:	f000 f909 	bl	80139b0 <tcp_output_segment>
 801379e:	4603      	mov	r3, r0
 80137a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80137a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d009      	beq.n	80137be <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	8b5b      	ldrh	r3, [r3, #26]
 80137ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	835a      	strh	r2, [r3, #26]
      return err;
 80137b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137bc:	e0d3      	b.n	8013966 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80137be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	7d1b      	ldrb	r3, [r3, #20]
 80137ca:	2b02      	cmp	r3, #2
 80137cc:	d006      	beq.n	80137dc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	8b5b      	ldrh	r3, [r3, #26]
 80137d2:	f023 0303 	bic.w	r3, r3, #3
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80137dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7f8 ff93 	bl	800c70e <lwip_htonl>
 80137e8:	4604      	mov	r4, r0
 80137ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ec:	891b      	ldrh	r3, [r3, #8]
 80137ee:	461d      	mov	r5, r3
 80137f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	899b      	ldrh	r3, [r3, #12]
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7f8 ff73 	bl	800c6e4 <lwip_htons>
 80137fe:	4603      	mov	r3, r0
 8013800:	b2db      	uxtb	r3, r3
 8013802:	f003 0303 	and.w	r3, r3, #3
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00e      	beq.n	8013828 <tcp_output+0x2a0>
 801380a:	2301      	movs	r3, #1
 801380c:	e00d      	b.n	801382a <tcp_output+0x2a2>
 801380e:	bf00      	nop
 8013810:	0801b034 	.word	0x0801b034
 8013814:	0801b578 	.word	0x0801b578
 8013818:	0801b088 	.word	0x0801b088
 801381c:	0801b590 	.word	0x0801b590
 8013820:	2000bd40 	.word	0x2000bd40
 8013824:	0801b5b8 	.word	0x0801b5b8
 8013828:	2300      	movs	r3, #0
 801382a:	442b      	add	r3, r5
 801382c:	4423      	add	r3, r4
 801382e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	1ad3      	subs	r3, r2, r3
 8013838:	2b00      	cmp	r3, #0
 801383a:	da02      	bge.n	8013842 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	68ba      	ldr	r2, [r7, #8]
 8013840:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013844:	891b      	ldrh	r3, [r3, #8]
 8013846:	461c      	mov	r4, r3
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	899b      	ldrh	r3, [r3, #12]
 801384e:	b29b      	uxth	r3, r3
 8013850:	4618      	mov	r0, r3
 8013852:	f7f8 ff47 	bl	800c6e4 <lwip_htons>
 8013856:	4603      	mov	r3, r0
 8013858:	b2db      	uxtb	r3, r3
 801385a:	f003 0303 	and.w	r3, r3, #3
 801385e:	2b00      	cmp	r3, #0
 8013860:	d001      	beq.n	8013866 <tcp_output+0x2de>
 8013862:	2301      	movs	r3, #1
 8013864:	e000      	b.n	8013868 <tcp_output+0x2e0>
 8013866:	2300      	movs	r3, #0
 8013868:	4423      	add	r3, r4
 801386a:	2b00      	cmp	r3, #0
 801386c:	d049      	beq.n	8013902 <tcp_output+0x37a>
      seg->next = NULL;
 801386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013870:	2200      	movs	r2, #0
 8013872:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013878:	2b00      	cmp	r3, #0
 801387a:	d105      	bne.n	8013888 <tcp_output+0x300>
        pcb->unacked = seg;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013880:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	623b      	str	r3, [r7, #32]
 8013886:	e03f      	b.n	8013908 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	4618      	mov	r0, r3
 8013890:	f7f8 ff3d 	bl	800c70e <lwip_htonl>
 8013894:	4604      	mov	r4, r0
 8013896:	6a3b      	ldr	r3, [r7, #32]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	4618      	mov	r0, r3
 801389e:	f7f8 ff36 	bl	800c70e <lwip_htonl>
 80138a2:	4603      	mov	r3, r0
 80138a4:	1ae3      	subs	r3, r4, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	da24      	bge.n	80138f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	3370      	adds	r3, #112	; 0x70
 80138ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80138b0:	e002      	b.n	80138b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d011      	beq.n	80138e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7f8 ff20 	bl	800c70e <lwip_htonl>
 80138ce:	4604      	mov	r4, r0
 80138d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f8 ff19 	bl	800c70e <lwip_htonl>
 80138dc:	4603      	mov	r3, r0
 80138de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	dbe6      	blt.n	80138b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138f0:	601a      	str	r2, [r3, #0]
 80138f2:	e009      	b.n	8013908 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80138f4:	6a3b      	ldr	r3, [r7, #32]
 80138f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80138fa:	6a3b      	ldr	r3, [r7, #32]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	623b      	str	r3, [r7, #32]
 8013900:	e002      	b.n	8013908 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013904:	f7fb ff1d 	bl	800f742 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801390c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013910:	2b00      	cmp	r3, #0
 8013912:	d012      	beq.n	801393a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	4618      	mov	r0, r3
 801391c:	f7f8 fef7 	bl	800c70e <lwip_htonl>
 8013920:	4602      	mov	r2, r0
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013926:	1ad3      	subs	r3, r2, r3
 8013928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801392a:	8912      	ldrh	r2, [r2, #8]
 801392c:	4413      	add	r3, r2
  while (seg != NULL &&
 801392e:	69ba      	ldr	r2, [r7, #24]
 8013930:	429a      	cmp	r2, r3
 8013932:	f4bf aed9 	bcs.w	80136e8 <tcp_output+0x160>
 8013936:	e000      	b.n	801393a <tcp_output+0x3b2>
      break;
 8013938:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801393e:	2b00      	cmp	r3, #0
 8013940:	d108      	bne.n	8013954 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2200      	movs	r2, #0
 8013946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801394a:	e004      	b.n	8013956 <tcp_output+0x3ce>
    goto output_done;
 801394c:	bf00      	nop
 801394e:	e002      	b.n	8013956 <tcp_output+0x3ce>
    goto output_done;
 8013950:	bf00      	nop
 8013952:	e000      	b.n	8013956 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013954:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	8b5b      	ldrh	r3, [r3, #26]
 801395a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801395e:	b29a      	uxth	r2, r3
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013964:	2300      	movs	r3, #0
}
 8013966:	4618      	mov	r0, r3
 8013968:	3728      	adds	r7, #40	; 0x28
 801396a:	46bd      	mov	sp, r7
 801396c:	bdb0      	pop	{r4, r5, r7, pc}
 801396e:	bf00      	nop

08013970 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d106      	bne.n	801398c <tcp_output_segment_busy+0x1c>
 801397e:	4b09      	ldr	r3, [pc, #36]	; (80139a4 <tcp_output_segment_busy+0x34>)
 8013980:	f240 529a 	movw	r2, #1434	; 0x59a
 8013984:	4908      	ldr	r1, [pc, #32]	; (80139a8 <tcp_output_segment_busy+0x38>)
 8013986:	4809      	ldr	r0, [pc, #36]	; (80139ac <tcp_output_segment_busy+0x3c>)
 8013988:	f003 ff58 	bl	801783c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	7b9b      	ldrb	r3, [r3, #14]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d001      	beq.n	801399a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013996:	2301      	movs	r3, #1
 8013998:	e000      	b.n	801399c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3708      	adds	r7, #8
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	0801b034 	.word	0x0801b034
 80139a8:	0801b5d0 	.word	0x0801b5d0
 80139ac:	0801b088 	.word	0x0801b088

080139b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80139b0:	b5b0      	push	{r4, r5, r7, lr}
 80139b2:	b08c      	sub	sp, #48	; 0x30
 80139b4:	af04      	add	r7, sp, #16
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_output_segment+0x20>
 80139c2:	4b63      	ldr	r3, [pc, #396]	; (8013b50 <tcp_output_segment+0x1a0>)
 80139c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80139c8:	4962      	ldr	r1, [pc, #392]	; (8013b54 <tcp_output_segment+0x1a4>)
 80139ca:	4863      	ldr	r0, [pc, #396]	; (8013b58 <tcp_output_segment+0x1a8>)
 80139cc:	f003 ff36 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d106      	bne.n	80139e4 <tcp_output_segment+0x34>
 80139d6:	4b5e      	ldr	r3, [pc, #376]	; (8013b50 <tcp_output_segment+0x1a0>)
 80139d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80139dc:	495f      	ldr	r1, [pc, #380]	; (8013b5c <tcp_output_segment+0x1ac>)
 80139de:	485e      	ldr	r0, [pc, #376]	; (8013b58 <tcp_output_segment+0x1a8>)
 80139e0:	f003 ff2c 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d106      	bne.n	80139f8 <tcp_output_segment+0x48>
 80139ea:	4b59      	ldr	r3, [pc, #356]	; (8013b50 <tcp_output_segment+0x1a0>)
 80139ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80139f0:	495b      	ldr	r1, [pc, #364]	; (8013b60 <tcp_output_segment+0x1b0>)
 80139f2:	4859      	ldr	r0, [pc, #356]	; (8013b58 <tcp_output_segment+0x1a8>)
 80139f4:	f003 ff22 	bl	801783c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80139f8:	68f8      	ldr	r0, [r7, #12]
 80139fa:	f7ff ffb9 	bl	8013970 <tcp_output_segment_busy>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d001      	beq.n	8013a08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013a04:	2300      	movs	r3, #0
 8013a06:	e09f      	b.n	8013b48 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	68dc      	ldr	r4, [r3, #12]
 8013a10:	4610      	mov	r0, r2
 8013a12:	f7f8 fe7c 	bl	800c70e <lwip_htonl>
 8013a16:	4603      	mov	r3, r0
 8013a18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	68dc      	ldr	r4, [r3, #12]
 8013a22:	4610      	mov	r0, r2
 8013a24:	f7f8 fe5e 	bl	800c6e4 <lwip_htons>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a30:	68ba      	ldr	r2, [r7, #8]
 8013a32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013a34:	441a      	add	r2, r3
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	3314      	adds	r3, #20
 8013a40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	7a9b      	ldrb	r3, [r3, #10]
 8013a46:	f003 0301 	and.w	r3, r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d015      	beq.n	8013a7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	3304      	adds	r3, #4
 8013a52:	461a      	mov	r2, r3
 8013a54:	6879      	ldr	r1, [r7, #4]
 8013a56:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013a5a:	f7fc fa37 	bl	800fecc <tcp_eff_send_mss_netif>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013a62:	8b7b      	ldrh	r3, [r7, #26]
 8013a64:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f8 fe50 	bl	800c70e <lwip_htonl>
 8013a6e:	4602      	mov	r2, r0
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	3304      	adds	r3, #4
 8013a78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	da02      	bge.n	8013a8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2200      	movs	r2, #0
 8013a88:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d10c      	bne.n	8013aac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a92:	4b34      	ldr	r3, [pc, #208]	; (8013b64 <tcp_output_segment+0x1b4>)
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7f8 fe34 	bl	800c70e <lwip_htonl>
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	68da      	ldr	r2, [r3, #12]
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	1ad3      	subs	r3, r2, r3
 8013ab8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	8959      	ldrh	r1, [r3, #10]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	8b3a      	ldrh	r2, [r7, #24]
 8013ac6:	1a8a      	subs	r2, r1, r2
 8013ac8:	b292      	uxth	r2, r2
 8013aca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	8919      	ldrh	r1, [r3, #8]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	8b3a      	ldrh	r2, [r7, #24]
 8013ad8:	1a8a      	subs	r2, r1, r2
 8013ada:	b292      	uxth	r2, r2
 8013adc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	68fa      	ldr	r2, [r7, #12]
 8013ae4:	68d2      	ldr	r2, [r2, #12]
 8013ae6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	2200      	movs	r2, #0
 8013aee:	741a      	strb	r2, [r3, #16]
 8013af0:	2200      	movs	r2, #0
 8013af2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	f103 0214 	add.w	r2, r3, #20
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	7a9b      	ldrb	r3, [r3, #10]
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	f003 0304 	and.w	r3, r3, #4
 8013b06:	4413      	add	r3, r2
 8013b08:	69fa      	ldr	r2, [r7, #28]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d006      	beq.n	8013b1c <tcp_output_segment+0x16c>
 8013b0e:	4b10      	ldr	r3, [pc, #64]	; (8013b50 <tcp_output_segment+0x1a0>)
 8013b10:	f240 621c 	movw	r2, #1564	; 0x61c
 8013b14:	4914      	ldr	r1, [pc, #80]	; (8013b68 <tcp_output_segment+0x1b8>)
 8013b16:	4810      	ldr	r0, [pc, #64]	; (8013b58 <tcp_output_segment+0x1a8>)
 8013b18:	f003 fe90 	bl	801783c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	6858      	ldr	r0, [r3, #4]
 8013b20:	68b9      	ldr	r1, [r7, #8]
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	1d1c      	adds	r4, r3, #4
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	7add      	ldrb	r5, [r3, #11]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	7a9b      	ldrb	r3, [r3, #10]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	9202      	str	r2, [sp, #8]
 8013b32:	2206      	movs	r2, #6
 8013b34:	9201      	str	r2, [sp, #4]
 8013b36:	9300      	str	r3, [sp, #0]
 8013b38:	462b      	mov	r3, r5
 8013b3a:	4622      	mov	r2, r4
 8013b3c:	f002 fbac 	bl	8016298 <ip4_output_if>
 8013b40:	4603      	mov	r3, r0
 8013b42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3720      	adds	r7, #32
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8013b50:	0801b034 	.word	0x0801b034
 8013b54:	0801b5f8 	.word	0x0801b5f8
 8013b58:	0801b088 	.word	0x0801b088
 8013b5c:	0801b618 	.word	0x0801b618
 8013b60:	0801b638 	.word	0x0801b638
 8013b64:	2000bd30 	.word	0x2000bd30
 8013b68:	0801b65c 	.word	0x0801b65c

08013b6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013b6c:	b5b0      	push	{r4, r5, r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d106      	bne.n	8013b88 <tcp_rexmit_rto_prepare+0x1c>
 8013b7a:	4b31      	ldr	r3, [pc, #196]	; (8013c40 <tcp_rexmit_rto_prepare+0xd4>)
 8013b7c:	f240 6263 	movw	r2, #1635	; 0x663
 8013b80:	4930      	ldr	r1, [pc, #192]	; (8013c44 <tcp_rexmit_rto_prepare+0xd8>)
 8013b82:	4831      	ldr	r0, [pc, #196]	; (8013c48 <tcp_rexmit_rto_prepare+0xdc>)
 8013b84:	f003 fe5a 	bl	801783c <iprintf>

  if (pcb->unacked == NULL) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d102      	bne.n	8013b96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b90:	f06f 0305 	mvn.w	r3, #5
 8013b94:	e050      	b.n	8013c38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b9a:	60fb      	str	r3, [r7, #12]
 8013b9c:	e00b      	b.n	8013bb6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7ff fee6 	bl	8013970 <tcp_output_segment_busy>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d002      	beq.n	8013bb0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013baa:	f06f 0305 	mvn.w	r3, #5
 8013bae:	e043      	b.n	8013c38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	60fb      	str	r3, [r7, #12]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d1ef      	bne.n	8013b9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013bbe:	68f8      	ldr	r0, [r7, #12]
 8013bc0:	f7ff fed6 	bl	8013970 <tcp_output_segment_busy>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d002      	beq.n	8013bd0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013bca:	f06f 0305 	mvn.w	r3, #5
 8013bce:	e033      	b.n	8013c38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2200      	movs	r2, #0
 8013be4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	8b5b      	ldrh	r3, [r3, #26]
 8013bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7f8 fd87 	bl	800c70e <lwip_htonl>
 8013c00:	4604      	mov	r4, r0
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	891b      	ldrh	r3, [r3, #8]
 8013c06:	461d      	mov	r5, r3
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	899b      	ldrh	r3, [r3, #12]
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7f8 fd67 	bl	800c6e4 <lwip_htons>
 8013c16:	4603      	mov	r3, r0
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	f003 0303 	and.w	r3, r3, #3
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d001      	beq.n	8013c26 <tcp_rexmit_rto_prepare+0xba>
 8013c22:	2301      	movs	r3, #1
 8013c24:	e000      	b.n	8013c28 <tcp_rexmit_rto_prepare+0xbc>
 8013c26:	2300      	movs	r3, #0
 8013c28:	442b      	add	r3, r5
 8013c2a:	18e2      	adds	r2, r4, r3
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013c36:	2300      	movs	r3, #0
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8013c40:	0801b034 	.word	0x0801b034
 8013c44:	0801b670 	.word	0x0801b670
 8013c48:	0801b088 	.word	0x0801b088

08013c4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d106      	bne.n	8013c68 <tcp_rexmit_rto_commit+0x1c>
 8013c5a:	4b0d      	ldr	r3, [pc, #52]	; (8013c90 <tcp_rexmit_rto_commit+0x44>)
 8013c5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c60:	490c      	ldr	r1, [pc, #48]	; (8013c94 <tcp_rexmit_rto_commit+0x48>)
 8013c62:	480d      	ldr	r0, [pc, #52]	; (8013c98 <tcp_rexmit_rto_commit+0x4c>)
 8013c64:	f003 fdea 	bl	801783c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c6e:	2bff      	cmp	r3, #255	; 0xff
 8013c70:	d007      	beq.n	8013c82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c78:	3301      	adds	r3, #1
 8013c7a:	b2da      	uxtb	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff fc80 	bl	8013588 <tcp_output>
}
 8013c88:	bf00      	nop
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	0801b034 	.word	0x0801b034
 8013c94:	0801b694 	.word	0x0801b694
 8013c98:	0801b088 	.word	0x0801b088

08013c9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d106      	bne.n	8013cb8 <tcp_rexmit_rto+0x1c>
 8013caa:	4b0a      	ldr	r3, [pc, #40]	; (8013cd4 <tcp_rexmit_rto+0x38>)
 8013cac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013cb0:	4909      	ldr	r1, [pc, #36]	; (8013cd8 <tcp_rexmit_rto+0x3c>)
 8013cb2:	480a      	ldr	r0, [pc, #40]	; (8013cdc <tcp_rexmit_rto+0x40>)
 8013cb4:	f003 fdc2 	bl	801783c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff ff57 	bl	8013b6c <tcp_rexmit_rto_prepare>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ff ffc1 	bl	8013c4c <tcp_rexmit_rto_commit>
  }
}
 8013cca:	bf00      	nop
 8013ccc:	3708      	adds	r7, #8
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	0801b034 	.word	0x0801b034
 8013cd8:	0801b6b8 	.word	0x0801b6b8
 8013cdc:	0801b088 	.word	0x0801b088

08013ce0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013ce0:	b590      	push	{r4, r7, lr}
 8013ce2:	b085      	sub	sp, #20
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d106      	bne.n	8013cfc <tcp_rexmit+0x1c>
 8013cee:	4b2f      	ldr	r3, [pc, #188]	; (8013dac <tcp_rexmit+0xcc>)
 8013cf0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013cf4:	492e      	ldr	r1, [pc, #184]	; (8013db0 <tcp_rexmit+0xd0>)
 8013cf6:	482f      	ldr	r0, [pc, #188]	; (8013db4 <tcp_rexmit+0xd4>)
 8013cf8:	f003 fda0 	bl	801783c <iprintf>

  if (pcb->unacked == NULL) {
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d102      	bne.n	8013d0a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013d04:	f06f 0305 	mvn.w	r3, #5
 8013d08:	e04c      	b.n	8013da4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d0e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013d10:	68b8      	ldr	r0, [r7, #8]
 8013d12:	f7ff fe2d 	bl	8013970 <tcp_output_segment_busy>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d002      	beq.n	8013d22 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013d1c:	f06f 0305 	mvn.w	r3, #5
 8013d20:	e040      	b.n	8013da4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	336c      	adds	r3, #108	; 0x6c
 8013d2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d30:	e002      	b.n	8013d38 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d011      	beq.n	8013d64 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7f8 fce0 	bl	800c70e <lwip_htonl>
 8013d4e:	4604      	mov	r4, r0
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f8 fcd9 	bl	800c70e <lwip_htonl>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	dbe6      	blt.n	8013d32 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	68ba      	ldr	r2, [r7, #8]
 8013d70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d103      	bne.n	8013d82 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d88:	2bff      	cmp	r3, #255	; 0xff
 8013d8a:	d007      	beq.n	8013d9c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d92:	3301      	adds	r3, #1
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd90      	pop	{r4, r7, pc}
 8013dac:	0801b034 	.word	0x0801b034
 8013db0:	0801b6d4 	.word	0x0801b6d4
 8013db4:	0801b088 	.word	0x0801b088

08013db8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d106      	bne.n	8013dd4 <tcp_rexmit_fast+0x1c>
 8013dc6:	4b2a      	ldr	r3, [pc, #168]	; (8013e70 <tcp_rexmit_fast+0xb8>)
 8013dc8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013dcc:	4929      	ldr	r1, [pc, #164]	; (8013e74 <tcp_rexmit_fast+0xbc>)
 8013dce:	482a      	ldr	r0, [pc, #168]	; (8013e78 <tcp_rexmit_fast+0xc0>)
 8013dd0:	f003 fd34 	bl	801783c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d045      	beq.n	8013e68 <tcp_rexmit_fast+0xb0>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8b5b      	ldrh	r3, [r3, #26]
 8013de0:	f003 0304 	and.w	r3, r3, #4
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d13f      	bne.n	8013e68 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff ff79 	bl	8013ce0 <tcp_rexmit>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d139      	bne.n	8013e68 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e00:	4293      	cmp	r3, r2
 8013e02:	bf28      	it	cs
 8013e04:	4613      	movcs	r3, r2
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	da00      	bge.n	8013e0e <tcp_rexmit_fast+0x56>
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	105b      	asrs	r3, r3, #1
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013e1e:	461a      	mov	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e24:	005b      	lsls	r3, r3, #1
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d206      	bcs.n	8013e38 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e42:	4619      	mov	r1, r3
 8013e44:	0049      	lsls	r1, r1, #1
 8013e46:	440b      	add	r3, r1
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	4413      	add	r3, r2
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	8b5b      	ldrh	r3, [r3, #26]
 8013e58:	f043 0304 	orr.w	r3, r3, #4
 8013e5c:	b29a      	uxth	r2, r3
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2200      	movs	r2, #0
 8013e66:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013e68:	bf00      	nop
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0801b034 	.word	0x0801b034
 8013e74:	0801b6ec 	.word	0x0801b6ec
 8013e78:	0801b088 	.word	0x0801b088

08013e7c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b086      	sub	sp, #24
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	607b      	str	r3, [r7, #4]
 8013e86:	460b      	mov	r3, r1
 8013e88:	817b      	strh	r3, [r7, #10]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e8e:	897a      	ldrh	r2, [r7, #10]
 8013e90:	893b      	ldrh	r3, [r7, #8]
 8013e92:	4413      	add	r3, r2
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	3314      	adds	r3, #20
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	2022      	movs	r0, #34	; 0x22
 8013ea2:	f7f9 fce7 	bl	800d874 <pbuf_alloc>
 8013ea6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d04d      	beq.n	8013f4a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013eae:	897b      	ldrh	r3, [r7, #10]
 8013eb0:	3313      	adds	r3, #19
 8013eb2:	697a      	ldr	r2, [r7, #20]
 8013eb4:	8952      	ldrh	r2, [r2, #10]
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	db06      	blt.n	8013ec8 <tcp_output_alloc_header_common+0x4c>
 8013eba:	4b26      	ldr	r3, [pc, #152]	; (8013f54 <tcp_output_alloc_header_common+0xd8>)
 8013ebc:	f240 7223 	movw	r2, #1827	; 0x723
 8013ec0:	4925      	ldr	r1, [pc, #148]	; (8013f58 <tcp_output_alloc_header_common+0xdc>)
 8013ec2:	4826      	ldr	r0, [pc, #152]	; (8013f5c <tcp_output_alloc_header_common+0xe0>)
 8013ec4:	f003 fcba 	bl	801783c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013ece:	8c3b      	ldrh	r3, [r7, #32]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f8 fc07 	bl	800c6e4 <lwip_htons>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	461a      	mov	r2, r3
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7f8 fbff 	bl	800c6e4 <lwip_htons>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	461a      	mov	r2, r3
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f7f8 fc0a 	bl	800c70e <lwip_htonl>
 8013efa:	4602      	mov	r2, r0
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013f00:	897b      	ldrh	r3, [r7, #10]
 8013f02:	089b      	lsrs	r3, r3, #2
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	3305      	adds	r3, #5
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	031b      	lsls	r3, r3, #12
 8013f0c:	b29a      	uxth	r2, r3
 8013f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	4313      	orrs	r3, r2
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7f8 fbe3 	bl	800c6e4 <lwip_htons>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	461a      	mov	r2, r3
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013f26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7f8 fbdb 	bl	800c6e4 <lwip_htons>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	461a      	mov	r2, r3
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	741a      	strb	r2, [r3, #16]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	2200      	movs	r2, #0
 8013f44:	749a      	strb	r2, [r3, #18]
 8013f46:	2200      	movs	r2, #0
 8013f48:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013f4a:	697b      	ldr	r3, [r7, #20]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3718      	adds	r7, #24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	0801b034 	.word	0x0801b034
 8013f58:	0801b70c 	.word	0x0801b70c
 8013f5c:	0801b088 	.word	0x0801b088

08013f60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013f60:	b5b0      	push	{r4, r5, r7, lr}
 8013f62:	b08a      	sub	sp, #40	; 0x28
 8013f64:	af04      	add	r7, sp, #16
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	607b      	str	r3, [r7, #4]
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	817b      	strh	r3, [r7, #10]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d106      	bne.n	8013f86 <tcp_output_alloc_header+0x26>
 8013f78:	4b15      	ldr	r3, [pc, #84]	; (8013fd0 <tcp_output_alloc_header+0x70>)
 8013f7a:	f240 7242 	movw	r2, #1858	; 0x742
 8013f7e:	4915      	ldr	r1, [pc, #84]	; (8013fd4 <tcp_output_alloc_header+0x74>)
 8013f80:	4815      	ldr	r0, [pc, #84]	; (8013fd8 <tcp_output_alloc_header+0x78>)
 8013f82:	f003 fc5b 	bl	801783c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	8adb      	ldrh	r3, [r3, #22]
 8013f8e:	68fa      	ldr	r2, [r7, #12]
 8013f90:	8b12      	ldrh	r2, [r2, #24]
 8013f92:	68f9      	ldr	r1, [r7, #12]
 8013f94:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f96:	893d      	ldrh	r5, [r7, #8]
 8013f98:	897c      	ldrh	r4, [r7, #10]
 8013f9a:	9103      	str	r1, [sp, #12]
 8013f9c:	2110      	movs	r1, #16
 8013f9e:	9102      	str	r1, [sp, #8]
 8013fa0:	9201      	str	r2, [sp, #4]
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	462a      	mov	r2, r5
 8013fa8:	4621      	mov	r1, r4
 8013faa:	f7ff ff67 	bl	8013e7c <tcp_output_alloc_header_common>
 8013fae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d006      	beq.n	8013fc4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013fbe:	441a      	add	r2, r3
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013fc4:	697b      	ldr	r3, [r7, #20]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3718      	adds	r7, #24
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	0801b034 	.word	0x0801b034
 8013fd4:	0801b73c 	.word	0x0801b73c
 8013fd8:	0801b088 	.word	0x0801b088

08013fdc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b088      	sub	sp, #32
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	4611      	mov	r1, r2
 8013fe8:	461a      	mov	r2, r3
 8013fea:	460b      	mov	r3, r1
 8013fec:	71fb      	strb	r3, [r7, #7]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d106      	bne.n	801400a <tcp_output_fill_options+0x2e>
 8013ffc:	4b13      	ldr	r3, [pc, #76]	; (801404c <tcp_output_fill_options+0x70>)
 8013ffe:	f240 7256 	movw	r2, #1878	; 0x756
 8014002:	4913      	ldr	r1, [pc, #76]	; (8014050 <tcp_output_fill_options+0x74>)
 8014004:	4813      	ldr	r0, [pc, #76]	; (8014054 <tcp_output_fill_options+0x78>)
 8014006:	f003 fc19 	bl	801783c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	3314      	adds	r3, #20
 8014014:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	f103 0214 	add.w	r2, r3, #20
 801401c:	8bfb      	ldrh	r3, [r7, #30]
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	4619      	mov	r1, r3
 8014022:	79fb      	ldrb	r3, [r7, #7]
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	f003 0304 	and.w	r3, r3, #4
 801402a:	440b      	add	r3, r1
 801402c:	4413      	add	r3, r2
 801402e:	697a      	ldr	r2, [r7, #20]
 8014030:	429a      	cmp	r2, r3
 8014032:	d006      	beq.n	8014042 <tcp_output_fill_options+0x66>
 8014034:	4b05      	ldr	r3, [pc, #20]	; (801404c <tcp_output_fill_options+0x70>)
 8014036:	f240 7275 	movw	r2, #1909	; 0x775
 801403a:	4907      	ldr	r1, [pc, #28]	; (8014058 <tcp_output_fill_options+0x7c>)
 801403c:	4805      	ldr	r0, [pc, #20]	; (8014054 <tcp_output_fill_options+0x78>)
 801403e:	f003 fbfd 	bl	801783c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014042:	bf00      	nop
 8014044:	3720      	adds	r7, #32
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	0801b034 	.word	0x0801b034
 8014050:	0801b764 	.word	0x0801b764
 8014054:	0801b088 	.word	0x0801b088
 8014058:	0801b65c 	.word	0x0801b65c

0801405c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b08a      	sub	sp, #40	; 0x28
 8014060:	af04      	add	r7, sp, #16
 8014062:	60f8      	str	r0, [r7, #12]
 8014064:	60b9      	str	r1, [r7, #8]
 8014066:	607a      	str	r2, [r7, #4]
 8014068:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d106      	bne.n	801407e <tcp_output_control_segment+0x22>
 8014070:	4b1c      	ldr	r3, [pc, #112]	; (80140e4 <tcp_output_control_segment+0x88>)
 8014072:	f240 7287 	movw	r2, #1927	; 0x787
 8014076:	491c      	ldr	r1, [pc, #112]	; (80140e8 <tcp_output_control_segment+0x8c>)
 8014078:	481c      	ldr	r0, [pc, #112]	; (80140ec <tcp_output_control_segment+0x90>)
 801407a:	f003 fbdf 	bl	801783c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801407e:	683a      	ldr	r2, [r7, #0]
 8014080:	6879      	ldr	r1, [r7, #4]
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	f7fe fae8 	bl	8012658 <tcp_route>
 8014088:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d102      	bne.n	8014096 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014090:	23fc      	movs	r3, #252	; 0xfc
 8014092:	75fb      	strb	r3, [r7, #23]
 8014094:	e01c      	b.n	80140d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d006      	beq.n	80140aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	7adb      	ldrb	r3, [r3, #11]
 80140a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	7a9b      	ldrb	r3, [r3, #10]
 80140a6:	757b      	strb	r3, [r7, #21]
 80140a8:	e003      	b.n	80140b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80140aa:	23ff      	movs	r3, #255	; 0xff
 80140ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80140ae:	2300      	movs	r3, #0
 80140b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80140b2:	7dba      	ldrb	r2, [r7, #22]
 80140b4:	693b      	ldr	r3, [r7, #16]
 80140b6:	9302      	str	r3, [sp, #8]
 80140b8:	2306      	movs	r3, #6
 80140ba:	9301      	str	r3, [sp, #4]
 80140bc:	7d7b      	ldrb	r3, [r7, #21]
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	4613      	mov	r3, r2
 80140c2:	683a      	ldr	r2, [r7, #0]
 80140c4:	6879      	ldr	r1, [r7, #4]
 80140c6:	68b8      	ldr	r0, [r7, #8]
 80140c8:	f002 f8e6 	bl	8016298 <ip4_output_if>
 80140cc:	4603      	mov	r3, r0
 80140ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80140d0:	68b8      	ldr	r0, [r7, #8]
 80140d2:	f7f9 feb3 	bl	800de3c <pbuf_free>
  return err;
 80140d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3718      	adds	r7, #24
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	0801b034 	.word	0x0801b034
 80140e8:	0801b78c 	.word	0x0801b78c
 80140ec:	0801b088 	.word	0x0801b088

080140f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80140f0:	b590      	push	{r4, r7, lr}
 80140f2:	b08b      	sub	sp, #44	; 0x2c
 80140f4:	af04      	add	r7, sp, #16
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	607a      	str	r2, [r7, #4]
 80140fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d106      	bne.n	8014112 <tcp_rst+0x22>
 8014104:	4b1f      	ldr	r3, [pc, #124]	; (8014184 <tcp_rst+0x94>)
 8014106:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801410a:	491f      	ldr	r1, [pc, #124]	; (8014188 <tcp_rst+0x98>)
 801410c:	481f      	ldr	r0, [pc, #124]	; (801418c <tcp_rst+0x9c>)
 801410e:	f003 fb95 	bl	801783c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014114:	2b00      	cmp	r3, #0
 8014116:	d106      	bne.n	8014126 <tcp_rst+0x36>
 8014118:	4b1a      	ldr	r3, [pc, #104]	; (8014184 <tcp_rst+0x94>)
 801411a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801411e:	491c      	ldr	r1, [pc, #112]	; (8014190 <tcp_rst+0xa0>)
 8014120:	481a      	ldr	r0, [pc, #104]	; (801418c <tcp_rst+0x9c>)
 8014122:	f003 fb8b 	bl	801783c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014126:	2300      	movs	r3, #0
 8014128:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801412a:	f246 0308 	movw	r3, #24584	; 0x6008
 801412e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014130:	7dfb      	ldrb	r3, [r7, #23]
 8014132:	b29c      	uxth	r4, r3
 8014134:	68b8      	ldr	r0, [r7, #8]
 8014136:	f7f8 faea 	bl	800c70e <lwip_htonl>
 801413a:	4602      	mov	r2, r0
 801413c:	8abb      	ldrh	r3, [r7, #20]
 801413e:	9303      	str	r3, [sp, #12]
 8014140:	2314      	movs	r3, #20
 8014142:	9302      	str	r3, [sp, #8]
 8014144:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014146:	9301      	str	r3, [sp, #4]
 8014148:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801414a:	9300      	str	r3, [sp, #0]
 801414c:	4613      	mov	r3, r2
 801414e:	2200      	movs	r2, #0
 8014150:	4621      	mov	r1, r4
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7ff fe92 	bl	8013e7c <tcp_output_alloc_header_common>
 8014158:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00c      	beq.n	801417a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014160:	7dfb      	ldrb	r3, [r7, #23]
 8014162:	2200      	movs	r2, #0
 8014164:	6939      	ldr	r1, [r7, #16]
 8014166:	68f8      	ldr	r0, [r7, #12]
 8014168:	f7ff ff38 	bl	8013fdc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416e:	683a      	ldr	r2, [r7, #0]
 8014170:	6939      	ldr	r1, [r7, #16]
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f7ff ff72 	bl	801405c <tcp_output_control_segment>
 8014178:	e000      	b.n	801417c <tcp_rst+0x8c>
    return;
 801417a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801417c:	371c      	adds	r7, #28
 801417e:	46bd      	mov	sp, r7
 8014180:	bd90      	pop	{r4, r7, pc}
 8014182:	bf00      	nop
 8014184:	0801b034 	.word	0x0801b034
 8014188:	0801b7b8 	.word	0x0801b7b8
 801418c:	0801b088 	.word	0x0801b088
 8014190:	0801b7d4 	.word	0x0801b7d4

08014194 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014194:	b590      	push	{r4, r7, lr}
 8014196:	b087      	sub	sp, #28
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801419c:	2300      	movs	r3, #0
 801419e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80141a0:	2300      	movs	r3, #0
 80141a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d106      	bne.n	80141b8 <tcp_send_empty_ack+0x24>
 80141aa:	4b28      	ldr	r3, [pc, #160]	; (801424c <tcp_send_empty_ack+0xb8>)
 80141ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80141b0:	4927      	ldr	r1, [pc, #156]	; (8014250 <tcp_send_empty_ack+0xbc>)
 80141b2:	4828      	ldr	r0, [pc, #160]	; (8014254 <tcp_send_empty_ack+0xc0>)
 80141b4:	f003 fb42 	bl	801783c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80141b8:	7dfb      	ldrb	r3, [r7, #23]
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	b2db      	uxtb	r3, r3
 80141be:	f003 0304 	and.w	r3, r3, #4
 80141c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80141c4:	7d7b      	ldrb	r3, [r7, #21]
 80141c6:	b29c      	uxth	r4, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7f8 fa9e 	bl	800c70e <lwip_htonl>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2200      	movs	r2, #0
 80141d6:	4621      	mov	r1, r4
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff fec1 	bl	8013f60 <tcp_output_alloc_header>
 80141de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d109      	bne.n	80141fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	8b5b      	ldrh	r3, [r3, #26]
 80141ea:	f043 0303 	orr.w	r3, r3, #3
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80141f4:	f06f 0301 	mvn.w	r3, #1
 80141f8:	e023      	b.n	8014242 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141fa:	7dbb      	ldrb	r3, [r7, #22]
 80141fc:	7dfa      	ldrb	r2, [r7, #23]
 80141fe:	6939      	ldr	r1, [r7, #16]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7ff feeb 	bl	8013fdc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3304      	adds	r3, #4
 801420c:	6939      	ldr	r1, [r7, #16]
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f7ff ff24 	bl	801405c <tcp_output_control_segment>
 8014214:	4603      	mov	r3, r0
 8014216:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d007      	beq.n	8014230 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	8b5b      	ldrh	r3, [r3, #26]
 8014224:	f043 0303 	orr.w	r3, r3, #3
 8014228:	b29a      	uxth	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	835a      	strh	r2, [r3, #26]
 801422e:	e006      	b.n	801423e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	8b5b      	ldrh	r3, [r3, #26]
 8014234:	f023 0303 	bic.w	r3, r3, #3
 8014238:	b29a      	uxth	r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801423e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014242:	4618      	mov	r0, r3
 8014244:	371c      	adds	r7, #28
 8014246:	46bd      	mov	sp, r7
 8014248:	bd90      	pop	{r4, r7, pc}
 801424a:	bf00      	nop
 801424c:	0801b034 	.word	0x0801b034
 8014250:	0801b7f0 	.word	0x0801b7f0
 8014254:	0801b088 	.word	0x0801b088

08014258 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014258:	b590      	push	{r4, r7, lr}
 801425a:	b087      	sub	sp, #28
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014260:	2300      	movs	r3, #0
 8014262:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d106      	bne.n	8014278 <tcp_keepalive+0x20>
 801426a:	4b18      	ldr	r3, [pc, #96]	; (80142cc <tcp_keepalive+0x74>)
 801426c:	f640 0224 	movw	r2, #2084	; 0x824
 8014270:	4917      	ldr	r1, [pc, #92]	; (80142d0 <tcp_keepalive+0x78>)
 8014272:	4818      	ldr	r0, [pc, #96]	; (80142d4 <tcp_keepalive+0x7c>)
 8014274:	f003 fae2 	bl	801783c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014278:	7dfb      	ldrb	r3, [r7, #23]
 801427a:	b29c      	uxth	r4, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014280:	3b01      	subs	r3, #1
 8014282:	4618      	mov	r0, r3
 8014284:	f7f8 fa43 	bl	800c70e <lwip_htonl>
 8014288:	4603      	mov	r3, r0
 801428a:	2200      	movs	r2, #0
 801428c:	4621      	mov	r1, r4
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7ff fe66 	bl	8013f60 <tcp_output_alloc_header>
 8014294:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d102      	bne.n	80142a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801429c:	f04f 33ff 	mov.w	r3, #4294967295
 80142a0:	e010      	b.n	80142c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80142a2:	7dfb      	ldrb	r3, [r7, #23]
 80142a4:	2200      	movs	r2, #0
 80142a6:	6939      	ldr	r1, [r7, #16]
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff fe97 	bl	8013fdc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142ae:	687a      	ldr	r2, [r7, #4]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	3304      	adds	r3, #4
 80142b4:	6939      	ldr	r1, [r7, #16]
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f7ff fed0 	bl	801405c <tcp_output_control_segment>
 80142bc:	4603      	mov	r3, r0
 80142be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80142c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	371c      	adds	r7, #28
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd90      	pop	{r4, r7, pc}
 80142cc:	0801b034 	.word	0x0801b034
 80142d0:	0801b810 	.word	0x0801b810
 80142d4:	0801b088 	.word	0x0801b088

080142d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	b08b      	sub	sp, #44	; 0x2c
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142e0:	2300      	movs	r3, #0
 80142e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d106      	bne.n	80142fa <tcp_zero_window_probe+0x22>
 80142ec:	4b4c      	ldr	r3, [pc, #304]	; (8014420 <tcp_zero_window_probe+0x148>)
 80142ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80142f2:	494c      	ldr	r1, [pc, #304]	; (8014424 <tcp_zero_window_probe+0x14c>)
 80142f4:	484c      	ldr	r0, [pc, #304]	; (8014428 <tcp_zero_window_probe+0x150>)
 80142f6:	f003 faa1 	bl	801783c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014300:	6a3b      	ldr	r3, [r7, #32]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d101      	bne.n	801430a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014306:	2300      	movs	r3, #0
 8014308:	e086      	b.n	8014418 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014310:	2bff      	cmp	r3, #255	; 0xff
 8014312:	d007      	beq.n	8014324 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801431a:	3301      	adds	r3, #1
 801431c:	b2da      	uxtb	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014324:	6a3b      	ldr	r3, [r7, #32]
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	899b      	ldrh	r3, [r3, #12]
 801432a:	b29b      	uxth	r3, r3
 801432c:	4618      	mov	r0, r3
 801432e:	f7f8 f9d9 	bl	800c6e4 <lwip_htons>
 8014332:	4603      	mov	r3, r0
 8014334:	b2db      	uxtb	r3, r3
 8014336:	f003 0301 	and.w	r3, r3, #1
 801433a:	2b00      	cmp	r3, #0
 801433c:	d005      	beq.n	801434a <tcp_zero_window_probe+0x72>
 801433e:	6a3b      	ldr	r3, [r7, #32]
 8014340:	891b      	ldrh	r3, [r3, #8]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <tcp_zero_window_probe+0x72>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <tcp_zero_window_probe+0x74>
 801434a:	2300      	movs	r3, #0
 801434c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801434e:	7ffb      	ldrb	r3, [r7, #31]
 8014350:	2b00      	cmp	r3, #0
 8014352:	bf0c      	ite	eq
 8014354:	2301      	moveq	r3, #1
 8014356:	2300      	movne	r3, #0
 8014358:	b2db      	uxtb	r3, r3
 801435a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801435c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014360:	b299      	uxth	r1, r3
 8014362:	6a3b      	ldr	r3, [r7, #32]
 8014364:	68db      	ldr	r3, [r3, #12]
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	8bba      	ldrh	r2, [r7, #28]
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7ff fdf8 	bl	8013f60 <tcp_output_alloc_header>
 8014370:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d102      	bne.n	801437e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014378:	f04f 33ff 	mov.w	r3, #4294967295
 801437c:	e04c      	b.n	8014418 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014384:	7ffb      	ldrb	r3, [r7, #31]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d011      	beq.n	80143ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	899b      	ldrh	r3, [r3, #12]
 801438e:	b29b      	uxth	r3, r3
 8014390:	b21b      	sxth	r3, r3
 8014392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014396:	b21c      	sxth	r4, r3
 8014398:	2011      	movs	r0, #17
 801439a:	f7f8 f9a3 	bl	800c6e4 <lwip_htons>
 801439e:	4603      	mov	r3, r0
 80143a0:	b21b      	sxth	r3, r3
 80143a2:	4323      	orrs	r3, r4
 80143a4:	b21b      	sxth	r3, r3
 80143a6:	b29a      	uxth	r2, r3
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	819a      	strh	r2, [r3, #12]
 80143ac:	e010      	b.n	80143d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	3314      	adds	r3, #20
 80143b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80143b6:	6a3b      	ldr	r3, [r7, #32]
 80143b8:	6858      	ldr	r0, [r3, #4]
 80143ba:	6a3b      	ldr	r3, [r7, #32]
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	891a      	ldrh	r2, [r3, #8]
 80143c0:	6a3b      	ldr	r3, [r7, #32]
 80143c2:	891b      	ldrh	r3, [r3, #8]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	2201      	movs	r2, #1
 80143ca:	6939      	ldr	r1, [r7, #16]
 80143cc:	f7f9 ff2c 	bl	800e228 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80143d0:	6a3b      	ldr	r3, [r7, #32]
 80143d2:	68db      	ldr	r3, [r3, #12]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7f8 f999 	bl	800c70e <lwip_htonl>
 80143dc:	4603      	mov	r3, r0
 80143de:	3301      	adds	r3, #1
 80143e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	1ad3      	subs	r3, r2, r3
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	da02      	bge.n	80143f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	68fa      	ldr	r2, [r7, #12]
 80143f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143f8:	2200      	movs	r2, #0
 80143fa:	69b9      	ldr	r1, [r7, #24]
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7ff fded 	bl	8013fdc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	3304      	adds	r3, #4
 8014408:	69b9      	ldr	r1, [r7, #24]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f7ff fe26 	bl	801405c <tcp_output_control_segment>
 8014410:	4603      	mov	r3, r0
 8014412:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014414:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014418:	4618      	mov	r0, r3
 801441a:	372c      	adds	r7, #44	; 0x2c
 801441c:	46bd      	mov	sp, r7
 801441e:	bd90      	pop	{r4, r7, pc}
 8014420:	0801b034 	.word	0x0801b034
 8014424:	0801b82c 	.word	0x0801b82c
 8014428:	0801b088 	.word	0x0801b088

0801442c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014434:	f7f9 ffe6 	bl	800e404 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014438:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <tcpip_tcp_timer+0x38>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d103      	bne.n	8014448 <tcpip_tcp_timer+0x1c>
 8014440:	4b09      	ldr	r3, [pc, #36]	; (8014468 <tcpip_tcp_timer+0x3c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d005      	beq.n	8014454 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014448:	2200      	movs	r2, #0
 801444a:	4908      	ldr	r1, [pc, #32]	; (801446c <tcpip_tcp_timer+0x40>)
 801444c:	20fa      	movs	r0, #250	; 0xfa
 801444e:	f000 f8f3 	bl	8014638 <sys_timeout>
 8014452:	e003      	b.n	801445c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014454:	4b06      	ldr	r3, [pc, #24]	; (8014470 <tcpip_tcp_timer+0x44>)
 8014456:	2200      	movs	r2, #0
 8014458:	601a      	str	r2, [r3, #0]
  }
}
 801445a:	bf00      	nop
 801445c:	bf00      	nop
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	2000bd2c 	.word	0x2000bd2c
 8014468:	2000bd3c 	.word	0x2000bd3c
 801446c:	0801442d 	.word	0x0801442d
 8014470:	20004e28 	.word	0x20004e28

08014474 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014478:	4b0a      	ldr	r3, [pc, #40]	; (80144a4 <tcp_timer_needed+0x30>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10f      	bne.n	80144a0 <tcp_timer_needed+0x2c>
 8014480:	4b09      	ldr	r3, [pc, #36]	; (80144a8 <tcp_timer_needed+0x34>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d103      	bne.n	8014490 <tcp_timer_needed+0x1c>
 8014488:	4b08      	ldr	r3, [pc, #32]	; (80144ac <tcp_timer_needed+0x38>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d007      	beq.n	80144a0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014490:	4b04      	ldr	r3, [pc, #16]	; (80144a4 <tcp_timer_needed+0x30>)
 8014492:	2201      	movs	r2, #1
 8014494:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014496:	2200      	movs	r2, #0
 8014498:	4905      	ldr	r1, [pc, #20]	; (80144b0 <tcp_timer_needed+0x3c>)
 801449a:	20fa      	movs	r0, #250	; 0xfa
 801449c:	f000 f8cc 	bl	8014638 <sys_timeout>
  }
}
 80144a0:	bf00      	nop
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	20004e28 	.word	0x20004e28
 80144a8:	2000bd2c 	.word	0x2000bd2c
 80144ac:	2000bd3c 	.word	0x2000bd3c
 80144b0:	0801442d 	.word	0x0801442d

080144b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b086      	sub	sp, #24
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80144c0:	200a      	movs	r0, #10
 80144c2:	f7f8 fdc5 	bl	800d050 <memp_malloc>
 80144c6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d109      	bne.n	80144e2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d151      	bne.n	8014578 <sys_timeout_abs+0xc4>
 80144d4:	4b2a      	ldr	r3, [pc, #168]	; (8014580 <sys_timeout_abs+0xcc>)
 80144d6:	22be      	movs	r2, #190	; 0xbe
 80144d8:	492a      	ldr	r1, [pc, #168]	; (8014584 <sys_timeout_abs+0xd0>)
 80144da:	482b      	ldr	r0, [pc, #172]	; (8014588 <sys_timeout_abs+0xd4>)
 80144dc:	f003 f9ae 	bl	801783c <iprintf>
    return;
 80144e0:	e04a      	b.n	8014578 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	2200      	movs	r2, #0
 80144e6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	68ba      	ldr	r2, [r7, #8]
 80144ec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	687a      	ldr	r2, [r7, #4]
 80144f2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	68fa      	ldr	r2, [r7, #12]
 80144f8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144fa:	4b24      	ldr	r3, [pc, #144]	; (801458c <sys_timeout_abs+0xd8>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d103      	bne.n	801450a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014502:	4a22      	ldr	r2, [pc, #136]	; (801458c <sys_timeout_abs+0xd8>)
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	6013      	str	r3, [r2, #0]
    return;
 8014508:	e037      	b.n	801457a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	685a      	ldr	r2, [r3, #4]
 801450e:	4b1f      	ldr	r3, [pc, #124]	; (801458c <sys_timeout_abs+0xd8>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	0fdb      	lsrs	r3, r3, #31
 8014518:	f003 0301 	and.w	r3, r3, #1
 801451c:	b2db      	uxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	d007      	beq.n	8014532 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014522:	4b1a      	ldr	r3, [pc, #104]	; (801458c <sys_timeout_abs+0xd8>)
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801452a:	4a18      	ldr	r2, [pc, #96]	; (801458c <sys_timeout_abs+0xd8>)
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	6013      	str	r3, [r2, #0]
 8014530:	e023      	b.n	801457a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014532:	4b16      	ldr	r3, [pc, #88]	; (801458c <sys_timeout_abs+0xd8>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	617b      	str	r3, [r7, #20]
 8014538:	e01a      	b.n	8014570 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00b      	beq.n	801455a <sys_timeout_abs+0xa6>
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	685a      	ldr	r2, [r3, #4]
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	0fdb      	lsrs	r3, r3, #31
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	b2db      	uxtb	r3, r3
 8014556:	2b00      	cmp	r3, #0
 8014558:	d007      	beq.n	801456a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	693a      	ldr	r2, [r7, #16]
 8014566:	601a      	str	r2, [r3, #0]
        break;
 8014568:	e007      	b.n	801457a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	617b      	str	r3, [r7, #20]
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d1e1      	bne.n	801453a <sys_timeout_abs+0x86>
 8014576:	e000      	b.n	801457a <sys_timeout_abs+0xc6>
    return;
 8014578:	bf00      	nop
      }
    }
  }
}
 801457a:	3718      	adds	r7, #24
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	0801b850 	.word	0x0801b850
 8014584:	0801b884 	.word	0x0801b884
 8014588:	0801b8c4 	.word	0x0801b8c4
 801458c:	20004e20 	.word	0x20004e20

08014590 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	4798      	blx	r3

  now = sys_now();
 80145a2:	f7f1 fce7 	bl	8005f74 <sys_now>
 80145a6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	4b0f      	ldr	r3, [pc, #60]	; (80145ec <lwip_cyclic_timer+0x5c>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	4413      	add	r3, r2
 80145b2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80145b4:	68fa      	ldr	r2, [r7, #12]
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	0fdb      	lsrs	r3, r3, #31
 80145bc:	f003 0301 	and.w	r3, r3, #1
 80145c0:	b2db      	uxtb	r3, r3
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d009      	beq.n	80145da <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80145c6:	697b      	ldr	r3, [r7, #20]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	4413      	add	r3, r2
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	4907      	ldr	r1, [pc, #28]	; (80145f0 <lwip_cyclic_timer+0x60>)
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7ff ff6e 	bl	80144b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80145d8:	e004      	b.n	80145e4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	4904      	ldr	r1, [pc, #16]	; (80145f0 <lwip_cyclic_timer+0x60>)
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f7ff ff68 	bl	80144b4 <sys_timeout_abs>
}
 80145e4:	bf00      	nop
 80145e6:	3718      	adds	r7, #24
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	20004e24 	.word	0x20004e24
 80145f0:	08014591 	.word	0x08014591

080145f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b082      	sub	sp, #8
 80145f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145fa:	2301      	movs	r3, #1
 80145fc:	607b      	str	r3, [r7, #4]
 80145fe:	e00e      	b.n	801461e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014600:	4a0b      	ldr	r2, [pc, #44]	; (8014630 <sys_timeouts_init+0x3c>)
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	00db      	lsls	r3, r3, #3
 801460c:	4a08      	ldr	r2, [pc, #32]	; (8014630 <sys_timeouts_init+0x3c>)
 801460e:	4413      	add	r3, r2
 8014610:	461a      	mov	r2, r3
 8014612:	4908      	ldr	r1, [pc, #32]	; (8014634 <sys_timeouts_init+0x40>)
 8014614:	f000 f810 	bl	8014638 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	3301      	adds	r3, #1
 801461c:	607b      	str	r3, [r7, #4]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2b02      	cmp	r3, #2
 8014622:	d9ed      	bls.n	8014600 <sys_timeouts_init+0xc>
  }
}
 8014624:	bf00      	nop
 8014626:	bf00      	nop
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	0801c4d4 	.word	0x0801c4d4
 8014634:	08014591 	.word	0x08014591

08014638 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801464a:	d306      	bcc.n	801465a <sys_timeout+0x22>
 801464c:	4b0a      	ldr	r3, [pc, #40]	; (8014678 <sys_timeout+0x40>)
 801464e:	f240 1229 	movw	r2, #297	; 0x129
 8014652:	490a      	ldr	r1, [pc, #40]	; (801467c <sys_timeout+0x44>)
 8014654:	480a      	ldr	r0, [pc, #40]	; (8014680 <sys_timeout+0x48>)
 8014656:	f003 f8f1 	bl	801783c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801465a:	f7f1 fc8b 	bl	8005f74 <sys_now>
 801465e:	4602      	mov	r2, r0
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	4413      	add	r3, r2
 8014664:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	68b9      	ldr	r1, [r7, #8]
 801466a:	6978      	ldr	r0, [r7, #20]
 801466c:	f7ff ff22 	bl	80144b4 <sys_timeout_abs>
#endif
}
 8014670:	bf00      	nop
 8014672:	3718      	adds	r7, #24
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	0801b850 	.word	0x0801b850
 801467c:	0801b8ec 	.word	0x0801b8ec
 8014680:	0801b8c4 	.word	0x0801b8c4

08014684 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801468a:	f7f1 fc73 	bl	8005f74 <sys_now>
 801468e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014690:	4b17      	ldr	r3, [pc, #92]	; (80146f0 <sys_check_timeouts+0x6c>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d022      	beq.n	80146e2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	68fa      	ldr	r2, [r7, #12]
 80146a2:	1ad3      	subs	r3, r2, r3
 80146a4:	0fdb      	lsrs	r3, r3, #31
 80146a6:	f003 0301 	and.w	r3, r3, #1
 80146aa:	b2db      	uxtb	r3, r3
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d11a      	bne.n	80146e6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4a0e      	ldr	r2, [pc, #56]	; (80146f0 <sys_check_timeouts+0x6c>)
 80146b6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	689b      	ldr	r3, [r3, #8]
 80146bc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	4a0a      	ldr	r2, [pc, #40]	; (80146f4 <sys_check_timeouts+0x70>)
 80146ca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80146cc:	68b9      	ldr	r1, [r7, #8]
 80146ce:	200a      	movs	r0, #10
 80146d0:	f7f8 fd10 	bl	800d0f4 <memp_free>
    if (handler != NULL) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d0da      	beq.n	8014690 <sys_check_timeouts+0xc>
      handler(arg);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6838      	ldr	r0, [r7, #0]
 80146de:	4798      	blx	r3
  do {
 80146e0:	e7d6      	b.n	8014690 <sys_check_timeouts+0xc>
      return;
 80146e2:	bf00      	nop
 80146e4:	e000      	b.n	80146e8 <sys_check_timeouts+0x64>
      return;
 80146e6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	20004e20 	.word	0x20004e20
 80146f4:	20004e24 	.word	0x20004e24

080146f8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80146fe:	4b16      	ldr	r3, [pc, #88]	; (8014758 <sys_timeouts_sleeptime+0x60>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d102      	bne.n	801470c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014706:	f04f 33ff 	mov.w	r3, #4294967295
 801470a:	e020      	b.n	801474e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801470c:	f7f1 fc32 	bl	8005f74 <sys_now>
 8014710:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014712:	4b11      	ldr	r3, [pc, #68]	; (8014758 <sys_timeouts_sleeptime+0x60>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	685a      	ldr	r2, [r3, #4]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	0fdb      	lsrs	r3, r3, #31
 801471e:	f003 0301 	and.w	r3, r3, #1
 8014722:	b2db      	uxtb	r3, r3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014728:	2300      	movs	r3, #0
 801472a:	e010      	b.n	801474e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801472c:	4b0a      	ldr	r3, [pc, #40]	; (8014758 <sys_timeouts_sleeptime+0x60>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	685a      	ldr	r2, [r3, #4]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	1ad3      	subs	r3, r2, r3
 8014736:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	da06      	bge.n	801474c <sys_timeouts_sleeptime+0x54>
 801473e:	4b07      	ldr	r3, [pc, #28]	; (801475c <sys_timeouts_sleeptime+0x64>)
 8014740:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014744:	4906      	ldr	r1, [pc, #24]	; (8014760 <sys_timeouts_sleeptime+0x68>)
 8014746:	4807      	ldr	r0, [pc, #28]	; (8014764 <sys_timeouts_sleeptime+0x6c>)
 8014748:	f003 f878 	bl	801783c <iprintf>
    return ret;
 801474c:	683b      	ldr	r3, [r7, #0]
  }
}
 801474e:	4618      	mov	r0, r3
 8014750:	3708      	adds	r7, #8
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	20004e20 	.word	0x20004e20
 801475c:	0801b850 	.word	0x0801b850
 8014760:	0801b924 	.word	0x0801b924
 8014764:	0801b8c4 	.word	0x0801b8c4

08014768 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801476c:	f003 f87e 	bl	801786c <rand>
 8014770:	4603      	mov	r3, r0
 8014772:	b29b      	uxth	r3, r3
 8014774:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014778:	b29b      	uxth	r3, r3
 801477a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801477e:	b29a      	uxth	r2, r3
 8014780:	4b01      	ldr	r3, [pc, #4]	; (8014788 <udp_init+0x20>)
 8014782:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014784:	bf00      	nop
 8014786:	bd80      	pop	{r7, pc}
 8014788:	20000018 	.word	0x20000018

0801478c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801478c:	b480      	push	{r7}
 801478e:	b083      	sub	sp, #12
 8014790:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014796:	4b17      	ldr	r3, [pc, #92]	; (80147f4 <udp_new_port+0x68>)
 8014798:	881b      	ldrh	r3, [r3, #0]
 801479a:	1c5a      	adds	r2, r3, #1
 801479c:	b291      	uxth	r1, r2
 801479e:	4a15      	ldr	r2, [pc, #84]	; (80147f4 <udp_new_port+0x68>)
 80147a0:	8011      	strh	r1, [r2, #0]
 80147a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147a6:	4293      	cmp	r3, r2
 80147a8:	d103      	bne.n	80147b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80147aa:	4b12      	ldr	r3, [pc, #72]	; (80147f4 <udp_new_port+0x68>)
 80147ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80147b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147b2:	4b11      	ldr	r3, [pc, #68]	; (80147f8 <udp_new_port+0x6c>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	603b      	str	r3, [r7, #0]
 80147b8:	e011      	b.n	80147de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	8a5a      	ldrh	r2, [r3, #18]
 80147be:	4b0d      	ldr	r3, [pc, #52]	; (80147f4 <udp_new_port+0x68>)
 80147c0:	881b      	ldrh	r3, [r3, #0]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d108      	bne.n	80147d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80147c6:	88fb      	ldrh	r3, [r7, #6]
 80147c8:	3301      	adds	r3, #1
 80147ca:	80fb      	strh	r3, [r7, #6]
 80147cc:	88fb      	ldrh	r3, [r7, #6]
 80147ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147d2:	d3e0      	bcc.n	8014796 <udp_new_port+0xa>
        return 0;
 80147d4:	2300      	movs	r3, #0
 80147d6:	e007      	b.n	80147e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	68db      	ldr	r3, [r3, #12]
 80147dc:	603b      	str	r3, [r7, #0]
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d1ea      	bne.n	80147ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80147e4:	4b03      	ldr	r3, [pc, #12]	; (80147f4 <udp_new_port+0x68>)
 80147e6:	881b      	ldrh	r3, [r3, #0]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	370c      	adds	r7, #12
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr
 80147f4:	20000018 	.word	0x20000018
 80147f8:	2000bd44 	.word	0x2000bd44

080147fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	4613      	mov	r3, r2
 8014808:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d105      	bne.n	801481c <udp_input_local_match+0x20>
 8014810:	4b27      	ldr	r3, [pc, #156]	; (80148b0 <udp_input_local_match+0xb4>)
 8014812:	2287      	movs	r2, #135	; 0x87
 8014814:	4927      	ldr	r1, [pc, #156]	; (80148b4 <udp_input_local_match+0xb8>)
 8014816:	4828      	ldr	r0, [pc, #160]	; (80148b8 <udp_input_local_match+0xbc>)
 8014818:	f003 f810 	bl	801783c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d105      	bne.n	801482e <udp_input_local_match+0x32>
 8014822:	4b23      	ldr	r3, [pc, #140]	; (80148b0 <udp_input_local_match+0xb4>)
 8014824:	2288      	movs	r2, #136	; 0x88
 8014826:	4925      	ldr	r1, [pc, #148]	; (80148bc <udp_input_local_match+0xc0>)
 8014828:	4823      	ldr	r0, [pc, #140]	; (80148b8 <udp_input_local_match+0xbc>)
 801482a:	f003 f807 	bl	801783c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	7a1b      	ldrb	r3, [r3, #8]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d00b      	beq.n	801484e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	7a1a      	ldrb	r2, [r3, #8]
 801483a:	4b21      	ldr	r3, [pc, #132]	; (80148c0 <udp_input_local_match+0xc4>)
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014842:	3301      	adds	r3, #1
 8014844:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014846:	429a      	cmp	r2, r3
 8014848:	d001      	beq.n	801484e <udp_input_local_match+0x52>
    return 0;
 801484a:	2300      	movs	r3, #0
 801484c:	e02b      	b.n	80148a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801484e:	79fb      	ldrb	r3, [r7, #7]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d018      	beq.n	8014886 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d013      	beq.n	8014882 <udp_input_local_match+0x86>
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00f      	beq.n	8014882 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014862:	4b17      	ldr	r3, [pc, #92]	; (80148c0 <udp_input_local_match+0xc4>)
 8014864:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801486a:	d00a      	beq.n	8014882 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681a      	ldr	r2, [r3, #0]
 8014870:	4b13      	ldr	r3, [pc, #76]	; (80148c0 <udp_input_local_match+0xc4>)
 8014872:	695b      	ldr	r3, [r3, #20]
 8014874:	405a      	eors	r2, r3
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	3308      	adds	r3, #8
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801487e:	2b00      	cmp	r3, #0
 8014880:	d110      	bne.n	80148a4 <udp_input_local_match+0xa8>
          return 1;
 8014882:	2301      	movs	r3, #1
 8014884:	e00f      	b.n	80148a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d009      	beq.n	80148a0 <udp_input_local_match+0xa4>
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d005      	beq.n	80148a0 <udp_input_local_match+0xa4>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	681a      	ldr	r2, [r3, #0]
 8014898:	4b09      	ldr	r3, [pc, #36]	; (80148c0 <udp_input_local_match+0xc4>)
 801489a:	695b      	ldr	r3, [r3, #20]
 801489c:	429a      	cmp	r2, r3
 801489e:	d101      	bne.n	80148a4 <udp_input_local_match+0xa8>
        return 1;
 80148a0:	2301      	movs	r3, #1
 80148a2:	e000      	b.n	80148a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80148a4:	2300      	movs	r3, #0
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop
 80148b0:	0801b938 	.word	0x0801b938
 80148b4:	0801b968 	.word	0x0801b968
 80148b8:	0801b98c 	.word	0x0801b98c
 80148bc:	0801b9b4 	.word	0x0801b9b4
 80148c0:	20008618 	.word	0x20008618

080148c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80148c4:	b590      	push	{r4, r7, lr}
 80148c6:	b08d      	sub	sp, #52	; 0x34
 80148c8:	af02      	add	r7, sp, #8
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80148ce:	2300      	movs	r3, #0
 80148d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d105      	bne.n	80148e4 <udp_input+0x20>
 80148d8:	4b7c      	ldr	r3, [pc, #496]	; (8014acc <udp_input+0x208>)
 80148da:	22cf      	movs	r2, #207	; 0xcf
 80148dc:	497c      	ldr	r1, [pc, #496]	; (8014ad0 <udp_input+0x20c>)
 80148de:	487d      	ldr	r0, [pc, #500]	; (8014ad4 <udp_input+0x210>)
 80148e0:	f002 ffac 	bl	801783c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d105      	bne.n	80148f6 <udp_input+0x32>
 80148ea:	4b78      	ldr	r3, [pc, #480]	; (8014acc <udp_input+0x208>)
 80148ec:	22d0      	movs	r2, #208	; 0xd0
 80148ee:	497a      	ldr	r1, [pc, #488]	; (8014ad8 <udp_input+0x214>)
 80148f0:	4878      	ldr	r0, [pc, #480]	; (8014ad4 <udp_input+0x210>)
 80148f2:	f002 ffa3 	bl	801783c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	895b      	ldrh	r3, [r3, #10]
 80148fa:	2b07      	cmp	r3, #7
 80148fc:	d803      	bhi.n	8014906 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7f9 fa9c 	bl	800de3c <pbuf_free>
    goto end;
 8014904:	e0de      	b.n	8014ac4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801490c:	4b73      	ldr	r3, [pc, #460]	; (8014adc <udp_input+0x218>)
 801490e:	695b      	ldr	r3, [r3, #20]
 8014910:	4a72      	ldr	r2, [pc, #456]	; (8014adc <udp_input+0x218>)
 8014912:	6812      	ldr	r2, [r2, #0]
 8014914:	4611      	mov	r1, r2
 8014916:	4618      	mov	r0, r3
 8014918:	f001 fd96 	bl	8016448 <ip4_addr_isbroadcast_u32>
 801491c:	4603      	mov	r3, r0
 801491e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	b29b      	uxth	r3, r3
 8014926:	4618      	mov	r0, r3
 8014928:	f7f7 fedc 	bl	800c6e4 <lwip_htons>
 801492c:	4603      	mov	r3, r0
 801492e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	885b      	ldrh	r3, [r3, #2]
 8014934:	b29b      	uxth	r3, r3
 8014936:	4618      	mov	r0, r3
 8014938:	f7f7 fed4 	bl	800c6e4 <lwip_htons>
 801493c:	4603      	mov	r3, r0
 801493e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014940:	2300      	movs	r3, #0
 8014942:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014944:	2300      	movs	r3, #0
 8014946:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014948:	2300      	movs	r3, #0
 801494a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801494c:	4b64      	ldr	r3, [pc, #400]	; (8014ae0 <udp_input+0x21c>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	627b      	str	r3, [r7, #36]	; 0x24
 8014952:	e054      	b.n	80149fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	8a5b      	ldrh	r3, [r3, #18]
 8014958:	89fa      	ldrh	r2, [r7, #14]
 801495a:	429a      	cmp	r2, r3
 801495c:	d14a      	bne.n	80149f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801495e:	7cfb      	ldrb	r3, [r7, #19]
 8014960:	461a      	mov	r2, r3
 8014962:	6839      	ldr	r1, [r7, #0]
 8014964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014966:	f7ff ff49 	bl	80147fc <udp_input_local_match>
 801496a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801496c:	2b00      	cmp	r3, #0
 801496e:	d041      	beq.n	80149f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014972:	7c1b      	ldrb	r3, [r3, #16]
 8014974:	f003 0304 	and.w	r3, r3, #4
 8014978:	2b00      	cmp	r3, #0
 801497a:	d11d      	bne.n	80149b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801497c:	69fb      	ldr	r3, [r7, #28]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d102      	bne.n	8014988 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014984:	61fb      	str	r3, [r7, #28]
 8014986:	e017      	b.n	80149b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014988:	7cfb      	ldrb	r3, [r7, #19]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d014      	beq.n	80149b8 <udp_input+0xf4>
 801498e:	4b53      	ldr	r3, [pc, #332]	; (8014adc <udp_input+0x218>)
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014996:	d10f      	bne.n	80149b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	3304      	adds	r3, #4
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d008      	beq.n	80149b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	3304      	adds	r3, #4
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d101      	bne.n	80149b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80149b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80149b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ba:	8a9b      	ldrh	r3, [r3, #20]
 80149bc:	8a3a      	ldrh	r2, [r7, #16]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d118      	bne.n	80149f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d005      	beq.n	80149d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149cc:	685a      	ldr	r2, [r3, #4]
 80149ce:	4b43      	ldr	r3, [pc, #268]	; (8014adc <udp_input+0x218>)
 80149d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d10e      	bne.n	80149f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80149d6:	6a3b      	ldr	r3, [r7, #32]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d014      	beq.n	8014a06 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	68da      	ldr	r2, [r3, #12]
 80149e0:	6a3b      	ldr	r3, [r7, #32]
 80149e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80149e4:	4b3e      	ldr	r3, [pc, #248]	; (8014ae0 <udp_input+0x21c>)
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80149ec:	4a3c      	ldr	r2, [pc, #240]	; (8014ae0 <udp_input+0x21c>)
 80149ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80149f2:	e008      	b.n	8014a06 <udp_input+0x142>
      }
    }

    prev = pcb;
 80149f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80149f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fa:	68db      	ldr	r3, [r3, #12]
 80149fc:	627b      	str	r3, [r7, #36]	; 0x24
 80149fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d1a7      	bne.n	8014954 <udp_input+0x90>
 8014a04:	e000      	b.n	8014a08 <udp_input+0x144>
        break;
 8014a06:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d002      	beq.n	8014a1e <udp_input+0x15a>
    for_us = 1;
 8014a18:	2301      	movs	r3, #1
 8014a1a:	76fb      	strb	r3, [r7, #27]
 8014a1c:	e00a      	b.n	8014a34 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	3304      	adds	r3, #4
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	4b2d      	ldr	r3, [pc, #180]	; (8014adc <udp_input+0x218>)
 8014a26:	695b      	ldr	r3, [r3, #20]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	bf0c      	ite	eq
 8014a2c:	2301      	moveq	r3, #1
 8014a2e:	2300      	movne	r3, #0
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014a34:	7efb      	ldrb	r3, [r7, #27]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d041      	beq.n	8014abe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014a3a:	2108      	movs	r1, #8
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7f9 f977 	bl	800dd30 <pbuf_remove_header>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d00a      	beq.n	8014a5e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014a48:	4b20      	ldr	r3, [pc, #128]	; (8014acc <udp_input+0x208>)
 8014a4a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014a4e:	4925      	ldr	r1, [pc, #148]	; (8014ae4 <udp_input+0x220>)
 8014a50:	4820      	ldr	r0, [pc, #128]	; (8014ad4 <udp_input+0x210>)
 8014a52:	f002 fef3 	bl	801783c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f7f9 f9f0 	bl	800de3c <pbuf_free>
      goto end;
 8014a5c:	e032      	b.n	8014ac4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d012      	beq.n	8014a8a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a66:	699b      	ldr	r3, [r3, #24]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d00a      	beq.n	8014a82 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6e:	699c      	ldr	r4, [r3, #24]
 8014a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a72:	69d8      	ldr	r0, [r3, #28]
 8014a74:	8a3b      	ldrh	r3, [r7, #16]
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	4b1b      	ldr	r3, [pc, #108]	; (8014ae8 <udp_input+0x224>)
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a7e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a80:	e021      	b.n	8014ac6 <udp_input+0x202>
        pbuf_free(p);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f7f9 f9da 	bl	800de3c <pbuf_free>
        goto end;
 8014a88:	e01c      	b.n	8014ac4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a8a:	7cfb      	ldrb	r3, [r7, #19]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d112      	bne.n	8014ab6 <udp_input+0x1f2>
 8014a90:	4b12      	ldr	r3, [pc, #72]	; (8014adc <udp_input+0x218>)
 8014a92:	695b      	ldr	r3, [r3, #20]
 8014a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a98:	2be0      	cmp	r3, #224	; 0xe0
 8014a9a:	d00c      	beq.n	8014ab6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a9c:	4b0f      	ldr	r3, [pc, #60]	; (8014adc <udp_input+0x218>)
 8014a9e:	899b      	ldrh	r3, [r3, #12]
 8014aa0:	3308      	adds	r3, #8
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	b21b      	sxth	r3, r3
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f7f9 f9b4 	bl	800de16 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014aae:	2103      	movs	r1, #3
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f001 f9a9 	bl	8015e08 <icmp_dest_unreach>
      pbuf_free(p);
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f7f9 f9c0 	bl	800de3c <pbuf_free>
  return;
 8014abc:	e003      	b.n	8014ac6 <udp_input+0x202>
    pbuf_free(p);
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7f9 f9bc 	bl	800de3c <pbuf_free>
  return;
 8014ac4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014ac6:	372c      	adds	r7, #44	; 0x2c
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd90      	pop	{r4, r7, pc}
 8014acc:	0801b938 	.word	0x0801b938
 8014ad0:	0801b9dc 	.word	0x0801b9dc
 8014ad4:	0801b98c 	.word	0x0801b98c
 8014ad8:	0801b9f4 	.word	0x0801b9f4
 8014adc:	20008618 	.word	0x20008618
 8014ae0:	2000bd44 	.word	0x2000bd44
 8014ae4:	0801ba10 	.word	0x0801ba10
 8014ae8:	20008628 	.word	0x20008628

08014aec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	4613      	mov	r3, r2
 8014af8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d101      	bne.n	8014b04 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014b00:	4b39      	ldr	r3, [pc, #228]	; (8014be8 <udp_bind+0xfc>)
 8014b02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d109      	bne.n	8014b1e <udp_bind+0x32>
 8014b0a:	4b38      	ldr	r3, [pc, #224]	; (8014bec <udp_bind+0x100>)
 8014b0c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014b10:	4937      	ldr	r1, [pc, #220]	; (8014bf0 <udp_bind+0x104>)
 8014b12:	4838      	ldr	r0, [pc, #224]	; (8014bf4 <udp_bind+0x108>)
 8014b14:	f002 fe92 	bl	801783c <iprintf>
 8014b18:	f06f 030f 	mvn.w	r3, #15
 8014b1c:	e060      	b.n	8014be0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b22:	4b35      	ldr	r3, [pc, #212]	; (8014bf8 <udp_bind+0x10c>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	617b      	str	r3, [r7, #20]
 8014b28:	e009      	b.n	8014b3e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014b2a:	68fa      	ldr	r2, [r7, #12]
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d102      	bne.n	8014b38 <udp_bind+0x4c>
      rebind = 1;
 8014b32:	2301      	movs	r3, #1
 8014b34:	74fb      	strb	r3, [r7, #19]
      break;
 8014b36:	e005      	b.n	8014b44 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	617b      	str	r3, [r7, #20]
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d1f2      	bne.n	8014b2a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014b44:	88fb      	ldrh	r3, [r7, #6]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d109      	bne.n	8014b5e <udp_bind+0x72>
    port = udp_new_port();
 8014b4a:	f7ff fe1f 	bl	801478c <udp_new_port>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014b52:	88fb      	ldrh	r3, [r7, #6]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d12c      	bne.n	8014bb2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014b58:	f06f 0307 	mvn.w	r3, #7
 8014b5c:	e040      	b.n	8014be0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b5e:	4b26      	ldr	r3, [pc, #152]	; (8014bf8 <udp_bind+0x10c>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	617b      	str	r3, [r7, #20]
 8014b64:	e022      	b.n	8014bac <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014b66:	68fa      	ldr	r2, [r7, #12]
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d01b      	beq.n	8014ba6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	8a5b      	ldrh	r3, [r3, #18]
 8014b72:	88fa      	ldrh	r2, [r7, #6]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d116      	bne.n	8014ba6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	681a      	ldr	r2, [r3, #0]
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d00d      	beq.n	8014ba0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d00a      	beq.n	8014ba0 <udp_bind+0xb4>
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d006      	beq.n	8014ba0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b92:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d003      	beq.n	8014ba0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d102      	bne.n	8014ba6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014ba0:	f06f 0307 	mvn.w	r3, #7
 8014ba4:	e01c      	b.n	8014be0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	68db      	ldr	r3, [r3, #12]
 8014baa:	617b      	str	r3, [r7, #20]
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d1d9      	bne.n	8014b66 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d002      	beq.n	8014bbe <udp_bind+0xd2>
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	e000      	b.n	8014bc0 <udp_bind+0xd4>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	88fa      	ldrh	r2, [r7, #6]
 8014bc8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014bca:	7cfb      	ldrb	r3, [r7, #19]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d106      	bne.n	8014bde <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014bd0:	4b09      	ldr	r3, [pc, #36]	; (8014bf8 <udp_bind+0x10c>)
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014bd8:	4a07      	ldr	r2, [pc, #28]	; (8014bf8 <udp_bind+0x10c>)
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014bde:	2300      	movs	r3, #0
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3718      	adds	r7, #24
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	0801c4ec 	.word	0x0801c4ec
 8014bec:	0801b938 	.word	0x0801b938
 8014bf0:	0801bc00 	.word	0x0801bc00
 8014bf4:	0801b98c 	.word	0x0801b98c
 8014bf8:	2000bd44 	.word	0x2000bd44

08014bfc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	60b9      	str	r1, [r7, #8]
 8014c06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d107      	bne.n	8014c1e <udp_recv+0x22>
 8014c0e:	4b08      	ldr	r3, [pc, #32]	; (8014c30 <udp_recv+0x34>)
 8014c10:	f240 428a 	movw	r2, #1162	; 0x48a
 8014c14:	4907      	ldr	r1, [pc, #28]	; (8014c34 <udp_recv+0x38>)
 8014c16:	4808      	ldr	r0, [pc, #32]	; (8014c38 <udp_recv+0x3c>)
 8014c18:	f002 fe10 	bl	801783c <iprintf>
 8014c1c:	e005      	b.n	8014c2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	68ba      	ldr	r2, [r7, #8]
 8014c22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	61da      	str	r2, [r3, #28]
}
 8014c2a:	3710      	adds	r7, #16
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	0801b938 	.word	0x0801b938
 8014c34:	0801bc6c 	.word	0x0801bc6c
 8014c38:	0801b98c 	.word	0x0801b98c

08014c3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d107      	bne.n	8014c5a <udp_remove+0x1e>
 8014c4a:	4b19      	ldr	r3, [pc, #100]	; (8014cb0 <udp_remove+0x74>)
 8014c4c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014c50:	4918      	ldr	r1, [pc, #96]	; (8014cb4 <udp_remove+0x78>)
 8014c52:	4819      	ldr	r0, [pc, #100]	; (8014cb8 <udp_remove+0x7c>)
 8014c54:	f002 fdf2 	bl	801783c <iprintf>
 8014c58:	e026      	b.n	8014ca8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014c5a:	4b18      	ldr	r3, [pc, #96]	; (8014cbc <udp_remove+0x80>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d105      	bne.n	8014c70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014c64:	4b15      	ldr	r3, [pc, #84]	; (8014cbc <udp_remove+0x80>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	4a14      	ldr	r2, [pc, #80]	; (8014cbc <udp_remove+0x80>)
 8014c6c:	6013      	str	r3, [r2, #0]
 8014c6e:	e017      	b.n	8014ca0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c70:	4b12      	ldr	r3, [pc, #72]	; (8014cbc <udp_remove+0x80>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	60fb      	str	r3, [r7, #12]
 8014c76:	e010      	b.n	8014c9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	68db      	ldr	r3, [r3, #12]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d009      	beq.n	8014c94 <udp_remove+0x58>
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d104      	bne.n	8014c94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	68da      	ldr	r2, [r3, #12]
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	60da      	str	r2, [r3, #12]
        break;
 8014c92:	e005      	b.n	8014ca0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	60fb      	str	r3, [r7, #12]
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d1eb      	bne.n	8014c78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	2000      	movs	r0, #0
 8014ca4:	f7f8 fa26 	bl	800d0f4 <memp_free>
}
 8014ca8:	3710      	adds	r7, #16
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	0801b938 	.word	0x0801b938
 8014cb4:	0801bc84 	.word	0x0801bc84
 8014cb8:	0801b98c 	.word	0x0801b98c
 8014cbc:	2000bd44 	.word	0x2000bd44

08014cc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014cc6:	2000      	movs	r0, #0
 8014cc8:	f7f8 f9c2 	bl	800d050 <memp_malloc>
 8014ccc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d007      	beq.n	8014ce4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014cd4:	2220      	movs	r2, #32
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f002 fda7 	bl	801782c <memset>
    pcb->ttl = UDP_TTL;
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	22ff      	movs	r2, #255	; 0xff
 8014ce2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014ce4:	687b      	ldr	r3, [r7, #4]
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3708      	adds	r7, #8
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}

08014cee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014cee:	b580      	push	{r7, lr}
 8014cf0:	b084      	sub	sp, #16
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014cf8:	f7ff ffe2 	bl	8014cc0 <udp_new>
 8014cfc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3710      	adds	r7, #16
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b085      	sub	sp, #20
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d01e      	beq.n	8014d56 <udp_netif_ip_addr_changed+0x4e>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d01a      	beq.n	8014d56 <udp_netif_ip_addr_changed+0x4e>
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d017      	beq.n	8014d56 <udp_netif_ip_addr_changed+0x4e>
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d013      	beq.n	8014d56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d2e:	4b0d      	ldr	r3, [pc, #52]	; (8014d64 <udp_netif_ip_addr_changed+0x5c>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	60fb      	str	r3, [r7, #12]
 8014d34:	e00c      	b.n	8014d50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d103      	bne.n	8014d4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	60fb      	str	r3, [r7, #12]
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d1ef      	bne.n	8014d36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d56:	bf00      	nop
 8014d58:	3714      	adds	r7, #20
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	2000bd44 	.word	0x2000bd44

08014d68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014d70:	4915      	ldr	r1, [pc, #84]	; (8014dc8 <etharp_free_entry+0x60>)
 8014d72:	687a      	ldr	r2, [r7, #4]
 8014d74:	4613      	mov	r3, r2
 8014d76:	005b      	lsls	r3, r3, #1
 8014d78:	4413      	add	r3, r2
 8014d7a:	00db      	lsls	r3, r3, #3
 8014d7c:	440b      	add	r3, r1
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d013      	beq.n	8014dac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014d84:	4910      	ldr	r1, [pc, #64]	; (8014dc8 <etharp_free_entry+0x60>)
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	4613      	mov	r3, r2
 8014d8a:	005b      	lsls	r3, r3, #1
 8014d8c:	4413      	add	r3, r2
 8014d8e:	00db      	lsls	r3, r3, #3
 8014d90:	440b      	add	r3, r1
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f9 f851 	bl	800de3c <pbuf_free>
    arp_table[i].q = NULL;
 8014d9a:	490b      	ldr	r1, [pc, #44]	; (8014dc8 <etharp_free_entry+0x60>)
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	005b      	lsls	r3, r3, #1
 8014da2:	4413      	add	r3, r2
 8014da4:	00db      	lsls	r3, r3, #3
 8014da6:	440b      	add	r3, r1
 8014da8:	2200      	movs	r2, #0
 8014daa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014dac:	4906      	ldr	r1, [pc, #24]	; (8014dc8 <etharp_free_entry+0x60>)
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	4613      	mov	r3, r2
 8014db2:	005b      	lsls	r3, r3, #1
 8014db4:	4413      	add	r3, r2
 8014db6:	00db      	lsls	r3, r3, #3
 8014db8:	440b      	add	r3, r1
 8014dba:	3314      	adds	r3, #20
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014dc0:	bf00      	nop
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	20004e2c 	.word	0x20004e2c

08014dcc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	607b      	str	r3, [r7, #4]
 8014dd6:	e096      	b.n	8014f06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014dd8:	494f      	ldr	r1, [pc, #316]	; (8014f18 <etharp_tmr+0x14c>)
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	4613      	mov	r3, r2
 8014dde:	005b      	lsls	r3, r3, #1
 8014de0:	4413      	add	r3, r2
 8014de2:	00db      	lsls	r3, r3, #3
 8014de4:	440b      	add	r3, r1
 8014de6:	3314      	adds	r3, #20
 8014de8:	781b      	ldrb	r3, [r3, #0]
 8014dea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014dec:	78fb      	ldrb	r3, [r7, #3]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	f000 8086 	beq.w	8014f00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014df4:	4948      	ldr	r1, [pc, #288]	; (8014f18 <etharp_tmr+0x14c>)
 8014df6:	687a      	ldr	r2, [r7, #4]
 8014df8:	4613      	mov	r3, r2
 8014dfa:	005b      	lsls	r3, r3, #1
 8014dfc:	4413      	add	r3, r2
 8014dfe:	00db      	lsls	r3, r3, #3
 8014e00:	440b      	add	r3, r1
 8014e02:	3312      	adds	r3, #18
 8014e04:	881b      	ldrh	r3, [r3, #0]
 8014e06:	3301      	adds	r3, #1
 8014e08:	b298      	uxth	r0, r3
 8014e0a:	4943      	ldr	r1, [pc, #268]	; (8014f18 <etharp_tmr+0x14c>)
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	4613      	mov	r3, r2
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	4413      	add	r3, r2
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	440b      	add	r3, r1
 8014e18:	3312      	adds	r3, #18
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e1e:	493e      	ldr	r1, [pc, #248]	; (8014f18 <etharp_tmr+0x14c>)
 8014e20:	687a      	ldr	r2, [r7, #4]
 8014e22:	4613      	mov	r3, r2
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	4413      	add	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	440b      	add	r3, r1
 8014e2c:	3312      	adds	r3, #18
 8014e2e:	881b      	ldrh	r3, [r3, #0]
 8014e30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014e34:	d215      	bcs.n	8014e62 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e36:	4938      	ldr	r1, [pc, #224]	; (8014f18 <etharp_tmr+0x14c>)
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	4613      	mov	r3, r2
 8014e3c:	005b      	lsls	r3, r3, #1
 8014e3e:	4413      	add	r3, r2
 8014e40:	00db      	lsls	r3, r3, #3
 8014e42:	440b      	add	r3, r1
 8014e44:	3314      	adds	r3, #20
 8014e46:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d10e      	bne.n	8014e6a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014e4c:	4932      	ldr	r1, [pc, #200]	; (8014f18 <etharp_tmr+0x14c>)
 8014e4e:	687a      	ldr	r2, [r7, #4]
 8014e50:	4613      	mov	r3, r2
 8014e52:	005b      	lsls	r3, r3, #1
 8014e54:	4413      	add	r3, r2
 8014e56:	00db      	lsls	r3, r3, #3
 8014e58:	440b      	add	r3, r1
 8014e5a:	3312      	adds	r3, #18
 8014e5c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e5e:	2b04      	cmp	r3, #4
 8014e60:	d903      	bls.n	8014e6a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f7ff ff80 	bl	8014d68 <etharp_free_entry>
 8014e68:	e04a      	b.n	8014f00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014e6a:	492b      	ldr	r1, [pc, #172]	; (8014f18 <etharp_tmr+0x14c>)
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	4613      	mov	r3, r2
 8014e70:	005b      	lsls	r3, r3, #1
 8014e72:	4413      	add	r3, r2
 8014e74:	00db      	lsls	r3, r3, #3
 8014e76:	440b      	add	r3, r1
 8014e78:	3314      	adds	r3, #20
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	2b03      	cmp	r3, #3
 8014e7e:	d10a      	bne.n	8014e96 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014e80:	4925      	ldr	r1, [pc, #148]	; (8014f18 <etharp_tmr+0x14c>)
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	4613      	mov	r3, r2
 8014e86:	005b      	lsls	r3, r3, #1
 8014e88:	4413      	add	r3, r2
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	440b      	add	r3, r1
 8014e8e:	3314      	adds	r3, #20
 8014e90:	2204      	movs	r2, #4
 8014e92:	701a      	strb	r2, [r3, #0]
 8014e94:	e034      	b.n	8014f00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014e96:	4920      	ldr	r1, [pc, #128]	; (8014f18 <etharp_tmr+0x14c>)
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	4413      	add	r3, r2
 8014ea0:	00db      	lsls	r3, r3, #3
 8014ea2:	440b      	add	r3, r1
 8014ea4:	3314      	adds	r3, #20
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	2b04      	cmp	r3, #4
 8014eaa:	d10a      	bne.n	8014ec2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014eac:	491a      	ldr	r1, [pc, #104]	; (8014f18 <etharp_tmr+0x14c>)
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	4613      	mov	r3, r2
 8014eb2:	005b      	lsls	r3, r3, #1
 8014eb4:	4413      	add	r3, r2
 8014eb6:	00db      	lsls	r3, r3, #3
 8014eb8:	440b      	add	r3, r1
 8014eba:	3314      	adds	r3, #20
 8014ebc:	2202      	movs	r2, #2
 8014ebe:	701a      	strb	r2, [r3, #0]
 8014ec0:	e01e      	b.n	8014f00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014ec2:	4915      	ldr	r1, [pc, #84]	; (8014f18 <etharp_tmr+0x14c>)
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	4413      	add	r3, r2
 8014ecc:	00db      	lsls	r3, r3, #3
 8014ece:	440b      	add	r3, r1
 8014ed0:	3314      	adds	r3, #20
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d113      	bne.n	8014f00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014ed8:	490f      	ldr	r1, [pc, #60]	; (8014f18 <etharp_tmr+0x14c>)
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	440b      	add	r3, r1
 8014ee6:	3308      	adds	r3, #8
 8014ee8:	6818      	ldr	r0, [r3, #0]
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	4613      	mov	r3, r2
 8014eee:	005b      	lsls	r3, r3, #1
 8014ef0:	4413      	add	r3, r2
 8014ef2:	00db      	lsls	r3, r3, #3
 8014ef4:	4a08      	ldr	r2, [pc, #32]	; (8014f18 <etharp_tmr+0x14c>)
 8014ef6:	4413      	add	r3, r2
 8014ef8:	3304      	adds	r3, #4
 8014efa:	4619      	mov	r1, r3
 8014efc:	f000 fe6e 	bl	8015bdc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	3301      	adds	r3, #1
 8014f04:	607b      	str	r3, [r7, #4]
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2b09      	cmp	r3, #9
 8014f0a:	f77f af65 	ble.w	8014dd8 <etharp_tmr+0xc>
      }
    }
  }
}
 8014f0e:	bf00      	nop
 8014f10:	bf00      	nop
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	20004e2c 	.word	0x20004e2c

08014f1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b08a      	sub	sp, #40	; 0x28
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	60f8      	str	r0, [r7, #12]
 8014f24:	460b      	mov	r3, r1
 8014f26:	607a      	str	r2, [r7, #4]
 8014f28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014f2a:	230a      	movs	r3, #10
 8014f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014f2e:	230a      	movs	r3, #10
 8014f30:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014f32:	230a      	movs	r3, #10
 8014f34:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014f3a:	230a      	movs	r3, #10
 8014f3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	83bb      	strh	r3, [r7, #28]
 8014f42:	2300      	movs	r3, #0
 8014f44:	837b      	strh	r3, [r7, #26]
 8014f46:	2300      	movs	r3, #0
 8014f48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	843b      	strh	r3, [r7, #32]
 8014f4e:	e0ae      	b.n	80150ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014f50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f54:	49a6      	ldr	r1, [pc, #664]	; (80151f0 <etharp_find_entry+0x2d4>)
 8014f56:	4613      	mov	r3, r2
 8014f58:	005b      	lsls	r3, r3, #1
 8014f5a:	4413      	add	r3, r2
 8014f5c:	00db      	lsls	r3, r3, #3
 8014f5e:	440b      	add	r3, r1
 8014f60:	3314      	adds	r3, #20
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014f66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f6a:	2b0a      	cmp	r3, #10
 8014f6c:	d105      	bne.n	8014f7a <etharp_find_entry+0x5e>
 8014f6e:	7dfb      	ldrb	r3, [r7, #23]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d102      	bne.n	8014f7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014f74:	8c3b      	ldrh	r3, [r7, #32]
 8014f76:	847b      	strh	r3, [r7, #34]	; 0x22
 8014f78:	e095      	b.n	80150a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014f7a:	7dfb      	ldrb	r3, [r7, #23]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f000 8092 	beq.w	80150a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014f82:	7dfb      	ldrb	r3, [r7, #23]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d009      	beq.n	8014f9c <etharp_find_entry+0x80>
 8014f88:	7dfb      	ldrb	r3, [r7, #23]
 8014f8a:	2b01      	cmp	r3, #1
 8014f8c:	d806      	bhi.n	8014f9c <etharp_find_entry+0x80>
 8014f8e:	4b99      	ldr	r3, [pc, #612]	; (80151f4 <etharp_find_entry+0x2d8>)
 8014f90:	f240 1223 	movw	r2, #291	; 0x123
 8014f94:	4998      	ldr	r1, [pc, #608]	; (80151f8 <etharp_find_entry+0x2dc>)
 8014f96:	4899      	ldr	r0, [pc, #612]	; (80151fc <etharp_find_entry+0x2e0>)
 8014f98:	f002 fc50 	bl	801783c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d020      	beq.n	8014fe4 <etharp_find_entry+0xc8>
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	6819      	ldr	r1, [r3, #0]
 8014fa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014faa:	4891      	ldr	r0, [pc, #580]	; (80151f0 <etharp_find_entry+0x2d4>)
 8014fac:	4613      	mov	r3, r2
 8014fae:	005b      	lsls	r3, r3, #1
 8014fb0:	4413      	add	r3, r2
 8014fb2:	00db      	lsls	r3, r3, #3
 8014fb4:	4403      	add	r3, r0
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	4299      	cmp	r1, r3
 8014fbc:	d112      	bne.n	8014fe4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00c      	beq.n	8014fde <etharp_find_entry+0xc2>
 8014fc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fc8:	4989      	ldr	r1, [pc, #548]	; (80151f0 <etharp_find_entry+0x2d4>)
 8014fca:	4613      	mov	r3, r2
 8014fcc:	005b      	lsls	r3, r3, #1
 8014fce:	4413      	add	r3, r2
 8014fd0:	00db      	lsls	r3, r3, #3
 8014fd2:	440b      	add	r3, r1
 8014fd4:	3308      	adds	r3, #8
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d102      	bne.n	8014fe4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014fde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fe2:	e100      	b.n	80151e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d140      	bne.n	801506c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014fea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fee:	4980      	ldr	r1, [pc, #512]	; (80151f0 <etharp_find_entry+0x2d4>)
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	005b      	lsls	r3, r3, #1
 8014ff4:	4413      	add	r3, r2
 8014ff6:	00db      	lsls	r3, r3, #3
 8014ff8:	440b      	add	r3, r1
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d01a      	beq.n	8015036 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015004:	497a      	ldr	r1, [pc, #488]	; (80151f0 <etharp_find_entry+0x2d4>)
 8015006:	4613      	mov	r3, r2
 8015008:	005b      	lsls	r3, r3, #1
 801500a:	4413      	add	r3, r2
 801500c:	00db      	lsls	r3, r3, #3
 801500e:	440b      	add	r3, r1
 8015010:	3312      	adds	r3, #18
 8015012:	881b      	ldrh	r3, [r3, #0]
 8015014:	8bba      	ldrh	r2, [r7, #28]
 8015016:	429a      	cmp	r2, r3
 8015018:	d845      	bhi.n	80150a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801501a:	8c3b      	ldrh	r3, [r7, #32]
 801501c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801501e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015022:	4973      	ldr	r1, [pc, #460]	; (80151f0 <etharp_find_entry+0x2d4>)
 8015024:	4613      	mov	r3, r2
 8015026:	005b      	lsls	r3, r3, #1
 8015028:	4413      	add	r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	440b      	add	r3, r1
 801502e:	3312      	adds	r3, #18
 8015030:	881b      	ldrh	r3, [r3, #0]
 8015032:	83bb      	strh	r3, [r7, #28]
 8015034:	e037      	b.n	80150a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015036:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801503a:	496d      	ldr	r1, [pc, #436]	; (80151f0 <etharp_find_entry+0x2d4>)
 801503c:	4613      	mov	r3, r2
 801503e:	005b      	lsls	r3, r3, #1
 8015040:	4413      	add	r3, r2
 8015042:	00db      	lsls	r3, r3, #3
 8015044:	440b      	add	r3, r1
 8015046:	3312      	adds	r3, #18
 8015048:	881b      	ldrh	r3, [r3, #0]
 801504a:	8b7a      	ldrh	r2, [r7, #26]
 801504c:	429a      	cmp	r2, r3
 801504e:	d82a      	bhi.n	80150a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8015050:	8c3b      	ldrh	r3, [r7, #32]
 8015052:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015054:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015058:	4965      	ldr	r1, [pc, #404]	; (80151f0 <etharp_find_entry+0x2d4>)
 801505a:	4613      	mov	r3, r2
 801505c:	005b      	lsls	r3, r3, #1
 801505e:	4413      	add	r3, r2
 8015060:	00db      	lsls	r3, r3, #3
 8015062:	440b      	add	r3, r1
 8015064:	3312      	adds	r3, #18
 8015066:	881b      	ldrh	r3, [r3, #0]
 8015068:	837b      	strh	r3, [r7, #26]
 801506a:	e01c      	b.n	80150a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801506c:	7dfb      	ldrb	r3, [r7, #23]
 801506e:	2b01      	cmp	r3, #1
 8015070:	d919      	bls.n	80150a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015072:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015076:	495e      	ldr	r1, [pc, #376]	; (80151f0 <etharp_find_entry+0x2d4>)
 8015078:	4613      	mov	r3, r2
 801507a:	005b      	lsls	r3, r3, #1
 801507c:	4413      	add	r3, r2
 801507e:	00db      	lsls	r3, r3, #3
 8015080:	440b      	add	r3, r1
 8015082:	3312      	adds	r3, #18
 8015084:	881b      	ldrh	r3, [r3, #0]
 8015086:	8b3a      	ldrh	r2, [r7, #24]
 8015088:	429a      	cmp	r2, r3
 801508a:	d80c      	bhi.n	80150a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801508c:	8c3b      	ldrh	r3, [r7, #32]
 801508e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015090:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015094:	4956      	ldr	r1, [pc, #344]	; (80151f0 <etharp_find_entry+0x2d4>)
 8015096:	4613      	mov	r3, r2
 8015098:	005b      	lsls	r3, r3, #1
 801509a:	4413      	add	r3, r2
 801509c:	00db      	lsls	r3, r3, #3
 801509e:	440b      	add	r3, r1
 80150a0:	3312      	adds	r3, #18
 80150a2:	881b      	ldrh	r3, [r3, #0]
 80150a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150a6:	8c3b      	ldrh	r3, [r7, #32]
 80150a8:	3301      	adds	r3, #1
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	843b      	strh	r3, [r7, #32]
 80150ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150b2:	2b09      	cmp	r3, #9
 80150b4:	f77f af4c 	ble.w	8014f50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80150b8:	7afb      	ldrb	r3, [r7, #11]
 80150ba:	f003 0302 	and.w	r3, r3, #2
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d108      	bne.n	80150d4 <etharp_find_entry+0x1b8>
 80150c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150c6:	2b0a      	cmp	r3, #10
 80150c8:	d107      	bne.n	80150da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80150ca:	7afb      	ldrb	r3, [r7, #11]
 80150cc:	f003 0301 	and.w	r3, r3, #1
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d102      	bne.n	80150da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80150d4:	f04f 33ff 	mov.w	r3, #4294967295
 80150d8:	e085      	b.n	80151e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80150da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150de:	2b09      	cmp	r3, #9
 80150e0:	dc02      	bgt.n	80150e8 <etharp_find_entry+0x1cc>
    i = empty;
 80150e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150e4:	843b      	strh	r3, [r7, #32]
 80150e6:	e039      	b.n	801515c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80150e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80150ec:	2b09      	cmp	r3, #9
 80150ee:	dc14      	bgt.n	801511a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80150f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80150f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150f8:	493d      	ldr	r1, [pc, #244]	; (80151f0 <etharp_find_entry+0x2d4>)
 80150fa:	4613      	mov	r3, r2
 80150fc:	005b      	lsls	r3, r3, #1
 80150fe:	4413      	add	r3, r2
 8015100:	00db      	lsls	r3, r3, #3
 8015102:	440b      	add	r3, r1
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d018      	beq.n	801513c <etharp_find_entry+0x220>
 801510a:	4b3a      	ldr	r3, [pc, #232]	; (80151f4 <etharp_find_entry+0x2d8>)
 801510c:	f240 126d 	movw	r2, #365	; 0x16d
 8015110:	493b      	ldr	r1, [pc, #236]	; (8015200 <etharp_find_entry+0x2e4>)
 8015112:	483a      	ldr	r0, [pc, #232]	; (80151fc <etharp_find_entry+0x2e0>)
 8015114:	f002 fb92 	bl	801783c <iprintf>
 8015118:	e010      	b.n	801513c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801511a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801511e:	2b09      	cmp	r3, #9
 8015120:	dc02      	bgt.n	8015128 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015124:	843b      	strh	r3, [r7, #32]
 8015126:	e009      	b.n	801513c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015128:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801512c:	2b09      	cmp	r3, #9
 801512e:	dc02      	bgt.n	8015136 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015130:	8bfb      	ldrh	r3, [r7, #30]
 8015132:	843b      	strh	r3, [r7, #32]
 8015134:	e002      	b.n	801513c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015136:	f04f 33ff 	mov.w	r3, #4294967295
 801513a:	e054      	b.n	80151e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801513c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015140:	2b09      	cmp	r3, #9
 8015142:	dd06      	ble.n	8015152 <etharp_find_entry+0x236>
 8015144:	4b2b      	ldr	r3, [pc, #172]	; (80151f4 <etharp_find_entry+0x2d8>)
 8015146:	f240 127f 	movw	r2, #383	; 0x17f
 801514a:	492e      	ldr	r1, [pc, #184]	; (8015204 <etharp_find_entry+0x2e8>)
 801514c:	482b      	ldr	r0, [pc, #172]	; (80151fc <etharp_find_entry+0x2e0>)
 801514e:	f002 fb75 	bl	801783c <iprintf>
    etharp_free_entry(i);
 8015152:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015156:	4618      	mov	r0, r3
 8015158:	f7ff fe06 	bl	8014d68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801515c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015160:	2b09      	cmp	r3, #9
 8015162:	dd06      	ble.n	8015172 <etharp_find_entry+0x256>
 8015164:	4b23      	ldr	r3, [pc, #140]	; (80151f4 <etharp_find_entry+0x2d8>)
 8015166:	f240 1283 	movw	r2, #387	; 0x183
 801516a:	4926      	ldr	r1, [pc, #152]	; (8015204 <etharp_find_entry+0x2e8>)
 801516c:	4823      	ldr	r0, [pc, #140]	; (80151fc <etharp_find_entry+0x2e0>)
 801516e:	f002 fb65 	bl	801783c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015176:	491e      	ldr	r1, [pc, #120]	; (80151f0 <etharp_find_entry+0x2d4>)
 8015178:	4613      	mov	r3, r2
 801517a:	005b      	lsls	r3, r3, #1
 801517c:	4413      	add	r3, r2
 801517e:	00db      	lsls	r3, r3, #3
 8015180:	440b      	add	r3, r1
 8015182:	3314      	adds	r3, #20
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d006      	beq.n	8015198 <etharp_find_entry+0x27c>
 801518a:	4b1a      	ldr	r3, [pc, #104]	; (80151f4 <etharp_find_entry+0x2d8>)
 801518c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015190:	491d      	ldr	r1, [pc, #116]	; (8015208 <etharp_find_entry+0x2ec>)
 8015192:	481a      	ldr	r0, [pc, #104]	; (80151fc <etharp_find_entry+0x2e0>)
 8015194:	f002 fb52 	bl	801783c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d00b      	beq.n	80151b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801519e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	6819      	ldr	r1, [r3, #0]
 80151a6:	4812      	ldr	r0, [pc, #72]	; (80151f0 <etharp_find_entry+0x2d4>)
 80151a8:	4613      	mov	r3, r2
 80151aa:	005b      	lsls	r3, r3, #1
 80151ac:	4413      	add	r3, r2
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	4403      	add	r3, r0
 80151b2:	3304      	adds	r3, #4
 80151b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80151b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151ba:	490d      	ldr	r1, [pc, #52]	; (80151f0 <etharp_find_entry+0x2d4>)
 80151bc:	4613      	mov	r3, r2
 80151be:	005b      	lsls	r3, r3, #1
 80151c0:	4413      	add	r3, r2
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	440b      	add	r3, r1
 80151c6:	3312      	adds	r3, #18
 80151c8:	2200      	movs	r2, #0
 80151ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80151cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151d0:	4907      	ldr	r1, [pc, #28]	; (80151f0 <etharp_find_entry+0x2d4>)
 80151d2:	4613      	mov	r3, r2
 80151d4:	005b      	lsls	r3, r3, #1
 80151d6:	4413      	add	r3, r2
 80151d8:	00db      	lsls	r3, r3, #3
 80151da:	440b      	add	r3, r1
 80151dc:	3308      	adds	r3, #8
 80151de:	687a      	ldr	r2, [r7, #4]
 80151e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80151e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3728      	adds	r7, #40	; 0x28
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	20004e2c 	.word	0x20004e2c
 80151f4:	0801bc9c 	.word	0x0801bc9c
 80151f8:	0801bcd4 	.word	0x0801bcd4
 80151fc:	0801bd14 	.word	0x0801bd14
 8015200:	0801bd3c 	.word	0x0801bd3c
 8015204:	0801bd54 	.word	0x0801bd54
 8015208:	0801bd68 	.word	0x0801bd68

0801520c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b088      	sub	sp, #32
 8015210:	af02      	add	r7, sp, #8
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015220:	2b06      	cmp	r3, #6
 8015222:	d006      	beq.n	8015232 <etharp_update_arp_entry+0x26>
 8015224:	4b48      	ldr	r3, [pc, #288]	; (8015348 <etharp_update_arp_entry+0x13c>)
 8015226:	f240 12a9 	movw	r2, #425	; 0x1a9
 801522a:	4948      	ldr	r1, [pc, #288]	; (801534c <etharp_update_arp_entry+0x140>)
 801522c:	4848      	ldr	r0, [pc, #288]	; (8015350 <etharp_update_arp_entry+0x144>)
 801522e:	f002 fb05 	bl	801783c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d012      	beq.n	801525e <etharp_update_arp_entry+0x52>
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d00e      	beq.n	801525e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	68f9      	ldr	r1, [r7, #12]
 8015246:	4618      	mov	r0, r3
 8015248:	f001 f8fe 	bl	8016448 <ip4_addr_isbroadcast_u32>
 801524c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801524e:	2b00      	cmp	r3, #0
 8015250:	d105      	bne.n	801525e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801525a:	2be0      	cmp	r3, #224	; 0xe0
 801525c:	d102      	bne.n	8015264 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801525e:	f06f 030f 	mvn.w	r3, #15
 8015262:	e06c      	b.n	801533e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015264:	78fb      	ldrb	r3, [r7, #3]
 8015266:	68fa      	ldr	r2, [r7, #12]
 8015268:	4619      	mov	r1, r3
 801526a:	68b8      	ldr	r0, [r7, #8]
 801526c:	f7ff fe56 	bl	8014f1c <etharp_find_entry>
 8015270:	4603      	mov	r3, r0
 8015272:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015274:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015278:	2b00      	cmp	r3, #0
 801527a:	da02      	bge.n	8015282 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801527c:	8afb      	ldrh	r3, [r7, #22]
 801527e:	b25b      	sxtb	r3, r3
 8015280:	e05d      	b.n	801533e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015282:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015286:	4933      	ldr	r1, [pc, #204]	; (8015354 <etharp_update_arp_entry+0x148>)
 8015288:	4613      	mov	r3, r2
 801528a:	005b      	lsls	r3, r3, #1
 801528c:	4413      	add	r3, r2
 801528e:	00db      	lsls	r3, r3, #3
 8015290:	440b      	add	r3, r1
 8015292:	3314      	adds	r3, #20
 8015294:	2202      	movs	r2, #2
 8015296:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015298:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801529c:	492d      	ldr	r1, [pc, #180]	; (8015354 <etharp_update_arp_entry+0x148>)
 801529e:	4613      	mov	r3, r2
 80152a0:	005b      	lsls	r3, r3, #1
 80152a2:	4413      	add	r3, r2
 80152a4:	00db      	lsls	r3, r3, #3
 80152a6:	440b      	add	r3, r1
 80152a8:	3308      	adds	r3, #8
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80152ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152b2:	4613      	mov	r3, r2
 80152b4:	005b      	lsls	r3, r3, #1
 80152b6:	4413      	add	r3, r2
 80152b8:	00db      	lsls	r3, r3, #3
 80152ba:	3308      	adds	r3, #8
 80152bc:	4a25      	ldr	r2, [pc, #148]	; (8015354 <etharp_update_arp_entry+0x148>)
 80152be:	4413      	add	r3, r2
 80152c0:	3304      	adds	r3, #4
 80152c2:	2206      	movs	r2, #6
 80152c4:	6879      	ldr	r1, [r7, #4]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f002 fa88 	bl	80177dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80152cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152d0:	4920      	ldr	r1, [pc, #128]	; (8015354 <etharp_update_arp_entry+0x148>)
 80152d2:	4613      	mov	r3, r2
 80152d4:	005b      	lsls	r3, r3, #1
 80152d6:	4413      	add	r3, r2
 80152d8:	00db      	lsls	r3, r3, #3
 80152da:	440b      	add	r3, r1
 80152dc:	3312      	adds	r3, #18
 80152de:	2200      	movs	r2, #0
 80152e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80152e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152e6:	491b      	ldr	r1, [pc, #108]	; (8015354 <etharp_update_arp_entry+0x148>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	440b      	add	r3, r1
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d021      	beq.n	801533c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80152f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152fc:	4915      	ldr	r1, [pc, #84]	; (8015354 <etharp_update_arp_entry+0x148>)
 80152fe:	4613      	mov	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	4413      	add	r3, r2
 8015304:	00db      	lsls	r3, r3, #3
 8015306:	440b      	add	r3, r1
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801530c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015310:	4910      	ldr	r1, [pc, #64]	; (8015354 <etharp_update_arp_entry+0x148>)
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	2200      	movs	r2, #0
 801531e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015326:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6939      	ldr	r1, [r7, #16]
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f002 f823 	bl	801737c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015336:	6938      	ldr	r0, [r7, #16]
 8015338:	f7f8 fd80 	bl	800de3c <pbuf_free>
  }
  return ERR_OK;
 801533c:	2300      	movs	r3, #0
}
 801533e:	4618      	mov	r0, r3
 8015340:	3718      	adds	r7, #24
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	0801bc9c 	.word	0x0801bc9c
 801534c:	0801bd94 	.word	0x0801bd94
 8015350:	0801bd14 	.word	0x0801bd14
 8015354:	20004e2c 	.word	0x20004e2c

08015358 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015360:	2300      	movs	r3, #0
 8015362:	60fb      	str	r3, [r7, #12]
 8015364:	e01e      	b.n	80153a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015366:	4913      	ldr	r1, [pc, #76]	; (80153b4 <etharp_cleanup_netif+0x5c>)
 8015368:	68fa      	ldr	r2, [r7, #12]
 801536a:	4613      	mov	r3, r2
 801536c:	005b      	lsls	r3, r3, #1
 801536e:	4413      	add	r3, r2
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	440b      	add	r3, r1
 8015374:	3314      	adds	r3, #20
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801537a:	7afb      	ldrb	r3, [r7, #11]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d00e      	beq.n	801539e <etharp_cleanup_netif+0x46>
 8015380:	490c      	ldr	r1, [pc, #48]	; (80153b4 <etharp_cleanup_netif+0x5c>)
 8015382:	68fa      	ldr	r2, [r7, #12]
 8015384:	4613      	mov	r3, r2
 8015386:	005b      	lsls	r3, r3, #1
 8015388:	4413      	add	r3, r2
 801538a:	00db      	lsls	r3, r3, #3
 801538c:	440b      	add	r3, r1
 801538e:	3308      	adds	r3, #8
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	429a      	cmp	r2, r3
 8015396:	d102      	bne.n	801539e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015398:	68f8      	ldr	r0, [r7, #12]
 801539a:	f7ff fce5 	bl	8014d68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	3301      	adds	r3, #1
 80153a2:	60fb      	str	r3, [r7, #12]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b09      	cmp	r3, #9
 80153a8:	dddd      	ble.n	8015366 <etharp_cleanup_netif+0xe>
    }
  }
}
 80153aa:	bf00      	nop
 80153ac:	bf00      	nop
 80153ae:	3710      	adds	r7, #16
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	20004e2c 	.word	0x20004e2c

080153b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80153b8:	b5b0      	push	{r4, r5, r7, lr}
 80153ba:	b08a      	sub	sp, #40	; 0x28
 80153bc:	af04      	add	r7, sp, #16
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d107      	bne.n	80153d8 <etharp_input+0x20>
 80153c8:	4b3d      	ldr	r3, [pc, #244]	; (80154c0 <etharp_input+0x108>)
 80153ca:	f240 228a 	movw	r2, #650	; 0x28a
 80153ce:	493d      	ldr	r1, [pc, #244]	; (80154c4 <etharp_input+0x10c>)
 80153d0:	483d      	ldr	r0, [pc, #244]	; (80154c8 <etharp_input+0x110>)
 80153d2:	f002 fa33 	bl	801783c <iprintf>
 80153d6:	e06f      	b.n	80154b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	881b      	ldrh	r3, [r3, #0]
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153e8:	d10c      	bne.n	8015404 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153ee:	2b06      	cmp	r3, #6
 80153f0:	d108      	bne.n	8015404 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153f6:	2b04      	cmp	r3, #4
 80153f8:	d104      	bne.n	8015404 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	885b      	ldrh	r3, [r3, #2]
 80153fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015400:	2b08      	cmp	r3, #8
 8015402:	d003      	beq.n	801540c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7f8 fd19 	bl	800de3c <pbuf_free>
    return;
 801540a:	e055      	b.n	80154b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	330e      	adds	r3, #14
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	3318      	adds	r3, #24
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	3304      	adds	r3, #4
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d102      	bne.n	801542c <etharp_input+0x74>
    for_us = 0;
 8015426:	2300      	movs	r3, #0
 8015428:	75fb      	strb	r3, [r7, #23]
 801542a:	e009      	b.n	8015440 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801542c:	68ba      	ldr	r2, [r7, #8]
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	3304      	adds	r3, #4
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	429a      	cmp	r2, r3
 8015436:	bf0c      	ite	eq
 8015438:	2301      	moveq	r3, #1
 801543a:	2300      	movne	r3, #0
 801543c:	b2db      	uxtb	r3, r3
 801543e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	f103 0208 	add.w	r2, r3, #8
 8015446:	7dfb      	ldrb	r3, [r7, #23]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d001      	beq.n	8015450 <etharp_input+0x98>
 801544c:	2301      	movs	r3, #1
 801544e:	e000      	b.n	8015452 <etharp_input+0x9a>
 8015450:	2302      	movs	r3, #2
 8015452:	f107 010c 	add.w	r1, r7, #12
 8015456:	6838      	ldr	r0, [r7, #0]
 8015458:	f7ff fed8 	bl	801520c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	88db      	ldrh	r3, [r3, #6]
 8015460:	b29b      	uxth	r3, r3
 8015462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015466:	d003      	beq.n	8015470 <etharp_input+0xb8>
 8015468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801546c:	d01e      	beq.n	80154ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801546e:	e020      	b.n	80154b2 <etharp_input+0xfa>
      if (for_us) {
 8015470:	7dfb      	ldrb	r3, [r7, #23]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d01c      	beq.n	80154b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801547c:	693b      	ldr	r3, [r7, #16]
 801547e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015488:	683b      	ldr	r3, [r7, #0]
 801548a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801548c:	693a      	ldr	r2, [r7, #16]
 801548e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015490:	2102      	movs	r1, #2
 8015492:	9103      	str	r1, [sp, #12]
 8015494:	f107 010c 	add.w	r1, r7, #12
 8015498:	9102      	str	r1, [sp, #8]
 801549a:	9201      	str	r2, [sp, #4]
 801549c:	9300      	str	r3, [sp, #0]
 801549e:	462b      	mov	r3, r5
 80154a0:	4622      	mov	r2, r4
 80154a2:	4601      	mov	r1, r0
 80154a4:	6838      	ldr	r0, [r7, #0]
 80154a6:	f000 faeb 	bl	8015a80 <etharp_raw>
      break;
 80154aa:	e001      	b.n	80154b0 <etharp_input+0xf8>
      break;
 80154ac:	bf00      	nop
 80154ae:	e000      	b.n	80154b2 <etharp_input+0xfa>
      break;
 80154b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f7f8 fcc2 	bl	800de3c <pbuf_free>
}
 80154b8:	3718      	adds	r7, #24
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bdb0      	pop	{r4, r5, r7, pc}
 80154be:	bf00      	nop
 80154c0:	0801bc9c 	.word	0x0801bc9c
 80154c4:	0801bdec 	.word	0x0801bdec
 80154c8:	0801bd14 	.word	0x0801bd14

080154cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b086      	sub	sp, #24
 80154d0:	af02      	add	r7, sp, #8
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	4613      	mov	r3, r2
 80154d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80154da:	79fa      	ldrb	r2, [r7, #7]
 80154dc:	4944      	ldr	r1, [pc, #272]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 80154de:	4613      	mov	r3, r2
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	4413      	add	r3, r2
 80154e4:	00db      	lsls	r3, r3, #3
 80154e6:	440b      	add	r3, r1
 80154e8:	3314      	adds	r3, #20
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	2b01      	cmp	r3, #1
 80154ee:	d806      	bhi.n	80154fe <etharp_output_to_arp_index+0x32>
 80154f0:	4b40      	ldr	r3, [pc, #256]	; (80155f4 <etharp_output_to_arp_index+0x128>)
 80154f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80154f6:	4940      	ldr	r1, [pc, #256]	; (80155f8 <etharp_output_to_arp_index+0x12c>)
 80154f8:	4840      	ldr	r0, [pc, #256]	; (80155fc <etharp_output_to_arp_index+0x130>)
 80154fa:	f002 f99f 	bl	801783c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80154fe:	79fa      	ldrb	r2, [r7, #7]
 8015500:	493b      	ldr	r1, [pc, #236]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 8015502:	4613      	mov	r3, r2
 8015504:	005b      	lsls	r3, r3, #1
 8015506:	4413      	add	r3, r2
 8015508:	00db      	lsls	r3, r3, #3
 801550a:	440b      	add	r3, r1
 801550c:	3314      	adds	r3, #20
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	2b02      	cmp	r3, #2
 8015512:	d153      	bne.n	80155bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015514:	79fa      	ldrb	r2, [r7, #7]
 8015516:	4936      	ldr	r1, [pc, #216]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 8015518:	4613      	mov	r3, r2
 801551a:	005b      	lsls	r3, r3, #1
 801551c:	4413      	add	r3, r2
 801551e:	00db      	lsls	r3, r3, #3
 8015520:	440b      	add	r3, r1
 8015522:	3312      	adds	r3, #18
 8015524:	881b      	ldrh	r3, [r3, #0]
 8015526:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801552a:	d919      	bls.n	8015560 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801552c:	79fa      	ldrb	r2, [r7, #7]
 801552e:	4613      	mov	r3, r2
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4413      	add	r3, r2
 8015534:	00db      	lsls	r3, r3, #3
 8015536:	4a2e      	ldr	r2, [pc, #184]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 8015538:	4413      	add	r3, r2
 801553a:	3304      	adds	r3, #4
 801553c:	4619      	mov	r1, r3
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	f000 fb4c 	bl	8015bdc <etharp_request>
 8015544:	4603      	mov	r3, r0
 8015546:	2b00      	cmp	r3, #0
 8015548:	d138      	bne.n	80155bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801554a:	79fa      	ldrb	r2, [r7, #7]
 801554c:	4928      	ldr	r1, [pc, #160]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 801554e:	4613      	mov	r3, r2
 8015550:	005b      	lsls	r3, r3, #1
 8015552:	4413      	add	r3, r2
 8015554:	00db      	lsls	r3, r3, #3
 8015556:	440b      	add	r3, r1
 8015558:	3314      	adds	r3, #20
 801555a:	2203      	movs	r2, #3
 801555c:	701a      	strb	r2, [r3, #0]
 801555e:	e02d      	b.n	80155bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015560:	79fa      	ldrb	r2, [r7, #7]
 8015562:	4923      	ldr	r1, [pc, #140]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 8015564:	4613      	mov	r3, r2
 8015566:	005b      	lsls	r3, r3, #1
 8015568:	4413      	add	r3, r2
 801556a:	00db      	lsls	r3, r3, #3
 801556c:	440b      	add	r3, r1
 801556e:	3312      	adds	r3, #18
 8015570:	881b      	ldrh	r3, [r3, #0]
 8015572:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015576:	d321      	bcc.n	80155bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015578:	79fa      	ldrb	r2, [r7, #7]
 801557a:	4613      	mov	r3, r2
 801557c:	005b      	lsls	r3, r3, #1
 801557e:	4413      	add	r3, r2
 8015580:	00db      	lsls	r3, r3, #3
 8015582:	4a1b      	ldr	r2, [pc, #108]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 8015584:	4413      	add	r3, r2
 8015586:	1d19      	adds	r1, r3, #4
 8015588:	79fa      	ldrb	r2, [r7, #7]
 801558a:	4613      	mov	r3, r2
 801558c:	005b      	lsls	r3, r3, #1
 801558e:	4413      	add	r3, r2
 8015590:	00db      	lsls	r3, r3, #3
 8015592:	3308      	adds	r3, #8
 8015594:	4a16      	ldr	r2, [pc, #88]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 8015596:	4413      	add	r3, r2
 8015598:	3304      	adds	r3, #4
 801559a:	461a      	mov	r2, r3
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f000 fafb 	bl	8015b98 <etharp_request_dst>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d109      	bne.n	80155bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80155a8:	79fa      	ldrb	r2, [r7, #7]
 80155aa:	4911      	ldr	r1, [pc, #68]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 80155ac:	4613      	mov	r3, r2
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	4413      	add	r3, r2
 80155b2:	00db      	lsls	r3, r3, #3
 80155b4:	440b      	add	r3, r1
 80155b6:	3314      	adds	r3, #20
 80155b8:	2203      	movs	r2, #3
 80155ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80155c2:	79fa      	ldrb	r2, [r7, #7]
 80155c4:	4613      	mov	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	4413      	add	r3, r2
 80155ca:	00db      	lsls	r3, r3, #3
 80155cc:	3308      	adds	r3, #8
 80155ce:	4a08      	ldr	r2, [pc, #32]	; (80155f0 <etharp_output_to_arp_index+0x124>)
 80155d0:	4413      	add	r3, r2
 80155d2:	3304      	adds	r3, #4
 80155d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155d8:	9200      	str	r2, [sp, #0]
 80155da:	460a      	mov	r2, r1
 80155dc:	68b9      	ldr	r1, [r7, #8]
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f001 fecc 	bl	801737c <ethernet_output>
 80155e4:	4603      	mov	r3, r0
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3710      	adds	r7, #16
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	20004e2c 	.word	0x20004e2c
 80155f4:	0801bc9c 	.word	0x0801bc9c
 80155f8:	0801be0c 	.word	0x0801be0c
 80155fc:	0801bd14 	.word	0x0801bd14

08015600 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b08a      	sub	sp, #40	; 0x28
 8015604:	af02      	add	r7, sp, #8
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	60b9      	str	r1, [r7, #8]
 801560a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d106      	bne.n	8015624 <etharp_output+0x24>
 8015616:	4b73      	ldr	r3, [pc, #460]	; (80157e4 <etharp_output+0x1e4>)
 8015618:	f240 321e 	movw	r2, #798	; 0x31e
 801561c:	4972      	ldr	r1, [pc, #456]	; (80157e8 <etharp_output+0x1e8>)
 801561e:	4873      	ldr	r0, [pc, #460]	; (80157ec <etharp_output+0x1ec>)
 8015620:	f002 f90c 	bl	801783c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d106      	bne.n	8015638 <etharp_output+0x38>
 801562a:	4b6e      	ldr	r3, [pc, #440]	; (80157e4 <etharp_output+0x1e4>)
 801562c:	f240 321f 	movw	r2, #799	; 0x31f
 8015630:	496f      	ldr	r1, [pc, #444]	; (80157f0 <etharp_output+0x1f0>)
 8015632:	486e      	ldr	r0, [pc, #440]	; (80157ec <etharp_output+0x1ec>)
 8015634:	f002 f902 	bl	801783c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <etharp_output+0x4c>
 801563e:	4b69      	ldr	r3, [pc, #420]	; (80157e4 <etharp_output+0x1e4>)
 8015640:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015644:	496b      	ldr	r1, [pc, #428]	; (80157f4 <etharp_output+0x1f4>)
 8015646:	4869      	ldr	r0, [pc, #420]	; (80157ec <etharp_output+0x1ec>)
 8015648:	f002 f8f8 	bl	801783c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	68f9      	ldr	r1, [r7, #12]
 8015652:	4618      	mov	r0, r3
 8015654:	f000 fef8 	bl	8016448 <ip4_addr_isbroadcast_u32>
 8015658:	4603      	mov	r3, r0
 801565a:	2b00      	cmp	r3, #0
 801565c:	d002      	beq.n	8015664 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801565e:	4b66      	ldr	r3, [pc, #408]	; (80157f8 <etharp_output+0x1f8>)
 8015660:	61fb      	str	r3, [r7, #28]
 8015662:	e0af      	b.n	80157c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801566c:	2be0      	cmp	r3, #224	; 0xe0
 801566e:	d118      	bne.n	80156a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015670:	2301      	movs	r3, #1
 8015672:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015674:	2300      	movs	r3, #0
 8015676:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015678:	235e      	movs	r3, #94	; 0x5e
 801567a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	3301      	adds	r3, #1
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015686:	b2db      	uxtb	r3, r3
 8015688:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	3302      	adds	r3, #2
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	3303      	adds	r3, #3
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801569a:	f107 0310 	add.w	r3, r7, #16
 801569e:	61fb      	str	r3, [r7, #28]
 80156a0:	e090      	b.n	80157c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	3304      	adds	r3, #4
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	405a      	eors	r2, r3
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	3308      	adds	r3, #8
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	4013      	ands	r3, r2
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d012      	beq.n	80156e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80156c4:	4293      	cmp	r3, r2
 80156c6:	d00b      	beq.n	80156e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	330c      	adds	r3, #12
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d003      	beq.n	80156da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	330c      	adds	r3, #12
 80156d6:	61bb      	str	r3, [r7, #24]
 80156d8:	e002      	b.n	80156e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80156da:	f06f 0303 	mvn.w	r3, #3
 80156de:	e07d      	b.n	80157dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156e0:	4b46      	ldr	r3, [pc, #280]	; (80157fc <etharp_output+0x1fc>)
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	4619      	mov	r1, r3
 80156e6:	4a46      	ldr	r2, [pc, #280]	; (8015800 <etharp_output+0x200>)
 80156e8:	460b      	mov	r3, r1
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	440b      	add	r3, r1
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	4413      	add	r3, r2
 80156f2:	3314      	adds	r3, #20
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	d925      	bls.n	8015746 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80156fa:	4b40      	ldr	r3, [pc, #256]	; (80157fc <etharp_output+0x1fc>)
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	4619      	mov	r1, r3
 8015700:	4a3f      	ldr	r2, [pc, #252]	; (8015800 <etharp_output+0x200>)
 8015702:	460b      	mov	r3, r1
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	440b      	add	r3, r1
 8015708:	00db      	lsls	r3, r3, #3
 801570a:	4413      	add	r3, r2
 801570c:	3308      	adds	r3, #8
 801570e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	429a      	cmp	r2, r3
 8015714:	d117      	bne.n	8015746 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015716:	69bb      	ldr	r3, [r7, #24]
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	4b38      	ldr	r3, [pc, #224]	; (80157fc <etharp_output+0x1fc>)
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	4618      	mov	r0, r3
 8015720:	4937      	ldr	r1, [pc, #220]	; (8015800 <etharp_output+0x200>)
 8015722:	4603      	mov	r3, r0
 8015724:	005b      	lsls	r3, r3, #1
 8015726:	4403      	add	r3, r0
 8015728:	00db      	lsls	r3, r3, #3
 801572a:	440b      	add	r3, r1
 801572c:	3304      	adds	r3, #4
 801572e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015730:	429a      	cmp	r2, r3
 8015732:	d108      	bne.n	8015746 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015734:	4b31      	ldr	r3, [pc, #196]	; (80157fc <etharp_output+0x1fc>)
 8015736:	781b      	ldrb	r3, [r3, #0]
 8015738:	461a      	mov	r2, r3
 801573a:	68b9      	ldr	r1, [r7, #8]
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f7ff fec5 	bl	80154cc <etharp_output_to_arp_index>
 8015742:	4603      	mov	r3, r0
 8015744:	e04a      	b.n	80157dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015746:	2300      	movs	r3, #0
 8015748:	75fb      	strb	r3, [r7, #23]
 801574a:	e031      	b.n	80157b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801574c:	7dfa      	ldrb	r2, [r7, #23]
 801574e:	492c      	ldr	r1, [pc, #176]	; (8015800 <etharp_output+0x200>)
 8015750:	4613      	mov	r3, r2
 8015752:	005b      	lsls	r3, r3, #1
 8015754:	4413      	add	r3, r2
 8015756:	00db      	lsls	r3, r3, #3
 8015758:	440b      	add	r3, r1
 801575a:	3314      	adds	r3, #20
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	2b01      	cmp	r3, #1
 8015760:	d923      	bls.n	80157aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015762:	7dfa      	ldrb	r2, [r7, #23]
 8015764:	4926      	ldr	r1, [pc, #152]	; (8015800 <etharp_output+0x200>)
 8015766:	4613      	mov	r3, r2
 8015768:	005b      	lsls	r3, r3, #1
 801576a:	4413      	add	r3, r2
 801576c:	00db      	lsls	r3, r3, #3
 801576e:	440b      	add	r3, r1
 8015770:	3308      	adds	r3, #8
 8015772:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	429a      	cmp	r2, r3
 8015778:	d117      	bne.n	80157aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	6819      	ldr	r1, [r3, #0]
 801577e:	7dfa      	ldrb	r2, [r7, #23]
 8015780:	481f      	ldr	r0, [pc, #124]	; (8015800 <etharp_output+0x200>)
 8015782:	4613      	mov	r3, r2
 8015784:	005b      	lsls	r3, r3, #1
 8015786:	4413      	add	r3, r2
 8015788:	00db      	lsls	r3, r3, #3
 801578a:	4403      	add	r3, r0
 801578c:	3304      	adds	r3, #4
 801578e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015790:	4299      	cmp	r1, r3
 8015792:	d10a      	bne.n	80157aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015794:	4a19      	ldr	r2, [pc, #100]	; (80157fc <etharp_output+0x1fc>)
 8015796:	7dfb      	ldrb	r3, [r7, #23]
 8015798:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801579a:	7dfb      	ldrb	r3, [r7, #23]
 801579c:	461a      	mov	r2, r3
 801579e:	68b9      	ldr	r1, [r7, #8]
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	f7ff fe93 	bl	80154cc <etharp_output_to_arp_index>
 80157a6:	4603      	mov	r3, r0
 80157a8:	e018      	b.n	80157dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80157aa:	7dfb      	ldrb	r3, [r7, #23]
 80157ac:	3301      	adds	r3, #1
 80157ae:	75fb      	strb	r3, [r7, #23]
 80157b0:	7dfb      	ldrb	r3, [r7, #23]
 80157b2:	2b09      	cmp	r3, #9
 80157b4:	d9ca      	bls.n	801574c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80157b6:	68ba      	ldr	r2, [r7, #8]
 80157b8:	69b9      	ldr	r1, [r7, #24]
 80157ba:	68f8      	ldr	r0, [r7, #12]
 80157bc:	f000 f822 	bl	8015804 <etharp_query>
 80157c0:	4603      	mov	r3, r0
 80157c2:	e00b      	b.n	80157dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80157ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80157ce:	9300      	str	r3, [sp, #0]
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	68b9      	ldr	r1, [r7, #8]
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f001 fdd1 	bl	801737c <ethernet_output>
 80157da:	4603      	mov	r3, r0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3720      	adds	r7, #32
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	0801bc9c 	.word	0x0801bc9c
 80157e8:	0801bdec 	.word	0x0801bdec
 80157ec:	0801bd14 	.word	0x0801bd14
 80157f0:	0801be3c 	.word	0x0801be3c
 80157f4:	0801bddc 	.word	0x0801bddc
 80157f8:	0801c4f0 	.word	0x0801c4f0
 80157fc:	20004f1c 	.word	0x20004f1c
 8015800:	20004e2c 	.word	0x20004e2c

08015804 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b08c      	sub	sp, #48	; 0x30
 8015808:	af02      	add	r7, sp, #8
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	3326      	adds	r3, #38	; 0x26
 8015814:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015816:	23ff      	movs	r3, #255	; 0xff
 8015818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801581c:	2300      	movs	r3, #0
 801581e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	68f9      	ldr	r1, [r7, #12]
 8015826:	4618      	mov	r0, r3
 8015828:	f000 fe0e 	bl	8016448 <ip4_addr_isbroadcast_u32>
 801582c:	4603      	mov	r3, r0
 801582e:	2b00      	cmp	r3, #0
 8015830:	d10c      	bne.n	801584c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801583a:	2be0      	cmp	r3, #224	; 0xe0
 801583c:	d006      	beq.n	801584c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d003      	beq.n	801584c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d102      	bne.n	8015852 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801584c:	f06f 030f 	mvn.w	r3, #15
 8015850:	e101      	b.n	8015a56 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015852:	68fa      	ldr	r2, [r7, #12]
 8015854:	2101      	movs	r1, #1
 8015856:	68b8      	ldr	r0, [r7, #8]
 8015858:	f7ff fb60 	bl	8014f1c <etharp_find_entry>
 801585c:	4603      	mov	r3, r0
 801585e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015864:	2b00      	cmp	r3, #0
 8015866:	da02      	bge.n	801586e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015868:	8a7b      	ldrh	r3, [r7, #18]
 801586a:	b25b      	sxtb	r3, r3
 801586c:	e0f3      	b.n	8015a56 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801586e:	8a7b      	ldrh	r3, [r7, #18]
 8015870:	2b7e      	cmp	r3, #126	; 0x7e
 8015872:	d906      	bls.n	8015882 <etharp_query+0x7e>
 8015874:	4b7a      	ldr	r3, [pc, #488]	; (8015a60 <etharp_query+0x25c>)
 8015876:	f240 32c1 	movw	r2, #961	; 0x3c1
 801587a:	497a      	ldr	r1, [pc, #488]	; (8015a64 <etharp_query+0x260>)
 801587c:	487a      	ldr	r0, [pc, #488]	; (8015a68 <etharp_query+0x264>)
 801587e:	f001 ffdd 	bl	801783c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015882:	8a7b      	ldrh	r3, [r7, #18]
 8015884:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015886:	7c7a      	ldrb	r2, [r7, #17]
 8015888:	4978      	ldr	r1, [pc, #480]	; (8015a6c <etharp_query+0x268>)
 801588a:	4613      	mov	r3, r2
 801588c:	005b      	lsls	r3, r3, #1
 801588e:	4413      	add	r3, r2
 8015890:	00db      	lsls	r3, r3, #3
 8015892:	440b      	add	r3, r1
 8015894:	3314      	adds	r3, #20
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d115      	bne.n	80158c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801589c:	2301      	movs	r3, #1
 801589e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80158a0:	7c7a      	ldrb	r2, [r7, #17]
 80158a2:	4972      	ldr	r1, [pc, #456]	; (8015a6c <etharp_query+0x268>)
 80158a4:	4613      	mov	r3, r2
 80158a6:	005b      	lsls	r3, r3, #1
 80158a8:	4413      	add	r3, r2
 80158aa:	00db      	lsls	r3, r3, #3
 80158ac:	440b      	add	r3, r1
 80158ae:	3314      	adds	r3, #20
 80158b0:	2201      	movs	r2, #1
 80158b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80158b4:	7c7a      	ldrb	r2, [r7, #17]
 80158b6:	496d      	ldr	r1, [pc, #436]	; (8015a6c <etharp_query+0x268>)
 80158b8:	4613      	mov	r3, r2
 80158ba:	005b      	lsls	r3, r3, #1
 80158bc:	4413      	add	r3, r2
 80158be:	00db      	lsls	r3, r3, #3
 80158c0:	440b      	add	r3, r1
 80158c2:	3308      	adds	r3, #8
 80158c4:	68fa      	ldr	r2, [r7, #12]
 80158c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80158c8:	7c7a      	ldrb	r2, [r7, #17]
 80158ca:	4968      	ldr	r1, [pc, #416]	; (8015a6c <etharp_query+0x268>)
 80158cc:	4613      	mov	r3, r2
 80158ce:	005b      	lsls	r3, r3, #1
 80158d0:	4413      	add	r3, r2
 80158d2:	00db      	lsls	r3, r3, #3
 80158d4:	440b      	add	r3, r1
 80158d6:	3314      	adds	r3, #20
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	2b01      	cmp	r3, #1
 80158dc:	d011      	beq.n	8015902 <etharp_query+0xfe>
 80158de:	7c7a      	ldrb	r2, [r7, #17]
 80158e0:	4962      	ldr	r1, [pc, #392]	; (8015a6c <etharp_query+0x268>)
 80158e2:	4613      	mov	r3, r2
 80158e4:	005b      	lsls	r3, r3, #1
 80158e6:	4413      	add	r3, r2
 80158e8:	00db      	lsls	r3, r3, #3
 80158ea:	440b      	add	r3, r1
 80158ec:	3314      	adds	r3, #20
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	2b01      	cmp	r3, #1
 80158f2:	d806      	bhi.n	8015902 <etharp_query+0xfe>
 80158f4:	4b5a      	ldr	r3, [pc, #360]	; (8015a60 <etharp_query+0x25c>)
 80158f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80158fa:	495d      	ldr	r1, [pc, #372]	; (8015a70 <etharp_query+0x26c>)
 80158fc:	485a      	ldr	r0, [pc, #360]	; (8015a68 <etharp_query+0x264>)
 80158fe:	f001 ff9d 	bl	801783c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015902:	6a3b      	ldr	r3, [r7, #32]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d102      	bne.n	801590e <etharp_query+0x10a>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d10c      	bne.n	8015928 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801590e:	68b9      	ldr	r1, [r7, #8]
 8015910:	68f8      	ldr	r0, [r7, #12]
 8015912:	f000 f963 	bl	8015bdc <etharp_request>
 8015916:	4603      	mov	r3, r0
 8015918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d102      	bne.n	8015928 <etharp_query+0x124>
      return result;
 8015922:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015926:	e096      	b.n	8015a56 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d106      	bne.n	801593c <etharp_query+0x138>
 801592e:	4b4c      	ldr	r3, [pc, #304]	; (8015a60 <etharp_query+0x25c>)
 8015930:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015934:	494f      	ldr	r1, [pc, #316]	; (8015a74 <etharp_query+0x270>)
 8015936:	484c      	ldr	r0, [pc, #304]	; (8015a68 <etharp_query+0x264>)
 8015938:	f001 ff80 	bl	801783c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801593c:	7c7a      	ldrb	r2, [r7, #17]
 801593e:	494b      	ldr	r1, [pc, #300]	; (8015a6c <etharp_query+0x268>)
 8015940:	4613      	mov	r3, r2
 8015942:	005b      	lsls	r3, r3, #1
 8015944:	4413      	add	r3, r2
 8015946:	00db      	lsls	r3, r3, #3
 8015948:	440b      	add	r3, r1
 801594a:	3314      	adds	r3, #20
 801594c:	781b      	ldrb	r3, [r3, #0]
 801594e:	2b01      	cmp	r3, #1
 8015950:	d917      	bls.n	8015982 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015952:	4a49      	ldr	r2, [pc, #292]	; (8015a78 <etharp_query+0x274>)
 8015954:	7c7b      	ldrb	r3, [r7, #17]
 8015956:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015958:	7c7a      	ldrb	r2, [r7, #17]
 801595a:	4613      	mov	r3, r2
 801595c:	005b      	lsls	r3, r3, #1
 801595e:	4413      	add	r3, r2
 8015960:	00db      	lsls	r3, r3, #3
 8015962:	3308      	adds	r3, #8
 8015964:	4a41      	ldr	r2, [pc, #260]	; (8015a6c <etharp_query+0x268>)
 8015966:	4413      	add	r3, r2
 8015968:	3304      	adds	r3, #4
 801596a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801596e:	9200      	str	r2, [sp, #0]
 8015970:	697a      	ldr	r2, [r7, #20]
 8015972:	6879      	ldr	r1, [r7, #4]
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f001 fd01 	bl	801737c <ethernet_output>
 801597a:	4603      	mov	r3, r0
 801597c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015980:	e067      	b.n	8015a52 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015982:	7c7a      	ldrb	r2, [r7, #17]
 8015984:	4939      	ldr	r1, [pc, #228]	; (8015a6c <etharp_query+0x268>)
 8015986:	4613      	mov	r3, r2
 8015988:	005b      	lsls	r3, r3, #1
 801598a:	4413      	add	r3, r2
 801598c:	00db      	lsls	r3, r3, #3
 801598e:	440b      	add	r3, r1
 8015990:	3314      	adds	r3, #20
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	2b01      	cmp	r3, #1
 8015996:	d15c      	bne.n	8015a52 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015998:	2300      	movs	r3, #0
 801599a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80159a0:	e01c      	b.n	80159dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	895a      	ldrh	r2, [r3, #10]
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	891b      	ldrh	r3, [r3, #8]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d10a      	bne.n	80159c4 <etharp_query+0x1c0>
 80159ae:	69fb      	ldr	r3, [r7, #28]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d006      	beq.n	80159c4 <etharp_query+0x1c0>
 80159b6:	4b2a      	ldr	r3, [pc, #168]	; (8015a60 <etharp_query+0x25c>)
 80159b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80159bc:	492f      	ldr	r1, [pc, #188]	; (8015a7c <etharp_query+0x278>)
 80159be:	482a      	ldr	r0, [pc, #168]	; (8015a68 <etharp_query+0x264>)
 80159c0:	f001 ff3c 	bl	801783c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80159c4:	69fb      	ldr	r3, [r7, #28]
 80159c6:	7b1b      	ldrb	r3, [r3, #12]
 80159c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d002      	beq.n	80159d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80159d0:	2301      	movs	r3, #1
 80159d2:	61bb      	str	r3, [r7, #24]
        break;
 80159d4:	e005      	b.n	80159e2 <etharp_query+0x1de>
      }
      p = p->next;
 80159d6:	69fb      	ldr	r3, [r7, #28]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d1df      	bne.n	80159a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d007      	beq.n	80159f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80159ee:	200e      	movs	r0, #14
 80159f0:	f7f8 fc8c 	bl	800e30c <pbuf_clone>
 80159f4:	61f8      	str	r0, [r7, #28]
 80159f6:	e004      	b.n	8015a02 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80159fc:	69f8      	ldr	r0, [r7, #28]
 80159fe:	f7f8 fac3 	bl	800df88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d021      	beq.n	8015a4c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015a08:	7c7a      	ldrb	r2, [r7, #17]
 8015a0a:	4918      	ldr	r1, [pc, #96]	; (8015a6c <etharp_query+0x268>)
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	005b      	lsls	r3, r3, #1
 8015a10:	4413      	add	r3, r2
 8015a12:	00db      	lsls	r3, r3, #3
 8015a14:	440b      	add	r3, r1
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d00a      	beq.n	8015a32 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015a1c:	7c7a      	ldrb	r2, [r7, #17]
 8015a1e:	4913      	ldr	r1, [pc, #76]	; (8015a6c <etharp_query+0x268>)
 8015a20:	4613      	mov	r3, r2
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	4413      	add	r3, r2
 8015a26:	00db      	lsls	r3, r3, #3
 8015a28:	440b      	add	r3, r1
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f8 fa05 	bl	800de3c <pbuf_free>
      }
      arp_table[i].q = p;
 8015a32:	7c7a      	ldrb	r2, [r7, #17]
 8015a34:	490d      	ldr	r1, [pc, #52]	; (8015a6c <etharp_query+0x268>)
 8015a36:	4613      	mov	r3, r2
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	4413      	add	r3, r2
 8015a3c:	00db      	lsls	r3, r3, #3
 8015a3e:	440b      	add	r3, r1
 8015a40:	69fa      	ldr	r2, [r7, #28]
 8015a42:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015a44:	2300      	movs	r3, #0
 8015a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a4a:	e002      	b.n	8015a52 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015a4c:	23ff      	movs	r3, #255	; 0xff
 8015a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015a52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3728      	adds	r7, #40	; 0x28
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	0801bc9c 	.word	0x0801bc9c
 8015a64:	0801be48 	.word	0x0801be48
 8015a68:	0801bd14 	.word	0x0801bd14
 8015a6c:	20004e2c 	.word	0x20004e2c
 8015a70:	0801be58 	.word	0x0801be58
 8015a74:	0801be3c 	.word	0x0801be3c
 8015a78:	20004f1c 	.word	0x20004f1c
 8015a7c:	0801be80 	.word	0x0801be80

08015a80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b08a      	sub	sp, #40	; 0x28
 8015a84:	af02      	add	r7, sp, #8
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	607a      	str	r2, [r7, #4]
 8015a8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d106      	bne.n	8015aa6 <etharp_raw+0x26>
 8015a98:	4b3a      	ldr	r3, [pc, #232]	; (8015b84 <etharp_raw+0x104>)
 8015a9a:	f240 4257 	movw	r2, #1111	; 0x457
 8015a9e:	493a      	ldr	r1, [pc, #232]	; (8015b88 <etharp_raw+0x108>)
 8015aa0:	483a      	ldr	r0, [pc, #232]	; (8015b8c <etharp_raw+0x10c>)
 8015aa2:	f001 fecb 	bl	801783c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015aa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015aaa:	211c      	movs	r1, #28
 8015aac:	200e      	movs	r0, #14
 8015aae:	f7f7 fee1 	bl	800d874 <pbuf_alloc>
 8015ab2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015ab4:	69bb      	ldr	r3, [r7, #24]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d102      	bne.n	8015ac0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015aba:	f04f 33ff 	mov.w	r3, #4294967295
 8015abe:	e05d      	b.n	8015b7c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015ac0:	69bb      	ldr	r3, [r7, #24]
 8015ac2:	895b      	ldrh	r3, [r3, #10]
 8015ac4:	2b1b      	cmp	r3, #27
 8015ac6:	d806      	bhi.n	8015ad6 <etharp_raw+0x56>
 8015ac8:	4b2e      	ldr	r3, [pc, #184]	; (8015b84 <etharp_raw+0x104>)
 8015aca:	f240 4262 	movw	r2, #1122	; 0x462
 8015ace:	4930      	ldr	r1, [pc, #192]	; (8015b90 <etharp_raw+0x110>)
 8015ad0:	482e      	ldr	r0, [pc, #184]	; (8015b8c <etharp_raw+0x10c>)
 8015ad2:	f001 feb3 	bl	801783c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015adc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7f6 fe00 	bl	800c6e4 <lwip_htons>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015af2:	2b06      	cmp	r3, #6
 8015af4:	d006      	beq.n	8015b04 <etharp_raw+0x84>
 8015af6:	4b23      	ldr	r3, [pc, #140]	; (8015b84 <etharp_raw+0x104>)
 8015af8:	f240 4269 	movw	r2, #1129	; 0x469
 8015afc:	4925      	ldr	r1, [pc, #148]	; (8015b94 <etharp_raw+0x114>)
 8015afe:	4823      	ldr	r0, [pc, #140]	; (8015b8c <etharp_raw+0x10c>)
 8015b00:	f001 fe9c 	bl	801783c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	3308      	adds	r3, #8
 8015b08:	2206      	movs	r2, #6
 8015b0a:	6839      	ldr	r1, [r7, #0]
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f001 fe65 	bl	80177dc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	3312      	adds	r3, #18
 8015b16:	2206      	movs	r2, #6
 8015b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f001 fe5e 	bl	80177dc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	330e      	adds	r3, #14
 8015b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b26:	6812      	ldr	r2, [r2, #0]
 8015b28:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	3318      	adds	r3, #24
 8015b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b30:	6812      	ldr	r2, [r2, #0]
 8015b32:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	2200      	movs	r2, #0
 8015b38:	701a      	strb	r2, [r3, #0]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	f042 0201 	orr.w	r2, r2, #1
 8015b40:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	2200      	movs	r2, #0
 8015b46:	f042 0208 	orr.w	r2, r2, #8
 8015b4a:	709a      	strb	r2, [r3, #2]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	2206      	movs	r2, #6
 8015b54:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	2204      	movs	r2, #4
 8015b5a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015b5c:	f640 0306 	movw	r3, #2054	; 0x806
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	68ba      	ldr	r2, [r7, #8]
 8015b66:	69b9      	ldr	r1, [r7, #24]
 8015b68:	68f8      	ldr	r0, [r7, #12]
 8015b6a:	f001 fc07 	bl	801737c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015b6e:	69b8      	ldr	r0, [r7, #24]
 8015b70:	f7f8 f964 	bl	800de3c <pbuf_free>
  p = NULL;
 8015b74:	2300      	movs	r3, #0
 8015b76:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3720      	adds	r7, #32
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	0801bc9c 	.word	0x0801bc9c
 8015b88:	0801bdec 	.word	0x0801bdec
 8015b8c:	0801bd14 	.word	0x0801bd14
 8015b90:	0801be9c 	.word	0x0801be9c
 8015b94:	0801bed0 	.word	0x0801bed0

08015b98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b088      	sub	sp, #32
 8015b9c:	af04      	add	r7, sp, #16
 8015b9e:	60f8      	str	r0, [r7, #12]
 8015ba0:	60b9      	str	r1, [r7, #8]
 8015ba2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	9203      	str	r2, [sp, #12]
 8015bb8:	68ba      	ldr	r2, [r7, #8]
 8015bba:	9202      	str	r2, [sp, #8]
 8015bbc:	4a06      	ldr	r2, [pc, #24]	; (8015bd8 <etharp_request_dst+0x40>)
 8015bbe:	9201      	str	r2, [sp, #4]
 8015bc0:	9300      	str	r3, [sp, #0]
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	687a      	ldr	r2, [r7, #4]
 8015bc6:	68f8      	ldr	r0, [r7, #12]
 8015bc8:	f7ff ff5a 	bl	8015a80 <etharp_raw>
 8015bcc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3710      	adds	r7, #16
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
 8015bd6:	bf00      	nop
 8015bd8:	0801c4f8 	.word	0x0801c4f8

08015bdc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b082      	sub	sp, #8
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015be6:	4a05      	ldr	r2, [pc, #20]	; (8015bfc <etharp_request+0x20>)
 8015be8:	6839      	ldr	r1, [r7, #0]
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7ff ffd4 	bl	8015b98 <etharp_request_dst>
 8015bf0:	4603      	mov	r3, r0
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3708      	adds	r7, #8
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	0801c4f0 	.word	0x0801c4f0

08015c00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b08e      	sub	sp, #56	; 0x38
 8015c04:	af04      	add	r7, sp, #16
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015c0a:	4b79      	ldr	r3, [pc, #484]	; (8015df0 <icmp_input+0x1f0>)
 8015c0c:	689b      	ldr	r3, [r3, #8]
 8015c0e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	f003 030f 	and.w	r3, r3, #15
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c22:	2b13      	cmp	r3, #19
 8015c24:	f240 80cd 	bls.w	8015dc2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	895b      	ldrh	r3, [r3, #10]
 8015c2c:	2b03      	cmp	r3, #3
 8015c2e:	f240 80ca 	bls.w	8015dc6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015c3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f000 80b7 	beq.w	8015db4 <icmp_input+0x1b4>
 8015c46:	2b08      	cmp	r3, #8
 8015c48:	f040 80b7 	bne.w	8015dba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015c4c:	4b69      	ldr	r3, [pc, #420]	; (8015df4 <icmp_input+0x1f4>)
 8015c4e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c50:	4b67      	ldr	r3, [pc, #412]	; (8015df0 <icmp_input+0x1f0>)
 8015c52:	695b      	ldr	r3, [r3, #20]
 8015c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c58:	2be0      	cmp	r3, #224	; 0xe0
 8015c5a:	f000 80bb 	beq.w	8015dd4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015c5e:	4b64      	ldr	r3, [pc, #400]	; (8015df0 <icmp_input+0x1f0>)
 8015c60:	695b      	ldr	r3, [r3, #20]
 8015c62:	4a63      	ldr	r2, [pc, #396]	; (8015df0 <icmp_input+0x1f0>)
 8015c64:	6812      	ldr	r2, [r2, #0]
 8015c66:	4611      	mov	r1, r2
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f000 fbed 	bl	8016448 <ip4_addr_isbroadcast_u32>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f040 80b1 	bne.w	8015dd8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	891b      	ldrh	r3, [r3, #8]
 8015c7a:	2b07      	cmp	r3, #7
 8015c7c:	f240 80a5 	bls.w	8015dca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c82:	330e      	adds	r3, #14
 8015c84:	4619      	mov	r1, r3
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	f7f8 f842 	bl	800dd10 <pbuf_add_header>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d04b      	beq.n	8015d2a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	891a      	ldrh	r2, [r3, #8]
 8015c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c98:	4413      	add	r3, r2
 8015c9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	891b      	ldrh	r3, [r3, #8]
 8015ca0:	8b7a      	ldrh	r2, [r7, #26]
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	f0c0 809a 	bcc.w	8015ddc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015ca8:	8b7b      	ldrh	r3, [r7, #26]
 8015caa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015cae:	4619      	mov	r1, r3
 8015cb0:	200e      	movs	r0, #14
 8015cb2:	f7f7 fddf 	bl	800d874 <pbuf_alloc>
 8015cb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f000 8090 	beq.w	8015de0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	895b      	ldrh	r3, [r3, #10]
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cc8:	3308      	adds	r3, #8
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d203      	bcs.n	8015cd6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015cce:	6978      	ldr	r0, [r7, #20]
 8015cd0:	f7f8 f8b4 	bl	800de3c <pbuf_free>
          goto icmperr;
 8015cd4:	e085      	b.n	8015de2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f001 fd7c 	bl	80177dc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ce6:	4619      	mov	r1, r3
 8015ce8:	6978      	ldr	r0, [r7, #20]
 8015cea:	f7f8 f821 	bl	800dd30 <pbuf_remove_header>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d009      	beq.n	8015d08 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015cf4:	4b40      	ldr	r3, [pc, #256]	; (8015df8 <icmp_input+0x1f8>)
 8015cf6:	22b6      	movs	r2, #182	; 0xb6
 8015cf8:	4940      	ldr	r1, [pc, #256]	; (8015dfc <icmp_input+0x1fc>)
 8015cfa:	4841      	ldr	r0, [pc, #260]	; (8015e00 <icmp_input+0x200>)
 8015cfc:	f001 fd9e 	bl	801783c <iprintf>
          pbuf_free(r);
 8015d00:	6978      	ldr	r0, [r7, #20]
 8015d02:	f7f8 f89b 	bl	800de3c <pbuf_free>
          goto icmperr;
 8015d06:	e06c      	b.n	8015de2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015d08:	6879      	ldr	r1, [r7, #4]
 8015d0a:	6978      	ldr	r0, [r7, #20]
 8015d0c:	f7f8 f9ba 	bl	800e084 <pbuf_copy>
 8015d10:	4603      	mov	r3, r0
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d003      	beq.n	8015d1e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015d16:	6978      	ldr	r0, [r7, #20]
 8015d18:	f7f8 f890 	bl	800de3c <pbuf_free>
          goto icmperr;
 8015d1c:	e061      	b.n	8015de2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f7f8 f88c 	bl	800de3c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	607b      	str	r3, [r7, #4]
 8015d28:	e00f      	b.n	8015d4a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015d2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d2c:	330e      	adds	r3, #14
 8015d2e:	4619      	mov	r1, r3
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f7f7 fffd 	bl	800dd30 <pbuf_remove_header>
 8015d36:	4603      	mov	r3, r0
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d006      	beq.n	8015d4a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015d3c:	4b2e      	ldr	r3, [pc, #184]	; (8015df8 <icmp_input+0x1f8>)
 8015d3e:	22c7      	movs	r2, #199	; 0xc7
 8015d40:	4930      	ldr	r1, [pc, #192]	; (8015e04 <icmp_input+0x204>)
 8015d42:	482f      	ldr	r0, [pc, #188]	; (8015e00 <icmp_input+0x200>)
 8015d44:	f001 fd7a 	bl	801783c <iprintf>
          goto icmperr;
 8015d48:	e04b      	b.n	8015de2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d52:	4619      	mov	r1, r3
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f7f7 ffdb 	bl	800dd10 <pbuf_add_header>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d12b      	bne.n	8015db8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015d66:	69fb      	ldr	r3, [r7, #28]
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015d6e:	4b20      	ldr	r3, [pc, #128]	; (8015df0 <icmp_input+0x1f0>)
 8015d70:	691a      	ldr	r2, [r3, #16]
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2200      	movs	r2, #0
 8015d7a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015d7c:	693b      	ldr	r3, [r7, #16]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	709a      	strb	r2, [r3, #2]
 8015d82:	2200      	movs	r2, #0
 8015d84:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	22ff      	movs	r2, #255	; 0xff
 8015d8a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	729a      	strb	r2, [r3, #10]
 8015d92:	2200      	movs	r2, #0
 8015d94:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	9302      	str	r3, [sp, #8]
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	9301      	str	r3, [sp, #4]
 8015d9e:	2300      	movs	r3, #0
 8015da0:	9300      	str	r3, [sp, #0]
 8015da2:	23ff      	movs	r3, #255	; 0xff
 8015da4:	2200      	movs	r2, #0
 8015da6:	69f9      	ldr	r1, [r7, #28]
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f000 fa75 	bl	8016298 <ip4_output_if>
 8015dae:	4603      	mov	r3, r0
 8015db0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015db2:	e001      	b.n	8015db8 <icmp_input+0x1b8>
      break;
 8015db4:	bf00      	nop
 8015db6:	e000      	b.n	8015dba <icmp_input+0x1ba>
      break;
 8015db8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f7f8 f83e 	bl	800de3c <pbuf_free>
  return;
 8015dc0:	e013      	b.n	8015dea <icmp_input+0x1ea>
    goto lenerr;
 8015dc2:	bf00      	nop
 8015dc4:	e002      	b.n	8015dcc <icmp_input+0x1cc>
    goto lenerr;
 8015dc6:	bf00      	nop
 8015dc8:	e000      	b.n	8015dcc <icmp_input+0x1cc>
        goto lenerr;
 8015dca:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015dcc:	6878      	ldr	r0, [r7, #4]
 8015dce:	f7f8 f835 	bl	800de3c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015dd2:	e00a      	b.n	8015dea <icmp_input+0x1ea>
        goto icmperr;
 8015dd4:	bf00      	nop
 8015dd6:	e004      	b.n	8015de2 <icmp_input+0x1e2>
        goto icmperr;
 8015dd8:	bf00      	nop
 8015dda:	e002      	b.n	8015de2 <icmp_input+0x1e2>
          goto icmperr;
 8015ddc:	bf00      	nop
 8015dde:	e000      	b.n	8015de2 <icmp_input+0x1e2>
          goto icmperr;
 8015de0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f7f8 f82a 	bl	800de3c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015de8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015dea:	3728      	adds	r7, #40	; 0x28
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	20008618 	.word	0x20008618
 8015df4:	2000862c 	.word	0x2000862c
 8015df8:	0801bf14 	.word	0x0801bf14
 8015dfc:	0801bf4c 	.word	0x0801bf4c
 8015e00:	0801bf84 	.word	0x0801bf84
 8015e04:	0801bfac 	.word	0x0801bfac

08015e08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	460b      	mov	r3, r1
 8015e12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015e14:	78fb      	ldrb	r3, [r7, #3]
 8015e16:	461a      	mov	r2, r3
 8015e18:	2103      	movs	r1, #3
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 f814 	bl	8015e48 <icmp_send_response>
}
 8015e20:	bf00      	nop
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015e34:	78fb      	ldrb	r3, [r7, #3]
 8015e36:	461a      	mov	r2, r3
 8015e38:	210b      	movs	r1, #11
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f000 f804 	bl	8015e48 <icmp_send_response>
}
 8015e40:	bf00      	nop
 8015e42:	3708      	adds	r7, #8
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b08c      	sub	sp, #48	; 0x30
 8015e4c:	af04      	add	r7, sp, #16
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	460b      	mov	r3, r1
 8015e52:	70fb      	strb	r3, [r7, #3]
 8015e54:	4613      	mov	r3, r2
 8015e56:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015e58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e5c:	2124      	movs	r1, #36	; 0x24
 8015e5e:	2022      	movs	r0, #34	; 0x22
 8015e60:	f7f7 fd08 	bl	800d874 <pbuf_alloc>
 8015e64:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d04c      	beq.n	8015f06 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	895b      	ldrh	r3, [r3, #10]
 8015e70:	2b23      	cmp	r3, #35	; 0x23
 8015e72:	d806      	bhi.n	8015e82 <icmp_send_response+0x3a>
 8015e74:	4b26      	ldr	r3, [pc, #152]	; (8015f10 <icmp_send_response+0xc8>)
 8015e76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015e7a:	4926      	ldr	r1, [pc, #152]	; (8015f14 <icmp_send_response+0xcc>)
 8015e7c:	4826      	ldr	r0, [pc, #152]	; (8015f18 <icmp_send_response+0xd0>)
 8015e7e:	f001 fcdd 	bl	801783c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	78fa      	ldrb	r2, [r7, #3]
 8015e92:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	78ba      	ldrb	r2, [r7, #2]
 8015e98:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	711a      	strb	r2, [r3, #4]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	719a      	strb	r2, [r3, #6]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	f103 0008 	add.w	r0, r3, #8
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	221c      	movs	r2, #28
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	f001 fc8d 	bl	80177dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	68db      	ldr	r3, [r3, #12]
 8015ec6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015ec8:	f107 030c 	add.w	r3, r7, #12
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f000 f825 	bl	8015f1c <ip4_route>
 8015ed2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d011      	beq.n	8015efe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	2200      	movs	r2, #0
 8015ede:	709a      	strb	r2, [r3, #2]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015ee4:	f107 020c 	add.w	r2, r7, #12
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	9302      	str	r3, [sp, #8]
 8015eec:	2301      	movs	r3, #1
 8015eee:	9301      	str	r3, [sp, #4]
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	9300      	str	r3, [sp, #0]
 8015ef4:	23ff      	movs	r3, #255	; 0xff
 8015ef6:	2100      	movs	r1, #0
 8015ef8:	69f8      	ldr	r0, [r7, #28]
 8015efa:	f000 f9cd 	bl	8016298 <ip4_output_if>
  }
  pbuf_free(q);
 8015efe:	69f8      	ldr	r0, [r7, #28]
 8015f00:	f7f7 ff9c 	bl	800de3c <pbuf_free>
 8015f04:	e000      	b.n	8015f08 <icmp_send_response+0xc0>
    return;
 8015f06:	bf00      	nop
}
 8015f08:	3720      	adds	r7, #32
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	0801bf14 	.word	0x0801bf14
 8015f14:	0801bfe0 	.word	0x0801bfe0
 8015f18:	0801bf84 	.word	0x0801bf84

08015f1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b085      	sub	sp, #20
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015f24:	4b33      	ldr	r3, [pc, #204]	; (8015ff4 <ip4_route+0xd8>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	60fb      	str	r3, [r7, #12]
 8015f2a:	e036      	b.n	8015f9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f32:	f003 0301 	and.w	r3, r3, #1
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d02b      	beq.n	8015f94 <ip4_route+0x78>
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f42:	089b      	lsrs	r3, r3, #2
 8015f44:	f003 0301 	and.w	r3, r3, #1
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d022      	beq.n	8015f94 <ip4_route+0x78>
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3304      	adds	r3, #4
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d01d      	beq.n	8015f94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681a      	ldr	r2, [r3, #0]
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	3304      	adds	r3, #4
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	405a      	eors	r2, r3
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	3308      	adds	r3, #8
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d101      	bne.n	8015f74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	e038      	b.n	8015fe6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f7a:	f003 0302 	and.w	r3, r3, #2
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d108      	bne.n	8015f94 <ip4_route+0x78>
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681a      	ldr	r2, [r3, #0]
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	330c      	adds	r3, #12
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d101      	bne.n	8015f94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	e028      	b.n	8015fe6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	60fb      	str	r3, [r7, #12]
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d1c5      	bne.n	8015f2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015fa0:	4b15      	ldr	r3, [pc, #84]	; (8015ff8 <ip4_route+0xdc>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d01a      	beq.n	8015fde <ip4_route+0xc2>
 8015fa8:	4b13      	ldr	r3, [pc, #76]	; (8015ff8 <ip4_route+0xdc>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fb0:	f003 0301 	and.w	r3, r3, #1
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d012      	beq.n	8015fde <ip4_route+0xc2>
 8015fb8:	4b0f      	ldr	r3, [pc, #60]	; (8015ff8 <ip4_route+0xdc>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fc0:	f003 0304 	and.w	r3, r3, #4
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d00a      	beq.n	8015fde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fc8:	4b0b      	ldr	r3, [pc, #44]	; (8015ff8 <ip4_route+0xdc>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	3304      	adds	r3, #4
 8015fce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d004      	beq.n	8015fde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2b7f      	cmp	r3, #127	; 0x7f
 8015fdc:	d101      	bne.n	8015fe2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	e001      	b.n	8015fe6 <ip4_route+0xca>
  }

  return netif_default;
 8015fe2:	4b05      	ldr	r3, [pc, #20]	; (8015ff8 <ip4_route+0xdc>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3714      	adds	r7, #20
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr
 8015ff2:	bf00      	nop
 8015ff4:	2000bd1c 	.word	0x2000bd1c
 8015ff8:	2000bd20 	.word	0x2000bd20

08015ffc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b082      	sub	sp, #8
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801600a:	f003 0301 	and.w	r3, r3, #1
 801600e:	b2db      	uxtb	r3, r3
 8016010:	2b00      	cmp	r3, #0
 8016012:	d016      	beq.n	8016042 <ip4_input_accept+0x46>
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	3304      	adds	r3, #4
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d011      	beq.n	8016042 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801601e:	4b0b      	ldr	r3, [pc, #44]	; (801604c <ip4_input_accept+0x50>)
 8016020:	695a      	ldr	r2, [r3, #20]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	3304      	adds	r3, #4
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	429a      	cmp	r2, r3
 801602a:	d008      	beq.n	801603e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801602c:	4b07      	ldr	r3, [pc, #28]	; (801604c <ip4_input_accept+0x50>)
 801602e:	695b      	ldr	r3, [r3, #20]
 8016030:	6879      	ldr	r1, [r7, #4]
 8016032:	4618      	mov	r0, r3
 8016034:	f000 fa08 	bl	8016448 <ip4_addr_isbroadcast_u32>
 8016038:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801603a:	2b00      	cmp	r3, #0
 801603c:	d001      	beq.n	8016042 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801603e:	2301      	movs	r3, #1
 8016040:	e000      	b.n	8016044 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016042:	2300      	movs	r3, #0
}
 8016044:	4618      	mov	r0, r3
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	20008618 	.word	0x20008618

08016050 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	091b      	lsrs	r3, r3, #4
 8016066:	b2db      	uxtb	r3, r3
 8016068:	2b04      	cmp	r3, #4
 801606a:	d004      	beq.n	8016076 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f7f7 fee5 	bl	800de3c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016072:	2300      	movs	r3, #0
 8016074:	e107      	b.n	8016286 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016076:	697b      	ldr	r3, [r7, #20]
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	f003 030f 	and.w	r3, r3, #15
 801607e:	b2db      	uxtb	r3, r3
 8016080:	009b      	lsls	r3, r3, #2
 8016082:	b2db      	uxtb	r3, r3
 8016084:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	885b      	ldrh	r3, [r3, #2]
 801608a:	b29b      	uxth	r3, r3
 801608c:	4618      	mov	r0, r3
 801608e:	f7f6 fb29 	bl	800c6e4 <lwip_htons>
 8016092:	4603      	mov	r3, r0
 8016094:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	891b      	ldrh	r3, [r3, #8]
 801609a:	89ba      	ldrh	r2, [r7, #12]
 801609c:	429a      	cmp	r2, r3
 801609e:	d204      	bcs.n	80160aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80160a0:	89bb      	ldrh	r3, [r7, #12]
 80160a2:	4619      	mov	r1, r3
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f7f7 fd43 	bl	800db30 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	895b      	ldrh	r3, [r3, #10]
 80160ae:	89fa      	ldrh	r2, [r7, #14]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d807      	bhi.n	80160c4 <ip4_input+0x74>
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	891b      	ldrh	r3, [r3, #8]
 80160b8:	89ba      	ldrh	r2, [r7, #12]
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d802      	bhi.n	80160c4 <ip4_input+0x74>
 80160be:	89fb      	ldrh	r3, [r7, #14]
 80160c0:	2b13      	cmp	r3, #19
 80160c2:	d804      	bhi.n	80160ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f7f7 feb9 	bl	800de3c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80160ca:	2300      	movs	r3, #0
 80160cc:	e0db      	b.n	8016286 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	4a6f      	ldr	r2, [pc, #444]	; (8016290 <ip4_input+0x240>)
 80160d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	68db      	ldr	r3, [r3, #12]
 80160da:	4a6d      	ldr	r2, [pc, #436]	; (8016290 <ip4_input+0x240>)
 80160dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160de:	4b6c      	ldr	r3, [pc, #432]	; (8016290 <ip4_input+0x240>)
 80160e0:	695b      	ldr	r3, [r3, #20]
 80160e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160e6:	2be0      	cmp	r3, #224	; 0xe0
 80160e8:	d112      	bne.n	8016110 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160f0:	f003 0301 	and.w	r3, r3, #1
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d007      	beq.n	801610a <ip4_input+0xba>
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	3304      	adds	r3, #4
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d002      	beq.n	801610a <ip4_input+0xba>
      netif = inp;
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	613b      	str	r3, [r7, #16]
 8016108:	e02a      	b.n	8016160 <ip4_input+0x110>
    } else {
      netif = NULL;
 801610a:	2300      	movs	r3, #0
 801610c:	613b      	str	r3, [r7, #16]
 801610e:	e027      	b.n	8016160 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016110:	6838      	ldr	r0, [r7, #0]
 8016112:	f7ff ff73 	bl	8015ffc <ip4_input_accept>
 8016116:	4603      	mov	r3, r0
 8016118:	2b00      	cmp	r3, #0
 801611a:	d002      	beq.n	8016122 <ip4_input+0xd2>
      netif = inp;
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	613b      	str	r3, [r7, #16]
 8016120:	e01e      	b.n	8016160 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016122:	2300      	movs	r3, #0
 8016124:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016126:	4b5a      	ldr	r3, [pc, #360]	; (8016290 <ip4_input+0x240>)
 8016128:	695b      	ldr	r3, [r3, #20]
 801612a:	b2db      	uxtb	r3, r3
 801612c:	2b7f      	cmp	r3, #127	; 0x7f
 801612e:	d017      	beq.n	8016160 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016130:	4b58      	ldr	r3, [pc, #352]	; (8016294 <ip4_input+0x244>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	613b      	str	r3, [r7, #16]
 8016136:	e00e      	b.n	8016156 <ip4_input+0x106>
          if (netif == inp) {
 8016138:	693a      	ldr	r2, [r7, #16]
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	429a      	cmp	r2, r3
 801613e:	d006      	beq.n	801614e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016140:	6938      	ldr	r0, [r7, #16]
 8016142:	f7ff ff5b 	bl	8015ffc <ip4_input_accept>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d108      	bne.n	801615e <ip4_input+0x10e>
 801614c:	e000      	b.n	8016150 <ip4_input+0x100>
            continue;
 801614e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	613b      	str	r3, [r7, #16]
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d1ed      	bne.n	8016138 <ip4_input+0xe8>
 801615c:	e000      	b.n	8016160 <ip4_input+0x110>
            break;
 801615e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016160:	4b4b      	ldr	r3, [pc, #300]	; (8016290 <ip4_input+0x240>)
 8016162:	691b      	ldr	r3, [r3, #16]
 8016164:	6839      	ldr	r1, [r7, #0]
 8016166:	4618      	mov	r0, r3
 8016168:	f000 f96e 	bl	8016448 <ip4_addr_isbroadcast_u32>
 801616c:	4603      	mov	r3, r0
 801616e:	2b00      	cmp	r3, #0
 8016170:	d105      	bne.n	801617e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016172:	4b47      	ldr	r3, [pc, #284]	; (8016290 <ip4_input+0x240>)
 8016174:	691b      	ldr	r3, [r3, #16]
 8016176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801617a:	2be0      	cmp	r3, #224	; 0xe0
 801617c:	d104      	bne.n	8016188 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f7f7 fe5c 	bl	800de3c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016184:	2300      	movs	r3, #0
 8016186:	e07e      	b.n	8016286 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d104      	bne.n	8016198 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7f7 fe54 	bl	800de3c <pbuf_free>
    return ERR_OK;
 8016194:	2300      	movs	r3, #0
 8016196:	e076      	b.n	8016286 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	88db      	ldrh	r3, [r3, #6]
 801619c:	b29b      	uxth	r3, r3
 801619e:	461a      	mov	r2, r3
 80161a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80161a4:	4013      	ands	r3, r2
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d00b      	beq.n	80161c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f000 fd24 	bl	8016bf8 <ip4_reass>
 80161b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d101      	bne.n	80161bc <ip4_input+0x16c>
      return ERR_OK;
 80161b8:	2300      	movs	r3, #0
 80161ba:	e064      	b.n	8016286 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80161c2:	4a33      	ldr	r2, [pc, #204]	; (8016290 <ip4_input+0x240>)
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80161c8:	4a31      	ldr	r2, [pc, #196]	; (8016290 <ip4_input+0x240>)
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80161ce:	4a30      	ldr	r2, [pc, #192]	; (8016290 <ip4_input+0x240>)
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	f003 030f 	and.w	r3, r3, #15
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	009b      	lsls	r3, r3, #2
 80161e0:	b2db      	uxtb	r3, r3
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	4b2a      	ldr	r3, [pc, #168]	; (8016290 <ip4_input+0x240>)
 80161e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80161e8:	89fb      	ldrh	r3, [r7, #14]
 80161ea:	4619      	mov	r1, r3
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f7f7 fd9f 	bl	800dd30 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	7a5b      	ldrb	r3, [r3, #9]
 80161f6:	2b11      	cmp	r3, #17
 80161f8:	d006      	beq.n	8016208 <ip4_input+0x1b8>
 80161fa:	2b11      	cmp	r3, #17
 80161fc:	dc13      	bgt.n	8016226 <ip4_input+0x1d6>
 80161fe:	2b01      	cmp	r3, #1
 8016200:	d00c      	beq.n	801621c <ip4_input+0x1cc>
 8016202:	2b06      	cmp	r3, #6
 8016204:	d005      	beq.n	8016212 <ip4_input+0x1c2>
 8016206:	e00e      	b.n	8016226 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016208:	6839      	ldr	r1, [r7, #0]
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f7fe fb5a 	bl	80148c4 <udp_input>
        break;
 8016210:	e026      	b.n	8016260 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016212:	6839      	ldr	r1, [r7, #0]
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f7f9 ff17 	bl	8010048 <tcp_input>
        break;
 801621a:	e021      	b.n	8016260 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f7ff fcee 	bl	8015c00 <icmp_input>
        break;
 8016224:	e01c      	b.n	8016260 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016226:	4b1a      	ldr	r3, [pc, #104]	; (8016290 <ip4_input+0x240>)
 8016228:	695b      	ldr	r3, [r3, #20]
 801622a:	6939      	ldr	r1, [r7, #16]
 801622c:	4618      	mov	r0, r3
 801622e:	f000 f90b 	bl	8016448 <ip4_addr_isbroadcast_u32>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d10f      	bne.n	8016258 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016238:	4b15      	ldr	r3, [pc, #84]	; (8016290 <ip4_input+0x240>)
 801623a:	695b      	ldr	r3, [r3, #20]
 801623c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016240:	2be0      	cmp	r3, #224	; 0xe0
 8016242:	d009      	beq.n	8016258 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016248:	4619      	mov	r1, r3
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f7f7 fde3 	bl	800de16 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016250:	2102      	movs	r1, #2
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f7ff fdd8 	bl	8015e08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f7f7 fdef 	bl	800de3c <pbuf_free>
        break;
 801625e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016260:	4b0b      	ldr	r3, [pc, #44]	; (8016290 <ip4_input+0x240>)
 8016262:	2200      	movs	r2, #0
 8016264:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016266:	4b0a      	ldr	r3, [pc, #40]	; (8016290 <ip4_input+0x240>)
 8016268:	2200      	movs	r2, #0
 801626a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801626c:	4b08      	ldr	r3, [pc, #32]	; (8016290 <ip4_input+0x240>)
 801626e:	2200      	movs	r2, #0
 8016270:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016272:	4b07      	ldr	r3, [pc, #28]	; (8016290 <ip4_input+0x240>)
 8016274:	2200      	movs	r2, #0
 8016276:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016278:	4b05      	ldr	r3, [pc, #20]	; (8016290 <ip4_input+0x240>)
 801627a:	2200      	movs	r2, #0
 801627c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801627e:	4b04      	ldr	r3, [pc, #16]	; (8016290 <ip4_input+0x240>)
 8016280:	2200      	movs	r2, #0
 8016282:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016284:	2300      	movs	r3, #0
}
 8016286:	4618      	mov	r0, r3
 8016288:	3718      	adds	r7, #24
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	20008618 	.word	0x20008618
 8016294:	2000bd1c 	.word	0x2000bd1c

08016298 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b08a      	sub	sp, #40	; 0x28
 801629c:	af04      	add	r7, sp, #16
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d009      	beq.n	80162c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d003      	beq.n	80162be <ip4_output_if+0x26>
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d102      	bne.n	80162c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80162be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c0:	3304      	adds	r3, #4
 80162c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80162c4:	78fa      	ldrb	r2, [r7, #3]
 80162c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c8:	9302      	str	r3, [sp, #8]
 80162ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80162ce:	9301      	str	r3, [sp, #4]
 80162d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	4613      	mov	r3, r2
 80162d8:	687a      	ldr	r2, [r7, #4]
 80162da:	6979      	ldr	r1, [r7, #20]
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	f000 f805 	bl	80162ec <ip4_output_if_src>
 80162e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80162e4:	4618      	mov	r0, r3
 80162e6:	3718      	adds	r7, #24
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b088      	sub	sp, #32
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
 80162f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7b9b      	ldrb	r3, [r3, #14]
 80162fe:	2b01      	cmp	r3, #1
 8016300:	d006      	beq.n	8016310 <ip4_output_if_src+0x24>
 8016302:	4b4b      	ldr	r3, [pc, #300]	; (8016430 <ip4_output_if_src+0x144>)
 8016304:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016308:	494a      	ldr	r1, [pc, #296]	; (8016434 <ip4_output_if_src+0x148>)
 801630a:	484b      	ldr	r0, [pc, #300]	; (8016438 <ip4_output_if_src+0x14c>)
 801630c:	f001 fa96 	bl	801783c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d060      	beq.n	80163d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016316:	2314      	movs	r3, #20
 8016318:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801631a:	2114      	movs	r1, #20
 801631c:	68f8      	ldr	r0, [r7, #12]
 801631e:	f7f7 fcf7 	bl	800dd10 <pbuf_add_header>
 8016322:	4603      	mov	r3, r0
 8016324:	2b00      	cmp	r3, #0
 8016326:	d002      	beq.n	801632e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016328:	f06f 0301 	mvn.w	r3, #1
 801632c:	e07c      	b.n	8016428 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	895b      	ldrh	r3, [r3, #10]
 8016338:	2b13      	cmp	r3, #19
 801633a:	d806      	bhi.n	801634a <ip4_output_if_src+0x5e>
 801633c:	4b3c      	ldr	r3, [pc, #240]	; (8016430 <ip4_output_if_src+0x144>)
 801633e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016342:	493e      	ldr	r1, [pc, #248]	; (801643c <ip4_output_if_src+0x150>)
 8016344:	483c      	ldr	r0, [pc, #240]	; (8016438 <ip4_output_if_src+0x14c>)
 8016346:	f001 fa79 	bl	801783c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801634a:	69fb      	ldr	r3, [r7, #28]
 801634c:	78fa      	ldrb	r2, [r7, #3]
 801634e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016356:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681a      	ldr	r2, [r3, #0]
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016360:	8b7b      	ldrh	r3, [r7, #26]
 8016362:	089b      	lsrs	r3, r3, #2
 8016364:	b29b      	uxth	r3, r3
 8016366:	b2db      	uxtb	r3, r3
 8016368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801636c:	b2da      	uxtb	r2, r3
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016378:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	891b      	ldrh	r3, [r3, #8]
 801637e:	4618      	mov	r0, r3
 8016380:	f7f6 f9b0 	bl	800c6e4 <lwip_htons>
 8016384:	4603      	mov	r3, r0
 8016386:	461a      	mov	r2, r3
 8016388:	69fb      	ldr	r3, [r7, #28]
 801638a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	2200      	movs	r2, #0
 8016390:	719a      	strb	r2, [r3, #6]
 8016392:	2200      	movs	r2, #0
 8016394:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016396:	4b2a      	ldr	r3, [pc, #168]	; (8016440 <ip4_output_if_src+0x154>)
 8016398:	881b      	ldrh	r3, [r3, #0]
 801639a:	4618      	mov	r0, r3
 801639c:	f7f6 f9a2 	bl	800c6e4 <lwip_htons>
 80163a0:	4603      	mov	r3, r0
 80163a2:	461a      	mov	r2, r3
 80163a4:	69fb      	ldr	r3, [r7, #28]
 80163a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80163a8:	4b25      	ldr	r3, [pc, #148]	; (8016440 <ip4_output_if_src+0x154>)
 80163aa:	881b      	ldrh	r3, [r3, #0]
 80163ac:	3301      	adds	r3, #1
 80163ae:	b29a      	uxth	r2, r3
 80163b0:	4b23      	ldr	r3, [pc, #140]	; (8016440 <ip4_output_if_src+0x154>)
 80163b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d104      	bne.n	80163c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80163ba:	4b22      	ldr	r3, [pc, #136]	; (8016444 <ip4_output_if_src+0x158>)
 80163bc:	681a      	ldr	r2, [r3, #0]
 80163be:	69fb      	ldr	r3, [r7, #28]
 80163c0:	60da      	str	r2, [r3, #12]
 80163c2:	e003      	b.n	80163cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	2200      	movs	r2, #0
 80163d0:	729a      	strb	r2, [r3, #10]
 80163d2:	2200      	movs	r2, #0
 80163d4:	72da      	strb	r2, [r3, #11]
 80163d6:	e00f      	b.n	80163f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	895b      	ldrh	r3, [r3, #10]
 80163dc:	2b13      	cmp	r3, #19
 80163de:	d802      	bhi.n	80163e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80163e0:	f06f 0301 	mvn.w	r3, #1
 80163e4:	e020      	b.n	8016428 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	691b      	ldr	r3, [r3, #16]
 80163f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80163f2:	f107 0314 	add.w	r3, r7, #20
 80163f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80163f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d00c      	beq.n	801641a <ip4_output_if_src+0x12e>
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	891a      	ldrh	r2, [r3, #8]
 8016404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016406:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016408:	429a      	cmp	r2, r3
 801640a:	d906      	bls.n	801641a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f000 fddf 	bl	8016fd4 <ip4_frag>
 8016416:	4603      	mov	r3, r0
 8016418:	e006      	b.n	8016428 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641c:	695b      	ldr	r3, [r3, #20]
 801641e:	687a      	ldr	r2, [r7, #4]
 8016420:	68f9      	ldr	r1, [r7, #12]
 8016422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016424:	4798      	blx	r3
 8016426:	4603      	mov	r3, r0
}
 8016428:	4618      	mov	r0, r3
 801642a:	3720      	adds	r7, #32
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	0801c00c 	.word	0x0801c00c
 8016434:	0801c040 	.word	0x0801c040
 8016438:	0801c04c 	.word	0x0801c04c
 801643c:	0801c074 	.word	0x0801c074
 8016440:	20004f1e 	.word	0x20004f1e
 8016444:	0801c4ec 	.word	0x0801c4ec

08016448 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016448:	b480      	push	{r7}
 801644a:	b085      	sub	sp, #20
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801645c:	d002      	beq.n	8016464 <ip4_addr_isbroadcast_u32+0x1c>
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d101      	bne.n	8016468 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016464:	2301      	movs	r3, #1
 8016466:	e02a      	b.n	80164be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801646e:	f003 0302 	and.w	r3, r3, #2
 8016472:	2b00      	cmp	r3, #0
 8016474:	d101      	bne.n	801647a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016476:	2300      	movs	r3, #0
 8016478:	e021      	b.n	80164be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	3304      	adds	r3, #4
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	429a      	cmp	r2, r3
 8016484:	d101      	bne.n	801648a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016486:	2300      	movs	r3, #0
 8016488:	e019      	b.n	80164be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801648a:	68fa      	ldr	r2, [r7, #12]
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	3304      	adds	r3, #4
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	405a      	eors	r2, r3
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	3308      	adds	r3, #8
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	4013      	ands	r3, r2
 801649c:	2b00      	cmp	r3, #0
 801649e:	d10d      	bne.n	80164bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	3308      	adds	r3, #8
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	43da      	mvns	r2, r3
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	3308      	adds	r3, #8
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d101      	bne.n	80164bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80164b8:	2301      	movs	r3, #1
 80164ba:	e000      	b.n	80164be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80164bc:	2300      	movs	r3, #0
  }
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3714      	adds	r7, #20
 80164c2:	46bd      	mov	sp, r7
 80164c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c8:	4770      	bx	lr
	...

080164cc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80164d4:	2210      	movs	r2, #16
 80164d6:	4904      	ldr	r1, [pc, #16]	; (80164e8 <ip4addr_ntoa+0x1c>)
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f000 f807 	bl	80164ec <ip4addr_ntoa_r>
 80164de:	4603      	mov	r3, r0
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	20004f20 	.word	0x20004f20

080164ec <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80164ec:	b480      	push	{r7}
 80164ee:	b08d      	sub	sp, #52	; 0x34
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80164f8:	2300      	movs	r3, #0
 80164fa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8016506:	f107 0318 	add.w	r3, r7, #24
 801650a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801650c:	2300      	movs	r3, #0
 801650e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016512:	e059      	b.n	80165c8 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8016514:	2300      	movs	r3, #0
 8016516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801651c:	781a      	ldrb	r2, [r3, #0]
 801651e:	4b33      	ldr	r3, [pc, #204]	; (80165ec <ip4addr_ntoa_r+0x100>)
 8016520:	fba3 1302 	umull	r1, r3, r3, r2
 8016524:	08d9      	lsrs	r1, r3, #3
 8016526:	460b      	mov	r3, r1
 8016528:	009b      	lsls	r3, r3, #2
 801652a:	440b      	add	r3, r1
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	1ad3      	subs	r3, r2, r3
 8016530:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8016532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	4a2d      	ldr	r2, [pc, #180]	; (80165ec <ip4addr_ntoa_r+0x100>)
 8016538:	fba2 2303 	umull	r2, r3, r2, r3
 801653c:	08db      	lsrs	r3, r3, #3
 801653e:	b2da      	uxtb	r2, r3
 8016540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016542:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8016544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016548:	1c5a      	adds	r2, r3, #1
 801654a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801654e:	4619      	mov	r1, r3
 8016550:	7ffb      	ldrb	r3, [r7, #31]
 8016552:	3330      	adds	r3, #48	; 0x30
 8016554:	b2da      	uxtb	r2, r3
 8016556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801655a:	440b      	add	r3, r1
 801655c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8016560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d1d8      	bne.n	801651a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8016568:	e012      	b.n	8016590 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801656a:	6a3b      	ldr	r3, [r7, #32]
 801656c:	1c5a      	adds	r2, r3, #1
 801656e:	623a      	str	r2, [r7, #32]
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	429a      	cmp	r2, r3
 8016574:	dc01      	bgt.n	801657a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8016576:	2300      	movs	r3, #0
 8016578:	e031      	b.n	80165de <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801657a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016580:	1c59      	adds	r1, r3, #1
 8016582:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016584:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016588:	440a      	add	r2, r1
 801658a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801658e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8016590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016594:	1e5a      	subs	r2, r3, #1
 8016596:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801659a:	2b00      	cmp	r3, #0
 801659c:	d1e5      	bne.n	801656a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801659e:	6a3b      	ldr	r3, [r7, #32]
 80165a0:	1c5a      	adds	r2, r3, #1
 80165a2:	623a      	str	r2, [r7, #32]
 80165a4:	687a      	ldr	r2, [r7, #4]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	dc01      	bgt.n	80165ae <ip4addr_ntoa_r+0xc2>
      return NULL;
 80165aa:	2300      	movs	r3, #0
 80165ac:	e017      	b.n	80165de <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80165ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b0:	1c5a      	adds	r2, r3, #1
 80165b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80165b4:	222e      	movs	r2, #46	; 0x2e
 80165b6:	701a      	strb	r2, [r3, #0]
    ap++;
 80165b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ba:	3301      	adds	r3, #1
 80165bc:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80165be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165c2:	3301      	adds	r3, #1
 80165c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80165c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165cc:	2b03      	cmp	r3, #3
 80165ce:	d9a1      	bls.n	8016514 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80165d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d2:	3b01      	subs	r3, #1
 80165d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d8:	2200      	movs	r2, #0
 80165da:	701a      	strb	r2, [r3, #0]
  return buf;
 80165dc:	68bb      	ldr	r3, [r7, #8]
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3734      	adds	r7, #52	; 0x34
 80165e2:	46bd      	mov	sp, r7
 80165e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	cccccccd 	.word	0xcccccccd

080165f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b084      	sub	sp, #16
 80165f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80165f6:	2300      	movs	r3, #0
 80165f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80165fa:	4b12      	ldr	r3, [pc, #72]	; (8016644 <ip_reass_tmr+0x54>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016600:	e018      	b.n	8016634 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	7fdb      	ldrb	r3, [r3, #31]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00b      	beq.n	8016622 <ip_reass_tmr+0x32>
      r->timer--;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	7fdb      	ldrb	r3, [r3, #31]
 801660e:	3b01      	subs	r3, #1
 8016610:	b2da      	uxtb	r2, r3
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	60fb      	str	r3, [r7, #12]
 8016620:	e008      	b.n	8016634 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801662c:	68b9      	ldr	r1, [r7, #8]
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f000 f80a 	bl	8016648 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d1e3      	bne.n	8016602 <ip_reass_tmr+0x12>
    }
  }
}
 801663a:	bf00      	nop
 801663c:	bf00      	nop
 801663e:	3710      	adds	r7, #16
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	20004f30 	.word	0x20004f30

08016648 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b088      	sub	sp, #32
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016652:	2300      	movs	r3, #0
 8016654:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016656:	683a      	ldr	r2, [r7, #0]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	429a      	cmp	r2, r3
 801665c:	d105      	bne.n	801666a <ip_reass_free_complete_datagram+0x22>
 801665e:	4b45      	ldr	r3, [pc, #276]	; (8016774 <ip_reass_free_complete_datagram+0x12c>)
 8016660:	22ab      	movs	r2, #171	; 0xab
 8016662:	4945      	ldr	r1, [pc, #276]	; (8016778 <ip_reass_free_complete_datagram+0x130>)
 8016664:	4845      	ldr	r0, [pc, #276]	; (801677c <ip_reass_free_complete_datagram+0x134>)
 8016666:	f001 f8e9 	bl	801783c <iprintf>
  if (prev != NULL) {
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00a      	beq.n	8016686 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	687a      	ldr	r2, [r7, #4]
 8016676:	429a      	cmp	r2, r3
 8016678:	d005      	beq.n	8016686 <ip_reass_free_complete_datagram+0x3e>
 801667a:	4b3e      	ldr	r3, [pc, #248]	; (8016774 <ip_reass_free_complete_datagram+0x12c>)
 801667c:	22ad      	movs	r2, #173	; 0xad
 801667e:	4940      	ldr	r1, [pc, #256]	; (8016780 <ip_reass_free_complete_datagram+0x138>)
 8016680:	483e      	ldr	r0, [pc, #248]	; (801677c <ip_reass_free_complete_datagram+0x134>)
 8016682:	f001 f8db 	bl	801783c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	685b      	ldr	r3, [r3, #4]
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801668e:	697b      	ldr	r3, [r7, #20]
 8016690:	889b      	ldrh	r3, [r3, #4]
 8016692:	b29b      	uxth	r3, r3
 8016694:	2b00      	cmp	r3, #0
 8016696:	d12a      	bne.n	80166ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	681a      	ldr	r2, [r3, #0]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80166a6:	69bb      	ldr	r3, [r7, #24]
 80166a8:	6858      	ldr	r0, [r3, #4]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	3308      	adds	r3, #8
 80166ae:	2214      	movs	r2, #20
 80166b0:	4619      	mov	r1, r3
 80166b2:	f001 f893 	bl	80177dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80166b6:	2101      	movs	r1, #1
 80166b8:	69b8      	ldr	r0, [r7, #24]
 80166ba:	f7ff fbb5 	bl	8015e28 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80166be:	69b8      	ldr	r0, [r7, #24]
 80166c0:	f7f7 fc4a 	bl	800df58 <pbuf_clen>
 80166c4:	4603      	mov	r3, r0
 80166c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80166c8:	8bfa      	ldrh	r2, [r7, #30]
 80166ca:	8a7b      	ldrh	r3, [r7, #18]
 80166cc:	4413      	add	r3, r2
 80166ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166d2:	db05      	blt.n	80166e0 <ip_reass_free_complete_datagram+0x98>
 80166d4:	4b27      	ldr	r3, [pc, #156]	; (8016774 <ip_reass_free_complete_datagram+0x12c>)
 80166d6:	22bc      	movs	r2, #188	; 0xbc
 80166d8:	492a      	ldr	r1, [pc, #168]	; (8016784 <ip_reass_free_complete_datagram+0x13c>)
 80166da:	4828      	ldr	r0, [pc, #160]	; (801677c <ip_reass_free_complete_datagram+0x134>)
 80166dc:	f001 f8ae 	bl	801783c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80166e0:	8bfa      	ldrh	r2, [r7, #30]
 80166e2:	8a7b      	ldrh	r3, [r7, #18]
 80166e4:	4413      	add	r3, r2
 80166e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80166e8:	69b8      	ldr	r0, [r7, #24]
 80166ea:	f7f7 fba7 	bl	800de3c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	685b      	ldr	r3, [r3, #4]
 80166f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80166f4:	e01f      	b.n	8016736 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80166f6:	69bb      	ldr	r3, [r7, #24]
 80166f8:	685b      	ldr	r3, [r3, #4]
 80166fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016706:	68f8      	ldr	r0, [r7, #12]
 8016708:	f7f7 fc26 	bl	800df58 <pbuf_clen>
 801670c:	4603      	mov	r3, r0
 801670e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016710:	8bfa      	ldrh	r2, [r7, #30]
 8016712:	8a7b      	ldrh	r3, [r7, #18]
 8016714:	4413      	add	r3, r2
 8016716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801671a:	db05      	blt.n	8016728 <ip_reass_free_complete_datagram+0xe0>
 801671c:	4b15      	ldr	r3, [pc, #84]	; (8016774 <ip_reass_free_complete_datagram+0x12c>)
 801671e:	22cc      	movs	r2, #204	; 0xcc
 8016720:	4918      	ldr	r1, [pc, #96]	; (8016784 <ip_reass_free_complete_datagram+0x13c>)
 8016722:	4816      	ldr	r0, [pc, #88]	; (801677c <ip_reass_free_complete_datagram+0x134>)
 8016724:	f001 f88a 	bl	801783c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016728:	8bfa      	ldrh	r2, [r7, #30]
 801672a:	8a7b      	ldrh	r3, [r7, #18]
 801672c:	4413      	add	r3, r2
 801672e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f7f7 fb83 	bl	800de3c <pbuf_free>
  while (p != NULL) {
 8016736:	69bb      	ldr	r3, [r7, #24]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d1dc      	bne.n	80166f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801673c:	6839      	ldr	r1, [r7, #0]
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f000 f8c2 	bl	80168c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016744:	4b10      	ldr	r3, [pc, #64]	; (8016788 <ip_reass_free_complete_datagram+0x140>)
 8016746:	881b      	ldrh	r3, [r3, #0]
 8016748:	8bfa      	ldrh	r2, [r7, #30]
 801674a:	429a      	cmp	r2, r3
 801674c:	d905      	bls.n	801675a <ip_reass_free_complete_datagram+0x112>
 801674e:	4b09      	ldr	r3, [pc, #36]	; (8016774 <ip_reass_free_complete_datagram+0x12c>)
 8016750:	22d2      	movs	r2, #210	; 0xd2
 8016752:	490e      	ldr	r1, [pc, #56]	; (801678c <ip_reass_free_complete_datagram+0x144>)
 8016754:	4809      	ldr	r0, [pc, #36]	; (801677c <ip_reass_free_complete_datagram+0x134>)
 8016756:	f001 f871 	bl	801783c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801675a:	4b0b      	ldr	r3, [pc, #44]	; (8016788 <ip_reass_free_complete_datagram+0x140>)
 801675c:	881a      	ldrh	r2, [r3, #0]
 801675e:	8bfb      	ldrh	r3, [r7, #30]
 8016760:	1ad3      	subs	r3, r2, r3
 8016762:	b29a      	uxth	r2, r3
 8016764:	4b08      	ldr	r3, [pc, #32]	; (8016788 <ip_reass_free_complete_datagram+0x140>)
 8016766:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016768:	8bfb      	ldrh	r3, [r7, #30]
}
 801676a:	4618      	mov	r0, r3
 801676c:	3720      	adds	r7, #32
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	0801c0a4 	.word	0x0801c0a4
 8016778:	0801c0e0 	.word	0x0801c0e0
 801677c:	0801c0ec 	.word	0x0801c0ec
 8016780:	0801c114 	.word	0x0801c114
 8016784:	0801c128 	.word	0x0801c128
 8016788:	20004f34 	.word	0x20004f34
 801678c:	0801c148 	.word	0x0801c148

08016790 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b08a      	sub	sp, #40	; 0x28
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801679a:	2300      	movs	r3, #0
 801679c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801679e:	2300      	movs	r3, #0
 80167a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80167a2:	2300      	movs	r3, #0
 80167a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80167a6:	2300      	movs	r3, #0
 80167a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80167aa:	2300      	movs	r3, #0
 80167ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80167ae:	4b28      	ldr	r3, [pc, #160]	; (8016850 <ip_reass_remove_oldest_datagram+0xc0>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80167b4:	e030      	b.n	8016818 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80167b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b8:	695a      	ldr	r2, [r3, #20]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d10c      	bne.n	80167dc <ip_reass_remove_oldest_datagram+0x4c>
 80167c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c4:	699a      	ldr	r2, [r3, #24]
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	691b      	ldr	r3, [r3, #16]
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d106      	bne.n	80167dc <ip_reass_remove_oldest_datagram+0x4c>
 80167ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d0:	899a      	ldrh	r2, [r3, #12]
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	889b      	ldrh	r3, [r3, #4]
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	429a      	cmp	r2, r3
 80167da:	d014      	beq.n	8016806 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	3301      	adds	r3, #1
 80167e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80167e2:	6a3b      	ldr	r3, [r7, #32]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d104      	bne.n	80167f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80167e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	61bb      	str	r3, [r7, #24]
 80167f0:	e009      	b.n	8016806 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80167f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f4:	7fda      	ldrb	r2, [r3, #31]
 80167f6:	6a3b      	ldr	r3, [r7, #32]
 80167f8:	7fdb      	ldrb	r3, [r3, #31]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d803      	bhi.n	8016806 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80167fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016800:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d001      	beq.n	8016812 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016810:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681a:	2b00      	cmp	r3, #0
 801681c:	d1cb      	bne.n	80167b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801681e:	6a3b      	ldr	r3, [r7, #32]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d008      	beq.n	8016836 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016824:	69b9      	ldr	r1, [r7, #24]
 8016826:	6a38      	ldr	r0, [r7, #32]
 8016828:	f7ff ff0e 	bl	8016648 <ip_reass_free_complete_datagram>
 801682c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801682e:	697a      	ldr	r2, [r7, #20]
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	4413      	add	r3, r2
 8016834:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016836:	697a      	ldr	r2, [r7, #20]
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	429a      	cmp	r2, r3
 801683c:	da02      	bge.n	8016844 <ip_reass_remove_oldest_datagram+0xb4>
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	2b01      	cmp	r3, #1
 8016842:	dcac      	bgt.n	801679e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016844:	697b      	ldr	r3, [r7, #20]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3728      	adds	r7, #40	; 0x28
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	20004f30 	.word	0x20004f30

08016854 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
 801685c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801685e:	2004      	movs	r0, #4
 8016860:	f7f6 fbf6 	bl	800d050 <memp_malloc>
 8016864:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d110      	bne.n	801688e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801686c:	6839      	ldr	r1, [r7, #0]
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f7ff ff8e 	bl	8016790 <ip_reass_remove_oldest_datagram>
 8016874:	4602      	mov	r2, r0
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	4293      	cmp	r3, r2
 801687a:	dc03      	bgt.n	8016884 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801687c:	2004      	movs	r0, #4
 801687e:	f7f6 fbe7 	bl	800d050 <memp_malloc>
 8016882:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d101      	bne.n	801688e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801688a:	2300      	movs	r3, #0
 801688c:	e016      	b.n	80168bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801688e:	2220      	movs	r2, #32
 8016890:	2100      	movs	r1, #0
 8016892:	68f8      	ldr	r0, [r7, #12]
 8016894:	f000 ffca 	bl	801782c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	220f      	movs	r2, #15
 801689c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801689e:	4b09      	ldr	r3, [pc, #36]	; (80168c4 <ip_reass_enqueue_new_datagram+0x70>)
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80168a6:	4a07      	ldr	r2, [pc, #28]	; (80168c4 <ip_reass_enqueue_new_datagram+0x70>)
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	3308      	adds	r3, #8
 80168b0:	2214      	movs	r2, #20
 80168b2:	6879      	ldr	r1, [r7, #4]
 80168b4:	4618      	mov	r0, r3
 80168b6:	f000 ff91 	bl	80177dc <memcpy>
  return ipr;
 80168ba:	68fb      	ldr	r3, [r7, #12]
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3710      	adds	r7, #16
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}
 80168c4:	20004f30 	.word	0x20004f30

080168c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80168d2:	4b10      	ldr	r3, [pc, #64]	; (8016914 <ip_reass_dequeue_datagram+0x4c>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	687a      	ldr	r2, [r7, #4]
 80168d8:	429a      	cmp	r2, r3
 80168da:	d104      	bne.n	80168e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	4a0c      	ldr	r2, [pc, #48]	; (8016914 <ip_reass_dequeue_datagram+0x4c>)
 80168e2:	6013      	str	r3, [r2, #0]
 80168e4:	e00d      	b.n	8016902 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d106      	bne.n	80168fa <ip_reass_dequeue_datagram+0x32>
 80168ec:	4b0a      	ldr	r3, [pc, #40]	; (8016918 <ip_reass_dequeue_datagram+0x50>)
 80168ee:	f240 1245 	movw	r2, #325	; 0x145
 80168f2:	490a      	ldr	r1, [pc, #40]	; (801691c <ip_reass_dequeue_datagram+0x54>)
 80168f4:	480a      	ldr	r0, [pc, #40]	; (8016920 <ip_reass_dequeue_datagram+0x58>)
 80168f6:	f000 ffa1 	bl	801783c <iprintf>
    prev->next = ipr->next;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016902:	6879      	ldr	r1, [r7, #4]
 8016904:	2004      	movs	r0, #4
 8016906:	f7f6 fbf5 	bl	800d0f4 <memp_free>
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	20004f30 	.word	0x20004f30
 8016918:	0801c0a4 	.word	0x0801c0a4
 801691c:	0801c16c 	.word	0x0801c16c
 8016920:	0801c0ec 	.word	0x0801c0ec

08016924 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b08c      	sub	sp, #48	; 0x30
 8016928:	af00      	add	r7, sp, #0
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	60b9      	str	r1, [r7, #8]
 801692e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016930:	2300      	movs	r3, #0
 8016932:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016934:	2301      	movs	r3, #1
 8016936:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	685b      	ldr	r3, [r3, #4]
 801693c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	885b      	ldrh	r3, [r3, #2]
 8016942:	b29b      	uxth	r3, r3
 8016944:	4618      	mov	r0, r3
 8016946:	f7f5 fecd 	bl	800c6e4 <lwip_htons>
 801694a:	4603      	mov	r3, r0
 801694c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	f003 030f 	and.w	r3, r3, #15
 8016956:	b2db      	uxtb	r3, r3
 8016958:	009b      	lsls	r3, r3, #2
 801695a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801695c:	7e7b      	ldrb	r3, [r7, #25]
 801695e:	b29b      	uxth	r3, r3
 8016960:	8b7a      	ldrh	r2, [r7, #26]
 8016962:	429a      	cmp	r2, r3
 8016964:	d202      	bcs.n	801696c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016966:	f04f 33ff 	mov.w	r3, #4294967295
 801696a:	e135      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801696c:	7e7b      	ldrb	r3, [r7, #25]
 801696e:	b29b      	uxth	r3, r3
 8016970:	8b7a      	ldrh	r2, [r7, #26]
 8016972:	1ad3      	subs	r3, r2, r3
 8016974:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016976:	69fb      	ldr	r3, [r7, #28]
 8016978:	88db      	ldrh	r3, [r3, #6]
 801697a:	b29b      	uxth	r3, r3
 801697c:	4618      	mov	r0, r3
 801697e:	f7f5 feb1 	bl	800c6e4 <lwip_htons>
 8016982:	4603      	mov	r3, r0
 8016984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016988:	b29b      	uxth	r3, r3
 801698a:	00db      	lsls	r3, r3, #3
 801698c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	685b      	ldr	r3, [r3, #4]
 8016992:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016996:	2200      	movs	r2, #0
 8016998:	701a      	strb	r2, [r3, #0]
 801699a:	2200      	movs	r2, #0
 801699c:	705a      	strb	r2, [r3, #1]
 801699e:	2200      	movs	r2, #0
 80169a0:	709a      	strb	r2, [r3, #2]
 80169a2:	2200      	movs	r2, #0
 80169a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80169a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a8:	8afa      	ldrh	r2, [r7, #22]
 80169aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80169ac:	8afa      	ldrh	r2, [r7, #22]
 80169ae:	8b7b      	ldrh	r3, [r7, #26]
 80169b0:	4413      	add	r3, r2
 80169b2:	b29a      	uxth	r2, r3
 80169b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80169b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ba:	88db      	ldrh	r3, [r3, #6]
 80169bc:	b29b      	uxth	r3, r3
 80169be:	8afa      	ldrh	r2, [r7, #22]
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d902      	bls.n	80169ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169c4:	f04f 33ff 	mov.w	r3, #4294967295
 80169c8:	e106      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	685b      	ldr	r3, [r3, #4]
 80169ce:	627b      	str	r3, [r7, #36]	; 0x24
 80169d0:	e068      	b.n	8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80169d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80169d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169da:	889b      	ldrh	r3, [r3, #4]
 80169dc:	b29a      	uxth	r2, r3
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	889b      	ldrh	r3, [r3, #4]
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d235      	bcs.n	8016a54 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80169e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80169ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d020      	beq.n	8016a36 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80169f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f6:	889b      	ldrh	r3, [r3, #4]
 80169f8:	b29a      	uxth	r2, r3
 80169fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fc:	88db      	ldrh	r3, [r3, #6]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d307      	bcc.n	8016a14 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a06:	88db      	ldrh	r3, [r3, #6]
 8016a08:	b29a      	uxth	r2, r3
 8016a0a:	693b      	ldr	r3, [r7, #16]
 8016a0c:	889b      	ldrh	r3, [r3, #4]
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d902      	bls.n	8016a1a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a14:	f04f 33ff 	mov.w	r3, #4294967295
 8016a18:	e0de      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a1c:	68ba      	ldr	r2, [r7, #8]
 8016a1e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a22:	88db      	ldrh	r3, [r3, #6]
 8016a24:	b29a      	uxth	r2, r3
 8016a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a28:	889b      	ldrh	r3, [r3, #4]
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d03d      	beq.n	8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a30:	2300      	movs	r3, #0
 8016a32:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016a34:	e03a      	b.n	8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a38:	88db      	ldrh	r3, [r3, #6]
 8016a3a:	b29a      	uxth	r2, r3
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	889b      	ldrh	r3, [r3, #4]
 8016a40:	b29b      	uxth	r3, r3
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d902      	bls.n	8016a4c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a46:	f04f 33ff 	mov.w	r3, #4294967295
 8016a4a:	e0c5      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	68ba      	ldr	r2, [r7, #8]
 8016a50:	605a      	str	r2, [r3, #4]
      break;
 8016a52:	e02b      	b.n	8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a56:	889b      	ldrh	r3, [r3, #4]
 8016a58:	b29a      	uxth	r2, r3
 8016a5a:	693b      	ldr	r3, [r7, #16]
 8016a5c:	889b      	ldrh	r3, [r3, #4]
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d102      	bne.n	8016a6a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a64:	f04f 33ff 	mov.w	r3, #4294967295
 8016a68:	e0b6      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6c:	889b      	ldrh	r3, [r3, #4]
 8016a6e:	b29a      	uxth	r2, r3
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	88db      	ldrh	r3, [r3, #6]
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d202      	bcs.n	8016a80 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7e:	e0ab      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d009      	beq.n	8016a9a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a88:	88db      	ldrh	r3, [r3, #6]
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	889b      	ldrh	r3, [r3, #4]
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d001      	beq.n	8016a9a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a96:	2300      	movs	r3, #0
 8016a98:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d193      	bne.n	80169d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016aaa:	e000      	b.n	8016aae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016aac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d12d      	bne.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d01c      	beq.n	8016af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016abc:	88db      	ldrh	r3, [r3, #6]
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac2:	889b      	ldrh	r3, [r3, #4]
 8016ac4:	b29b      	uxth	r3, r3
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d906      	bls.n	8016ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016aca:	4b45      	ldr	r3, [pc, #276]	; (8016be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016acc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016ad0:	4944      	ldr	r1, [pc, #272]	; (8016be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016ad2:	4845      	ldr	r0, [pc, #276]	; (8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ad4:	f000 feb2 	bl	801783c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ada:	68ba      	ldr	r2, [r7, #8]
 8016adc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	88db      	ldrh	r3, [r3, #6]
 8016ae2:	b29a      	uxth	r2, r3
 8016ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae6:	889b      	ldrh	r3, [r3, #4]
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d010      	beq.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016aee:	2300      	movs	r3, #0
 8016af0:	623b      	str	r3, [r7, #32]
 8016af2:	e00d      	b.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	685b      	ldr	r3, [r3, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d006      	beq.n	8016b0a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016afc:	4b38      	ldr	r3, [pc, #224]	; (8016be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016afe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016b02:	493a      	ldr	r1, [pc, #232]	; (8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b04:	4838      	ldr	r0, [pc, #224]	; (8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b06:	f000 fe99 	bl	801783c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	68ba      	ldr	r2, [r7, #8]
 8016b0e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d105      	bne.n	8016b22 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	7f9b      	ldrb	r3, [r3, #30]
 8016b1a:	f003 0301 	and.w	r3, r3, #1
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d059      	beq.n	8016bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016b22:	6a3b      	ldr	r3, [r7, #32]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d04f      	beq.n	8016bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d006      	beq.n	8016b3e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	685b      	ldr	r3, [r3, #4]
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	889b      	ldrh	r3, [r3, #4]
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d002      	beq.n	8016b44 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	623b      	str	r3, [r7, #32]
 8016b42:	e041      	b.n	8016bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b46:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b4e:	e012      	b.n	8016b76 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b58:	88db      	ldrh	r3, [r3, #6]
 8016b5a:	b29a      	uxth	r2, r3
 8016b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5e:	889b      	ldrh	r3, [r3, #4]
 8016b60:	b29b      	uxth	r3, r3
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d002      	beq.n	8016b6c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016b66:	2300      	movs	r3, #0
 8016b68:	623b      	str	r3, [r7, #32]
            break;
 8016b6a:	e007      	b.n	8016b7c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d1e9      	bne.n	8016b50 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016b7c:	6a3b      	ldr	r3, [r7, #32]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d022      	beq.n	8016bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d106      	bne.n	8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016b8a:	4b15      	ldr	r3, [pc, #84]	; (8016be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b8c:	f240 12df 	movw	r2, #479	; 0x1df
 8016b90:	4917      	ldr	r1, [pc, #92]	; (8016bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016b92:	4815      	ldr	r0, [pc, #84]	; (8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b94:	f000 fe52 	bl	801783c <iprintf>
          LWIP_ASSERT("sanity check",
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d106      	bne.n	8016bb2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016ba4:	4b0e      	ldr	r3, [pc, #56]	; (8016be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ba6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016baa:	4911      	ldr	r1, [pc, #68]	; (8016bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016bac:	480e      	ldr	r0, [pc, #56]	; (8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bae:	f000 fe45 	bl	801783c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d006      	beq.n	8016bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016bba:	4b09      	ldr	r3, [pc, #36]	; (8016be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bbc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016bc0:	490c      	ldr	r1, [pc, #48]	; (8016bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016bc2:	4809      	ldr	r0, [pc, #36]	; (8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bc4:	f000 fe3a 	bl	801783c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016bc8:	6a3b      	ldr	r3, [r7, #32]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	bf14      	ite	ne
 8016bce:	2301      	movne	r3, #1
 8016bd0:	2300      	moveq	r3, #0
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	e000      	b.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016bd6:	2300      	movs	r3, #0
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3730      	adds	r7, #48	; 0x30
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	0801c0a4 	.word	0x0801c0a4
 8016be4:	0801c188 	.word	0x0801c188
 8016be8:	0801c0ec 	.word	0x0801c0ec
 8016bec:	0801c1a8 	.word	0x0801c1a8
 8016bf0:	0801c1e0 	.word	0x0801c1e0
 8016bf4:	0801c1f0 	.word	0x0801c1f0

08016bf8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b08e      	sub	sp, #56	; 0x38
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	685b      	ldr	r3, [r3, #4]
 8016c04:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	f003 030f 	and.w	r3, r3, #15
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	009b      	lsls	r3, r3, #2
 8016c12:	b2db      	uxtb	r3, r3
 8016c14:	2b14      	cmp	r3, #20
 8016c16:	f040 8167 	bne.w	8016ee8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1c:	88db      	ldrh	r3, [r3, #6]
 8016c1e:	b29b      	uxth	r3, r3
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7f5 fd5f 	bl	800c6e4 <lwip_htons>
 8016c26:	4603      	mov	r3, r0
 8016c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	00db      	lsls	r3, r3, #3
 8016c30:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c34:	885b      	ldrh	r3, [r3, #2]
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7f5 fd53 	bl	800c6e4 <lwip_htons>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 030f 	and.w	r3, r3, #15
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	009b      	lsls	r3, r3, #2
 8016c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	f0c0 8146 	bcc.w	8016eec <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c68:	1ad3      	subs	r3, r2, r3
 8016c6a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f7f7 f973 	bl	800df58 <pbuf_clen>
 8016c72:	4603      	mov	r3, r0
 8016c74:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016c76:	4b9f      	ldr	r3, [pc, #636]	; (8016ef4 <ip4_reass+0x2fc>)
 8016c78:	881b      	ldrh	r3, [r3, #0]
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	8c3b      	ldrh	r3, [r7, #32]
 8016c7e:	4413      	add	r3, r2
 8016c80:	2b0a      	cmp	r3, #10
 8016c82:	dd10      	ble.n	8016ca6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016c84:	8c3b      	ldrh	r3, [r7, #32]
 8016c86:	4619      	mov	r1, r3
 8016c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c8a:	f7ff fd81 	bl	8016790 <ip_reass_remove_oldest_datagram>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	f000 812d 	beq.w	8016ef0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016c96:	4b97      	ldr	r3, [pc, #604]	; (8016ef4 <ip4_reass+0x2fc>)
 8016c98:	881b      	ldrh	r3, [r3, #0]
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	8c3b      	ldrh	r3, [r7, #32]
 8016c9e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016ca0:	2b0a      	cmp	r3, #10
 8016ca2:	f300 8125 	bgt.w	8016ef0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016ca6:	4b94      	ldr	r3, [pc, #592]	; (8016ef8 <ip4_reass+0x300>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	633b      	str	r3, [r7, #48]	; 0x30
 8016cac:	e015      	b.n	8016cda <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb0:	695a      	ldr	r2, [r3, #20]
 8016cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb4:	68db      	ldr	r3, [r3, #12]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d10c      	bne.n	8016cd4 <ip4_reass+0xdc>
 8016cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cbc:	699a      	ldr	r2, [r3, #24]
 8016cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc0:	691b      	ldr	r3, [r3, #16]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d106      	bne.n	8016cd4 <ip4_reass+0xdc>
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc8:	899a      	ldrh	r2, [r3, #12]
 8016cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ccc:	889b      	ldrh	r3, [r3, #4]
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d006      	beq.n	8016ce2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8016cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d1e6      	bne.n	8016cae <ip4_reass+0xb6>
 8016ce0:	e000      	b.n	8016ce4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016ce2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d109      	bne.n	8016cfe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016cea:	8c3b      	ldrh	r3, [r7, #32]
 8016cec:	4619      	mov	r1, r3
 8016cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cf0:	f7ff fdb0 	bl	8016854 <ip_reass_enqueue_new_datagram>
 8016cf4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d11c      	bne.n	8016d36 <ip4_reass+0x13e>
      goto nullreturn;
 8016cfc:	e109      	b.n	8016f12 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d00:	88db      	ldrh	r3, [r3, #6]
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7f5 fced 	bl	800c6e4 <lwip_htons>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d110      	bne.n	8016d36 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d16:	89db      	ldrh	r3, [r3, #14]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7f5 fce3 	bl	800c6e4 <lwip_htons>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d006      	beq.n	8016d36 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2a:	3308      	adds	r3, #8
 8016d2c:	2214      	movs	r2, #20
 8016d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d30:	4618      	mov	r0, r3
 8016d32:	f000 fd53 	bl	80177dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d38:	88db      	ldrh	r3, [r3, #6]
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	f003 0320 	and.w	r3, r3, #32
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	bf0c      	ite	eq
 8016d44:	2301      	moveq	r3, #1
 8016d46:	2300      	movne	r3, #0
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016d4c:	69fb      	ldr	r3, [r7, #28]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d00e      	beq.n	8016d70 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d56:	4413      	add	r3, r2
 8016d58:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016d5a:	8b7a      	ldrh	r2, [r7, #26]
 8016d5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	f0c0 80a0 	bcc.w	8016ea4 <ip4_reass+0x2ac>
 8016d64:	8b7b      	ldrh	r3, [r7, #26]
 8016d66:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016d6a:	4293      	cmp	r3, r2
 8016d6c:	f200 809a 	bhi.w	8016ea4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016d70:	69fa      	ldr	r2, [r7, #28]
 8016d72:	6879      	ldr	r1, [r7, #4]
 8016d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d76:	f7ff fdd5 	bl	8016924 <ip_reass_chain_frag_into_datagram_and_validate>
 8016d7a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d82:	f000 8091 	beq.w	8016ea8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016d86:	4b5b      	ldr	r3, [pc, #364]	; (8016ef4 <ip4_reass+0x2fc>)
 8016d88:	881a      	ldrh	r2, [r3, #0]
 8016d8a:	8c3b      	ldrh	r3, [r7, #32]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	b29a      	uxth	r2, r3
 8016d90:	4b58      	ldr	r3, [pc, #352]	; (8016ef4 <ip4_reass+0x2fc>)
 8016d92:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016d94:	69fb      	ldr	r3, [r7, #28]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d00d      	beq.n	8016db6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d9e:	4413      	add	r3, r2
 8016da0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da4:	8a7a      	ldrh	r2, [r7, #18]
 8016da6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016daa:	7f9b      	ldrb	r3, [r3, #30]
 8016dac:	f043 0301 	orr.w	r3, r3, #1
 8016db0:	b2da      	uxtb	r2, r3
 8016db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016db4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	2b01      	cmp	r3, #1
 8016dba:	d171      	bne.n	8016ea0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dbe:	8b9b      	ldrh	r3, [r3, #28]
 8016dc0:	3314      	adds	r3, #20
 8016dc2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd8:	3308      	adds	r3, #8
 8016dda:	2214      	movs	r2, #20
 8016ddc:	4619      	mov	r1, r3
 8016dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016de0:	f000 fcfc 	bl	80177dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016de4:	8a3b      	ldrh	r3, [r7, #16]
 8016de6:	4618      	mov	r0, r3
 8016de8:	f7f5 fc7c 	bl	800c6e4 <lwip_htons>
 8016dec:	4603      	mov	r3, r0
 8016dee:	461a      	mov	r2, r3
 8016df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df6:	2200      	movs	r2, #0
 8016df8:	719a      	strb	r2, [r3, #6]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e00:	2200      	movs	r2, #0
 8016e02:	729a      	strb	r2, [r3, #10]
 8016e04:	2200      	movs	r2, #0
 8016e06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016e0e:	e00d      	b.n	8016e2c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016e16:	2114      	movs	r1, #20
 8016e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e1a:	f7f6 ff89 	bl	800dd30 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016e1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f7f7 f8d9 	bl	800dfd8 <pbuf_cat>
      r = iprh->next_pbuf;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d1ee      	bne.n	8016e10 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016e32:	4b31      	ldr	r3, [pc, #196]	; (8016ef8 <ip4_reass+0x300>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e38:	429a      	cmp	r2, r3
 8016e3a:	d102      	bne.n	8016e42 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e40:	e010      	b.n	8016e64 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e42:	4b2d      	ldr	r3, [pc, #180]	; (8016ef8 <ip4_reass+0x300>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e48:	e007      	b.n	8016e5a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d006      	beq.n	8016e62 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d1f4      	bne.n	8016e4a <ip4_reass+0x252>
 8016e60:	e000      	b.n	8016e64 <ip4_reass+0x26c>
          break;
 8016e62:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e68:	f7ff fd2e 	bl	80168c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7f7 f873 	bl	800df58 <pbuf_clen>
 8016e72:	4603      	mov	r3, r0
 8016e74:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016e76:	4b1f      	ldr	r3, [pc, #124]	; (8016ef4 <ip4_reass+0x2fc>)
 8016e78:	881b      	ldrh	r3, [r3, #0]
 8016e7a:	8c3a      	ldrh	r2, [r7, #32]
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	d906      	bls.n	8016e8e <ip4_reass+0x296>
 8016e80:	4b1e      	ldr	r3, [pc, #120]	; (8016efc <ip4_reass+0x304>)
 8016e82:	f240 229b 	movw	r2, #667	; 0x29b
 8016e86:	491e      	ldr	r1, [pc, #120]	; (8016f00 <ip4_reass+0x308>)
 8016e88:	481e      	ldr	r0, [pc, #120]	; (8016f04 <ip4_reass+0x30c>)
 8016e8a:	f000 fcd7 	bl	801783c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016e8e:	4b19      	ldr	r3, [pc, #100]	; (8016ef4 <ip4_reass+0x2fc>)
 8016e90:	881a      	ldrh	r2, [r3, #0]
 8016e92:	8c3b      	ldrh	r3, [r7, #32]
 8016e94:	1ad3      	subs	r3, r2, r3
 8016e96:	b29a      	uxth	r2, r3
 8016e98:	4b16      	ldr	r3, [pc, #88]	; (8016ef4 <ip4_reass+0x2fc>)
 8016e9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	e03c      	b.n	8016f1a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	e03a      	b.n	8016f1a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016ea4:	bf00      	nop
 8016ea6:	e000      	b.n	8016eaa <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016ea8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d106      	bne.n	8016ebe <ip4_reass+0x2c6>
 8016eb0:	4b12      	ldr	r3, [pc, #72]	; (8016efc <ip4_reass+0x304>)
 8016eb2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016eb6:	4914      	ldr	r1, [pc, #80]	; (8016f08 <ip4_reass+0x310>)
 8016eb8:	4812      	ldr	r0, [pc, #72]	; (8016f04 <ip4_reass+0x30c>)
 8016eba:	f000 fcbf 	bl	801783c <iprintf>
  if (ipr->p == NULL) {
 8016ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d124      	bne.n	8016f10 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016ec6:	4b0c      	ldr	r3, [pc, #48]	; (8016ef8 <ip4_reass+0x300>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d006      	beq.n	8016ede <ip4_reass+0x2e6>
 8016ed0:	4b0a      	ldr	r3, [pc, #40]	; (8016efc <ip4_reass+0x304>)
 8016ed2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016ed6:	490d      	ldr	r1, [pc, #52]	; (8016f0c <ip4_reass+0x314>)
 8016ed8:	480a      	ldr	r0, [pc, #40]	; (8016f04 <ip4_reass+0x30c>)
 8016eda:	f000 fcaf 	bl	801783c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016ede:	2100      	movs	r1, #0
 8016ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ee2:	f7ff fcf1 	bl	80168c8 <ip_reass_dequeue_datagram>
 8016ee6:	e014      	b.n	8016f12 <ip4_reass+0x31a>
    goto nullreturn;
 8016ee8:	bf00      	nop
 8016eea:	e012      	b.n	8016f12 <ip4_reass+0x31a>
    goto nullreturn;
 8016eec:	bf00      	nop
 8016eee:	e010      	b.n	8016f12 <ip4_reass+0x31a>
      goto nullreturn;
 8016ef0:	bf00      	nop
 8016ef2:	e00e      	b.n	8016f12 <ip4_reass+0x31a>
 8016ef4:	20004f34 	.word	0x20004f34
 8016ef8:	20004f30 	.word	0x20004f30
 8016efc:	0801c0a4 	.word	0x0801c0a4
 8016f00:	0801c214 	.word	0x0801c214
 8016f04:	0801c0ec 	.word	0x0801c0ec
 8016f08:	0801c230 	.word	0x0801c230
 8016f0c:	0801c23c 	.word	0x0801c23c
  }

nullreturn:
 8016f10:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f7f6 ff92 	bl	800de3c <pbuf_free>
  return NULL;
 8016f18:	2300      	movs	r3, #0
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3738      	adds	r7, #56	; 0x38
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop

08016f24 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016f28:	2005      	movs	r0, #5
 8016f2a:	f7f6 f891 	bl	800d050 <memp_malloc>
 8016f2e:	4603      	mov	r3, r0
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d106      	bne.n	8016f50 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016f42:	4b07      	ldr	r3, [pc, #28]	; (8016f60 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016f44:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016f48:	4906      	ldr	r1, [pc, #24]	; (8016f64 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016f4a:	4807      	ldr	r0, [pc, #28]	; (8016f68 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016f4c:	f000 fc76 	bl	801783c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016f50:	6879      	ldr	r1, [r7, #4]
 8016f52:	2005      	movs	r0, #5
 8016f54:	f7f6 f8ce 	bl	800d0f4 <memp_free>
}
 8016f58:	bf00      	nop
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	0801c0a4 	.word	0x0801c0a4
 8016f64:	0801c25c 	.word	0x0801c25c
 8016f68:	0801c0ec 	.word	0x0801c0ec

08016f6c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d106      	bne.n	8016f8c <ipfrag_free_pbuf_custom+0x20>
 8016f7e:	4b11      	ldr	r3, [pc, #68]	; (8016fc4 <ipfrag_free_pbuf_custom+0x58>)
 8016f80:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016f84:	4910      	ldr	r1, [pc, #64]	; (8016fc8 <ipfrag_free_pbuf_custom+0x5c>)
 8016f86:	4811      	ldr	r0, [pc, #68]	; (8016fcc <ipfrag_free_pbuf_custom+0x60>)
 8016f88:	f000 fc58 	bl	801783c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016f8c:	68fa      	ldr	r2, [r7, #12]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d006      	beq.n	8016fa2 <ipfrag_free_pbuf_custom+0x36>
 8016f94:	4b0b      	ldr	r3, [pc, #44]	; (8016fc4 <ipfrag_free_pbuf_custom+0x58>)
 8016f96:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016f9a:	490d      	ldr	r1, [pc, #52]	; (8016fd0 <ipfrag_free_pbuf_custom+0x64>)
 8016f9c:	480b      	ldr	r0, [pc, #44]	; (8016fcc <ipfrag_free_pbuf_custom+0x60>)
 8016f9e:	f000 fc4d 	bl	801783c <iprintf>
  if (pcr->original != NULL) {
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	695b      	ldr	r3, [r3, #20]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d004      	beq.n	8016fb4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	695b      	ldr	r3, [r3, #20]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7f6 ff44 	bl	800de3c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016fb4:	68f8      	ldr	r0, [r7, #12]
 8016fb6:	f7ff ffbd 	bl	8016f34 <ip_frag_free_pbuf_custom_ref>
}
 8016fba:	bf00      	nop
 8016fbc:	3710      	adds	r7, #16
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	0801c0a4 	.word	0x0801c0a4
 8016fc8:	0801c268 	.word	0x0801c268
 8016fcc:	0801c0ec 	.word	0x0801c0ec
 8016fd0:	0801c274 	.word	0x0801c274

08016fd4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b094      	sub	sp, #80	; 0x50
 8016fd8:	af02      	add	r7, sp, #8
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016fea:	3b14      	subs	r3, #20
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	da00      	bge.n	8016ff2 <ip4_frag+0x1e>
 8016ff0:	3307      	adds	r3, #7
 8016ff2:	10db      	asrs	r3, r3, #3
 8016ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016ff6:	2314      	movs	r3, #20
 8016ff8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	685b      	ldr	r3, [r3, #4]
 8016ffe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017002:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	f003 030f 	and.w	r3, r3, #15
 801700c:	b2db      	uxtb	r3, r3
 801700e:	009b      	lsls	r3, r3, #2
 8017010:	b2db      	uxtb	r3, r3
 8017012:	2b14      	cmp	r3, #20
 8017014:	d002      	beq.n	801701c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017016:	f06f 0305 	mvn.w	r3, #5
 801701a:	e110      	b.n	801723e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	895b      	ldrh	r3, [r3, #10]
 8017020:	2b13      	cmp	r3, #19
 8017022:	d809      	bhi.n	8017038 <ip4_frag+0x64>
 8017024:	4b88      	ldr	r3, [pc, #544]	; (8017248 <ip4_frag+0x274>)
 8017026:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801702a:	4988      	ldr	r1, [pc, #544]	; (801724c <ip4_frag+0x278>)
 801702c:	4888      	ldr	r0, [pc, #544]	; (8017250 <ip4_frag+0x27c>)
 801702e:	f000 fc05 	bl	801783c <iprintf>
 8017032:	f06f 0305 	mvn.w	r3, #5
 8017036:	e102      	b.n	801723e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703a:	88db      	ldrh	r3, [r3, #6]
 801703c:	b29b      	uxth	r3, r3
 801703e:	4618      	mov	r0, r3
 8017040:	f7f5 fb50 	bl	800c6e4 <lwip_htons>
 8017044:	4603      	mov	r3, r0
 8017046:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017048:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801704a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801704e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017052:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017058:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	891b      	ldrh	r3, [r3, #8]
 801705e:	3b14      	subs	r3, #20
 8017060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017064:	e0e1      	b.n	801722a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017066:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017068:	00db      	lsls	r3, r3, #3
 801706a:	b29b      	uxth	r3, r3
 801706c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017070:	4293      	cmp	r3, r2
 8017072:	bf28      	it	cs
 8017074:	4613      	movcs	r3, r2
 8017076:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017078:	f44f 7220 	mov.w	r2, #640	; 0x280
 801707c:	2114      	movs	r1, #20
 801707e:	200e      	movs	r0, #14
 8017080:	f7f6 fbf8 	bl	800d874 <pbuf_alloc>
 8017084:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017088:	2b00      	cmp	r3, #0
 801708a:	f000 80d5 	beq.w	8017238 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017090:	895b      	ldrh	r3, [r3, #10]
 8017092:	2b13      	cmp	r3, #19
 8017094:	d806      	bhi.n	80170a4 <ip4_frag+0xd0>
 8017096:	4b6c      	ldr	r3, [pc, #432]	; (8017248 <ip4_frag+0x274>)
 8017098:	f44f 7249 	mov.w	r2, #804	; 0x324
 801709c:	496d      	ldr	r1, [pc, #436]	; (8017254 <ip4_frag+0x280>)
 801709e:	486c      	ldr	r0, [pc, #432]	; (8017250 <ip4_frag+0x27c>)
 80170a0:	f000 fbcc 	bl	801783c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80170a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a6:	685b      	ldr	r3, [r3, #4]
 80170a8:	2214      	movs	r2, #20
 80170aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80170ac:	4618      	mov	r0, r3
 80170ae:	f000 fb95 	bl	80177dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80170b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b4:	685b      	ldr	r3, [r3, #4]
 80170b6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80170b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80170ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80170be:	e064      	b.n	801718a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	895a      	ldrh	r2, [r3, #10]
 80170c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170c6:	1ad3      	subs	r3, r2, r3
 80170c8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	895b      	ldrh	r3, [r3, #10]
 80170ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80170d0:	429a      	cmp	r2, r3
 80170d2:	d906      	bls.n	80170e2 <ip4_frag+0x10e>
 80170d4:	4b5c      	ldr	r3, [pc, #368]	; (8017248 <ip4_frag+0x274>)
 80170d6:	f240 322d 	movw	r2, #813	; 0x32d
 80170da:	495f      	ldr	r1, [pc, #380]	; (8017258 <ip4_frag+0x284>)
 80170dc:	485c      	ldr	r0, [pc, #368]	; (8017250 <ip4_frag+0x27c>)
 80170de:	f000 fbad 	bl	801783c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80170e2:	8bfa      	ldrh	r2, [r7, #30]
 80170e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80170e8:	4293      	cmp	r3, r2
 80170ea:	bf28      	it	cs
 80170ec:	4613      	movcs	r3, r2
 80170ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80170f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d105      	bne.n	8017106 <ip4_frag+0x132>
        poff = 0;
 80170fa:	2300      	movs	r3, #0
 80170fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	60fb      	str	r3, [r7, #12]
        continue;
 8017104:	e041      	b.n	801718a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017106:	f7ff ff0d 	bl	8016f24 <ip_frag_alloc_pbuf_custom_ref>
 801710a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801710c:	69bb      	ldr	r3, [r7, #24]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d103      	bne.n	801711a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017114:	f7f6 fe92 	bl	800de3c <pbuf_free>
        goto memerr;
 8017118:	e08f      	b.n	801723a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801711a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017120:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017122:	4413      	add	r3, r2
 8017124:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017128:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801712c:	9201      	str	r2, [sp, #4]
 801712e:	9300      	str	r3, [sp, #0]
 8017130:	4603      	mov	r3, r0
 8017132:	2241      	movs	r2, #65	; 0x41
 8017134:	2000      	movs	r0, #0
 8017136:	f7f6 fcc7 	bl	800dac8 <pbuf_alloced_custom>
 801713a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017142:	69b8      	ldr	r0, [r7, #24]
 8017144:	f7ff fef6 	bl	8016f34 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801714a:	f7f6 fe77 	bl	800de3c <pbuf_free>
        goto memerr;
 801714e:	e074      	b.n	801723a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	f7f6 ff19 	bl	800df88 <pbuf_ref>
      pcr->original = p;
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	68fa      	ldr	r2, [r7, #12]
 801715a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	4a3f      	ldr	r2, [pc, #252]	; (801725c <ip4_frag+0x288>)
 8017160:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017162:	6979      	ldr	r1, [r7, #20]
 8017164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017166:	f7f6 ff37 	bl	800dfd8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801716a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801716e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017172:	1ad3      	subs	r3, r2, r3
 8017174:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017178:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801717c:	2b00      	cmp	r3, #0
 801717e:	d004      	beq.n	801718a <ip4_frag+0x1b6>
        poff = 0;
 8017180:	2300      	movs	r3, #0
 8017182:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801718a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801718e:	2b00      	cmp	r3, #0
 8017190:	d196      	bne.n	80170c0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017192:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017194:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017198:	4413      	add	r3, r2
 801719a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80171a0:	f1a3 0213 	sub.w	r2, r3, #19
 80171a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80171a8:	429a      	cmp	r2, r3
 80171aa:	bfcc      	ite	gt
 80171ac:	2301      	movgt	r3, #1
 80171ae:	2300      	movle	r3, #0
 80171b0:	b2db      	uxtb	r3, r3
 80171b2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80171b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80171b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80171be:	6a3b      	ldr	r3, [r7, #32]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d002      	beq.n	80171ca <ip4_frag+0x1f6>
 80171c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d003      	beq.n	80171d2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80171ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80171d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80171d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171d4:	4618      	mov	r0, r3
 80171d6:	f7f5 fa85 	bl	800c6e4 <lwip_htons>
 80171da:	4603      	mov	r3, r0
 80171dc:	461a      	mov	r2, r3
 80171de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80171e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80171e4:	3314      	adds	r3, #20
 80171e6:	b29b      	uxth	r3, r3
 80171e8:	4618      	mov	r0, r3
 80171ea:	f7f5 fa7b 	bl	800c6e4 <lwip_htons>
 80171ee:	4603      	mov	r3, r0
 80171f0:	461a      	mov	r2, r3
 80171f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171f4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80171f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171f8:	2200      	movs	r2, #0
 80171fa:	729a      	strb	r2, [r3, #10]
 80171fc:	2200      	movs	r2, #0
 80171fe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	695b      	ldr	r3, [r3, #20]
 8017204:	687a      	ldr	r2, [r7, #4]
 8017206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017208:	68b8      	ldr	r0, [r7, #8]
 801720a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801720c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801720e:	f7f6 fe15 	bl	800de3c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017212:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801721e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017222:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017224:	4413      	add	r3, r2
 8017226:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801722a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801722e:	2b00      	cmp	r3, #0
 8017230:	f47f af19 	bne.w	8017066 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017234:	2300      	movs	r3, #0
 8017236:	e002      	b.n	801723e <ip4_frag+0x26a>
      goto memerr;
 8017238:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801723a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801723e:	4618      	mov	r0, r3
 8017240:	3748      	adds	r7, #72	; 0x48
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}
 8017246:	bf00      	nop
 8017248:	0801c0a4 	.word	0x0801c0a4
 801724c:	0801c280 	.word	0x0801c280
 8017250:	0801c0ec 	.word	0x0801c0ec
 8017254:	0801c29c 	.word	0x0801c29c
 8017258:	0801c2bc 	.word	0x0801c2bc
 801725c:	08016f6d 	.word	0x08016f6d

08017260 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b086      	sub	sp, #24
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
 8017268:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801726a:	230e      	movs	r3, #14
 801726c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	895b      	ldrh	r3, [r3, #10]
 8017272:	2b0e      	cmp	r3, #14
 8017274:	d96e      	bls.n	8017354 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	7bdb      	ldrb	r3, [r3, #15]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d106      	bne.n	801728c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017284:	3301      	adds	r3, #1
 8017286:	b2da      	uxtb	r2, r3
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	7b1a      	ldrb	r2, [r3, #12]
 8017296:	7b5b      	ldrb	r3, [r3, #13]
 8017298:	021b      	lsls	r3, r3, #8
 801729a:	4313      	orrs	r3, r2
 801729c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801729e:	693b      	ldr	r3, [r7, #16]
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	f003 0301 	and.w	r3, r3, #1
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d023      	beq.n	80172f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	2b01      	cmp	r3, #1
 80172b0:	d10f      	bne.n	80172d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172b2:	693b      	ldr	r3, [r7, #16]
 80172b4:	785b      	ldrb	r3, [r3, #1]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d11b      	bne.n	80172f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172be:	2b5e      	cmp	r3, #94	; 0x5e
 80172c0:	d117      	bne.n	80172f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	7b5b      	ldrb	r3, [r3, #13]
 80172c6:	f043 0310 	orr.w	r3, r3, #16
 80172ca:	b2da      	uxtb	r2, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	735a      	strb	r2, [r3, #13]
 80172d0:	e00f      	b.n	80172f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	2206      	movs	r2, #6
 80172d6:	4928      	ldr	r1, [pc, #160]	; (8017378 <ethernet_input+0x118>)
 80172d8:	4618      	mov	r0, r3
 80172da:	f000 fa71 	bl	80177c0 <memcmp>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d106      	bne.n	80172f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	7b5b      	ldrb	r3, [r3, #13]
 80172e8:	f043 0308 	orr.w	r3, r3, #8
 80172ec:	b2da      	uxtb	r2, r3
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80172f2:	89fb      	ldrh	r3, [r7, #14]
 80172f4:	2b08      	cmp	r3, #8
 80172f6:	d003      	beq.n	8017300 <ethernet_input+0xa0>
 80172f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80172fc:	d014      	beq.n	8017328 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80172fe:	e032      	b.n	8017366 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017306:	f003 0308 	and.w	r3, r3, #8
 801730a:	2b00      	cmp	r3, #0
 801730c:	d024      	beq.n	8017358 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801730e:	8afb      	ldrh	r3, [r7, #22]
 8017310:	4619      	mov	r1, r3
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7f6 fd0c 	bl	800dd30 <pbuf_remove_header>
 8017318:	4603      	mov	r3, r0
 801731a:	2b00      	cmp	r3, #0
 801731c:	d11e      	bne.n	801735c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801731e:	6839      	ldr	r1, [r7, #0]
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f7fe fe95 	bl	8016050 <ip4_input>
      break;
 8017326:	e013      	b.n	8017350 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801732e:	f003 0308 	and.w	r3, r3, #8
 8017332:	2b00      	cmp	r3, #0
 8017334:	d014      	beq.n	8017360 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017336:	8afb      	ldrh	r3, [r7, #22]
 8017338:	4619      	mov	r1, r3
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7f6 fcf8 	bl	800dd30 <pbuf_remove_header>
 8017340:	4603      	mov	r3, r0
 8017342:	2b00      	cmp	r3, #0
 8017344:	d10e      	bne.n	8017364 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017346:	6839      	ldr	r1, [r7, #0]
 8017348:	6878      	ldr	r0, [r7, #4]
 801734a:	f7fe f835 	bl	80153b8 <etharp_input>
      break;
 801734e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017350:	2300      	movs	r3, #0
 8017352:	e00c      	b.n	801736e <ethernet_input+0x10e>
    goto free_and_return;
 8017354:	bf00      	nop
 8017356:	e006      	b.n	8017366 <ethernet_input+0x106>
        goto free_and_return;
 8017358:	bf00      	nop
 801735a:	e004      	b.n	8017366 <ethernet_input+0x106>
        goto free_and_return;
 801735c:	bf00      	nop
 801735e:	e002      	b.n	8017366 <ethernet_input+0x106>
        goto free_and_return;
 8017360:	bf00      	nop
 8017362:	e000      	b.n	8017366 <ethernet_input+0x106>
        goto free_and_return;
 8017364:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f6 fd68 	bl	800de3c <pbuf_free>
  return ERR_OK;
 801736c:	2300      	movs	r3, #0
}
 801736e:	4618      	mov	r0, r3
 8017370:	3718      	adds	r7, #24
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}
 8017376:	bf00      	nop
 8017378:	0801c4f0 	.word	0x0801c4f0

0801737c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801737c:	b580      	push	{r7, lr}
 801737e:	b086      	sub	sp, #24
 8017380:	af00      	add	r7, sp, #0
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	607a      	str	r2, [r7, #4]
 8017388:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801738a:	8c3b      	ldrh	r3, [r7, #32]
 801738c:	4618      	mov	r0, r3
 801738e:	f7f5 f9a9 	bl	800c6e4 <lwip_htons>
 8017392:	4603      	mov	r3, r0
 8017394:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017396:	210e      	movs	r1, #14
 8017398:	68b8      	ldr	r0, [r7, #8]
 801739a:	f7f6 fcb9 	bl	800dd10 <pbuf_add_header>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d125      	bne.n	80173f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	8afa      	ldrh	r2, [r7, #22]
 80173ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80173b0:	693b      	ldr	r3, [r7, #16]
 80173b2:	2206      	movs	r2, #6
 80173b4:	6839      	ldr	r1, [r7, #0]
 80173b6:	4618      	mov	r0, r3
 80173b8:	f000 fa10 	bl	80177dc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	3306      	adds	r3, #6
 80173c0:	2206      	movs	r2, #6
 80173c2:	6879      	ldr	r1, [r7, #4]
 80173c4:	4618      	mov	r0, r3
 80173c6:	f000 fa09 	bl	80177dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80173d0:	2b06      	cmp	r3, #6
 80173d2:	d006      	beq.n	80173e2 <ethernet_output+0x66>
 80173d4:	4b0a      	ldr	r3, [pc, #40]	; (8017400 <ethernet_output+0x84>)
 80173d6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80173da:	490a      	ldr	r1, [pc, #40]	; (8017404 <ethernet_output+0x88>)
 80173dc:	480a      	ldr	r0, [pc, #40]	; (8017408 <ethernet_output+0x8c>)
 80173de:	f000 fa2d 	bl	801783c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	699b      	ldr	r3, [r3, #24]
 80173e6:	68b9      	ldr	r1, [r7, #8]
 80173e8:	68f8      	ldr	r0, [r7, #12]
 80173ea:	4798      	blx	r3
 80173ec:	4603      	mov	r3, r0
 80173ee:	e002      	b.n	80173f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80173f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80173f2:	f06f 0301 	mvn.w	r3, #1
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3718      	adds	r7, #24
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	0801c2cc 	.word	0x0801c2cc
 8017404:	0801c304 	.word	0x0801c304
 8017408:	0801c338 	.word	0x0801c338

0801740c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	2200      	movs	r2, #0
 801741a:	2104      	movs	r1, #4
 801741c:	4618      	mov	r0, r3
 801741e:	f7ef fab9 	bl	8006994 <osMessageQueueNew>
 8017422:	4602      	mov	r2, r0
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d102      	bne.n	8017436 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
 8017434:	e000      	b.n	8017438 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017436:	2300      	movs	r3, #0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3708      	adds	r7, #8
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	4618      	mov	r0, r3
 801744e:	f7ef fc0d 	bl	8006c6c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	4618      	mov	r0, r3
 8017458:	f7ef fc3a 	bl	8006cd0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b084      	sub	sp, #16
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6818      	ldr	r0, [r3, #0]
 8017472:	4639      	mov	r1, r7
 8017474:	2300      	movs	r3, #0
 8017476:	2200      	movs	r2, #0
 8017478:	f7ef fb12 	bl	8006aa0 <osMessageQueuePut>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d102      	bne.n	8017488 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017482:	2300      	movs	r3, #0
 8017484:	73fb      	strb	r3, [r7, #15]
 8017486:	e001      	b.n	801748c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017488:	23ff      	movs	r3, #255	; 0xff
 801748a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801748c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}

08017498 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b086      	sub	sp, #24
 801749c:	af00      	add	r7, sp, #0
 801749e:	60f8      	str	r0, [r7, #12]
 80174a0:	60b9      	str	r1, [r7, #8]
 80174a2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80174a4:	f7ee fea2 	bl	80061ec <osKernelGetTickCount>
 80174a8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d013      	beq.n	80174d8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	6818      	ldr	r0, [r3, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2200      	movs	r2, #0
 80174b8:	68b9      	ldr	r1, [r7, #8]
 80174ba:	f7ef fb65 	bl	8006b88 <osMessageQueueGet>
 80174be:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d105      	bne.n	80174d2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80174c6:	f7ee fe91 	bl	80061ec <osKernelGetTickCount>
 80174ca:	4602      	mov	r2, r0
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	1ad3      	subs	r3, r2, r3
 80174d0:	e00f      	b.n	80174f2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174d2:	f04f 33ff 	mov.w	r3, #4294967295
 80174d6:	e00c      	b.n	80174f2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	6818      	ldr	r0, [r3, #0]
 80174dc:	f04f 33ff 	mov.w	r3, #4294967295
 80174e0:	2200      	movs	r2, #0
 80174e2:	68b9      	ldr	r1, [r7, #8]
 80174e4:	f7ef fb50 	bl	8006b88 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80174e8:	f7ee fe80 	bl	80061ec <osKernelGetTickCount>
 80174ec:	4602      	mov	r2, r0
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3718      	adds	r7, #24
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}

080174fa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80174fa:	b580      	push	{r7, lr}
 80174fc:	b082      	sub	sp, #8
 80174fe:	af00      	add	r7, sp, #0
 8017500:	6078      	str	r0, [r7, #4]
 8017502:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6818      	ldr	r0, [r3, #0]
 8017508:	2300      	movs	r3, #0
 801750a:	2200      	movs	r2, #0
 801750c:	6839      	ldr	r1, [r7, #0]
 801750e:	f7ef fb3b 	bl	8006b88 <osMessageQueueGet>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d101      	bne.n	801751c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8017518:	2300      	movs	r3, #0
 801751a:	e001      	b.n	8017520 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801751c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017520:	4618      	mov	r0, r3
 8017522:	3708      	adds	r7, #8
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017528:	b480      	push	{r7}
 801752a:	b083      	sub	sp, #12
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d101      	bne.n	801753c <sys_mbox_valid+0x14>
    return 0;
 8017538:	2300      	movs	r3, #0
 801753a:	e000      	b.n	801753e <sys_mbox_valid+0x16>
  else
    return 1;
 801753c:	2301      	movs	r3, #1
}
 801753e:	4618      	mov	r0, r3
 8017540:	370c      	adds	r7, #12
 8017542:	46bd      	mov	sp, r7
 8017544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017548:	4770      	bx	lr

0801754a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801754a:	b480      	push	{r7}
 801754c:	b083      	sub	sp, #12
 801754e:	af00      	add	r7, sp, #0
 8017550:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2200      	movs	r2, #0
 8017556:	601a      	str	r2, [r3, #0]
}
 8017558:	bf00      	nop
 801755a:	370c      	adds	r7, #12
 801755c:	46bd      	mov	sp, r7
 801755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017562:	4770      	bx	lr

08017564 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b082      	sub	sp, #8
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	460b      	mov	r3, r1
 801756e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8017570:	78fb      	ldrb	r3, [r7, #3]
 8017572:	2200      	movs	r2, #0
 8017574:	4619      	mov	r1, r3
 8017576:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801757a:	f7ef f87b 	bl	8006674 <osSemaphoreNew>
 801757e:	4602      	mov	r2, r0
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d102      	bne.n	8017592 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801758c:	f04f 33ff 	mov.w	r3, #4294967295
 8017590:	e009      	b.n	80175a6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8017592:	78fb      	ldrb	r3, [r7, #3]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d105      	bne.n	80175a4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	2100      	movs	r1, #0
 801759e:	4618      	mov	r0, r3
 80175a0:	f7ef f904 	bl	80067ac <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80175a4:	2300      	movs	r3, #0
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3708      	adds	r7, #8
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}

080175ae <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b084      	sub	sp, #16
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	6078      	str	r0, [r7, #4]
 80175b6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80175b8:	f7ee fe18 	bl	80061ec <osKernelGetTickCount>
 80175bc:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d011      	beq.n	80175e8 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	6839      	ldr	r1, [r7, #0]
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7ef f8ee 	bl	80067ac <osSemaphoreAcquire>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d105      	bne.n	80175e2 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80175d6:	f7ee fe09 	bl	80061ec <osKernelGetTickCount>
 80175da:	4602      	mov	r2, r0
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	1ad3      	subs	r3, r2, r3
 80175e0:	e012      	b.n	8017608 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80175e2:	f04f 33ff 	mov.w	r3, #4294967295
 80175e6:	e00f      	b.n	8017608 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80175e8:	bf00      	nop
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	f04f 31ff 	mov.w	r1, #4294967295
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7ef f8da 	bl	80067ac <osSemaphoreAcquire>
 80175f8:	4603      	mov	r3, r0
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d1f5      	bne.n	80175ea <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80175fe:	f7ee fdf5 	bl	80061ec <osKernelGetTickCount>
 8017602:	4602      	mov	r2, r0
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017608:	4618      	mov	r0, r3
 801760a:	3710      	adds	r7, #16
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	4618      	mov	r0, r3
 801761e:	f7ef f92b 	bl	8006878 <osSemaphoreRelease>
}
 8017622:	bf00      	nop
 8017624:	3708      	adds	r7, #8
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}

0801762a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801762a:	b580      	push	{r7, lr}
 801762c:	b082      	sub	sp, #8
 801762e:	af00      	add	r7, sp, #0
 8017630:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	4618      	mov	r0, r3
 8017638:	f7ef f976 	bl	8006928 <osSemaphoreDelete>
}
 801763c:	bf00      	nop
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d101      	bne.n	8017658 <sys_sem_valid+0x14>
    return 0;
 8017654:	2300      	movs	r3, #0
 8017656:	e000      	b.n	801765a <sys_sem_valid+0x16>
  else
    return 1;
 8017658:	2301      	movs	r3, #1
}
 801765a:	4618      	mov	r0, r3
 801765c:	370c      	adds	r7, #12
 801765e:	46bd      	mov	sp, r7
 8017660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017664:	4770      	bx	lr

08017666 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017666:	b480      	push	{r7}
 8017668:	b083      	sub	sp, #12
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2200      	movs	r2, #0
 8017672:	601a      	str	r2, [r3, #0]
}
 8017674:	bf00      	nop
 8017676:	370c      	adds	r7, #12
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017684:	2000      	movs	r0, #0
 8017686:	f7ee fead 	bl	80063e4 <osMutexNew>
 801768a:	4603      	mov	r3, r0
 801768c:	4a01      	ldr	r2, [pc, #4]	; (8017694 <sys_init+0x14>)
 801768e:	6013      	str	r3, [r2, #0]
#endif
}
 8017690:	bf00      	nop
 8017692:	bd80      	pop	{r7, pc}
 8017694:	2000bd4c 	.word	0x2000bd4c

08017698 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80176a0:	2000      	movs	r0, #0
 80176a2:	f7ee fe9f 	bl	80063e4 <osMutexNew>
 80176a6:	4602      	mov	r2, r0
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d102      	bne.n	80176ba <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80176b4:	f04f 33ff 	mov.w	r3, #4294967295
 80176b8:	e000      	b.n	80176bc <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80176ba:	2300      	movs	r3, #0
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	f04f 31ff 	mov.w	r1, #4294967295
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7ee ff1f 	bl	8006518 <osMutexAcquire>
#endif
}
 80176da:	bf00      	nop
 80176dc:	3708      	adds	r7, #8
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80176e2:	b580      	push	{r7, lr}
 80176e4:	b082      	sub	sp, #8
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7ee ff70 	bl	80065d4 <osMutexRelease>
}
 80176f4:	bf00      	nop
 80176f6:	3708      	adds	r7, #8
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}

080176fc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b08e      	sub	sp, #56	; 0x38
 8017700:	af00      	add	r7, sp, #0
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	60b9      	str	r1, [r7, #8]
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801770a:	f107 0314 	add.w	r3, r7, #20
 801770e:	2224      	movs	r2, #36	; 0x24
 8017710:	2100      	movs	r1, #0
 8017712:	4618      	mov	r0, r3
 8017714:	f000 f88a 	bl	801782c <memset>
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	617b      	str	r3, [r7, #20]
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017722:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017724:	f107 0314 	add.w	r3, r7, #20
 8017728:	461a      	mov	r2, r3
 801772a:	6879      	ldr	r1, [r7, #4]
 801772c:	68b8      	ldr	r0, [r7, #8]
 801772e:	f7ee fd85 	bl	800623c <osThreadNew>
 8017732:	4603      	mov	r3, r0
#endif
}
 8017734:	4618      	mov	r0, r3
 8017736:	3738      	adds	r7, #56	; 0x38
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017740:	4b04      	ldr	r3, [pc, #16]	; (8017754 <sys_arch_protect+0x18>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	f04f 31ff 	mov.w	r1, #4294967295
 8017748:	4618      	mov	r0, r3
 801774a:	f7ee fee5 	bl	8006518 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801774e:	2301      	movs	r3, #1
}
 8017750:	4618      	mov	r0, r3
 8017752:	bd80      	pop	{r7, pc}
 8017754:	2000bd4c 	.word	0x2000bd4c

08017758 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017760:	4b04      	ldr	r3, [pc, #16]	; (8017774 <sys_arch_unprotect+0x1c>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4618      	mov	r0, r3
 8017766:	f7ee ff35 	bl	80065d4 <osMutexRelease>
}
 801776a:	bf00      	nop
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}
 8017772:	bf00      	nop
 8017774:	2000bd4c 	.word	0x2000bd4c

08017778 <__libc_init_array>:
 8017778:	b570      	push	{r4, r5, r6, lr}
 801777a:	4d0d      	ldr	r5, [pc, #52]	; (80177b0 <__libc_init_array+0x38>)
 801777c:	4c0d      	ldr	r4, [pc, #52]	; (80177b4 <__libc_init_array+0x3c>)
 801777e:	1b64      	subs	r4, r4, r5
 8017780:	10a4      	asrs	r4, r4, #2
 8017782:	2600      	movs	r6, #0
 8017784:	42a6      	cmp	r6, r4
 8017786:	d109      	bne.n	801779c <__libc_init_array+0x24>
 8017788:	4d0b      	ldr	r5, [pc, #44]	; (80177b8 <__libc_init_array+0x40>)
 801778a:	4c0c      	ldr	r4, [pc, #48]	; (80177bc <__libc_init_array+0x44>)
 801778c:	f001 fb06 	bl	8018d9c <_init>
 8017790:	1b64      	subs	r4, r4, r5
 8017792:	10a4      	asrs	r4, r4, #2
 8017794:	2600      	movs	r6, #0
 8017796:	42a6      	cmp	r6, r4
 8017798:	d105      	bne.n	80177a6 <__libc_init_array+0x2e>
 801779a:	bd70      	pop	{r4, r5, r6, pc}
 801779c:	f855 3b04 	ldr.w	r3, [r5], #4
 80177a0:	4798      	blx	r3
 80177a2:	3601      	adds	r6, #1
 80177a4:	e7ee      	b.n	8017784 <__libc_init_array+0xc>
 80177a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80177aa:	4798      	blx	r3
 80177ac:	3601      	adds	r6, #1
 80177ae:	e7f2      	b.n	8017796 <__libc_init_array+0x1e>
 80177b0:	0801c654 	.word	0x0801c654
 80177b4:	0801c654 	.word	0x0801c654
 80177b8:	0801c654 	.word	0x0801c654
 80177bc:	0801c658 	.word	0x0801c658

080177c0 <memcmp>:
 80177c0:	b530      	push	{r4, r5, lr}
 80177c2:	3901      	subs	r1, #1
 80177c4:	2400      	movs	r4, #0
 80177c6:	42a2      	cmp	r2, r4
 80177c8:	d101      	bne.n	80177ce <memcmp+0xe>
 80177ca:	2000      	movs	r0, #0
 80177cc:	e005      	b.n	80177da <memcmp+0x1a>
 80177ce:	5d03      	ldrb	r3, [r0, r4]
 80177d0:	3401      	adds	r4, #1
 80177d2:	5d0d      	ldrb	r5, [r1, r4]
 80177d4:	42ab      	cmp	r3, r5
 80177d6:	d0f6      	beq.n	80177c6 <memcmp+0x6>
 80177d8:	1b58      	subs	r0, r3, r5
 80177da:	bd30      	pop	{r4, r5, pc}

080177dc <memcpy>:
 80177dc:	440a      	add	r2, r1
 80177de:	4291      	cmp	r1, r2
 80177e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80177e4:	d100      	bne.n	80177e8 <memcpy+0xc>
 80177e6:	4770      	bx	lr
 80177e8:	b510      	push	{r4, lr}
 80177ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177f2:	4291      	cmp	r1, r2
 80177f4:	d1f9      	bne.n	80177ea <memcpy+0xe>
 80177f6:	bd10      	pop	{r4, pc}

080177f8 <memmove>:
 80177f8:	4288      	cmp	r0, r1
 80177fa:	b510      	push	{r4, lr}
 80177fc:	eb01 0402 	add.w	r4, r1, r2
 8017800:	d902      	bls.n	8017808 <memmove+0x10>
 8017802:	4284      	cmp	r4, r0
 8017804:	4623      	mov	r3, r4
 8017806:	d807      	bhi.n	8017818 <memmove+0x20>
 8017808:	1e43      	subs	r3, r0, #1
 801780a:	42a1      	cmp	r1, r4
 801780c:	d008      	beq.n	8017820 <memmove+0x28>
 801780e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017816:	e7f8      	b.n	801780a <memmove+0x12>
 8017818:	4402      	add	r2, r0
 801781a:	4601      	mov	r1, r0
 801781c:	428a      	cmp	r2, r1
 801781e:	d100      	bne.n	8017822 <memmove+0x2a>
 8017820:	bd10      	pop	{r4, pc}
 8017822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801782a:	e7f7      	b.n	801781c <memmove+0x24>

0801782c <memset>:
 801782c:	4402      	add	r2, r0
 801782e:	4603      	mov	r3, r0
 8017830:	4293      	cmp	r3, r2
 8017832:	d100      	bne.n	8017836 <memset+0xa>
 8017834:	4770      	bx	lr
 8017836:	f803 1b01 	strb.w	r1, [r3], #1
 801783a:	e7f9      	b.n	8017830 <memset+0x4>

0801783c <iprintf>:
 801783c:	b40f      	push	{r0, r1, r2, r3}
 801783e:	4b0a      	ldr	r3, [pc, #40]	; (8017868 <iprintf+0x2c>)
 8017840:	b513      	push	{r0, r1, r4, lr}
 8017842:	681c      	ldr	r4, [r3, #0]
 8017844:	b124      	cbz	r4, 8017850 <iprintf+0x14>
 8017846:	69a3      	ldr	r3, [r4, #24]
 8017848:	b913      	cbnz	r3, 8017850 <iprintf+0x14>
 801784a:	4620      	mov	r0, r4
 801784c:	f000 fa80 	bl	8017d50 <__sinit>
 8017850:	ab05      	add	r3, sp, #20
 8017852:	9a04      	ldr	r2, [sp, #16]
 8017854:	68a1      	ldr	r1, [r4, #8]
 8017856:	9301      	str	r3, [sp, #4]
 8017858:	4620      	mov	r0, r4
 801785a:	f000 fdc7 	bl	80183ec <_vfiprintf_r>
 801785e:	b002      	add	sp, #8
 8017860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017864:	b004      	add	sp, #16
 8017866:	4770      	bx	lr
 8017868:	2000001c 	.word	0x2000001c

0801786c <rand>:
 801786c:	4b17      	ldr	r3, [pc, #92]	; (80178cc <rand+0x60>)
 801786e:	b510      	push	{r4, lr}
 8017870:	681c      	ldr	r4, [r3, #0]
 8017872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017874:	b9b3      	cbnz	r3, 80178a4 <rand+0x38>
 8017876:	2018      	movs	r0, #24
 8017878:	f000 fb80 	bl	8017f7c <malloc>
 801787c:	63a0      	str	r0, [r4, #56]	; 0x38
 801787e:	b928      	cbnz	r0, 801788c <rand+0x20>
 8017880:	4602      	mov	r2, r0
 8017882:	4b13      	ldr	r3, [pc, #76]	; (80178d0 <rand+0x64>)
 8017884:	4813      	ldr	r0, [pc, #76]	; (80178d4 <rand+0x68>)
 8017886:	214e      	movs	r1, #78	; 0x4e
 8017888:	f000 f92a 	bl	8017ae0 <__assert_func>
 801788c:	4a12      	ldr	r2, [pc, #72]	; (80178d8 <rand+0x6c>)
 801788e:	4b13      	ldr	r3, [pc, #76]	; (80178dc <rand+0x70>)
 8017890:	e9c0 2300 	strd	r2, r3, [r0]
 8017894:	4b12      	ldr	r3, [pc, #72]	; (80178e0 <rand+0x74>)
 8017896:	6083      	str	r3, [r0, #8]
 8017898:	230b      	movs	r3, #11
 801789a:	8183      	strh	r3, [r0, #12]
 801789c:	2201      	movs	r2, #1
 801789e:	2300      	movs	r3, #0
 80178a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80178a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80178a6:	480f      	ldr	r0, [pc, #60]	; (80178e4 <rand+0x78>)
 80178a8:	690a      	ldr	r2, [r1, #16]
 80178aa:	694b      	ldr	r3, [r1, #20]
 80178ac:	4c0e      	ldr	r4, [pc, #56]	; (80178e8 <rand+0x7c>)
 80178ae:	4350      	muls	r0, r2
 80178b0:	fb04 0003 	mla	r0, r4, r3, r0
 80178b4:	fba2 3404 	umull	r3, r4, r2, r4
 80178b8:	1c5a      	adds	r2, r3, #1
 80178ba:	4404      	add	r4, r0
 80178bc:	f144 0000 	adc.w	r0, r4, #0
 80178c0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80178c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80178c8:	bd10      	pop	{r4, pc}
 80178ca:	bf00      	nop
 80178cc:	2000001c 	.word	0x2000001c
 80178d0:	0801c504 	.word	0x0801c504
 80178d4:	0801c51b 	.word	0x0801c51b
 80178d8:	abcd330e 	.word	0xabcd330e
 80178dc:	e66d1234 	.word	0xe66d1234
 80178e0:	0005deec 	.word	0x0005deec
 80178e4:	5851f42d 	.word	0x5851f42d
 80178e8:	4c957f2d 	.word	0x4c957f2d

080178ec <setvbuf>:
 80178ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178f0:	461d      	mov	r5, r3
 80178f2:	4b5d      	ldr	r3, [pc, #372]	; (8017a68 <setvbuf+0x17c>)
 80178f4:	681f      	ldr	r7, [r3, #0]
 80178f6:	4604      	mov	r4, r0
 80178f8:	460e      	mov	r6, r1
 80178fa:	4690      	mov	r8, r2
 80178fc:	b127      	cbz	r7, 8017908 <setvbuf+0x1c>
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	b913      	cbnz	r3, 8017908 <setvbuf+0x1c>
 8017902:	4638      	mov	r0, r7
 8017904:	f000 fa24 	bl	8017d50 <__sinit>
 8017908:	4b58      	ldr	r3, [pc, #352]	; (8017a6c <setvbuf+0x180>)
 801790a:	429c      	cmp	r4, r3
 801790c:	d167      	bne.n	80179de <setvbuf+0xf2>
 801790e:	687c      	ldr	r4, [r7, #4]
 8017910:	f1b8 0f02 	cmp.w	r8, #2
 8017914:	d006      	beq.n	8017924 <setvbuf+0x38>
 8017916:	f1b8 0f01 	cmp.w	r8, #1
 801791a:	f200 809f 	bhi.w	8017a5c <setvbuf+0x170>
 801791e:	2d00      	cmp	r5, #0
 8017920:	f2c0 809c 	blt.w	8017a5c <setvbuf+0x170>
 8017924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017926:	07db      	lsls	r3, r3, #31
 8017928:	d405      	bmi.n	8017936 <setvbuf+0x4a>
 801792a:	89a3      	ldrh	r3, [r4, #12]
 801792c:	0598      	lsls	r0, r3, #22
 801792e:	d402      	bmi.n	8017936 <setvbuf+0x4a>
 8017930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017932:	f000 fabd 	bl	8017eb0 <__retarget_lock_acquire_recursive>
 8017936:	4621      	mov	r1, r4
 8017938:	4638      	mov	r0, r7
 801793a:	f000 f975 	bl	8017c28 <_fflush_r>
 801793e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017940:	b141      	cbz	r1, 8017954 <setvbuf+0x68>
 8017942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017946:	4299      	cmp	r1, r3
 8017948:	d002      	beq.n	8017950 <setvbuf+0x64>
 801794a:	4638      	mov	r0, r7
 801794c:	f000 fb1e 	bl	8017f8c <_free_r>
 8017950:	2300      	movs	r3, #0
 8017952:	6363      	str	r3, [r4, #52]	; 0x34
 8017954:	2300      	movs	r3, #0
 8017956:	61a3      	str	r3, [r4, #24]
 8017958:	6063      	str	r3, [r4, #4]
 801795a:	89a3      	ldrh	r3, [r4, #12]
 801795c:	0619      	lsls	r1, r3, #24
 801795e:	d503      	bpl.n	8017968 <setvbuf+0x7c>
 8017960:	6921      	ldr	r1, [r4, #16]
 8017962:	4638      	mov	r0, r7
 8017964:	f000 fb12 	bl	8017f8c <_free_r>
 8017968:	89a3      	ldrh	r3, [r4, #12]
 801796a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801796e:	f023 0303 	bic.w	r3, r3, #3
 8017972:	f1b8 0f02 	cmp.w	r8, #2
 8017976:	81a3      	strh	r3, [r4, #12]
 8017978:	d06c      	beq.n	8017a54 <setvbuf+0x168>
 801797a:	ab01      	add	r3, sp, #4
 801797c:	466a      	mov	r2, sp
 801797e:	4621      	mov	r1, r4
 8017980:	4638      	mov	r0, r7
 8017982:	f000 fa97 	bl	8017eb4 <__swhatbuf_r>
 8017986:	89a3      	ldrh	r3, [r4, #12]
 8017988:	4318      	orrs	r0, r3
 801798a:	81a0      	strh	r0, [r4, #12]
 801798c:	2d00      	cmp	r5, #0
 801798e:	d130      	bne.n	80179f2 <setvbuf+0x106>
 8017990:	9d00      	ldr	r5, [sp, #0]
 8017992:	4628      	mov	r0, r5
 8017994:	f000 faf2 	bl	8017f7c <malloc>
 8017998:	4606      	mov	r6, r0
 801799a:	2800      	cmp	r0, #0
 801799c:	d155      	bne.n	8017a4a <setvbuf+0x15e>
 801799e:	f8dd 9000 	ldr.w	r9, [sp]
 80179a2:	45a9      	cmp	r9, r5
 80179a4:	d14a      	bne.n	8017a3c <setvbuf+0x150>
 80179a6:	f04f 35ff 	mov.w	r5, #4294967295
 80179aa:	2200      	movs	r2, #0
 80179ac:	60a2      	str	r2, [r4, #8]
 80179ae:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80179b2:	6022      	str	r2, [r4, #0]
 80179b4:	6122      	str	r2, [r4, #16]
 80179b6:	2201      	movs	r2, #1
 80179b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179bc:	6162      	str	r2, [r4, #20]
 80179be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80179c0:	f043 0302 	orr.w	r3, r3, #2
 80179c4:	07d2      	lsls	r2, r2, #31
 80179c6:	81a3      	strh	r3, [r4, #12]
 80179c8:	d405      	bmi.n	80179d6 <setvbuf+0xea>
 80179ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80179ce:	d102      	bne.n	80179d6 <setvbuf+0xea>
 80179d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179d2:	f000 fa6e 	bl	8017eb2 <__retarget_lock_release_recursive>
 80179d6:	4628      	mov	r0, r5
 80179d8:	b003      	add	sp, #12
 80179da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179de:	4b24      	ldr	r3, [pc, #144]	; (8017a70 <setvbuf+0x184>)
 80179e0:	429c      	cmp	r4, r3
 80179e2:	d101      	bne.n	80179e8 <setvbuf+0xfc>
 80179e4:	68bc      	ldr	r4, [r7, #8]
 80179e6:	e793      	b.n	8017910 <setvbuf+0x24>
 80179e8:	4b22      	ldr	r3, [pc, #136]	; (8017a74 <setvbuf+0x188>)
 80179ea:	429c      	cmp	r4, r3
 80179ec:	bf08      	it	eq
 80179ee:	68fc      	ldreq	r4, [r7, #12]
 80179f0:	e78e      	b.n	8017910 <setvbuf+0x24>
 80179f2:	2e00      	cmp	r6, #0
 80179f4:	d0cd      	beq.n	8017992 <setvbuf+0xa6>
 80179f6:	69bb      	ldr	r3, [r7, #24]
 80179f8:	b913      	cbnz	r3, 8017a00 <setvbuf+0x114>
 80179fa:	4638      	mov	r0, r7
 80179fc:	f000 f9a8 	bl	8017d50 <__sinit>
 8017a00:	f1b8 0f01 	cmp.w	r8, #1
 8017a04:	bf08      	it	eq
 8017a06:	89a3      	ldrheq	r3, [r4, #12]
 8017a08:	6026      	str	r6, [r4, #0]
 8017a0a:	bf04      	itt	eq
 8017a0c:	f043 0301 	orreq.w	r3, r3, #1
 8017a10:	81a3      	strheq	r3, [r4, #12]
 8017a12:	89a2      	ldrh	r2, [r4, #12]
 8017a14:	f012 0308 	ands.w	r3, r2, #8
 8017a18:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8017a1c:	d01c      	beq.n	8017a58 <setvbuf+0x16c>
 8017a1e:	07d3      	lsls	r3, r2, #31
 8017a20:	bf41      	itttt	mi
 8017a22:	2300      	movmi	r3, #0
 8017a24:	426d      	negmi	r5, r5
 8017a26:	60a3      	strmi	r3, [r4, #8]
 8017a28:	61a5      	strmi	r5, [r4, #24]
 8017a2a:	bf58      	it	pl
 8017a2c:	60a5      	strpl	r5, [r4, #8]
 8017a2e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8017a30:	f015 0501 	ands.w	r5, r5, #1
 8017a34:	d115      	bne.n	8017a62 <setvbuf+0x176>
 8017a36:	f412 7f00 	tst.w	r2, #512	; 0x200
 8017a3a:	e7c8      	b.n	80179ce <setvbuf+0xe2>
 8017a3c:	4648      	mov	r0, r9
 8017a3e:	f000 fa9d 	bl	8017f7c <malloc>
 8017a42:	4606      	mov	r6, r0
 8017a44:	2800      	cmp	r0, #0
 8017a46:	d0ae      	beq.n	80179a6 <setvbuf+0xba>
 8017a48:	464d      	mov	r5, r9
 8017a4a:	89a3      	ldrh	r3, [r4, #12]
 8017a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a50:	81a3      	strh	r3, [r4, #12]
 8017a52:	e7d0      	b.n	80179f6 <setvbuf+0x10a>
 8017a54:	2500      	movs	r5, #0
 8017a56:	e7a8      	b.n	80179aa <setvbuf+0xbe>
 8017a58:	60a3      	str	r3, [r4, #8]
 8017a5a:	e7e8      	b.n	8017a2e <setvbuf+0x142>
 8017a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8017a60:	e7b9      	b.n	80179d6 <setvbuf+0xea>
 8017a62:	2500      	movs	r5, #0
 8017a64:	e7b7      	b.n	80179d6 <setvbuf+0xea>
 8017a66:	bf00      	nop
 8017a68:	2000001c 	.word	0x2000001c
 8017a6c:	0801c5d8 	.word	0x0801c5d8
 8017a70:	0801c5f8 	.word	0x0801c5f8
 8017a74:	0801c5b8 	.word	0x0801c5b8

08017a78 <siprintf>:
 8017a78:	b40e      	push	{r1, r2, r3}
 8017a7a:	b500      	push	{lr}
 8017a7c:	b09c      	sub	sp, #112	; 0x70
 8017a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8017a80:	9002      	str	r0, [sp, #8]
 8017a82:	9006      	str	r0, [sp, #24]
 8017a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017a88:	4809      	ldr	r0, [pc, #36]	; (8017ab0 <siprintf+0x38>)
 8017a8a:	9107      	str	r1, [sp, #28]
 8017a8c:	9104      	str	r1, [sp, #16]
 8017a8e:	4909      	ldr	r1, [pc, #36]	; (8017ab4 <siprintf+0x3c>)
 8017a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a94:	9105      	str	r1, [sp, #20]
 8017a96:	6800      	ldr	r0, [r0, #0]
 8017a98:	9301      	str	r3, [sp, #4]
 8017a9a:	a902      	add	r1, sp, #8
 8017a9c:	f000 fb7c 	bl	8018198 <_svfiprintf_r>
 8017aa0:	9b02      	ldr	r3, [sp, #8]
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	701a      	strb	r2, [r3, #0]
 8017aa6:	b01c      	add	sp, #112	; 0x70
 8017aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017aac:	b003      	add	sp, #12
 8017aae:	4770      	bx	lr
 8017ab0:	2000001c 	.word	0x2000001c
 8017ab4:	ffff0208 	.word	0xffff0208

08017ab8 <strncpy>:
 8017ab8:	b510      	push	{r4, lr}
 8017aba:	3901      	subs	r1, #1
 8017abc:	4603      	mov	r3, r0
 8017abe:	b132      	cbz	r2, 8017ace <strncpy+0x16>
 8017ac0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017ac4:	f803 4b01 	strb.w	r4, [r3], #1
 8017ac8:	3a01      	subs	r2, #1
 8017aca:	2c00      	cmp	r4, #0
 8017acc:	d1f7      	bne.n	8017abe <strncpy+0x6>
 8017ace:	441a      	add	r2, r3
 8017ad0:	2100      	movs	r1, #0
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	d100      	bne.n	8017ad8 <strncpy+0x20>
 8017ad6:	bd10      	pop	{r4, pc}
 8017ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8017adc:	e7f9      	b.n	8017ad2 <strncpy+0x1a>
	...

08017ae0 <__assert_func>:
 8017ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017ae2:	4614      	mov	r4, r2
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	4b09      	ldr	r3, [pc, #36]	; (8017b0c <__assert_func+0x2c>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	4605      	mov	r5, r0
 8017aec:	68d8      	ldr	r0, [r3, #12]
 8017aee:	b14c      	cbz	r4, 8017b04 <__assert_func+0x24>
 8017af0:	4b07      	ldr	r3, [pc, #28]	; (8017b10 <__assert_func+0x30>)
 8017af2:	9100      	str	r1, [sp, #0]
 8017af4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017af8:	4906      	ldr	r1, [pc, #24]	; (8017b14 <__assert_func+0x34>)
 8017afa:	462b      	mov	r3, r5
 8017afc:	f000 f9a6 	bl	8017e4c <fiprintf>
 8017b00:	f001 f85e 	bl	8018bc0 <abort>
 8017b04:	4b04      	ldr	r3, [pc, #16]	; (8017b18 <__assert_func+0x38>)
 8017b06:	461c      	mov	r4, r3
 8017b08:	e7f3      	b.n	8017af2 <__assert_func+0x12>
 8017b0a:	bf00      	nop
 8017b0c:	2000001c 	.word	0x2000001c
 8017b10:	0801c57a 	.word	0x0801c57a
 8017b14:	0801c587 	.word	0x0801c587
 8017b18:	0801c5b5 	.word	0x0801c5b5

08017b1c <__sflush_r>:
 8017b1c:	898a      	ldrh	r2, [r1, #12]
 8017b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b22:	4605      	mov	r5, r0
 8017b24:	0710      	lsls	r0, r2, #28
 8017b26:	460c      	mov	r4, r1
 8017b28:	d458      	bmi.n	8017bdc <__sflush_r+0xc0>
 8017b2a:	684b      	ldr	r3, [r1, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	dc05      	bgt.n	8017b3c <__sflush_r+0x20>
 8017b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	dc02      	bgt.n	8017b3c <__sflush_r+0x20>
 8017b36:	2000      	movs	r0, #0
 8017b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b3e:	2e00      	cmp	r6, #0
 8017b40:	d0f9      	beq.n	8017b36 <__sflush_r+0x1a>
 8017b42:	2300      	movs	r3, #0
 8017b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b48:	682f      	ldr	r7, [r5, #0]
 8017b4a:	602b      	str	r3, [r5, #0]
 8017b4c:	d032      	beq.n	8017bb4 <__sflush_r+0x98>
 8017b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b50:	89a3      	ldrh	r3, [r4, #12]
 8017b52:	075a      	lsls	r2, r3, #29
 8017b54:	d505      	bpl.n	8017b62 <__sflush_r+0x46>
 8017b56:	6863      	ldr	r3, [r4, #4]
 8017b58:	1ac0      	subs	r0, r0, r3
 8017b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b5c:	b10b      	cbz	r3, 8017b62 <__sflush_r+0x46>
 8017b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b60:	1ac0      	subs	r0, r0, r3
 8017b62:	2300      	movs	r3, #0
 8017b64:	4602      	mov	r2, r0
 8017b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b68:	6a21      	ldr	r1, [r4, #32]
 8017b6a:	4628      	mov	r0, r5
 8017b6c:	47b0      	blx	r6
 8017b6e:	1c43      	adds	r3, r0, #1
 8017b70:	89a3      	ldrh	r3, [r4, #12]
 8017b72:	d106      	bne.n	8017b82 <__sflush_r+0x66>
 8017b74:	6829      	ldr	r1, [r5, #0]
 8017b76:	291d      	cmp	r1, #29
 8017b78:	d82c      	bhi.n	8017bd4 <__sflush_r+0xb8>
 8017b7a:	4a2a      	ldr	r2, [pc, #168]	; (8017c24 <__sflush_r+0x108>)
 8017b7c:	40ca      	lsrs	r2, r1
 8017b7e:	07d6      	lsls	r6, r2, #31
 8017b80:	d528      	bpl.n	8017bd4 <__sflush_r+0xb8>
 8017b82:	2200      	movs	r2, #0
 8017b84:	6062      	str	r2, [r4, #4]
 8017b86:	04d9      	lsls	r1, r3, #19
 8017b88:	6922      	ldr	r2, [r4, #16]
 8017b8a:	6022      	str	r2, [r4, #0]
 8017b8c:	d504      	bpl.n	8017b98 <__sflush_r+0x7c>
 8017b8e:	1c42      	adds	r2, r0, #1
 8017b90:	d101      	bne.n	8017b96 <__sflush_r+0x7a>
 8017b92:	682b      	ldr	r3, [r5, #0]
 8017b94:	b903      	cbnz	r3, 8017b98 <__sflush_r+0x7c>
 8017b96:	6560      	str	r0, [r4, #84]	; 0x54
 8017b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b9a:	602f      	str	r7, [r5, #0]
 8017b9c:	2900      	cmp	r1, #0
 8017b9e:	d0ca      	beq.n	8017b36 <__sflush_r+0x1a>
 8017ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ba4:	4299      	cmp	r1, r3
 8017ba6:	d002      	beq.n	8017bae <__sflush_r+0x92>
 8017ba8:	4628      	mov	r0, r5
 8017baa:	f000 f9ef 	bl	8017f8c <_free_r>
 8017bae:	2000      	movs	r0, #0
 8017bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8017bb2:	e7c1      	b.n	8017b38 <__sflush_r+0x1c>
 8017bb4:	6a21      	ldr	r1, [r4, #32]
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	4628      	mov	r0, r5
 8017bba:	47b0      	blx	r6
 8017bbc:	1c41      	adds	r1, r0, #1
 8017bbe:	d1c7      	bne.n	8017b50 <__sflush_r+0x34>
 8017bc0:	682b      	ldr	r3, [r5, #0]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d0c4      	beq.n	8017b50 <__sflush_r+0x34>
 8017bc6:	2b1d      	cmp	r3, #29
 8017bc8:	d001      	beq.n	8017bce <__sflush_r+0xb2>
 8017bca:	2b16      	cmp	r3, #22
 8017bcc:	d101      	bne.n	8017bd2 <__sflush_r+0xb6>
 8017bce:	602f      	str	r7, [r5, #0]
 8017bd0:	e7b1      	b.n	8017b36 <__sflush_r+0x1a>
 8017bd2:	89a3      	ldrh	r3, [r4, #12]
 8017bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bd8:	81a3      	strh	r3, [r4, #12]
 8017bda:	e7ad      	b.n	8017b38 <__sflush_r+0x1c>
 8017bdc:	690f      	ldr	r7, [r1, #16]
 8017bde:	2f00      	cmp	r7, #0
 8017be0:	d0a9      	beq.n	8017b36 <__sflush_r+0x1a>
 8017be2:	0793      	lsls	r3, r2, #30
 8017be4:	680e      	ldr	r6, [r1, #0]
 8017be6:	bf08      	it	eq
 8017be8:	694b      	ldreq	r3, [r1, #20]
 8017bea:	600f      	str	r7, [r1, #0]
 8017bec:	bf18      	it	ne
 8017bee:	2300      	movne	r3, #0
 8017bf0:	eba6 0807 	sub.w	r8, r6, r7
 8017bf4:	608b      	str	r3, [r1, #8]
 8017bf6:	f1b8 0f00 	cmp.w	r8, #0
 8017bfa:	dd9c      	ble.n	8017b36 <__sflush_r+0x1a>
 8017bfc:	6a21      	ldr	r1, [r4, #32]
 8017bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c00:	4643      	mov	r3, r8
 8017c02:	463a      	mov	r2, r7
 8017c04:	4628      	mov	r0, r5
 8017c06:	47b0      	blx	r6
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	dc06      	bgt.n	8017c1a <__sflush_r+0xfe>
 8017c0c:	89a3      	ldrh	r3, [r4, #12]
 8017c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c12:	81a3      	strh	r3, [r4, #12]
 8017c14:	f04f 30ff 	mov.w	r0, #4294967295
 8017c18:	e78e      	b.n	8017b38 <__sflush_r+0x1c>
 8017c1a:	4407      	add	r7, r0
 8017c1c:	eba8 0800 	sub.w	r8, r8, r0
 8017c20:	e7e9      	b.n	8017bf6 <__sflush_r+0xda>
 8017c22:	bf00      	nop
 8017c24:	20400001 	.word	0x20400001

08017c28 <_fflush_r>:
 8017c28:	b538      	push	{r3, r4, r5, lr}
 8017c2a:	690b      	ldr	r3, [r1, #16]
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	460c      	mov	r4, r1
 8017c30:	b913      	cbnz	r3, 8017c38 <_fflush_r+0x10>
 8017c32:	2500      	movs	r5, #0
 8017c34:	4628      	mov	r0, r5
 8017c36:	bd38      	pop	{r3, r4, r5, pc}
 8017c38:	b118      	cbz	r0, 8017c42 <_fflush_r+0x1a>
 8017c3a:	6983      	ldr	r3, [r0, #24]
 8017c3c:	b90b      	cbnz	r3, 8017c42 <_fflush_r+0x1a>
 8017c3e:	f000 f887 	bl	8017d50 <__sinit>
 8017c42:	4b14      	ldr	r3, [pc, #80]	; (8017c94 <_fflush_r+0x6c>)
 8017c44:	429c      	cmp	r4, r3
 8017c46:	d11b      	bne.n	8017c80 <_fflush_r+0x58>
 8017c48:	686c      	ldr	r4, [r5, #4]
 8017c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d0ef      	beq.n	8017c32 <_fflush_r+0xa>
 8017c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c54:	07d0      	lsls	r0, r2, #31
 8017c56:	d404      	bmi.n	8017c62 <_fflush_r+0x3a>
 8017c58:	0599      	lsls	r1, r3, #22
 8017c5a:	d402      	bmi.n	8017c62 <_fflush_r+0x3a>
 8017c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c5e:	f000 f927 	bl	8017eb0 <__retarget_lock_acquire_recursive>
 8017c62:	4628      	mov	r0, r5
 8017c64:	4621      	mov	r1, r4
 8017c66:	f7ff ff59 	bl	8017b1c <__sflush_r>
 8017c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c6c:	07da      	lsls	r2, r3, #31
 8017c6e:	4605      	mov	r5, r0
 8017c70:	d4e0      	bmi.n	8017c34 <_fflush_r+0xc>
 8017c72:	89a3      	ldrh	r3, [r4, #12]
 8017c74:	059b      	lsls	r3, r3, #22
 8017c76:	d4dd      	bmi.n	8017c34 <_fflush_r+0xc>
 8017c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c7a:	f000 f91a 	bl	8017eb2 <__retarget_lock_release_recursive>
 8017c7e:	e7d9      	b.n	8017c34 <_fflush_r+0xc>
 8017c80:	4b05      	ldr	r3, [pc, #20]	; (8017c98 <_fflush_r+0x70>)
 8017c82:	429c      	cmp	r4, r3
 8017c84:	d101      	bne.n	8017c8a <_fflush_r+0x62>
 8017c86:	68ac      	ldr	r4, [r5, #8]
 8017c88:	e7df      	b.n	8017c4a <_fflush_r+0x22>
 8017c8a:	4b04      	ldr	r3, [pc, #16]	; (8017c9c <_fflush_r+0x74>)
 8017c8c:	429c      	cmp	r4, r3
 8017c8e:	bf08      	it	eq
 8017c90:	68ec      	ldreq	r4, [r5, #12]
 8017c92:	e7da      	b.n	8017c4a <_fflush_r+0x22>
 8017c94:	0801c5d8 	.word	0x0801c5d8
 8017c98:	0801c5f8 	.word	0x0801c5f8
 8017c9c:	0801c5b8 	.word	0x0801c5b8

08017ca0 <std>:
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	b510      	push	{r4, lr}
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8017caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017cae:	6083      	str	r3, [r0, #8]
 8017cb0:	8181      	strh	r1, [r0, #12]
 8017cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8017cb4:	81c2      	strh	r2, [r0, #14]
 8017cb6:	6183      	str	r3, [r0, #24]
 8017cb8:	4619      	mov	r1, r3
 8017cba:	2208      	movs	r2, #8
 8017cbc:	305c      	adds	r0, #92	; 0x5c
 8017cbe:	f7ff fdb5 	bl	801782c <memset>
 8017cc2:	4b05      	ldr	r3, [pc, #20]	; (8017cd8 <std+0x38>)
 8017cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8017cc6:	4b05      	ldr	r3, [pc, #20]	; (8017cdc <std+0x3c>)
 8017cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8017cca:	4b05      	ldr	r3, [pc, #20]	; (8017ce0 <std+0x40>)
 8017ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017cce:	4b05      	ldr	r3, [pc, #20]	; (8017ce4 <std+0x44>)
 8017cd0:	6224      	str	r4, [r4, #32]
 8017cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8017cd4:	bd10      	pop	{r4, pc}
 8017cd6:	bf00      	nop
 8017cd8:	08018995 	.word	0x08018995
 8017cdc:	080189b7 	.word	0x080189b7
 8017ce0:	080189ef 	.word	0x080189ef
 8017ce4:	08018a13 	.word	0x08018a13

08017ce8 <_cleanup_r>:
 8017ce8:	4901      	ldr	r1, [pc, #4]	; (8017cf0 <_cleanup_r+0x8>)
 8017cea:	f000 b8c1 	b.w	8017e70 <_fwalk_reent>
 8017cee:	bf00      	nop
 8017cf0:	08017c29 	.word	0x08017c29

08017cf4 <__sfmoreglue>:
 8017cf4:	b570      	push	{r4, r5, r6, lr}
 8017cf6:	1e4a      	subs	r2, r1, #1
 8017cf8:	2568      	movs	r5, #104	; 0x68
 8017cfa:	4355      	muls	r5, r2
 8017cfc:	460e      	mov	r6, r1
 8017cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d02:	f000 f993 	bl	801802c <_malloc_r>
 8017d06:	4604      	mov	r4, r0
 8017d08:	b140      	cbz	r0, 8017d1c <__sfmoreglue+0x28>
 8017d0a:	2100      	movs	r1, #0
 8017d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8017d10:	300c      	adds	r0, #12
 8017d12:	60a0      	str	r0, [r4, #8]
 8017d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017d18:	f7ff fd88 	bl	801782c <memset>
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	bd70      	pop	{r4, r5, r6, pc}

08017d20 <__sfp_lock_acquire>:
 8017d20:	4801      	ldr	r0, [pc, #4]	; (8017d28 <__sfp_lock_acquire+0x8>)
 8017d22:	f000 b8c5 	b.w	8017eb0 <__retarget_lock_acquire_recursive>
 8017d26:	bf00      	nop
 8017d28:	2000bd58 	.word	0x2000bd58

08017d2c <__sfp_lock_release>:
 8017d2c:	4801      	ldr	r0, [pc, #4]	; (8017d34 <__sfp_lock_release+0x8>)
 8017d2e:	f000 b8c0 	b.w	8017eb2 <__retarget_lock_release_recursive>
 8017d32:	bf00      	nop
 8017d34:	2000bd58 	.word	0x2000bd58

08017d38 <__sinit_lock_acquire>:
 8017d38:	4801      	ldr	r0, [pc, #4]	; (8017d40 <__sinit_lock_acquire+0x8>)
 8017d3a:	f000 b8b9 	b.w	8017eb0 <__retarget_lock_acquire_recursive>
 8017d3e:	bf00      	nop
 8017d40:	2000bd53 	.word	0x2000bd53

08017d44 <__sinit_lock_release>:
 8017d44:	4801      	ldr	r0, [pc, #4]	; (8017d4c <__sinit_lock_release+0x8>)
 8017d46:	f000 b8b4 	b.w	8017eb2 <__retarget_lock_release_recursive>
 8017d4a:	bf00      	nop
 8017d4c:	2000bd53 	.word	0x2000bd53

08017d50 <__sinit>:
 8017d50:	b510      	push	{r4, lr}
 8017d52:	4604      	mov	r4, r0
 8017d54:	f7ff fff0 	bl	8017d38 <__sinit_lock_acquire>
 8017d58:	69a3      	ldr	r3, [r4, #24]
 8017d5a:	b11b      	cbz	r3, 8017d64 <__sinit+0x14>
 8017d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d60:	f7ff bff0 	b.w	8017d44 <__sinit_lock_release>
 8017d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d68:	6523      	str	r3, [r4, #80]	; 0x50
 8017d6a:	4b13      	ldr	r3, [pc, #76]	; (8017db8 <__sinit+0x68>)
 8017d6c:	4a13      	ldr	r2, [pc, #76]	; (8017dbc <__sinit+0x6c>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d72:	42a3      	cmp	r3, r4
 8017d74:	bf04      	itt	eq
 8017d76:	2301      	moveq	r3, #1
 8017d78:	61a3      	streq	r3, [r4, #24]
 8017d7a:	4620      	mov	r0, r4
 8017d7c:	f000 f820 	bl	8017dc0 <__sfp>
 8017d80:	6060      	str	r0, [r4, #4]
 8017d82:	4620      	mov	r0, r4
 8017d84:	f000 f81c 	bl	8017dc0 <__sfp>
 8017d88:	60a0      	str	r0, [r4, #8]
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f000 f818 	bl	8017dc0 <__sfp>
 8017d90:	2200      	movs	r2, #0
 8017d92:	60e0      	str	r0, [r4, #12]
 8017d94:	2104      	movs	r1, #4
 8017d96:	6860      	ldr	r0, [r4, #4]
 8017d98:	f7ff ff82 	bl	8017ca0 <std>
 8017d9c:	68a0      	ldr	r0, [r4, #8]
 8017d9e:	2201      	movs	r2, #1
 8017da0:	2109      	movs	r1, #9
 8017da2:	f7ff ff7d 	bl	8017ca0 <std>
 8017da6:	68e0      	ldr	r0, [r4, #12]
 8017da8:	2202      	movs	r2, #2
 8017daa:	2112      	movs	r1, #18
 8017dac:	f7ff ff78 	bl	8017ca0 <std>
 8017db0:	2301      	movs	r3, #1
 8017db2:	61a3      	str	r3, [r4, #24]
 8017db4:	e7d2      	b.n	8017d5c <__sinit+0xc>
 8017db6:	bf00      	nop
 8017db8:	0801c500 	.word	0x0801c500
 8017dbc:	08017ce9 	.word	0x08017ce9

08017dc0 <__sfp>:
 8017dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dc2:	4607      	mov	r7, r0
 8017dc4:	f7ff ffac 	bl	8017d20 <__sfp_lock_acquire>
 8017dc8:	4b1e      	ldr	r3, [pc, #120]	; (8017e44 <__sfp+0x84>)
 8017dca:	681e      	ldr	r6, [r3, #0]
 8017dcc:	69b3      	ldr	r3, [r6, #24]
 8017dce:	b913      	cbnz	r3, 8017dd6 <__sfp+0x16>
 8017dd0:	4630      	mov	r0, r6
 8017dd2:	f7ff ffbd 	bl	8017d50 <__sinit>
 8017dd6:	3648      	adds	r6, #72	; 0x48
 8017dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017ddc:	3b01      	subs	r3, #1
 8017dde:	d503      	bpl.n	8017de8 <__sfp+0x28>
 8017de0:	6833      	ldr	r3, [r6, #0]
 8017de2:	b30b      	cbz	r3, 8017e28 <__sfp+0x68>
 8017de4:	6836      	ldr	r6, [r6, #0]
 8017de6:	e7f7      	b.n	8017dd8 <__sfp+0x18>
 8017de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017dec:	b9d5      	cbnz	r5, 8017e24 <__sfp+0x64>
 8017dee:	4b16      	ldr	r3, [pc, #88]	; (8017e48 <__sfp+0x88>)
 8017df0:	60e3      	str	r3, [r4, #12]
 8017df2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017df6:	6665      	str	r5, [r4, #100]	; 0x64
 8017df8:	f000 f859 	bl	8017eae <__retarget_lock_init_recursive>
 8017dfc:	f7ff ff96 	bl	8017d2c <__sfp_lock_release>
 8017e00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017e04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017e08:	6025      	str	r5, [r4, #0]
 8017e0a:	61a5      	str	r5, [r4, #24]
 8017e0c:	2208      	movs	r2, #8
 8017e0e:	4629      	mov	r1, r5
 8017e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e14:	f7ff fd0a 	bl	801782c <memset>
 8017e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e20:	4620      	mov	r0, r4
 8017e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e24:	3468      	adds	r4, #104	; 0x68
 8017e26:	e7d9      	b.n	8017ddc <__sfp+0x1c>
 8017e28:	2104      	movs	r1, #4
 8017e2a:	4638      	mov	r0, r7
 8017e2c:	f7ff ff62 	bl	8017cf4 <__sfmoreglue>
 8017e30:	4604      	mov	r4, r0
 8017e32:	6030      	str	r0, [r6, #0]
 8017e34:	2800      	cmp	r0, #0
 8017e36:	d1d5      	bne.n	8017de4 <__sfp+0x24>
 8017e38:	f7ff ff78 	bl	8017d2c <__sfp_lock_release>
 8017e3c:	230c      	movs	r3, #12
 8017e3e:	603b      	str	r3, [r7, #0]
 8017e40:	e7ee      	b.n	8017e20 <__sfp+0x60>
 8017e42:	bf00      	nop
 8017e44:	0801c500 	.word	0x0801c500
 8017e48:	ffff0001 	.word	0xffff0001

08017e4c <fiprintf>:
 8017e4c:	b40e      	push	{r1, r2, r3}
 8017e4e:	b503      	push	{r0, r1, lr}
 8017e50:	4601      	mov	r1, r0
 8017e52:	ab03      	add	r3, sp, #12
 8017e54:	4805      	ldr	r0, [pc, #20]	; (8017e6c <fiprintf+0x20>)
 8017e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e5a:	6800      	ldr	r0, [r0, #0]
 8017e5c:	9301      	str	r3, [sp, #4]
 8017e5e:	f000 fac5 	bl	80183ec <_vfiprintf_r>
 8017e62:	b002      	add	sp, #8
 8017e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e68:	b003      	add	sp, #12
 8017e6a:	4770      	bx	lr
 8017e6c:	2000001c 	.word	0x2000001c

08017e70 <_fwalk_reent>:
 8017e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e74:	4606      	mov	r6, r0
 8017e76:	4688      	mov	r8, r1
 8017e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e7c:	2700      	movs	r7, #0
 8017e7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e82:	f1b9 0901 	subs.w	r9, r9, #1
 8017e86:	d505      	bpl.n	8017e94 <_fwalk_reent+0x24>
 8017e88:	6824      	ldr	r4, [r4, #0]
 8017e8a:	2c00      	cmp	r4, #0
 8017e8c:	d1f7      	bne.n	8017e7e <_fwalk_reent+0xe>
 8017e8e:	4638      	mov	r0, r7
 8017e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e94:	89ab      	ldrh	r3, [r5, #12]
 8017e96:	2b01      	cmp	r3, #1
 8017e98:	d907      	bls.n	8017eaa <_fwalk_reent+0x3a>
 8017e9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e9e:	3301      	adds	r3, #1
 8017ea0:	d003      	beq.n	8017eaa <_fwalk_reent+0x3a>
 8017ea2:	4629      	mov	r1, r5
 8017ea4:	4630      	mov	r0, r6
 8017ea6:	47c0      	blx	r8
 8017ea8:	4307      	orrs	r7, r0
 8017eaa:	3568      	adds	r5, #104	; 0x68
 8017eac:	e7e9      	b.n	8017e82 <_fwalk_reent+0x12>

08017eae <__retarget_lock_init_recursive>:
 8017eae:	4770      	bx	lr

08017eb0 <__retarget_lock_acquire_recursive>:
 8017eb0:	4770      	bx	lr

08017eb2 <__retarget_lock_release_recursive>:
 8017eb2:	4770      	bx	lr

08017eb4 <__swhatbuf_r>:
 8017eb4:	b570      	push	{r4, r5, r6, lr}
 8017eb6:	460e      	mov	r6, r1
 8017eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ebc:	2900      	cmp	r1, #0
 8017ebe:	b096      	sub	sp, #88	; 0x58
 8017ec0:	4614      	mov	r4, r2
 8017ec2:	461d      	mov	r5, r3
 8017ec4:	da07      	bge.n	8017ed6 <__swhatbuf_r+0x22>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	602b      	str	r3, [r5, #0]
 8017eca:	89b3      	ldrh	r3, [r6, #12]
 8017ecc:	061a      	lsls	r2, r3, #24
 8017ece:	d410      	bmi.n	8017ef2 <__swhatbuf_r+0x3e>
 8017ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ed4:	e00e      	b.n	8017ef4 <__swhatbuf_r+0x40>
 8017ed6:	466a      	mov	r2, sp
 8017ed8:	f000 fe8a 	bl	8018bf0 <_fstat_r>
 8017edc:	2800      	cmp	r0, #0
 8017ede:	dbf2      	blt.n	8017ec6 <__swhatbuf_r+0x12>
 8017ee0:	9a01      	ldr	r2, [sp, #4]
 8017ee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017ee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017eea:	425a      	negs	r2, r3
 8017eec:	415a      	adcs	r2, r3
 8017eee:	602a      	str	r2, [r5, #0]
 8017ef0:	e7ee      	b.n	8017ed0 <__swhatbuf_r+0x1c>
 8017ef2:	2340      	movs	r3, #64	; 0x40
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	6023      	str	r3, [r4, #0]
 8017ef8:	b016      	add	sp, #88	; 0x58
 8017efa:	bd70      	pop	{r4, r5, r6, pc}

08017efc <__smakebuf_r>:
 8017efc:	898b      	ldrh	r3, [r1, #12]
 8017efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f00:	079d      	lsls	r5, r3, #30
 8017f02:	4606      	mov	r6, r0
 8017f04:	460c      	mov	r4, r1
 8017f06:	d507      	bpl.n	8017f18 <__smakebuf_r+0x1c>
 8017f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f0c:	6023      	str	r3, [r4, #0]
 8017f0e:	6123      	str	r3, [r4, #16]
 8017f10:	2301      	movs	r3, #1
 8017f12:	6163      	str	r3, [r4, #20]
 8017f14:	b002      	add	sp, #8
 8017f16:	bd70      	pop	{r4, r5, r6, pc}
 8017f18:	ab01      	add	r3, sp, #4
 8017f1a:	466a      	mov	r2, sp
 8017f1c:	f7ff ffca 	bl	8017eb4 <__swhatbuf_r>
 8017f20:	9900      	ldr	r1, [sp, #0]
 8017f22:	4605      	mov	r5, r0
 8017f24:	4630      	mov	r0, r6
 8017f26:	f000 f881 	bl	801802c <_malloc_r>
 8017f2a:	b948      	cbnz	r0, 8017f40 <__smakebuf_r+0x44>
 8017f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f30:	059a      	lsls	r2, r3, #22
 8017f32:	d4ef      	bmi.n	8017f14 <__smakebuf_r+0x18>
 8017f34:	f023 0303 	bic.w	r3, r3, #3
 8017f38:	f043 0302 	orr.w	r3, r3, #2
 8017f3c:	81a3      	strh	r3, [r4, #12]
 8017f3e:	e7e3      	b.n	8017f08 <__smakebuf_r+0xc>
 8017f40:	4b0d      	ldr	r3, [pc, #52]	; (8017f78 <__smakebuf_r+0x7c>)
 8017f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f44:	89a3      	ldrh	r3, [r4, #12]
 8017f46:	6020      	str	r0, [r4, #0]
 8017f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f4c:	81a3      	strh	r3, [r4, #12]
 8017f4e:	9b00      	ldr	r3, [sp, #0]
 8017f50:	6163      	str	r3, [r4, #20]
 8017f52:	9b01      	ldr	r3, [sp, #4]
 8017f54:	6120      	str	r0, [r4, #16]
 8017f56:	b15b      	cbz	r3, 8017f70 <__smakebuf_r+0x74>
 8017f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f5c:	4630      	mov	r0, r6
 8017f5e:	f000 fe59 	bl	8018c14 <_isatty_r>
 8017f62:	b128      	cbz	r0, 8017f70 <__smakebuf_r+0x74>
 8017f64:	89a3      	ldrh	r3, [r4, #12]
 8017f66:	f023 0303 	bic.w	r3, r3, #3
 8017f6a:	f043 0301 	orr.w	r3, r3, #1
 8017f6e:	81a3      	strh	r3, [r4, #12]
 8017f70:	89a0      	ldrh	r0, [r4, #12]
 8017f72:	4305      	orrs	r5, r0
 8017f74:	81a5      	strh	r5, [r4, #12]
 8017f76:	e7cd      	b.n	8017f14 <__smakebuf_r+0x18>
 8017f78:	08017ce9 	.word	0x08017ce9

08017f7c <malloc>:
 8017f7c:	4b02      	ldr	r3, [pc, #8]	; (8017f88 <malloc+0xc>)
 8017f7e:	4601      	mov	r1, r0
 8017f80:	6818      	ldr	r0, [r3, #0]
 8017f82:	f000 b853 	b.w	801802c <_malloc_r>
 8017f86:	bf00      	nop
 8017f88:	2000001c 	.word	0x2000001c

08017f8c <_free_r>:
 8017f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f8e:	2900      	cmp	r1, #0
 8017f90:	d048      	beq.n	8018024 <_free_r+0x98>
 8017f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f96:	9001      	str	r0, [sp, #4]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8017f9e:	bfb8      	it	lt
 8017fa0:	18e4      	addlt	r4, r4, r3
 8017fa2:	f000 fe59 	bl	8018c58 <__malloc_lock>
 8017fa6:	4a20      	ldr	r2, [pc, #128]	; (8018028 <_free_r+0x9c>)
 8017fa8:	9801      	ldr	r0, [sp, #4]
 8017faa:	6813      	ldr	r3, [r2, #0]
 8017fac:	4615      	mov	r5, r2
 8017fae:	b933      	cbnz	r3, 8017fbe <_free_r+0x32>
 8017fb0:	6063      	str	r3, [r4, #4]
 8017fb2:	6014      	str	r4, [r2, #0]
 8017fb4:	b003      	add	sp, #12
 8017fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fba:	f000 be53 	b.w	8018c64 <__malloc_unlock>
 8017fbe:	42a3      	cmp	r3, r4
 8017fc0:	d90b      	bls.n	8017fda <_free_r+0x4e>
 8017fc2:	6821      	ldr	r1, [r4, #0]
 8017fc4:	1862      	adds	r2, r4, r1
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	bf04      	itt	eq
 8017fca:	681a      	ldreq	r2, [r3, #0]
 8017fcc:	685b      	ldreq	r3, [r3, #4]
 8017fce:	6063      	str	r3, [r4, #4]
 8017fd0:	bf04      	itt	eq
 8017fd2:	1852      	addeq	r2, r2, r1
 8017fd4:	6022      	streq	r2, [r4, #0]
 8017fd6:	602c      	str	r4, [r5, #0]
 8017fd8:	e7ec      	b.n	8017fb4 <_free_r+0x28>
 8017fda:	461a      	mov	r2, r3
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	b10b      	cbz	r3, 8017fe4 <_free_r+0x58>
 8017fe0:	42a3      	cmp	r3, r4
 8017fe2:	d9fa      	bls.n	8017fda <_free_r+0x4e>
 8017fe4:	6811      	ldr	r1, [r2, #0]
 8017fe6:	1855      	adds	r5, r2, r1
 8017fe8:	42a5      	cmp	r5, r4
 8017fea:	d10b      	bne.n	8018004 <_free_r+0x78>
 8017fec:	6824      	ldr	r4, [r4, #0]
 8017fee:	4421      	add	r1, r4
 8017ff0:	1854      	adds	r4, r2, r1
 8017ff2:	42a3      	cmp	r3, r4
 8017ff4:	6011      	str	r1, [r2, #0]
 8017ff6:	d1dd      	bne.n	8017fb4 <_free_r+0x28>
 8017ff8:	681c      	ldr	r4, [r3, #0]
 8017ffa:	685b      	ldr	r3, [r3, #4]
 8017ffc:	6053      	str	r3, [r2, #4]
 8017ffe:	4421      	add	r1, r4
 8018000:	6011      	str	r1, [r2, #0]
 8018002:	e7d7      	b.n	8017fb4 <_free_r+0x28>
 8018004:	d902      	bls.n	801800c <_free_r+0x80>
 8018006:	230c      	movs	r3, #12
 8018008:	6003      	str	r3, [r0, #0]
 801800a:	e7d3      	b.n	8017fb4 <_free_r+0x28>
 801800c:	6825      	ldr	r5, [r4, #0]
 801800e:	1961      	adds	r1, r4, r5
 8018010:	428b      	cmp	r3, r1
 8018012:	bf04      	itt	eq
 8018014:	6819      	ldreq	r1, [r3, #0]
 8018016:	685b      	ldreq	r3, [r3, #4]
 8018018:	6063      	str	r3, [r4, #4]
 801801a:	bf04      	itt	eq
 801801c:	1949      	addeq	r1, r1, r5
 801801e:	6021      	streq	r1, [r4, #0]
 8018020:	6054      	str	r4, [r2, #4]
 8018022:	e7c7      	b.n	8017fb4 <_free_r+0x28>
 8018024:	b003      	add	sp, #12
 8018026:	bd30      	pop	{r4, r5, pc}
 8018028:	20004f38 	.word	0x20004f38

0801802c <_malloc_r>:
 801802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801802e:	1ccd      	adds	r5, r1, #3
 8018030:	f025 0503 	bic.w	r5, r5, #3
 8018034:	3508      	adds	r5, #8
 8018036:	2d0c      	cmp	r5, #12
 8018038:	bf38      	it	cc
 801803a:	250c      	movcc	r5, #12
 801803c:	2d00      	cmp	r5, #0
 801803e:	4606      	mov	r6, r0
 8018040:	db01      	blt.n	8018046 <_malloc_r+0x1a>
 8018042:	42a9      	cmp	r1, r5
 8018044:	d903      	bls.n	801804e <_malloc_r+0x22>
 8018046:	230c      	movs	r3, #12
 8018048:	6033      	str	r3, [r6, #0]
 801804a:	2000      	movs	r0, #0
 801804c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801804e:	f000 fe03 	bl	8018c58 <__malloc_lock>
 8018052:	4921      	ldr	r1, [pc, #132]	; (80180d8 <_malloc_r+0xac>)
 8018054:	680a      	ldr	r2, [r1, #0]
 8018056:	4614      	mov	r4, r2
 8018058:	b99c      	cbnz	r4, 8018082 <_malloc_r+0x56>
 801805a:	4f20      	ldr	r7, [pc, #128]	; (80180dc <_malloc_r+0xb0>)
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	b923      	cbnz	r3, 801806a <_malloc_r+0x3e>
 8018060:	4621      	mov	r1, r4
 8018062:	4630      	mov	r0, r6
 8018064:	f000 fc86 	bl	8018974 <_sbrk_r>
 8018068:	6038      	str	r0, [r7, #0]
 801806a:	4629      	mov	r1, r5
 801806c:	4630      	mov	r0, r6
 801806e:	f000 fc81 	bl	8018974 <_sbrk_r>
 8018072:	1c43      	adds	r3, r0, #1
 8018074:	d123      	bne.n	80180be <_malloc_r+0x92>
 8018076:	230c      	movs	r3, #12
 8018078:	6033      	str	r3, [r6, #0]
 801807a:	4630      	mov	r0, r6
 801807c:	f000 fdf2 	bl	8018c64 <__malloc_unlock>
 8018080:	e7e3      	b.n	801804a <_malloc_r+0x1e>
 8018082:	6823      	ldr	r3, [r4, #0]
 8018084:	1b5b      	subs	r3, r3, r5
 8018086:	d417      	bmi.n	80180b8 <_malloc_r+0x8c>
 8018088:	2b0b      	cmp	r3, #11
 801808a:	d903      	bls.n	8018094 <_malloc_r+0x68>
 801808c:	6023      	str	r3, [r4, #0]
 801808e:	441c      	add	r4, r3
 8018090:	6025      	str	r5, [r4, #0]
 8018092:	e004      	b.n	801809e <_malloc_r+0x72>
 8018094:	6863      	ldr	r3, [r4, #4]
 8018096:	42a2      	cmp	r2, r4
 8018098:	bf0c      	ite	eq
 801809a:	600b      	streq	r3, [r1, #0]
 801809c:	6053      	strne	r3, [r2, #4]
 801809e:	4630      	mov	r0, r6
 80180a0:	f000 fde0 	bl	8018c64 <__malloc_unlock>
 80180a4:	f104 000b 	add.w	r0, r4, #11
 80180a8:	1d23      	adds	r3, r4, #4
 80180aa:	f020 0007 	bic.w	r0, r0, #7
 80180ae:	1ac2      	subs	r2, r0, r3
 80180b0:	d0cc      	beq.n	801804c <_malloc_r+0x20>
 80180b2:	1a1b      	subs	r3, r3, r0
 80180b4:	50a3      	str	r3, [r4, r2]
 80180b6:	e7c9      	b.n	801804c <_malloc_r+0x20>
 80180b8:	4622      	mov	r2, r4
 80180ba:	6864      	ldr	r4, [r4, #4]
 80180bc:	e7cc      	b.n	8018058 <_malloc_r+0x2c>
 80180be:	1cc4      	adds	r4, r0, #3
 80180c0:	f024 0403 	bic.w	r4, r4, #3
 80180c4:	42a0      	cmp	r0, r4
 80180c6:	d0e3      	beq.n	8018090 <_malloc_r+0x64>
 80180c8:	1a21      	subs	r1, r4, r0
 80180ca:	4630      	mov	r0, r6
 80180cc:	f000 fc52 	bl	8018974 <_sbrk_r>
 80180d0:	3001      	adds	r0, #1
 80180d2:	d1dd      	bne.n	8018090 <_malloc_r+0x64>
 80180d4:	e7cf      	b.n	8018076 <_malloc_r+0x4a>
 80180d6:	bf00      	nop
 80180d8:	20004f38 	.word	0x20004f38
 80180dc:	20004f3c 	.word	0x20004f3c

080180e0 <__ssputs_r>:
 80180e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180e4:	688e      	ldr	r6, [r1, #8]
 80180e6:	429e      	cmp	r6, r3
 80180e8:	4682      	mov	sl, r0
 80180ea:	460c      	mov	r4, r1
 80180ec:	4690      	mov	r8, r2
 80180ee:	461f      	mov	r7, r3
 80180f0:	d838      	bhi.n	8018164 <__ssputs_r+0x84>
 80180f2:	898a      	ldrh	r2, [r1, #12]
 80180f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80180f8:	d032      	beq.n	8018160 <__ssputs_r+0x80>
 80180fa:	6825      	ldr	r5, [r4, #0]
 80180fc:	6909      	ldr	r1, [r1, #16]
 80180fe:	eba5 0901 	sub.w	r9, r5, r1
 8018102:	6965      	ldr	r5, [r4, #20]
 8018104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801810c:	3301      	adds	r3, #1
 801810e:	444b      	add	r3, r9
 8018110:	106d      	asrs	r5, r5, #1
 8018112:	429d      	cmp	r5, r3
 8018114:	bf38      	it	cc
 8018116:	461d      	movcc	r5, r3
 8018118:	0553      	lsls	r3, r2, #21
 801811a:	d531      	bpl.n	8018180 <__ssputs_r+0xa0>
 801811c:	4629      	mov	r1, r5
 801811e:	f7ff ff85 	bl	801802c <_malloc_r>
 8018122:	4606      	mov	r6, r0
 8018124:	b950      	cbnz	r0, 801813c <__ssputs_r+0x5c>
 8018126:	230c      	movs	r3, #12
 8018128:	f8ca 3000 	str.w	r3, [sl]
 801812c:	89a3      	ldrh	r3, [r4, #12]
 801812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018132:	81a3      	strh	r3, [r4, #12]
 8018134:	f04f 30ff 	mov.w	r0, #4294967295
 8018138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801813c:	6921      	ldr	r1, [r4, #16]
 801813e:	464a      	mov	r2, r9
 8018140:	f7ff fb4c 	bl	80177dc <memcpy>
 8018144:	89a3      	ldrh	r3, [r4, #12]
 8018146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801814a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801814e:	81a3      	strh	r3, [r4, #12]
 8018150:	6126      	str	r6, [r4, #16]
 8018152:	6165      	str	r5, [r4, #20]
 8018154:	444e      	add	r6, r9
 8018156:	eba5 0509 	sub.w	r5, r5, r9
 801815a:	6026      	str	r6, [r4, #0]
 801815c:	60a5      	str	r5, [r4, #8]
 801815e:	463e      	mov	r6, r7
 8018160:	42be      	cmp	r6, r7
 8018162:	d900      	bls.n	8018166 <__ssputs_r+0x86>
 8018164:	463e      	mov	r6, r7
 8018166:	4632      	mov	r2, r6
 8018168:	6820      	ldr	r0, [r4, #0]
 801816a:	4641      	mov	r1, r8
 801816c:	f7ff fb44 	bl	80177f8 <memmove>
 8018170:	68a3      	ldr	r3, [r4, #8]
 8018172:	6822      	ldr	r2, [r4, #0]
 8018174:	1b9b      	subs	r3, r3, r6
 8018176:	4432      	add	r2, r6
 8018178:	60a3      	str	r3, [r4, #8]
 801817a:	6022      	str	r2, [r4, #0]
 801817c:	2000      	movs	r0, #0
 801817e:	e7db      	b.n	8018138 <__ssputs_r+0x58>
 8018180:	462a      	mov	r2, r5
 8018182:	f000 fd75 	bl	8018c70 <_realloc_r>
 8018186:	4606      	mov	r6, r0
 8018188:	2800      	cmp	r0, #0
 801818a:	d1e1      	bne.n	8018150 <__ssputs_r+0x70>
 801818c:	6921      	ldr	r1, [r4, #16]
 801818e:	4650      	mov	r0, sl
 8018190:	f7ff fefc 	bl	8017f8c <_free_r>
 8018194:	e7c7      	b.n	8018126 <__ssputs_r+0x46>
	...

08018198 <_svfiprintf_r>:
 8018198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801819c:	4698      	mov	r8, r3
 801819e:	898b      	ldrh	r3, [r1, #12]
 80181a0:	061b      	lsls	r3, r3, #24
 80181a2:	b09d      	sub	sp, #116	; 0x74
 80181a4:	4607      	mov	r7, r0
 80181a6:	460d      	mov	r5, r1
 80181a8:	4614      	mov	r4, r2
 80181aa:	d50e      	bpl.n	80181ca <_svfiprintf_r+0x32>
 80181ac:	690b      	ldr	r3, [r1, #16]
 80181ae:	b963      	cbnz	r3, 80181ca <_svfiprintf_r+0x32>
 80181b0:	2140      	movs	r1, #64	; 0x40
 80181b2:	f7ff ff3b 	bl	801802c <_malloc_r>
 80181b6:	6028      	str	r0, [r5, #0]
 80181b8:	6128      	str	r0, [r5, #16]
 80181ba:	b920      	cbnz	r0, 80181c6 <_svfiprintf_r+0x2e>
 80181bc:	230c      	movs	r3, #12
 80181be:	603b      	str	r3, [r7, #0]
 80181c0:	f04f 30ff 	mov.w	r0, #4294967295
 80181c4:	e0d1      	b.n	801836a <_svfiprintf_r+0x1d2>
 80181c6:	2340      	movs	r3, #64	; 0x40
 80181c8:	616b      	str	r3, [r5, #20]
 80181ca:	2300      	movs	r3, #0
 80181cc:	9309      	str	r3, [sp, #36]	; 0x24
 80181ce:	2320      	movs	r3, #32
 80181d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80181d8:	2330      	movs	r3, #48	; 0x30
 80181da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018384 <_svfiprintf_r+0x1ec>
 80181de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181e2:	f04f 0901 	mov.w	r9, #1
 80181e6:	4623      	mov	r3, r4
 80181e8:	469a      	mov	sl, r3
 80181ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181ee:	b10a      	cbz	r2, 80181f4 <_svfiprintf_r+0x5c>
 80181f0:	2a25      	cmp	r2, #37	; 0x25
 80181f2:	d1f9      	bne.n	80181e8 <_svfiprintf_r+0x50>
 80181f4:	ebba 0b04 	subs.w	fp, sl, r4
 80181f8:	d00b      	beq.n	8018212 <_svfiprintf_r+0x7a>
 80181fa:	465b      	mov	r3, fp
 80181fc:	4622      	mov	r2, r4
 80181fe:	4629      	mov	r1, r5
 8018200:	4638      	mov	r0, r7
 8018202:	f7ff ff6d 	bl	80180e0 <__ssputs_r>
 8018206:	3001      	adds	r0, #1
 8018208:	f000 80aa 	beq.w	8018360 <_svfiprintf_r+0x1c8>
 801820c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801820e:	445a      	add	r2, fp
 8018210:	9209      	str	r2, [sp, #36]	; 0x24
 8018212:	f89a 3000 	ldrb.w	r3, [sl]
 8018216:	2b00      	cmp	r3, #0
 8018218:	f000 80a2 	beq.w	8018360 <_svfiprintf_r+0x1c8>
 801821c:	2300      	movs	r3, #0
 801821e:	f04f 32ff 	mov.w	r2, #4294967295
 8018222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018226:	f10a 0a01 	add.w	sl, sl, #1
 801822a:	9304      	str	r3, [sp, #16]
 801822c:	9307      	str	r3, [sp, #28]
 801822e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018232:	931a      	str	r3, [sp, #104]	; 0x68
 8018234:	4654      	mov	r4, sl
 8018236:	2205      	movs	r2, #5
 8018238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801823c:	4851      	ldr	r0, [pc, #324]	; (8018384 <_svfiprintf_r+0x1ec>)
 801823e:	f7e7 ffff 	bl	8000240 <memchr>
 8018242:	9a04      	ldr	r2, [sp, #16]
 8018244:	b9d8      	cbnz	r0, 801827e <_svfiprintf_r+0xe6>
 8018246:	06d0      	lsls	r0, r2, #27
 8018248:	bf44      	itt	mi
 801824a:	2320      	movmi	r3, #32
 801824c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018250:	0711      	lsls	r1, r2, #28
 8018252:	bf44      	itt	mi
 8018254:	232b      	movmi	r3, #43	; 0x2b
 8018256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801825a:	f89a 3000 	ldrb.w	r3, [sl]
 801825e:	2b2a      	cmp	r3, #42	; 0x2a
 8018260:	d015      	beq.n	801828e <_svfiprintf_r+0xf6>
 8018262:	9a07      	ldr	r2, [sp, #28]
 8018264:	4654      	mov	r4, sl
 8018266:	2000      	movs	r0, #0
 8018268:	f04f 0c0a 	mov.w	ip, #10
 801826c:	4621      	mov	r1, r4
 801826e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018272:	3b30      	subs	r3, #48	; 0x30
 8018274:	2b09      	cmp	r3, #9
 8018276:	d94e      	bls.n	8018316 <_svfiprintf_r+0x17e>
 8018278:	b1b0      	cbz	r0, 80182a8 <_svfiprintf_r+0x110>
 801827a:	9207      	str	r2, [sp, #28]
 801827c:	e014      	b.n	80182a8 <_svfiprintf_r+0x110>
 801827e:	eba0 0308 	sub.w	r3, r0, r8
 8018282:	fa09 f303 	lsl.w	r3, r9, r3
 8018286:	4313      	orrs	r3, r2
 8018288:	9304      	str	r3, [sp, #16]
 801828a:	46a2      	mov	sl, r4
 801828c:	e7d2      	b.n	8018234 <_svfiprintf_r+0x9c>
 801828e:	9b03      	ldr	r3, [sp, #12]
 8018290:	1d19      	adds	r1, r3, #4
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	9103      	str	r1, [sp, #12]
 8018296:	2b00      	cmp	r3, #0
 8018298:	bfbb      	ittet	lt
 801829a:	425b      	neglt	r3, r3
 801829c:	f042 0202 	orrlt.w	r2, r2, #2
 80182a0:	9307      	strge	r3, [sp, #28]
 80182a2:	9307      	strlt	r3, [sp, #28]
 80182a4:	bfb8      	it	lt
 80182a6:	9204      	strlt	r2, [sp, #16]
 80182a8:	7823      	ldrb	r3, [r4, #0]
 80182aa:	2b2e      	cmp	r3, #46	; 0x2e
 80182ac:	d10c      	bne.n	80182c8 <_svfiprintf_r+0x130>
 80182ae:	7863      	ldrb	r3, [r4, #1]
 80182b0:	2b2a      	cmp	r3, #42	; 0x2a
 80182b2:	d135      	bne.n	8018320 <_svfiprintf_r+0x188>
 80182b4:	9b03      	ldr	r3, [sp, #12]
 80182b6:	1d1a      	adds	r2, r3, #4
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	9203      	str	r2, [sp, #12]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	bfb8      	it	lt
 80182c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80182c4:	3402      	adds	r4, #2
 80182c6:	9305      	str	r3, [sp, #20]
 80182c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018394 <_svfiprintf_r+0x1fc>
 80182cc:	7821      	ldrb	r1, [r4, #0]
 80182ce:	2203      	movs	r2, #3
 80182d0:	4650      	mov	r0, sl
 80182d2:	f7e7 ffb5 	bl	8000240 <memchr>
 80182d6:	b140      	cbz	r0, 80182ea <_svfiprintf_r+0x152>
 80182d8:	2340      	movs	r3, #64	; 0x40
 80182da:	eba0 000a 	sub.w	r0, r0, sl
 80182de:	fa03 f000 	lsl.w	r0, r3, r0
 80182e2:	9b04      	ldr	r3, [sp, #16]
 80182e4:	4303      	orrs	r3, r0
 80182e6:	3401      	adds	r4, #1
 80182e8:	9304      	str	r3, [sp, #16]
 80182ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182ee:	4826      	ldr	r0, [pc, #152]	; (8018388 <_svfiprintf_r+0x1f0>)
 80182f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182f4:	2206      	movs	r2, #6
 80182f6:	f7e7 ffa3 	bl	8000240 <memchr>
 80182fa:	2800      	cmp	r0, #0
 80182fc:	d038      	beq.n	8018370 <_svfiprintf_r+0x1d8>
 80182fe:	4b23      	ldr	r3, [pc, #140]	; (801838c <_svfiprintf_r+0x1f4>)
 8018300:	bb1b      	cbnz	r3, 801834a <_svfiprintf_r+0x1b2>
 8018302:	9b03      	ldr	r3, [sp, #12]
 8018304:	3307      	adds	r3, #7
 8018306:	f023 0307 	bic.w	r3, r3, #7
 801830a:	3308      	adds	r3, #8
 801830c:	9303      	str	r3, [sp, #12]
 801830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018310:	4433      	add	r3, r6
 8018312:	9309      	str	r3, [sp, #36]	; 0x24
 8018314:	e767      	b.n	80181e6 <_svfiprintf_r+0x4e>
 8018316:	fb0c 3202 	mla	r2, ip, r2, r3
 801831a:	460c      	mov	r4, r1
 801831c:	2001      	movs	r0, #1
 801831e:	e7a5      	b.n	801826c <_svfiprintf_r+0xd4>
 8018320:	2300      	movs	r3, #0
 8018322:	3401      	adds	r4, #1
 8018324:	9305      	str	r3, [sp, #20]
 8018326:	4619      	mov	r1, r3
 8018328:	f04f 0c0a 	mov.w	ip, #10
 801832c:	4620      	mov	r0, r4
 801832e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018332:	3a30      	subs	r2, #48	; 0x30
 8018334:	2a09      	cmp	r2, #9
 8018336:	d903      	bls.n	8018340 <_svfiprintf_r+0x1a8>
 8018338:	2b00      	cmp	r3, #0
 801833a:	d0c5      	beq.n	80182c8 <_svfiprintf_r+0x130>
 801833c:	9105      	str	r1, [sp, #20]
 801833e:	e7c3      	b.n	80182c8 <_svfiprintf_r+0x130>
 8018340:	fb0c 2101 	mla	r1, ip, r1, r2
 8018344:	4604      	mov	r4, r0
 8018346:	2301      	movs	r3, #1
 8018348:	e7f0      	b.n	801832c <_svfiprintf_r+0x194>
 801834a:	ab03      	add	r3, sp, #12
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	462a      	mov	r2, r5
 8018350:	4b0f      	ldr	r3, [pc, #60]	; (8018390 <_svfiprintf_r+0x1f8>)
 8018352:	a904      	add	r1, sp, #16
 8018354:	4638      	mov	r0, r7
 8018356:	f3af 8000 	nop.w
 801835a:	1c42      	adds	r2, r0, #1
 801835c:	4606      	mov	r6, r0
 801835e:	d1d6      	bne.n	801830e <_svfiprintf_r+0x176>
 8018360:	89ab      	ldrh	r3, [r5, #12]
 8018362:	065b      	lsls	r3, r3, #25
 8018364:	f53f af2c 	bmi.w	80181c0 <_svfiprintf_r+0x28>
 8018368:	9809      	ldr	r0, [sp, #36]	; 0x24
 801836a:	b01d      	add	sp, #116	; 0x74
 801836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018370:	ab03      	add	r3, sp, #12
 8018372:	9300      	str	r3, [sp, #0]
 8018374:	462a      	mov	r2, r5
 8018376:	4b06      	ldr	r3, [pc, #24]	; (8018390 <_svfiprintf_r+0x1f8>)
 8018378:	a904      	add	r1, sp, #16
 801837a:	4638      	mov	r0, r7
 801837c:	f000 f9d4 	bl	8018728 <_printf_i>
 8018380:	e7eb      	b.n	801835a <_svfiprintf_r+0x1c2>
 8018382:	bf00      	nop
 8018384:	0801c618 	.word	0x0801c618
 8018388:	0801c622 	.word	0x0801c622
 801838c:	00000000 	.word	0x00000000
 8018390:	080180e1 	.word	0x080180e1
 8018394:	0801c61e 	.word	0x0801c61e

08018398 <__sfputc_r>:
 8018398:	6893      	ldr	r3, [r2, #8]
 801839a:	3b01      	subs	r3, #1
 801839c:	2b00      	cmp	r3, #0
 801839e:	b410      	push	{r4}
 80183a0:	6093      	str	r3, [r2, #8]
 80183a2:	da08      	bge.n	80183b6 <__sfputc_r+0x1e>
 80183a4:	6994      	ldr	r4, [r2, #24]
 80183a6:	42a3      	cmp	r3, r4
 80183a8:	db01      	blt.n	80183ae <__sfputc_r+0x16>
 80183aa:	290a      	cmp	r1, #10
 80183ac:	d103      	bne.n	80183b6 <__sfputc_r+0x1e>
 80183ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183b2:	f000 bb33 	b.w	8018a1c <__swbuf_r>
 80183b6:	6813      	ldr	r3, [r2, #0]
 80183b8:	1c58      	adds	r0, r3, #1
 80183ba:	6010      	str	r0, [r2, #0]
 80183bc:	7019      	strb	r1, [r3, #0]
 80183be:	4608      	mov	r0, r1
 80183c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183c4:	4770      	bx	lr

080183c6 <__sfputs_r>:
 80183c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183c8:	4606      	mov	r6, r0
 80183ca:	460f      	mov	r7, r1
 80183cc:	4614      	mov	r4, r2
 80183ce:	18d5      	adds	r5, r2, r3
 80183d0:	42ac      	cmp	r4, r5
 80183d2:	d101      	bne.n	80183d8 <__sfputs_r+0x12>
 80183d4:	2000      	movs	r0, #0
 80183d6:	e007      	b.n	80183e8 <__sfputs_r+0x22>
 80183d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183dc:	463a      	mov	r2, r7
 80183de:	4630      	mov	r0, r6
 80183e0:	f7ff ffda 	bl	8018398 <__sfputc_r>
 80183e4:	1c43      	adds	r3, r0, #1
 80183e6:	d1f3      	bne.n	80183d0 <__sfputs_r+0xa>
 80183e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080183ec <_vfiprintf_r>:
 80183ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f0:	460d      	mov	r5, r1
 80183f2:	b09d      	sub	sp, #116	; 0x74
 80183f4:	4614      	mov	r4, r2
 80183f6:	4698      	mov	r8, r3
 80183f8:	4606      	mov	r6, r0
 80183fa:	b118      	cbz	r0, 8018404 <_vfiprintf_r+0x18>
 80183fc:	6983      	ldr	r3, [r0, #24]
 80183fe:	b90b      	cbnz	r3, 8018404 <_vfiprintf_r+0x18>
 8018400:	f7ff fca6 	bl	8017d50 <__sinit>
 8018404:	4b89      	ldr	r3, [pc, #548]	; (801862c <_vfiprintf_r+0x240>)
 8018406:	429d      	cmp	r5, r3
 8018408:	d11b      	bne.n	8018442 <_vfiprintf_r+0x56>
 801840a:	6875      	ldr	r5, [r6, #4]
 801840c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801840e:	07d9      	lsls	r1, r3, #31
 8018410:	d405      	bmi.n	801841e <_vfiprintf_r+0x32>
 8018412:	89ab      	ldrh	r3, [r5, #12]
 8018414:	059a      	lsls	r2, r3, #22
 8018416:	d402      	bmi.n	801841e <_vfiprintf_r+0x32>
 8018418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801841a:	f7ff fd49 	bl	8017eb0 <__retarget_lock_acquire_recursive>
 801841e:	89ab      	ldrh	r3, [r5, #12]
 8018420:	071b      	lsls	r3, r3, #28
 8018422:	d501      	bpl.n	8018428 <_vfiprintf_r+0x3c>
 8018424:	692b      	ldr	r3, [r5, #16]
 8018426:	b9eb      	cbnz	r3, 8018464 <_vfiprintf_r+0x78>
 8018428:	4629      	mov	r1, r5
 801842a:	4630      	mov	r0, r6
 801842c:	f000 fb5a 	bl	8018ae4 <__swsetup_r>
 8018430:	b1c0      	cbz	r0, 8018464 <_vfiprintf_r+0x78>
 8018432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018434:	07dc      	lsls	r4, r3, #31
 8018436:	d50e      	bpl.n	8018456 <_vfiprintf_r+0x6a>
 8018438:	f04f 30ff 	mov.w	r0, #4294967295
 801843c:	b01d      	add	sp, #116	; 0x74
 801843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018442:	4b7b      	ldr	r3, [pc, #492]	; (8018630 <_vfiprintf_r+0x244>)
 8018444:	429d      	cmp	r5, r3
 8018446:	d101      	bne.n	801844c <_vfiprintf_r+0x60>
 8018448:	68b5      	ldr	r5, [r6, #8]
 801844a:	e7df      	b.n	801840c <_vfiprintf_r+0x20>
 801844c:	4b79      	ldr	r3, [pc, #484]	; (8018634 <_vfiprintf_r+0x248>)
 801844e:	429d      	cmp	r5, r3
 8018450:	bf08      	it	eq
 8018452:	68f5      	ldreq	r5, [r6, #12]
 8018454:	e7da      	b.n	801840c <_vfiprintf_r+0x20>
 8018456:	89ab      	ldrh	r3, [r5, #12]
 8018458:	0598      	lsls	r0, r3, #22
 801845a:	d4ed      	bmi.n	8018438 <_vfiprintf_r+0x4c>
 801845c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801845e:	f7ff fd28 	bl	8017eb2 <__retarget_lock_release_recursive>
 8018462:	e7e9      	b.n	8018438 <_vfiprintf_r+0x4c>
 8018464:	2300      	movs	r3, #0
 8018466:	9309      	str	r3, [sp, #36]	; 0x24
 8018468:	2320      	movs	r3, #32
 801846a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801846e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018472:	2330      	movs	r3, #48	; 0x30
 8018474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018638 <_vfiprintf_r+0x24c>
 8018478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801847c:	f04f 0901 	mov.w	r9, #1
 8018480:	4623      	mov	r3, r4
 8018482:	469a      	mov	sl, r3
 8018484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018488:	b10a      	cbz	r2, 801848e <_vfiprintf_r+0xa2>
 801848a:	2a25      	cmp	r2, #37	; 0x25
 801848c:	d1f9      	bne.n	8018482 <_vfiprintf_r+0x96>
 801848e:	ebba 0b04 	subs.w	fp, sl, r4
 8018492:	d00b      	beq.n	80184ac <_vfiprintf_r+0xc0>
 8018494:	465b      	mov	r3, fp
 8018496:	4622      	mov	r2, r4
 8018498:	4629      	mov	r1, r5
 801849a:	4630      	mov	r0, r6
 801849c:	f7ff ff93 	bl	80183c6 <__sfputs_r>
 80184a0:	3001      	adds	r0, #1
 80184a2:	f000 80aa 	beq.w	80185fa <_vfiprintf_r+0x20e>
 80184a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184a8:	445a      	add	r2, fp
 80184aa:	9209      	str	r2, [sp, #36]	; 0x24
 80184ac:	f89a 3000 	ldrb.w	r3, [sl]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	f000 80a2 	beq.w	80185fa <_vfiprintf_r+0x20e>
 80184b6:	2300      	movs	r3, #0
 80184b8:	f04f 32ff 	mov.w	r2, #4294967295
 80184bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184c0:	f10a 0a01 	add.w	sl, sl, #1
 80184c4:	9304      	str	r3, [sp, #16]
 80184c6:	9307      	str	r3, [sp, #28]
 80184c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184cc:	931a      	str	r3, [sp, #104]	; 0x68
 80184ce:	4654      	mov	r4, sl
 80184d0:	2205      	movs	r2, #5
 80184d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184d6:	4858      	ldr	r0, [pc, #352]	; (8018638 <_vfiprintf_r+0x24c>)
 80184d8:	f7e7 feb2 	bl	8000240 <memchr>
 80184dc:	9a04      	ldr	r2, [sp, #16]
 80184de:	b9d8      	cbnz	r0, 8018518 <_vfiprintf_r+0x12c>
 80184e0:	06d1      	lsls	r1, r2, #27
 80184e2:	bf44      	itt	mi
 80184e4:	2320      	movmi	r3, #32
 80184e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184ea:	0713      	lsls	r3, r2, #28
 80184ec:	bf44      	itt	mi
 80184ee:	232b      	movmi	r3, #43	; 0x2b
 80184f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184f4:	f89a 3000 	ldrb.w	r3, [sl]
 80184f8:	2b2a      	cmp	r3, #42	; 0x2a
 80184fa:	d015      	beq.n	8018528 <_vfiprintf_r+0x13c>
 80184fc:	9a07      	ldr	r2, [sp, #28]
 80184fe:	4654      	mov	r4, sl
 8018500:	2000      	movs	r0, #0
 8018502:	f04f 0c0a 	mov.w	ip, #10
 8018506:	4621      	mov	r1, r4
 8018508:	f811 3b01 	ldrb.w	r3, [r1], #1
 801850c:	3b30      	subs	r3, #48	; 0x30
 801850e:	2b09      	cmp	r3, #9
 8018510:	d94e      	bls.n	80185b0 <_vfiprintf_r+0x1c4>
 8018512:	b1b0      	cbz	r0, 8018542 <_vfiprintf_r+0x156>
 8018514:	9207      	str	r2, [sp, #28]
 8018516:	e014      	b.n	8018542 <_vfiprintf_r+0x156>
 8018518:	eba0 0308 	sub.w	r3, r0, r8
 801851c:	fa09 f303 	lsl.w	r3, r9, r3
 8018520:	4313      	orrs	r3, r2
 8018522:	9304      	str	r3, [sp, #16]
 8018524:	46a2      	mov	sl, r4
 8018526:	e7d2      	b.n	80184ce <_vfiprintf_r+0xe2>
 8018528:	9b03      	ldr	r3, [sp, #12]
 801852a:	1d19      	adds	r1, r3, #4
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	9103      	str	r1, [sp, #12]
 8018530:	2b00      	cmp	r3, #0
 8018532:	bfbb      	ittet	lt
 8018534:	425b      	neglt	r3, r3
 8018536:	f042 0202 	orrlt.w	r2, r2, #2
 801853a:	9307      	strge	r3, [sp, #28]
 801853c:	9307      	strlt	r3, [sp, #28]
 801853e:	bfb8      	it	lt
 8018540:	9204      	strlt	r2, [sp, #16]
 8018542:	7823      	ldrb	r3, [r4, #0]
 8018544:	2b2e      	cmp	r3, #46	; 0x2e
 8018546:	d10c      	bne.n	8018562 <_vfiprintf_r+0x176>
 8018548:	7863      	ldrb	r3, [r4, #1]
 801854a:	2b2a      	cmp	r3, #42	; 0x2a
 801854c:	d135      	bne.n	80185ba <_vfiprintf_r+0x1ce>
 801854e:	9b03      	ldr	r3, [sp, #12]
 8018550:	1d1a      	adds	r2, r3, #4
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	9203      	str	r2, [sp, #12]
 8018556:	2b00      	cmp	r3, #0
 8018558:	bfb8      	it	lt
 801855a:	f04f 33ff 	movlt.w	r3, #4294967295
 801855e:	3402      	adds	r4, #2
 8018560:	9305      	str	r3, [sp, #20]
 8018562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018648 <_vfiprintf_r+0x25c>
 8018566:	7821      	ldrb	r1, [r4, #0]
 8018568:	2203      	movs	r2, #3
 801856a:	4650      	mov	r0, sl
 801856c:	f7e7 fe68 	bl	8000240 <memchr>
 8018570:	b140      	cbz	r0, 8018584 <_vfiprintf_r+0x198>
 8018572:	2340      	movs	r3, #64	; 0x40
 8018574:	eba0 000a 	sub.w	r0, r0, sl
 8018578:	fa03 f000 	lsl.w	r0, r3, r0
 801857c:	9b04      	ldr	r3, [sp, #16]
 801857e:	4303      	orrs	r3, r0
 8018580:	3401      	adds	r4, #1
 8018582:	9304      	str	r3, [sp, #16]
 8018584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018588:	482c      	ldr	r0, [pc, #176]	; (801863c <_vfiprintf_r+0x250>)
 801858a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801858e:	2206      	movs	r2, #6
 8018590:	f7e7 fe56 	bl	8000240 <memchr>
 8018594:	2800      	cmp	r0, #0
 8018596:	d03f      	beq.n	8018618 <_vfiprintf_r+0x22c>
 8018598:	4b29      	ldr	r3, [pc, #164]	; (8018640 <_vfiprintf_r+0x254>)
 801859a:	bb1b      	cbnz	r3, 80185e4 <_vfiprintf_r+0x1f8>
 801859c:	9b03      	ldr	r3, [sp, #12]
 801859e:	3307      	adds	r3, #7
 80185a0:	f023 0307 	bic.w	r3, r3, #7
 80185a4:	3308      	adds	r3, #8
 80185a6:	9303      	str	r3, [sp, #12]
 80185a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185aa:	443b      	add	r3, r7
 80185ac:	9309      	str	r3, [sp, #36]	; 0x24
 80185ae:	e767      	b.n	8018480 <_vfiprintf_r+0x94>
 80185b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80185b4:	460c      	mov	r4, r1
 80185b6:	2001      	movs	r0, #1
 80185b8:	e7a5      	b.n	8018506 <_vfiprintf_r+0x11a>
 80185ba:	2300      	movs	r3, #0
 80185bc:	3401      	adds	r4, #1
 80185be:	9305      	str	r3, [sp, #20]
 80185c0:	4619      	mov	r1, r3
 80185c2:	f04f 0c0a 	mov.w	ip, #10
 80185c6:	4620      	mov	r0, r4
 80185c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185cc:	3a30      	subs	r2, #48	; 0x30
 80185ce:	2a09      	cmp	r2, #9
 80185d0:	d903      	bls.n	80185da <_vfiprintf_r+0x1ee>
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d0c5      	beq.n	8018562 <_vfiprintf_r+0x176>
 80185d6:	9105      	str	r1, [sp, #20]
 80185d8:	e7c3      	b.n	8018562 <_vfiprintf_r+0x176>
 80185da:	fb0c 2101 	mla	r1, ip, r1, r2
 80185de:	4604      	mov	r4, r0
 80185e0:	2301      	movs	r3, #1
 80185e2:	e7f0      	b.n	80185c6 <_vfiprintf_r+0x1da>
 80185e4:	ab03      	add	r3, sp, #12
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	462a      	mov	r2, r5
 80185ea:	4b16      	ldr	r3, [pc, #88]	; (8018644 <_vfiprintf_r+0x258>)
 80185ec:	a904      	add	r1, sp, #16
 80185ee:	4630      	mov	r0, r6
 80185f0:	f3af 8000 	nop.w
 80185f4:	4607      	mov	r7, r0
 80185f6:	1c78      	adds	r0, r7, #1
 80185f8:	d1d6      	bne.n	80185a8 <_vfiprintf_r+0x1bc>
 80185fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185fc:	07d9      	lsls	r1, r3, #31
 80185fe:	d405      	bmi.n	801860c <_vfiprintf_r+0x220>
 8018600:	89ab      	ldrh	r3, [r5, #12]
 8018602:	059a      	lsls	r2, r3, #22
 8018604:	d402      	bmi.n	801860c <_vfiprintf_r+0x220>
 8018606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018608:	f7ff fc53 	bl	8017eb2 <__retarget_lock_release_recursive>
 801860c:	89ab      	ldrh	r3, [r5, #12]
 801860e:	065b      	lsls	r3, r3, #25
 8018610:	f53f af12 	bmi.w	8018438 <_vfiprintf_r+0x4c>
 8018614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018616:	e711      	b.n	801843c <_vfiprintf_r+0x50>
 8018618:	ab03      	add	r3, sp, #12
 801861a:	9300      	str	r3, [sp, #0]
 801861c:	462a      	mov	r2, r5
 801861e:	4b09      	ldr	r3, [pc, #36]	; (8018644 <_vfiprintf_r+0x258>)
 8018620:	a904      	add	r1, sp, #16
 8018622:	4630      	mov	r0, r6
 8018624:	f000 f880 	bl	8018728 <_printf_i>
 8018628:	e7e4      	b.n	80185f4 <_vfiprintf_r+0x208>
 801862a:	bf00      	nop
 801862c:	0801c5d8 	.word	0x0801c5d8
 8018630:	0801c5f8 	.word	0x0801c5f8
 8018634:	0801c5b8 	.word	0x0801c5b8
 8018638:	0801c618 	.word	0x0801c618
 801863c:	0801c622 	.word	0x0801c622
 8018640:	00000000 	.word	0x00000000
 8018644:	080183c7 	.word	0x080183c7
 8018648:	0801c61e 	.word	0x0801c61e

0801864c <_printf_common>:
 801864c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018650:	4616      	mov	r6, r2
 8018652:	4699      	mov	r9, r3
 8018654:	688a      	ldr	r2, [r1, #8]
 8018656:	690b      	ldr	r3, [r1, #16]
 8018658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801865c:	4293      	cmp	r3, r2
 801865e:	bfb8      	it	lt
 8018660:	4613      	movlt	r3, r2
 8018662:	6033      	str	r3, [r6, #0]
 8018664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018668:	4607      	mov	r7, r0
 801866a:	460c      	mov	r4, r1
 801866c:	b10a      	cbz	r2, 8018672 <_printf_common+0x26>
 801866e:	3301      	adds	r3, #1
 8018670:	6033      	str	r3, [r6, #0]
 8018672:	6823      	ldr	r3, [r4, #0]
 8018674:	0699      	lsls	r1, r3, #26
 8018676:	bf42      	ittt	mi
 8018678:	6833      	ldrmi	r3, [r6, #0]
 801867a:	3302      	addmi	r3, #2
 801867c:	6033      	strmi	r3, [r6, #0]
 801867e:	6825      	ldr	r5, [r4, #0]
 8018680:	f015 0506 	ands.w	r5, r5, #6
 8018684:	d106      	bne.n	8018694 <_printf_common+0x48>
 8018686:	f104 0a19 	add.w	sl, r4, #25
 801868a:	68e3      	ldr	r3, [r4, #12]
 801868c:	6832      	ldr	r2, [r6, #0]
 801868e:	1a9b      	subs	r3, r3, r2
 8018690:	42ab      	cmp	r3, r5
 8018692:	dc26      	bgt.n	80186e2 <_printf_common+0x96>
 8018694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018698:	1e13      	subs	r3, r2, #0
 801869a:	6822      	ldr	r2, [r4, #0]
 801869c:	bf18      	it	ne
 801869e:	2301      	movne	r3, #1
 80186a0:	0692      	lsls	r2, r2, #26
 80186a2:	d42b      	bmi.n	80186fc <_printf_common+0xb0>
 80186a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80186a8:	4649      	mov	r1, r9
 80186aa:	4638      	mov	r0, r7
 80186ac:	47c0      	blx	r8
 80186ae:	3001      	adds	r0, #1
 80186b0:	d01e      	beq.n	80186f0 <_printf_common+0xa4>
 80186b2:	6823      	ldr	r3, [r4, #0]
 80186b4:	68e5      	ldr	r5, [r4, #12]
 80186b6:	6832      	ldr	r2, [r6, #0]
 80186b8:	f003 0306 	and.w	r3, r3, #6
 80186bc:	2b04      	cmp	r3, #4
 80186be:	bf08      	it	eq
 80186c0:	1aad      	subeq	r5, r5, r2
 80186c2:	68a3      	ldr	r3, [r4, #8]
 80186c4:	6922      	ldr	r2, [r4, #16]
 80186c6:	bf0c      	ite	eq
 80186c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186cc:	2500      	movne	r5, #0
 80186ce:	4293      	cmp	r3, r2
 80186d0:	bfc4      	itt	gt
 80186d2:	1a9b      	subgt	r3, r3, r2
 80186d4:	18ed      	addgt	r5, r5, r3
 80186d6:	2600      	movs	r6, #0
 80186d8:	341a      	adds	r4, #26
 80186da:	42b5      	cmp	r5, r6
 80186dc:	d11a      	bne.n	8018714 <_printf_common+0xc8>
 80186de:	2000      	movs	r0, #0
 80186e0:	e008      	b.n	80186f4 <_printf_common+0xa8>
 80186e2:	2301      	movs	r3, #1
 80186e4:	4652      	mov	r2, sl
 80186e6:	4649      	mov	r1, r9
 80186e8:	4638      	mov	r0, r7
 80186ea:	47c0      	blx	r8
 80186ec:	3001      	adds	r0, #1
 80186ee:	d103      	bne.n	80186f8 <_printf_common+0xac>
 80186f0:	f04f 30ff 	mov.w	r0, #4294967295
 80186f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186f8:	3501      	adds	r5, #1
 80186fa:	e7c6      	b.n	801868a <_printf_common+0x3e>
 80186fc:	18e1      	adds	r1, r4, r3
 80186fe:	1c5a      	adds	r2, r3, #1
 8018700:	2030      	movs	r0, #48	; 0x30
 8018702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018706:	4422      	add	r2, r4
 8018708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801870c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018710:	3302      	adds	r3, #2
 8018712:	e7c7      	b.n	80186a4 <_printf_common+0x58>
 8018714:	2301      	movs	r3, #1
 8018716:	4622      	mov	r2, r4
 8018718:	4649      	mov	r1, r9
 801871a:	4638      	mov	r0, r7
 801871c:	47c0      	blx	r8
 801871e:	3001      	adds	r0, #1
 8018720:	d0e6      	beq.n	80186f0 <_printf_common+0xa4>
 8018722:	3601      	adds	r6, #1
 8018724:	e7d9      	b.n	80186da <_printf_common+0x8e>
	...

08018728 <_printf_i>:
 8018728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801872c:	460c      	mov	r4, r1
 801872e:	4691      	mov	r9, r2
 8018730:	7e27      	ldrb	r7, [r4, #24]
 8018732:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018734:	2f78      	cmp	r7, #120	; 0x78
 8018736:	4680      	mov	r8, r0
 8018738:	469a      	mov	sl, r3
 801873a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801873e:	d807      	bhi.n	8018750 <_printf_i+0x28>
 8018740:	2f62      	cmp	r7, #98	; 0x62
 8018742:	d80a      	bhi.n	801875a <_printf_i+0x32>
 8018744:	2f00      	cmp	r7, #0
 8018746:	f000 80d8 	beq.w	80188fa <_printf_i+0x1d2>
 801874a:	2f58      	cmp	r7, #88	; 0x58
 801874c:	f000 80a3 	beq.w	8018896 <_printf_i+0x16e>
 8018750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018758:	e03a      	b.n	80187d0 <_printf_i+0xa8>
 801875a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801875e:	2b15      	cmp	r3, #21
 8018760:	d8f6      	bhi.n	8018750 <_printf_i+0x28>
 8018762:	a001      	add	r0, pc, #4	; (adr r0, 8018768 <_printf_i+0x40>)
 8018764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018768:	080187c1 	.word	0x080187c1
 801876c:	080187d5 	.word	0x080187d5
 8018770:	08018751 	.word	0x08018751
 8018774:	08018751 	.word	0x08018751
 8018778:	08018751 	.word	0x08018751
 801877c:	08018751 	.word	0x08018751
 8018780:	080187d5 	.word	0x080187d5
 8018784:	08018751 	.word	0x08018751
 8018788:	08018751 	.word	0x08018751
 801878c:	08018751 	.word	0x08018751
 8018790:	08018751 	.word	0x08018751
 8018794:	080188e1 	.word	0x080188e1
 8018798:	08018805 	.word	0x08018805
 801879c:	080188c3 	.word	0x080188c3
 80187a0:	08018751 	.word	0x08018751
 80187a4:	08018751 	.word	0x08018751
 80187a8:	08018903 	.word	0x08018903
 80187ac:	08018751 	.word	0x08018751
 80187b0:	08018805 	.word	0x08018805
 80187b4:	08018751 	.word	0x08018751
 80187b8:	08018751 	.word	0x08018751
 80187bc:	080188cb 	.word	0x080188cb
 80187c0:	680b      	ldr	r3, [r1, #0]
 80187c2:	1d1a      	adds	r2, r3, #4
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	600a      	str	r2, [r1, #0]
 80187c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80187cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187d0:	2301      	movs	r3, #1
 80187d2:	e0a3      	b.n	801891c <_printf_i+0x1f4>
 80187d4:	6825      	ldr	r5, [r4, #0]
 80187d6:	6808      	ldr	r0, [r1, #0]
 80187d8:	062e      	lsls	r6, r5, #24
 80187da:	f100 0304 	add.w	r3, r0, #4
 80187de:	d50a      	bpl.n	80187f6 <_printf_i+0xce>
 80187e0:	6805      	ldr	r5, [r0, #0]
 80187e2:	600b      	str	r3, [r1, #0]
 80187e4:	2d00      	cmp	r5, #0
 80187e6:	da03      	bge.n	80187f0 <_printf_i+0xc8>
 80187e8:	232d      	movs	r3, #45	; 0x2d
 80187ea:	426d      	negs	r5, r5
 80187ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187f0:	485e      	ldr	r0, [pc, #376]	; (801896c <_printf_i+0x244>)
 80187f2:	230a      	movs	r3, #10
 80187f4:	e019      	b.n	801882a <_printf_i+0x102>
 80187f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80187fa:	6805      	ldr	r5, [r0, #0]
 80187fc:	600b      	str	r3, [r1, #0]
 80187fe:	bf18      	it	ne
 8018800:	b22d      	sxthne	r5, r5
 8018802:	e7ef      	b.n	80187e4 <_printf_i+0xbc>
 8018804:	680b      	ldr	r3, [r1, #0]
 8018806:	6825      	ldr	r5, [r4, #0]
 8018808:	1d18      	adds	r0, r3, #4
 801880a:	6008      	str	r0, [r1, #0]
 801880c:	0628      	lsls	r0, r5, #24
 801880e:	d501      	bpl.n	8018814 <_printf_i+0xec>
 8018810:	681d      	ldr	r5, [r3, #0]
 8018812:	e002      	b.n	801881a <_printf_i+0xf2>
 8018814:	0669      	lsls	r1, r5, #25
 8018816:	d5fb      	bpl.n	8018810 <_printf_i+0xe8>
 8018818:	881d      	ldrh	r5, [r3, #0]
 801881a:	4854      	ldr	r0, [pc, #336]	; (801896c <_printf_i+0x244>)
 801881c:	2f6f      	cmp	r7, #111	; 0x6f
 801881e:	bf0c      	ite	eq
 8018820:	2308      	moveq	r3, #8
 8018822:	230a      	movne	r3, #10
 8018824:	2100      	movs	r1, #0
 8018826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801882a:	6866      	ldr	r6, [r4, #4]
 801882c:	60a6      	str	r6, [r4, #8]
 801882e:	2e00      	cmp	r6, #0
 8018830:	bfa2      	ittt	ge
 8018832:	6821      	ldrge	r1, [r4, #0]
 8018834:	f021 0104 	bicge.w	r1, r1, #4
 8018838:	6021      	strge	r1, [r4, #0]
 801883a:	b90d      	cbnz	r5, 8018840 <_printf_i+0x118>
 801883c:	2e00      	cmp	r6, #0
 801883e:	d04d      	beq.n	80188dc <_printf_i+0x1b4>
 8018840:	4616      	mov	r6, r2
 8018842:	fbb5 f1f3 	udiv	r1, r5, r3
 8018846:	fb03 5711 	mls	r7, r3, r1, r5
 801884a:	5dc7      	ldrb	r7, [r0, r7]
 801884c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018850:	462f      	mov	r7, r5
 8018852:	42bb      	cmp	r3, r7
 8018854:	460d      	mov	r5, r1
 8018856:	d9f4      	bls.n	8018842 <_printf_i+0x11a>
 8018858:	2b08      	cmp	r3, #8
 801885a:	d10b      	bne.n	8018874 <_printf_i+0x14c>
 801885c:	6823      	ldr	r3, [r4, #0]
 801885e:	07df      	lsls	r7, r3, #31
 8018860:	d508      	bpl.n	8018874 <_printf_i+0x14c>
 8018862:	6923      	ldr	r3, [r4, #16]
 8018864:	6861      	ldr	r1, [r4, #4]
 8018866:	4299      	cmp	r1, r3
 8018868:	bfde      	ittt	le
 801886a:	2330      	movle	r3, #48	; 0x30
 801886c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018870:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018874:	1b92      	subs	r2, r2, r6
 8018876:	6122      	str	r2, [r4, #16]
 8018878:	f8cd a000 	str.w	sl, [sp]
 801887c:	464b      	mov	r3, r9
 801887e:	aa03      	add	r2, sp, #12
 8018880:	4621      	mov	r1, r4
 8018882:	4640      	mov	r0, r8
 8018884:	f7ff fee2 	bl	801864c <_printf_common>
 8018888:	3001      	adds	r0, #1
 801888a:	d14c      	bne.n	8018926 <_printf_i+0x1fe>
 801888c:	f04f 30ff 	mov.w	r0, #4294967295
 8018890:	b004      	add	sp, #16
 8018892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018896:	4835      	ldr	r0, [pc, #212]	; (801896c <_printf_i+0x244>)
 8018898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801889c:	6823      	ldr	r3, [r4, #0]
 801889e:	680e      	ldr	r6, [r1, #0]
 80188a0:	061f      	lsls	r7, r3, #24
 80188a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80188a6:	600e      	str	r6, [r1, #0]
 80188a8:	d514      	bpl.n	80188d4 <_printf_i+0x1ac>
 80188aa:	07d9      	lsls	r1, r3, #31
 80188ac:	bf44      	itt	mi
 80188ae:	f043 0320 	orrmi.w	r3, r3, #32
 80188b2:	6023      	strmi	r3, [r4, #0]
 80188b4:	b91d      	cbnz	r5, 80188be <_printf_i+0x196>
 80188b6:	6823      	ldr	r3, [r4, #0]
 80188b8:	f023 0320 	bic.w	r3, r3, #32
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	2310      	movs	r3, #16
 80188c0:	e7b0      	b.n	8018824 <_printf_i+0xfc>
 80188c2:	6823      	ldr	r3, [r4, #0]
 80188c4:	f043 0320 	orr.w	r3, r3, #32
 80188c8:	6023      	str	r3, [r4, #0]
 80188ca:	2378      	movs	r3, #120	; 0x78
 80188cc:	4828      	ldr	r0, [pc, #160]	; (8018970 <_printf_i+0x248>)
 80188ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80188d2:	e7e3      	b.n	801889c <_printf_i+0x174>
 80188d4:	065e      	lsls	r6, r3, #25
 80188d6:	bf48      	it	mi
 80188d8:	b2ad      	uxthmi	r5, r5
 80188da:	e7e6      	b.n	80188aa <_printf_i+0x182>
 80188dc:	4616      	mov	r6, r2
 80188de:	e7bb      	b.n	8018858 <_printf_i+0x130>
 80188e0:	680b      	ldr	r3, [r1, #0]
 80188e2:	6826      	ldr	r6, [r4, #0]
 80188e4:	6960      	ldr	r0, [r4, #20]
 80188e6:	1d1d      	adds	r5, r3, #4
 80188e8:	600d      	str	r5, [r1, #0]
 80188ea:	0635      	lsls	r5, r6, #24
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	d501      	bpl.n	80188f4 <_printf_i+0x1cc>
 80188f0:	6018      	str	r0, [r3, #0]
 80188f2:	e002      	b.n	80188fa <_printf_i+0x1d2>
 80188f4:	0671      	lsls	r1, r6, #25
 80188f6:	d5fb      	bpl.n	80188f0 <_printf_i+0x1c8>
 80188f8:	8018      	strh	r0, [r3, #0]
 80188fa:	2300      	movs	r3, #0
 80188fc:	6123      	str	r3, [r4, #16]
 80188fe:	4616      	mov	r6, r2
 8018900:	e7ba      	b.n	8018878 <_printf_i+0x150>
 8018902:	680b      	ldr	r3, [r1, #0]
 8018904:	1d1a      	adds	r2, r3, #4
 8018906:	600a      	str	r2, [r1, #0]
 8018908:	681e      	ldr	r6, [r3, #0]
 801890a:	6862      	ldr	r2, [r4, #4]
 801890c:	2100      	movs	r1, #0
 801890e:	4630      	mov	r0, r6
 8018910:	f7e7 fc96 	bl	8000240 <memchr>
 8018914:	b108      	cbz	r0, 801891a <_printf_i+0x1f2>
 8018916:	1b80      	subs	r0, r0, r6
 8018918:	6060      	str	r0, [r4, #4]
 801891a:	6863      	ldr	r3, [r4, #4]
 801891c:	6123      	str	r3, [r4, #16]
 801891e:	2300      	movs	r3, #0
 8018920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018924:	e7a8      	b.n	8018878 <_printf_i+0x150>
 8018926:	6923      	ldr	r3, [r4, #16]
 8018928:	4632      	mov	r2, r6
 801892a:	4649      	mov	r1, r9
 801892c:	4640      	mov	r0, r8
 801892e:	47d0      	blx	sl
 8018930:	3001      	adds	r0, #1
 8018932:	d0ab      	beq.n	801888c <_printf_i+0x164>
 8018934:	6823      	ldr	r3, [r4, #0]
 8018936:	079b      	lsls	r3, r3, #30
 8018938:	d413      	bmi.n	8018962 <_printf_i+0x23a>
 801893a:	68e0      	ldr	r0, [r4, #12]
 801893c:	9b03      	ldr	r3, [sp, #12]
 801893e:	4298      	cmp	r0, r3
 8018940:	bfb8      	it	lt
 8018942:	4618      	movlt	r0, r3
 8018944:	e7a4      	b.n	8018890 <_printf_i+0x168>
 8018946:	2301      	movs	r3, #1
 8018948:	4632      	mov	r2, r6
 801894a:	4649      	mov	r1, r9
 801894c:	4640      	mov	r0, r8
 801894e:	47d0      	blx	sl
 8018950:	3001      	adds	r0, #1
 8018952:	d09b      	beq.n	801888c <_printf_i+0x164>
 8018954:	3501      	adds	r5, #1
 8018956:	68e3      	ldr	r3, [r4, #12]
 8018958:	9903      	ldr	r1, [sp, #12]
 801895a:	1a5b      	subs	r3, r3, r1
 801895c:	42ab      	cmp	r3, r5
 801895e:	dcf2      	bgt.n	8018946 <_printf_i+0x21e>
 8018960:	e7eb      	b.n	801893a <_printf_i+0x212>
 8018962:	2500      	movs	r5, #0
 8018964:	f104 0619 	add.w	r6, r4, #25
 8018968:	e7f5      	b.n	8018956 <_printf_i+0x22e>
 801896a:	bf00      	nop
 801896c:	0801c629 	.word	0x0801c629
 8018970:	0801c63a 	.word	0x0801c63a

08018974 <_sbrk_r>:
 8018974:	b538      	push	{r3, r4, r5, lr}
 8018976:	4d06      	ldr	r5, [pc, #24]	; (8018990 <_sbrk_r+0x1c>)
 8018978:	2300      	movs	r3, #0
 801897a:	4604      	mov	r4, r0
 801897c:	4608      	mov	r0, r1
 801897e:	602b      	str	r3, [r5, #0]
 8018980:	f7e8 fb9c 	bl	80010bc <_sbrk>
 8018984:	1c43      	adds	r3, r0, #1
 8018986:	d102      	bne.n	801898e <_sbrk_r+0x1a>
 8018988:	682b      	ldr	r3, [r5, #0]
 801898a:	b103      	cbz	r3, 801898e <_sbrk_r+0x1a>
 801898c:	6023      	str	r3, [r4, #0]
 801898e:	bd38      	pop	{r3, r4, r5, pc}
 8018990:	2000bd48 	.word	0x2000bd48

08018994 <__sread>:
 8018994:	b510      	push	{r4, lr}
 8018996:	460c      	mov	r4, r1
 8018998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801899c:	f000 f98e 	bl	8018cbc <_read_r>
 80189a0:	2800      	cmp	r0, #0
 80189a2:	bfab      	itete	ge
 80189a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80189a6:	89a3      	ldrhlt	r3, [r4, #12]
 80189a8:	181b      	addge	r3, r3, r0
 80189aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80189ae:	bfac      	ite	ge
 80189b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80189b2:	81a3      	strhlt	r3, [r4, #12]
 80189b4:	bd10      	pop	{r4, pc}

080189b6 <__swrite>:
 80189b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189ba:	461f      	mov	r7, r3
 80189bc:	898b      	ldrh	r3, [r1, #12]
 80189be:	05db      	lsls	r3, r3, #23
 80189c0:	4605      	mov	r5, r0
 80189c2:	460c      	mov	r4, r1
 80189c4:	4616      	mov	r6, r2
 80189c6:	d505      	bpl.n	80189d4 <__swrite+0x1e>
 80189c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189cc:	2302      	movs	r3, #2
 80189ce:	2200      	movs	r2, #0
 80189d0:	f000 f930 	bl	8018c34 <_lseek_r>
 80189d4:	89a3      	ldrh	r3, [r4, #12]
 80189d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80189de:	81a3      	strh	r3, [r4, #12]
 80189e0:	4632      	mov	r2, r6
 80189e2:	463b      	mov	r3, r7
 80189e4:	4628      	mov	r0, r5
 80189e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189ea:	f000 b869 	b.w	8018ac0 <_write_r>

080189ee <__sseek>:
 80189ee:	b510      	push	{r4, lr}
 80189f0:	460c      	mov	r4, r1
 80189f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189f6:	f000 f91d 	bl	8018c34 <_lseek_r>
 80189fa:	1c43      	adds	r3, r0, #1
 80189fc:	89a3      	ldrh	r3, [r4, #12]
 80189fe:	bf15      	itete	ne
 8018a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8018a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018a0a:	81a3      	strheq	r3, [r4, #12]
 8018a0c:	bf18      	it	ne
 8018a0e:	81a3      	strhne	r3, [r4, #12]
 8018a10:	bd10      	pop	{r4, pc}

08018a12 <__sclose>:
 8018a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a16:	f000 b8db 	b.w	8018bd0 <_close_r>
	...

08018a1c <__swbuf_r>:
 8018a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a1e:	460e      	mov	r6, r1
 8018a20:	4614      	mov	r4, r2
 8018a22:	4605      	mov	r5, r0
 8018a24:	b118      	cbz	r0, 8018a2e <__swbuf_r+0x12>
 8018a26:	6983      	ldr	r3, [r0, #24]
 8018a28:	b90b      	cbnz	r3, 8018a2e <__swbuf_r+0x12>
 8018a2a:	f7ff f991 	bl	8017d50 <__sinit>
 8018a2e:	4b21      	ldr	r3, [pc, #132]	; (8018ab4 <__swbuf_r+0x98>)
 8018a30:	429c      	cmp	r4, r3
 8018a32:	d12b      	bne.n	8018a8c <__swbuf_r+0x70>
 8018a34:	686c      	ldr	r4, [r5, #4]
 8018a36:	69a3      	ldr	r3, [r4, #24]
 8018a38:	60a3      	str	r3, [r4, #8]
 8018a3a:	89a3      	ldrh	r3, [r4, #12]
 8018a3c:	071a      	lsls	r2, r3, #28
 8018a3e:	d52f      	bpl.n	8018aa0 <__swbuf_r+0x84>
 8018a40:	6923      	ldr	r3, [r4, #16]
 8018a42:	b36b      	cbz	r3, 8018aa0 <__swbuf_r+0x84>
 8018a44:	6923      	ldr	r3, [r4, #16]
 8018a46:	6820      	ldr	r0, [r4, #0]
 8018a48:	1ac0      	subs	r0, r0, r3
 8018a4a:	6963      	ldr	r3, [r4, #20]
 8018a4c:	b2f6      	uxtb	r6, r6
 8018a4e:	4283      	cmp	r3, r0
 8018a50:	4637      	mov	r7, r6
 8018a52:	dc04      	bgt.n	8018a5e <__swbuf_r+0x42>
 8018a54:	4621      	mov	r1, r4
 8018a56:	4628      	mov	r0, r5
 8018a58:	f7ff f8e6 	bl	8017c28 <_fflush_r>
 8018a5c:	bb30      	cbnz	r0, 8018aac <__swbuf_r+0x90>
 8018a5e:	68a3      	ldr	r3, [r4, #8]
 8018a60:	3b01      	subs	r3, #1
 8018a62:	60a3      	str	r3, [r4, #8]
 8018a64:	6823      	ldr	r3, [r4, #0]
 8018a66:	1c5a      	adds	r2, r3, #1
 8018a68:	6022      	str	r2, [r4, #0]
 8018a6a:	701e      	strb	r6, [r3, #0]
 8018a6c:	6963      	ldr	r3, [r4, #20]
 8018a6e:	3001      	adds	r0, #1
 8018a70:	4283      	cmp	r3, r0
 8018a72:	d004      	beq.n	8018a7e <__swbuf_r+0x62>
 8018a74:	89a3      	ldrh	r3, [r4, #12]
 8018a76:	07db      	lsls	r3, r3, #31
 8018a78:	d506      	bpl.n	8018a88 <__swbuf_r+0x6c>
 8018a7a:	2e0a      	cmp	r6, #10
 8018a7c:	d104      	bne.n	8018a88 <__swbuf_r+0x6c>
 8018a7e:	4621      	mov	r1, r4
 8018a80:	4628      	mov	r0, r5
 8018a82:	f7ff f8d1 	bl	8017c28 <_fflush_r>
 8018a86:	b988      	cbnz	r0, 8018aac <__swbuf_r+0x90>
 8018a88:	4638      	mov	r0, r7
 8018a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a8c:	4b0a      	ldr	r3, [pc, #40]	; (8018ab8 <__swbuf_r+0x9c>)
 8018a8e:	429c      	cmp	r4, r3
 8018a90:	d101      	bne.n	8018a96 <__swbuf_r+0x7a>
 8018a92:	68ac      	ldr	r4, [r5, #8]
 8018a94:	e7cf      	b.n	8018a36 <__swbuf_r+0x1a>
 8018a96:	4b09      	ldr	r3, [pc, #36]	; (8018abc <__swbuf_r+0xa0>)
 8018a98:	429c      	cmp	r4, r3
 8018a9a:	bf08      	it	eq
 8018a9c:	68ec      	ldreq	r4, [r5, #12]
 8018a9e:	e7ca      	b.n	8018a36 <__swbuf_r+0x1a>
 8018aa0:	4621      	mov	r1, r4
 8018aa2:	4628      	mov	r0, r5
 8018aa4:	f000 f81e 	bl	8018ae4 <__swsetup_r>
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	d0cb      	beq.n	8018a44 <__swbuf_r+0x28>
 8018aac:	f04f 37ff 	mov.w	r7, #4294967295
 8018ab0:	e7ea      	b.n	8018a88 <__swbuf_r+0x6c>
 8018ab2:	bf00      	nop
 8018ab4:	0801c5d8 	.word	0x0801c5d8
 8018ab8:	0801c5f8 	.word	0x0801c5f8
 8018abc:	0801c5b8 	.word	0x0801c5b8

08018ac0 <_write_r>:
 8018ac0:	b538      	push	{r3, r4, r5, lr}
 8018ac2:	4d07      	ldr	r5, [pc, #28]	; (8018ae0 <_write_r+0x20>)
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	4608      	mov	r0, r1
 8018ac8:	4611      	mov	r1, r2
 8018aca:	2200      	movs	r2, #0
 8018acc:	602a      	str	r2, [r5, #0]
 8018ace:	461a      	mov	r2, r3
 8018ad0:	f7e8 f90a 	bl	8000ce8 <_write>
 8018ad4:	1c43      	adds	r3, r0, #1
 8018ad6:	d102      	bne.n	8018ade <_write_r+0x1e>
 8018ad8:	682b      	ldr	r3, [r5, #0]
 8018ada:	b103      	cbz	r3, 8018ade <_write_r+0x1e>
 8018adc:	6023      	str	r3, [r4, #0]
 8018ade:	bd38      	pop	{r3, r4, r5, pc}
 8018ae0:	2000bd48 	.word	0x2000bd48

08018ae4 <__swsetup_r>:
 8018ae4:	4b32      	ldr	r3, [pc, #200]	; (8018bb0 <__swsetup_r+0xcc>)
 8018ae6:	b570      	push	{r4, r5, r6, lr}
 8018ae8:	681d      	ldr	r5, [r3, #0]
 8018aea:	4606      	mov	r6, r0
 8018aec:	460c      	mov	r4, r1
 8018aee:	b125      	cbz	r5, 8018afa <__swsetup_r+0x16>
 8018af0:	69ab      	ldr	r3, [r5, #24]
 8018af2:	b913      	cbnz	r3, 8018afa <__swsetup_r+0x16>
 8018af4:	4628      	mov	r0, r5
 8018af6:	f7ff f92b 	bl	8017d50 <__sinit>
 8018afa:	4b2e      	ldr	r3, [pc, #184]	; (8018bb4 <__swsetup_r+0xd0>)
 8018afc:	429c      	cmp	r4, r3
 8018afe:	d10f      	bne.n	8018b20 <__swsetup_r+0x3c>
 8018b00:	686c      	ldr	r4, [r5, #4]
 8018b02:	89a3      	ldrh	r3, [r4, #12]
 8018b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b08:	0719      	lsls	r1, r3, #28
 8018b0a:	d42c      	bmi.n	8018b66 <__swsetup_r+0x82>
 8018b0c:	06dd      	lsls	r5, r3, #27
 8018b0e:	d411      	bmi.n	8018b34 <__swsetup_r+0x50>
 8018b10:	2309      	movs	r3, #9
 8018b12:	6033      	str	r3, [r6, #0]
 8018b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018b18:	81a3      	strh	r3, [r4, #12]
 8018b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8018b1e:	e03e      	b.n	8018b9e <__swsetup_r+0xba>
 8018b20:	4b25      	ldr	r3, [pc, #148]	; (8018bb8 <__swsetup_r+0xd4>)
 8018b22:	429c      	cmp	r4, r3
 8018b24:	d101      	bne.n	8018b2a <__swsetup_r+0x46>
 8018b26:	68ac      	ldr	r4, [r5, #8]
 8018b28:	e7eb      	b.n	8018b02 <__swsetup_r+0x1e>
 8018b2a:	4b24      	ldr	r3, [pc, #144]	; (8018bbc <__swsetup_r+0xd8>)
 8018b2c:	429c      	cmp	r4, r3
 8018b2e:	bf08      	it	eq
 8018b30:	68ec      	ldreq	r4, [r5, #12]
 8018b32:	e7e6      	b.n	8018b02 <__swsetup_r+0x1e>
 8018b34:	0758      	lsls	r0, r3, #29
 8018b36:	d512      	bpl.n	8018b5e <__swsetup_r+0x7a>
 8018b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b3a:	b141      	cbz	r1, 8018b4e <__swsetup_r+0x6a>
 8018b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b40:	4299      	cmp	r1, r3
 8018b42:	d002      	beq.n	8018b4a <__swsetup_r+0x66>
 8018b44:	4630      	mov	r0, r6
 8018b46:	f7ff fa21 	bl	8017f8c <_free_r>
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8018b4e:	89a3      	ldrh	r3, [r4, #12]
 8018b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b54:	81a3      	strh	r3, [r4, #12]
 8018b56:	2300      	movs	r3, #0
 8018b58:	6063      	str	r3, [r4, #4]
 8018b5a:	6923      	ldr	r3, [r4, #16]
 8018b5c:	6023      	str	r3, [r4, #0]
 8018b5e:	89a3      	ldrh	r3, [r4, #12]
 8018b60:	f043 0308 	orr.w	r3, r3, #8
 8018b64:	81a3      	strh	r3, [r4, #12]
 8018b66:	6923      	ldr	r3, [r4, #16]
 8018b68:	b94b      	cbnz	r3, 8018b7e <__swsetup_r+0x9a>
 8018b6a:	89a3      	ldrh	r3, [r4, #12]
 8018b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b74:	d003      	beq.n	8018b7e <__swsetup_r+0x9a>
 8018b76:	4621      	mov	r1, r4
 8018b78:	4630      	mov	r0, r6
 8018b7a:	f7ff f9bf 	bl	8017efc <__smakebuf_r>
 8018b7e:	89a0      	ldrh	r0, [r4, #12]
 8018b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b84:	f010 0301 	ands.w	r3, r0, #1
 8018b88:	d00a      	beq.n	8018ba0 <__swsetup_r+0xbc>
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	60a3      	str	r3, [r4, #8]
 8018b8e:	6963      	ldr	r3, [r4, #20]
 8018b90:	425b      	negs	r3, r3
 8018b92:	61a3      	str	r3, [r4, #24]
 8018b94:	6923      	ldr	r3, [r4, #16]
 8018b96:	b943      	cbnz	r3, 8018baa <__swsetup_r+0xc6>
 8018b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b9c:	d1ba      	bne.n	8018b14 <__swsetup_r+0x30>
 8018b9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ba0:	0781      	lsls	r1, r0, #30
 8018ba2:	bf58      	it	pl
 8018ba4:	6963      	ldrpl	r3, [r4, #20]
 8018ba6:	60a3      	str	r3, [r4, #8]
 8018ba8:	e7f4      	b.n	8018b94 <__swsetup_r+0xb0>
 8018baa:	2000      	movs	r0, #0
 8018bac:	e7f7      	b.n	8018b9e <__swsetup_r+0xba>
 8018bae:	bf00      	nop
 8018bb0:	2000001c 	.word	0x2000001c
 8018bb4:	0801c5d8 	.word	0x0801c5d8
 8018bb8:	0801c5f8 	.word	0x0801c5f8
 8018bbc:	0801c5b8 	.word	0x0801c5b8

08018bc0 <abort>:
 8018bc0:	b508      	push	{r3, lr}
 8018bc2:	2006      	movs	r0, #6
 8018bc4:	f000 f8b4 	bl	8018d30 <raise>
 8018bc8:	2001      	movs	r0, #1
 8018bca:	f000 f8e5 	bl	8018d98 <_exit>
	...

08018bd0 <_close_r>:
 8018bd0:	b538      	push	{r3, r4, r5, lr}
 8018bd2:	4d06      	ldr	r5, [pc, #24]	; (8018bec <_close_r+0x1c>)
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	4608      	mov	r0, r1
 8018bda:	602b      	str	r3, [r5, #0]
 8018bdc:	f7e8 f8b0 	bl	8000d40 <_close>
 8018be0:	1c43      	adds	r3, r0, #1
 8018be2:	d102      	bne.n	8018bea <_close_r+0x1a>
 8018be4:	682b      	ldr	r3, [r5, #0]
 8018be6:	b103      	cbz	r3, 8018bea <_close_r+0x1a>
 8018be8:	6023      	str	r3, [r4, #0]
 8018bea:	bd38      	pop	{r3, r4, r5, pc}
 8018bec:	2000bd48 	.word	0x2000bd48

08018bf0 <_fstat_r>:
 8018bf0:	b538      	push	{r3, r4, r5, lr}
 8018bf2:	4d07      	ldr	r5, [pc, #28]	; (8018c10 <_fstat_r+0x20>)
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	4608      	mov	r0, r1
 8018bfa:	4611      	mov	r1, r2
 8018bfc:	602b      	str	r3, [r5, #0]
 8018bfe:	f7e8 f8f5 	bl	8000dec <_fstat>
 8018c02:	1c43      	adds	r3, r0, #1
 8018c04:	d102      	bne.n	8018c0c <_fstat_r+0x1c>
 8018c06:	682b      	ldr	r3, [r5, #0]
 8018c08:	b103      	cbz	r3, 8018c0c <_fstat_r+0x1c>
 8018c0a:	6023      	str	r3, [r4, #0]
 8018c0c:	bd38      	pop	{r3, r4, r5, pc}
 8018c0e:	bf00      	nop
 8018c10:	2000bd48 	.word	0x2000bd48

08018c14 <_isatty_r>:
 8018c14:	b538      	push	{r3, r4, r5, lr}
 8018c16:	4d06      	ldr	r5, [pc, #24]	; (8018c30 <_isatty_r+0x1c>)
 8018c18:	2300      	movs	r3, #0
 8018c1a:	4604      	mov	r4, r0
 8018c1c:	4608      	mov	r0, r1
 8018c1e:	602b      	str	r3, [r5, #0]
 8018c20:	f7e8 f84a 	bl	8000cb8 <_isatty>
 8018c24:	1c43      	adds	r3, r0, #1
 8018c26:	d102      	bne.n	8018c2e <_isatty_r+0x1a>
 8018c28:	682b      	ldr	r3, [r5, #0]
 8018c2a:	b103      	cbz	r3, 8018c2e <_isatty_r+0x1a>
 8018c2c:	6023      	str	r3, [r4, #0]
 8018c2e:	bd38      	pop	{r3, r4, r5, pc}
 8018c30:	2000bd48 	.word	0x2000bd48

08018c34 <_lseek_r>:
 8018c34:	b538      	push	{r3, r4, r5, lr}
 8018c36:	4d07      	ldr	r5, [pc, #28]	; (8018c54 <_lseek_r+0x20>)
 8018c38:	4604      	mov	r4, r0
 8018c3a:	4608      	mov	r0, r1
 8018c3c:	4611      	mov	r1, r2
 8018c3e:	2200      	movs	r2, #0
 8018c40:	602a      	str	r2, [r5, #0]
 8018c42:	461a      	mov	r2, r3
 8018c44:	f7e8 f896 	bl	8000d74 <_lseek>
 8018c48:	1c43      	adds	r3, r0, #1
 8018c4a:	d102      	bne.n	8018c52 <_lseek_r+0x1e>
 8018c4c:	682b      	ldr	r3, [r5, #0]
 8018c4e:	b103      	cbz	r3, 8018c52 <_lseek_r+0x1e>
 8018c50:	6023      	str	r3, [r4, #0]
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
 8018c54:	2000bd48 	.word	0x2000bd48

08018c58 <__malloc_lock>:
 8018c58:	4801      	ldr	r0, [pc, #4]	; (8018c60 <__malloc_lock+0x8>)
 8018c5a:	f7ff b929 	b.w	8017eb0 <__retarget_lock_acquire_recursive>
 8018c5e:	bf00      	nop
 8018c60:	2000bd54 	.word	0x2000bd54

08018c64 <__malloc_unlock>:
 8018c64:	4801      	ldr	r0, [pc, #4]	; (8018c6c <__malloc_unlock+0x8>)
 8018c66:	f7ff b924 	b.w	8017eb2 <__retarget_lock_release_recursive>
 8018c6a:	bf00      	nop
 8018c6c:	2000bd54 	.word	0x2000bd54

08018c70 <_realloc_r>:
 8018c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c72:	4607      	mov	r7, r0
 8018c74:	4614      	mov	r4, r2
 8018c76:	460e      	mov	r6, r1
 8018c78:	b921      	cbnz	r1, 8018c84 <_realloc_r+0x14>
 8018c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018c7e:	4611      	mov	r1, r2
 8018c80:	f7ff b9d4 	b.w	801802c <_malloc_r>
 8018c84:	b922      	cbnz	r2, 8018c90 <_realloc_r+0x20>
 8018c86:	f7ff f981 	bl	8017f8c <_free_r>
 8018c8a:	4625      	mov	r5, r4
 8018c8c:	4628      	mov	r0, r5
 8018c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c90:	f000 f86a 	bl	8018d68 <_malloc_usable_size_r>
 8018c94:	42a0      	cmp	r0, r4
 8018c96:	d20f      	bcs.n	8018cb8 <_realloc_r+0x48>
 8018c98:	4621      	mov	r1, r4
 8018c9a:	4638      	mov	r0, r7
 8018c9c:	f7ff f9c6 	bl	801802c <_malloc_r>
 8018ca0:	4605      	mov	r5, r0
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	d0f2      	beq.n	8018c8c <_realloc_r+0x1c>
 8018ca6:	4631      	mov	r1, r6
 8018ca8:	4622      	mov	r2, r4
 8018caa:	f7fe fd97 	bl	80177dc <memcpy>
 8018cae:	4631      	mov	r1, r6
 8018cb0:	4638      	mov	r0, r7
 8018cb2:	f7ff f96b 	bl	8017f8c <_free_r>
 8018cb6:	e7e9      	b.n	8018c8c <_realloc_r+0x1c>
 8018cb8:	4635      	mov	r5, r6
 8018cba:	e7e7      	b.n	8018c8c <_realloc_r+0x1c>

08018cbc <_read_r>:
 8018cbc:	b538      	push	{r3, r4, r5, lr}
 8018cbe:	4d07      	ldr	r5, [pc, #28]	; (8018cdc <_read_r+0x20>)
 8018cc0:	4604      	mov	r4, r0
 8018cc2:	4608      	mov	r0, r1
 8018cc4:	4611      	mov	r1, r2
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	602a      	str	r2, [r5, #0]
 8018cca:	461a      	mov	r2, r3
 8018ccc:	f7e8 f866 	bl	8000d9c <_read>
 8018cd0:	1c43      	adds	r3, r0, #1
 8018cd2:	d102      	bne.n	8018cda <_read_r+0x1e>
 8018cd4:	682b      	ldr	r3, [r5, #0]
 8018cd6:	b103      	cbz	r3, 8018cda <_read_r+0x1e>
 8018cd8:	6023      	str	r3, [r4, #0]
 8018cda:	bd38      	pop	{r3, r4, r5, pc}
 8018cdc:	2000bd48 	.word	0x2000bd48

08018ce0 <_raise_r>:
 8018ce0:	291f      	cmp	r1, #31
 8018ce2:	b538      	push	{r3, r4, r5, lr}
 8018ce4:	4604      	mov	r4, r0
 8018ce6:	460d      	mov	r5, r1
 8018ce8:	d904      	bls.n	8018cf4 <_raise_r+0x14>
 8018cea:	2316      	movs	r3, #22
 8018cec:	6003      	str	r3, [r0, #0]
 8018cee:	f04f 30ff 	mov.w	r0, #4294967295
 8018cf2:	bd38      	pop	{r3, r4, r5, pc}
 8018cf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018cf6:	b112      	cbz	r2, 8018cfe <_raise_r+0x1e>
 8018cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018cfc:	b94b      	cbnz	r3, 8018d12 <_raise_r+0x32>
 8018cfe:	4620      	mov	r0, r4
 8018d00:	f000 f830 	bl	8018d64 <_getpid_r>
 8018d04:	462a      	mov	r2, r5
 8018d06:	4601      	mov	r1, r0
 8018d08:	4620      	mov	r0, r4
 8018d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d0e:	f000 b817 	b.w	8018d40 <_kill_r>
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d00a      	beq.n	8018d2c <_raise_r+0x4c>
 8018d16:	1c59      	adds	r1, r3, #1
 8018d18:	d103      	bne.n	8018d22 <_raise_r+0x42>
 8018d1a:	2316      	movs	r3, #22
 8018d1c:	6003      	str	r3, [r0, #0]
 8018d1e:	2001      	movs	r0, #1
 8018d20:	e7e7      	b.n	8018cf2 <_raise_r+0x12>
 8018d22:	2400      	movs	r4, #0
 8018d24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018d28:	4628      	mov	r0, r5
 8018d2a:	4798      	blx	r3
 8018d2c:	2000      	movs	r0, #0
 8018d2e:	e7e0      	b.n	8018cf2 <_raise_r+0x12>

08018d30 <raise>:
 8018d30:	4b02      	ldr	r3, [pc, #8]	; (8018d3c <raise+0xc>)
 8018d32:	4601      	mov	r1, r0
 8018d34:	6818      	ldr	r0, [r3, #0]
 8018d36:	f7ff bfd3 	b.w	8018ce0 <_raise_r>
 8018d3a:	bf00      	nop
 8018d3c:	2000001c 	.word	0x2000001c

08018d40 <_kill_r>:
 8018d40:	b538      	push	{r3, r4, r5, lr}
 8018d42:	4d07      	ldr	r5, [pc, #28]	; (8018d60 <_kill_r+0x20>)
 8018d44:	2300      	movs	r3, #0
 8018d46:	4604      	mov	r4, r0
 8018d48:	4608      	mov	r0, r1
 8018d4a:	4611      	mov	r1, r2
 8018d4c:	602b      	str	r3, [r5, #0]
 8018d4e:	f000 f81b 	bl	8018d88 <_kill>
 8018d52:	1c43      	adds	r3, r0, #1
 8018d54:	d102      	bne.n	8018d5c <_kill_r+0x1c>
 8018d56:	682b      	ldr	r3, [r5, #0]
 8018d58:	b103      	cbz	r3, 8018d5c <_kill_r+0x1c>
 8018d5a:	6023      	str	r3, [r4, #0]
 8018d5c:	bd38      	pop	{r3, r4, r5, pc}
 8018d5e:	bf00      	nop
 8018d60:	2000bd48 	.word	0x2000bd48

08018d64 <_getpid_r>:
 8018d64:	f000 b808 	b.w	8018d78 <_getpid>

08018d68 <_malloc_usable_size_r>:
 8018d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d6c:	1f18      	subs	r0, r3, #4
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	bfbc      	itt	lt
 8018d72:	580b      	ldrlt	r3, [r1, r0]
 8018d74:	18c0      	addlt	r0, r0, r3
 8018d76:	4770      	bx	lr

08018d78 <_getpid>:
 8018d78:	4b02      	ldr	r3, [pc, #8]	; (8018d84 <_getpid+0xc>)
 8018d7a:	2258      	movs	r2, #88	; 0x58
 8018d7c:	601a      	str	r2, [r3, #0]
 8018d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8018d82:	4770      	bx	lr
 8018d84:	2000bd48 	.word	0x2000bd48

08018d88 <_kill>:
 8018d88:	4b02      	ldr	r3, [pc, #8]	; (8018d94 <_kill+0xc>)
 8018d8a:	2258      	movs	r2, #88	; 0x58
 8018d8c:	601a      	str	r2, [r3, #0]
 8018d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8018d92:	4770      	bx	lr
 8018d94:	2000bd48 	.word	0x2000bd48

08018d98 <_exit>:
 8018d98:	e7fe      	b.n	8018d98 <_exit>
	...

08018d9c <_init>:
 8018d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d9e:	bf00      	nop
 8018da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018da2:	bc08      	pop	{r3}
 8018da4:	469e      	mov	lr, r3
 8018da6:	4770      	bx	lr

08018da8 <_fini>:
 8018da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018daa:	bf00      	nop
 8018dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dae:	bc08      	pop	{r3}
 8018db0:	469e      	mov	lr, r3
 8018db2:	4770      	bx	lr
