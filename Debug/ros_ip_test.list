
ros_ip_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003890  08018e48  08018e48  00028e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6d8  0801c6d8  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801c6d8  0801c6d8  0002c6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6e0  0801c6e0  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6e0  0801c6e0  0002c6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6e4  0801c6e4  0002c6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801c6e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000114a8  20000080  0801c768  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20011528  0801c768  00031528  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004df37  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008bc5  00000000  00000000  0007dfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  00086bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002520  00000000  00000000  00089250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a5b  00000000  00000000  0008b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c049  00000000  00000000  0009e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124ddf  00000000  00000000  000da214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001feff3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab38  00000000  00000000  001ff048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00209b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00209bbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08018e30 	.word	0x08018e30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08018e30 	.word	0x08018e30

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f2:	f3bf 8f6f 	isb	sy
}
 80005f6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <SCB_EnableICache+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
}
 8000604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000606:	f3bf 8f6f 	isb	sy
}
 800060a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SCB_EnableICache+0x48>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <SCB_EnableICache+0x48>)
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000618:	f3bf 8f4f 	dsb	sy
}
 800061c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061e:	f3bf 8f6f 	isb	sy
}
 8000622:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SCB_EnableDCache+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
}
 8000646:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <SCB_EnableDCache+0x84>)
 800064a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0b5b      	lsrs	r3, r3, #13
 8000654:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000658:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000662:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	015a      	lsls	r2, r3, #5
 8000668:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800066c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000672:	4911      	ldr	r1, [pc, #68]	; (80006b8 <SCB_EnableDCache+0x84>)
 8000674:	4313      	orrs	r3, r2
 8000676:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	60ba      	str	r2, [r7, #8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1ef      	bne.n	8000664 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	60fa      	str	r2, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1e5      	bne.n	800065a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068e:	f3bf 8f4f 	dsb	sy
}
 8000692:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SCB_EnableDCache+0x84>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <SCB_EnableDCache+0x84>)
 800069a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a0:	f3bf 8f4f 	dsb	sy
}
 80006a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a6:	f3bf 8f6f 	isb	sy
}
 80006aa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006c0:	f7ff ff92 	bl	80005e8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c4:	f7ff ffb6 	bl	8000634 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fd13 	bl	80010f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f82c 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f91c 	bl	800090c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006d4:	f000 f8bc 	bl	8000850 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d8:	f000 f8ea 	bl	80008b0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <main+0x50>)
 80006de:	f000 fa7b 	bl	8000bd8 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e2:	f005 fcc1 	bl	8006068 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <main+0x54>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <main+0x58>)
 80006ec:	f005 fd4e 	bl	800618c <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <main+0x5c>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80006f6:	4a09      	ldr	r2, [pc, #36]	; (800071c <main+0x60>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <main+0x64>)
 80006fc:	f005 fd46 	bl	800618c <osThreadNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <main+0x68>)
 8000704:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000706:	f005 fce3 	bl	80060d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x4e>
 800070c:	20004b5c 	.word	0x20004b5c
 8000710:	0801c404 	.word	0x0801c404
 8000714:	08000a51 	.word	0x08000a51
 8000718:	20004b58 	.word	0x20004b58
 800071c:	0801c428 	.word	0x0801c428
 8000720:	08000b45 	.word	0x08000b45
 8000724:	20004fe8 	.word	0x20004fe8

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0b8      	sub	sp, #224	; 0xe0
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f017 f860 	bl	80177fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2290      	movs	r2, #144	; 0x90
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f017 f851 	bl	80177fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <SystemClock_Config+0x11c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a39      	ldr	r2, [pc, #228]	; (8000844 <SystemClock_Config+0x11c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <SystemClock_Config+0x11c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <SystemClock_Config+0x120>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077a:	4a33      	ldr	r2, [pc, #204]	; (8000848 <SystemClock_Config+0x120>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	4b31      	ldr	r3, [pc, #196]	; (8000848 <SystemClock_Config+0x120>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 faa8 	bl	8002d1c <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007d2:	f000 f9fb 	bl	8000bcc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d6:	f002 fa51 	bl	8002c7c <HAL_PWREx_EnableOverDrive>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007e0:	f000 f9f4 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000804:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000808:	2103      	movs	r1, #3
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fd34 	bl	8003278 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000816:	f000 f9d9 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <SystemClock_Config+0x124>)
 800081c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800081e:	2300      	movs	r3, #0
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f002 ff57 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000838:	f000 f9c8 	bl	8000bcc <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	37e0      	adds	r7, #224	; 0xe0
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000
 800084c:	00200100 	.word	0x00200100

08000850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART3_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART3_UART_Init+0x58>)
 8000894:	f003 fe2c 	bl	80044f0 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f995 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20004b5c 	.word	0x20004b5c
 80008ac:	40004800 	.word	0x40004800

080008b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2206      	movs	r2, #6
 80008c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	f002 f879 	bl	80029ea <HAL_PCD_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f965 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20004be0 	.word	0x20004be0

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x130>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3f      	ldr	r2, [pc, #252]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <MX_GPIO_Init+0x130>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a33      	ldr	r2, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_GPIO_Init+0x130>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <MX_GPIO_Init+0x130>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_GPIO_Init+0x130>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_GPIO_Init+0x134>)
 80009ba:	f001 fffd 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4820      	ldr	r0, [pc, #128]	; (8000a44 <MX_GPIO_Init+0x138>)
 80009c4:	f001 fff8 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_GPIO_Init+0x13c>)
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481b      	ldr	r0, [pc, #108]	; (8000a4c <MX_GPIO_Init+0x140>)
 80009de:	f001 fe3f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0x134>)
 80009fc:	f001 fe30 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x138>)
 8000a18:	f001 fe22 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_GPIO_Init+0x138>)
 8000a30:	f001 fe16 	bl	8002660 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40020800 	.word	0x40020800

08000a50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a58:	f004 fd7e 	bl	8005558 <MX_LWIP_Init>
    void *data;
    u16_t len;

    LWIP_UNUSED_ARG(argument);
    //while(gnetif.ip_addr.addr == 0) osDelay(1);
   printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000a5c:	4837      	ldr	r0, [pc, #220]	; (8000b3c <StartDefaultTask+0xec>)
 8000a5e:	f015 fd1d 	bl	801649c <ip4addr_ntoa>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4836      	ldr	r0, [pc, #216]	; (8000b40 <StartDefaultTask+0xf0>)
 8000a68:	f016 fed0 	bl	801780c <iprintf>
    /* Create a new connection identifier. */
    conn = netconn_new(NETCONN_TCP);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2010      	movs	r0, #16
 8000a72:	f009 fb21 	bl	800a0b8 <netconn_new_with_proto_and_callback>
 8000a76:	61f8      	str	r0, [r7, #28]

    if (conn!=NULL)
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d05a      	beq.n	8000b34 <StartDefaultTask+0xe4>
    {
      /* Bind connection to well known port number 7. */
      err = netconn_bind(conn, NULL, 7);
 8000a7e:	2207      	movs	r2, #7
 8000a80:	2100      	movs	r1, #0
 8000a82:	69f8      	ldr	r0, [r7, #28]
 8000a84:	f009 fbd2 	bl	800a22c <netconn_bind>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	76fb      	strb	r3, [r7, #27]

      if (err == ERR_OK)
 8000a8c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14b      	bne.n	8000b2c <StartDefaultTask+0xdc>
      {
        /* Tell connection to go into listening mode. */
        netconn_listen(conn);
 8000a94:	21ff      	movs	r1, #255	; 0xff
 8000a96:	69f8      	ldr	r0, [r7, #28]
 8000a98:	f009 fc00 	bl	800a29c <netconn_listen_with_backlog>
        printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000a9c:	4827      	ldr	r0, [pc, #156]	; (8000b3c <StartDefaultTask+0xec>)
 8000a9e:	f015 fcfd 	bl	801649c <ip4addr_ntoa>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4826      	ldr	r0, [pc, #152]	; (8000b40 <StartDefaultTask+0xf0>)
 8000aa8:	f016 feb0 	bl	801780c <iprintf>
        while (1)
        {
          /* Grab new connection. */
           accept_err = netconn_accept(conn, &newconn);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	69f8      	ldr	r0, [r7, #28]
 8000ab4:	f009 fc1e 	bl	800a2f4 <netconn_accept>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	76bb      	strb	r3, [r7, #26]

          /* Process the new connection. */
          if (accept_err == ERR_OK)
 8000abc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f3      	bne.n	8000aac <StartDefaultTask+0x5c>
          {

            while (netconn_recv(newconn, &buf) == ERR_OK)
 8000ac4:	e01f      	b.n	8000b06 <StartDefaultTask+0xb6>
            {
              do
              {
                netbuf_data(buf, &data, &len);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	f107 020a 	add.w	r2, r7, #10
 8000acc:	f107 010c 	add.w	r1, r7, #12
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00b fbb3 	bl	800c23c <netbuf_data>
                printf(data);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f016 fe97 	bl	801780c <iprintf>
                netconn_write(newconn, data, len, NETCONN_COPY);
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	68f9      	ldr	r1, [r7, #12]
 8000ae2:	897b      	ldrh	r3, [r7, #10]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	f009 fe84 	bl	800a7f8 <netconn_write_partly>

              }
              while (netbuf_next(buf) >= 0);
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00b fbec 	bl	800c2d0 <netbuf_next>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	dae3      	bge.n	8000ac6 <StartDefaultTask+0x76>

              netbuf_delete(buf);
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00b fb7b 	bl	800c1fc <netbuf_delete>
            while (netconn_recv(newconn, &buf) == ERR_OK)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f107 0210 	add.w	r2, r7, #16
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f009 fdf8 	bl	800a704 <netconn_recv>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0d5      	beq.n	8000ac6 <StartDefaultTask+0x76>
            }

            /* Close connection and discard connection identifier. */
            netconn_close(newconn);
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f009 ff6d 	bl	800a9fc <netconn_close>
            netconn_delete(newconn);
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f009 fb65 	bl	800a1f4 <netconn_delete>
           accept_err = netconn_accept(conn, &newconn);
 8000b2a:	e7bf      	b.n	8000aac <StartDefaultTask+0x5c>
          }
        }
      }
      else
      {
        netconn_delete(newconn);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f009 fb60 	bl	800a1f4 <netconn_delete>
      }
    }

  /* USER CODE END 5 */
}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20005074 	.word	0x20005074
 8000b40:	08018e6c 	.word	0x08018e6c

08000b44 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  struct netconn * nc = (struct netconn *)argument;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
  struct netbuf * nb;
  char * buffer = pvPortMalloc(2048);
 8000b50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b54:	f009 f8ae 	bl	8009cb4 <pvPortMalloc>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint16_t len;
  printf("Incoming connection\r\n");
 8000b5a:	480f      	ldr	r0, [pc, #60]	; (8000b98 <StartTask02+0x54>)
 8000b5c:	f016 fedc 	bl	8017918 <puts>

  sprintf(buffer, "Hello from STM32F746BGT6!\r\n");
 8000b60:	490e      	ldr	r1, [pc, #56]	; (8000b9c <StartTask02+0x58>)
 8000b62:	68b8      	ldr	r0, [r7, #8]
 8000b64:	f016 ffe6 	bl	8017b34 <siprintf>
  netconn_write(nc,buffer,strlen(buffer), NETCONN_COPY);
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fb69 	bl	8000240 <strlen>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f009 fe3d 	bl	800a7f8 <netconn_write_partly>

  /* Infinite loop */
  for(;;)
  {
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <StartTask02+0x5c>)
 8000b80:	f015 fc8c 	bl	801649c <ip4addr_ntoa>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <StartTask02+0x60>)
 8000b8a:	f016 fe3f 	bl	801780c <iprintf>
    osDelay(500);
 8000b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b92:	f005 fba1 	bl	80062d8 <osDelay>
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000b96:	e7f2      	b.n	8000b7e <StartTask02+0x3a>
 8000b98:	08018e84 	.word	0x08018e84
 8000b9c:	08018e9c 	.word	0x08018e9c
 8000ba0:	20005074 	.word	0x20005074
 8000ba4:	08018e6c 	.word	0x08018e6c

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 faa7 	bl	800110c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001000 	.word	0x40001000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <RetargetInit+0x28>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <RetargetInit+0x2c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6898      	ldr	r0, [r3, #8]
 8000bec:	2300      	movs	r3, #0
 8000bee:	2202      	movs	r2, #2
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f016 fed9 	bl	80179a8 <setvbuf>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20004fec 	.word	0x20004fec
 8000c04:	2000001c 	.word	0x2000001c

08000c08 <_isatty>:

int _isatty(int fd) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db04      	blt.n	8000c20 <_isatty+0x18>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dc01      	bgt.n	8000c20 <_isatty+0x18>
    return 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e003      	b.n	8000c28 <_isatty+0x20>

  errno = EBADF;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <_isatty+0x2c>)
 8000c22:	2209      	movs	r2, #9
 8000c24:	601a      	str	r2, [r3, #0]
  return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	20011514 	.word	0x20011514

08000c38 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d002      	beq.n	8000c50 <_write+0x18>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d111      	bne.n	8000c74 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <_write+0x50>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	f003 fc95 	bl	800458c <HAL_UART_Transmit>
 8000c62:	4603      	mov	r3, r0
 8000c64:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <_write+0x38>
      return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	e006      	b.n	8000c7e <_write+0x46>
    else
      return EIO;
 8000c70:	2305      	movs	r3, #5
 8000c72:	e004      	b.n	8000c7e <_write+0x46>
  }
  errno = EBADF;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_write+0x54>)
 8000c76:	2209      	movs	r2, #9
 8000c78:	601a      	str	r2, [r3, #0]
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20004fec 	.word	0x20004fec
 8000c8c:	20011514 	.word	0x20011514

08000c90 <_close>:

int _close(int fd) {
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db04      	blt.n	8000ca8 <_close+0x18>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	dc01      	bgt.n	8000ca8 <_close+0x18>
    return 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e004      	b.n	8000cb2 <_close+0x22>

  errno = EBADF;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <_close+0x30>)
 8000caa:	2209      	movs	r2, #9
 8000cac:	601a      	str	r2, [r3, #0]
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20011514 	.word	0x20011514

08000cc4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <_lseek+0x24>)
 8000cd2:	2209      	movs	r2, #9
 8000cd4:	601a      	str	r2, [r3, #0]
  return -1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20011514 	.word	0x20011514

08000cec <_read>:

int _read(int fd, char* ptr, int len) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d110      	bne.n	8000d20 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <_read+0x48>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2201      	movs	r2, #1
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	f003 fcd2 	bl	80046b2 <HAL_UART_Receive>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <_read+0x30>
      return 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e006      	b.n	8000d2a <_read+0x3e>
    else
      return EIO;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	e004      	b.n	8000d2a <_read+0x3e>
  }
  errno = EBADF;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <_read+0x4c>)
 8000d22:	2209      	movs	r2, #9
 8000d24:	601a      	str	r2, [r3, #0]
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20004fec 	.word	0x20004fec
 8000d38:	20011514 	.word	0x20011514

08000d3c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db08      	blt.n	8000d5e <_fstat+0x22>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	dc05      	bgt.n	8000d5e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d58:	605a      	str	r2, [r3, #4]
    return 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e003      	b.n	8000d66 <_fstat+0x2a>
  }

  errno = EBADF;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <_fstat+0x38>)
 8000d60:	2209      	movs	r2, #9
 8000d62:	601a      	str	r2, [r3, #0]
  return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20011514 	.word	0x20011514

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	210f      	movs	r1, #15
 8000db2:	f06f 0001 	mvn.w	r0, #1
 8000db6:	f000 faa5 	bl	8001304 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x7c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d128      	bne.n	8000e3c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x80>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_UART_MspInit+0x80>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0x80>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0x80>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_UART_MspInit+0x80>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_UART_MspInit+0x80>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_UART_MspInit+0x84>)
 8000e38:	f001 fc12 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40004800 	.word	0x40004800
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020c00 	.word	0x40020c00

08000e50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e70:	d141      	bne.n	8000ef6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4817      	ldr	r0, [pc, #92]	; (8000f04 <HAL_PCD_MspInit+0xb4>)
 8000ea8:	f001 fbda 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <HAL_PCD_MspInit+0xb4>)
 8000ec2:	f001 fbcd 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eca:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_PCD_MspInit+0xb0>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	2036      	movs	r0, #54	; 0x36
 8000f1e:	f000 f9f1 	bl	8001304 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f22:	2036      	movs	r0, #54	; 0x36
 8000f24:	f000 fa0a 	bl	800133c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_InitTick+0xa0>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_InitTick+0xa0>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_InitTick+0xa0>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fb96 	bl	800367c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f50:	f002 fb6c 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8000f54:	4603      	mov	r3, r0
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_InitTick+0xa4>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9b      	lsrs	r3, r3, #18
 8000f64:	3b01      	subs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_InitTick+0xac>)
 8000f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f8a:	f002 ffd1 	bl	8003f30 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d104      	bne.n	8000f9e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <HAL_InitTick+0xa8>)
 8000f96:	f003 f82d 	bl	8003ff4 <HAL_TIM_Base_Start_IT>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3730      	adds	r7, #48	; 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	20004ff0 	.word	0x20004ff0
 8000fb4:	40001000 	.word	0x40001000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM6_DAC_IRQHandler+0x10>)
 8000fea:	f003 f87b 	bl	80040e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20004ff0 	.word	0x20004ff0

08000ff8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ETH_IRQHandler+0x10>)
 8000ffe:	f000 fd8d 	bl	8001b1c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20006988 	.word	0x20006988

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d205      	bcs.n	8001048 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <_sbrk+0x6c>)
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20080000 	.word	0x20080000
 800106c:	00004000 	.word	0x00004000
 8001070:	2000009c 	.word	0x2000009c
 8001074:	20011528 	.word	0x20011528
 8001078:	20011514 	.word	0x20011514

0800107c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f016 fb3b 	bl	8017748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff faf3 	bl	80006bc <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010e4:	0801c6e8 	.word	0x0801c6e8
  ldr r2, =_sbss
 80010e8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010ec:	20011528 	.word	0x20011528

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>

080010f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 f8f9 	bl	80012ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff03 	bl	8000f08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fe39 	bl	8000d78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	2000503c 	.word	0x2000503c

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000503c 	.word	0x2000503c

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	05fa0000 	.word	0x05fa0000

080011dc <__NVIC_GetPriorityGrouping>:
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff4c 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001316:	f7ff ff61 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800131a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff ffb1 	bl	8001288 <NVIC_EncodePriority>
 8001326:	4602      	mov	r2, r0
 8001328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff80 	bl	8001234 <__NVIC_SetPriority>
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff54 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001368:	4ba9      	ldr	r3, [pc, #676]	; (8001610 <HAL_ETH_Init+0x2b8>)
 800136a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e181      	b.n	8001682 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f004 fa42 	bl	800581c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	4b9e      	ldr	r3, [pc, #632]	; (8001614 <HAL_ETH_Init+0x2bc>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	4a9d      	ldr	r2, [pc, #628]	; (8001614 <HAL_ETH_Init+0x2bc>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a2:	6453      	str	r3, [r2, #68]	; 0x44
 80013a4:	4b9b      	ldr	r3, [pc, #620]	; (8001614 <HAL_ETH_Init+0x2bc>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013b0:	4b99      	ldr	r3, [pc, #612]	; (8001618 <HAL_ETH_Init+0x2c0>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a98      	ldr	r2, [pc, #608]	; (8001618 <HAL_ETH_Init+0x2c0>)
 80013b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013ba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013bc:	4b96      	ldr	r3, [pc, #600]	; (8001618 <HAL_ETH_Init+0x2c0>)
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4994      	ldr	r1, [pc, #592]	; (8001618 <HAL_ETH_Init+0x2c0>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013e2:	f7ff fea7 	bl	8001134 <HAL_GetTick>
 80013e6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013e8:	e011      	b.n	800140e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013ea:	f7ff fea3 	bl	8001134 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f8:	d909      	bls.n	800140e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e139      	b.n	8001682 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e4      	bne.n	80013ea <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f023 031c 	bic.w	r3, r3, #28
 800142e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001430:	f002 f8f0 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8001434:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4a78      	ldr	r2, [pc, #480]	; (800161c <HAL_ETH_Init+0x2c4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d908      	bls.n	8001450 <HAL_ETH_Init+0xf8>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4a77      	ldr	r2, [pc, #476]	; (8001620 <HAL_ETH_Init+0x2c8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d804      	bhi.n	8001450 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e027      	b.n	80014a0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4a73      	ldr	r2, [pc, #460]	; (8001620 <HAL_ETH_Init+0x2c8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d908      	bls.n	800146a <HAL_ETH_Init+0x112>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4a6d      	ldr	r2, [pc, #436]	; (8001610 <HAL_ETH_Init+0x2b8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d204      	bcs.n	800146a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f043 030c 	orr.w	r3, r3, #12
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	e01a      	b.n	80014a0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4a68      	ldr	r2, [pc, #416]	; (8001610 <HAL_ETH_Init+0x2b8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d303      	bcc.n	800147a <HAL_ETH_Init+0x122>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_ETH_Init+0x2cc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d911      	bls.n	800149e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_ETH_Init+0x2cc>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d908      	bls.n	8001494 <HAL_ETH_Init+0x13c>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_ETH_Init+0x2d0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d804      	bhi.n	8001494 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e005      	b.n	80014a0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	e000      	b.n	80014a0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800149e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ac:	2100      	movs	r1, #0
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fc17 	bl	8001ce2 <HAL_ETH_WritePHYRegister>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014be:	6939      	ldr	r1, [r7, #16]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fdcd 	bl	8002060 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0d7      	b.n	8001682 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014d2:	20ff      	movs	r0, #255	; 0xff
 80014d4:	f7ff fe3a 	bl	800114c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a5 	beq.w	800162c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014e2:	f7ff fe27 	bl	8001134 <HAL_GetTick>
 80014e6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	461a      	mov	r2, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fb8e 	bl	8001c12 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014f6:	f7ff fe1d 	bl	8001134 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d90f      	bls.n	8001528 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800150c:	6939      	ldr	r1, [r7, #16]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fda6 	bl	8002060 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0ac      	b.n	8001682 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0da      	beq.n	80014e8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001536:	2100      	movs	r1, #0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fbd2 	bl	8001ce2 <HAL_ETH_WritePHYRegister>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fd88 	bl	8002060 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001558:	2301      	movs	r3, #1
 800155a:	e092      	b.n	8001682 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fdea 	bl	8001134 <HAL_GetTick>
 8001560:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	461a      	mov	r2, r3
 8001568:	2101      	movs	r1, #1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fb51 	bl	8001c12 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001570:	f7ff fde0 	bl	8001134 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d90f      	bls.n	80015a2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fd69 	bl	8002060 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e06f      	b.n	8001682 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0da      	beq.n	8001562 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	461a      	mov	r2, r3
 80015b2:	2110      	movs	r1, #16
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fb2c 	bl	8001c12 <HAL_ETH_ReadPHYRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015c4:	6939      	ldr	r1, [r7, #16]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fd4a 	bl	8002060 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015d4:	2301      	movs	r3, #1
 80015d6:	e054      	b.n	8001682 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	e002      	b.n	80015f2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	e035      	b.n	8001670 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	e030      	b.n	8001670 <HAL_ETH_Init+0x318>
 800160e:	bf00      	nop
 8001610:	03938700 	.word	0x03938700
 8001614:	40023800 	.word	0x40023800
 8001618:	40013800 	.word	0x40013800
 800161c:	01312cff 	.word	0x01312cff
 8001620:	02160ebf 	.word	0x02160ebf
 8001624:	05f5e0ff 	.word	0x05f5e0ff
 8001628:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800163c:	4313      	orrs	r3, r2
 800163e:	b29b      	uxth	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fb4c 	bl	8001ce2 <HAL_ETH_WritePHYRegister>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00b      	beq.n	8001668 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fd02 	bl	8002060 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00c      	b.n	8001682 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001668:	f640 70ff 	movw	r0, #4095	; 0xfff
 800166c:	f7ff fd6e 	bl	800114c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001670:	6939      	ldr	r1, [r7, #16]
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fcf4 	bl	8002060 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop

0800168c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ETH_DMATxDescListInit+0x20>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e052      	b.n	8001752 <HAL_ETH_DMATxDescListInit+0xc6>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e030      	b.n	800172a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	4413      	add	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016d8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	d208      	bcs.n	800171e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	015b      	lsls	r3, r3, #5
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4413      	add	r3, r2
 8001716:	461a      	mov	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	e002      	b.n	8001724 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3ca      	bcc.n	80016c8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f241 0310 	movw	r3, #4112	; 0x1010
 800173c:	440b      	add	r3, r1
 800173e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800175e:	b480      	push	{r7}
 8001760:	b087      	sub	sp, #28
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ETH_DMARxDescListInit+0x20>
 800177a:	2302      	movs	r3, #2
 800177c:	e056      	b.n	800182c <HAL_ETH_DMARxDescListInit+0xce>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2202      	movs	r2, #2
 800178a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e034      	b.n	8001804 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4413      	add	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017aa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017b2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	3b01      	subs	r3, #1
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d208      	bcs.n	80017f8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	e002      	b.n	80017fe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3c6      	bcc.n	800179a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	f241 030c 	movw	r3, #4108	; 0x100c
 8001816:	440b      	add	r3, r1
 8001818:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_ETH_TransmitFrame+0x24>
 8001858:	2302      	movs	r3, #2
 800185a:	e0cd      	b.n	80019f8 <HAL_ETH_TransmitFrame+0x1c0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001882:	2301      	movs	r3, #1
 8001884:	e0b8      	b.n	80019f8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	da09      	bge.n	80018a4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2212      	movs	r2, #18
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0a9      	b.n	80019f8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d915      	bls.n	80018da <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <HAL_ETH_TransmitFrame+0x1cc>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0a9b      	lsrs	r3, r3, #10
 80018b8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_ETH_TransmitFrame+0x1cc>)
 80018be:	fba3 1302 	umull	r1, r3, r3, r2
 80018c2:	0a9b      	lsrs	r3, r3, #10
 80018c4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e001      	b.n	80018de <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d11c      	bne.n	800191e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80018f2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018fe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
 800191c:	e04b      	b.n	80019b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	e044      	b.n	80019ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001932:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d107      	bne.n	800194a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001948:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001952:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3b01      	subs	r3, #1
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	429a      	cmp	r2, r3
 800195c:	d116      	bne.n	800198c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800196c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <HAL_ETH_TransmitFrame+0x1d0>)
 8001972:	fb02 f203 	mul.w	r2, r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800197e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800198a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800199a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	3301      	adds	r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3b6      	bcc.n	8001924 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f241 0314 	movw	r3, #4116	; 0x1014
 80019be:	4413      	add	r3, r2
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80019d2:	4413      	add	r3, r2
 80019d4:	2204      	movs	r2, #4
 80019d6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f241 0304 	movw	r3, #4100	; 0x1004
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	ac02b00b 	.word	0xac02b00b
 8001a08:	fffffa0c 	.word	0xfffffa0c

08001a0c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e074      	b.n	8001b10 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a36:	e05a      	b.n	8001aee <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a4c:	d10d      	bne.n	8001a6a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
 8001a68:	e041      	b.n	8001aee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10b      	bne.n	8001a90 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8e:	e02e      	b.n	8001aee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d103      	bne.n	8001ab2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001abe:	1f1a      	subs	r2, r3, #4
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e010      	b.n	8001b10 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db02      	blt.n	8001afe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d99c      	bls.n	8001a38 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b40      	cmp	r3, #64	; 0x40
 8001b36:	d112      	bne.n	8001b5e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f003 ff2f 	bl	800599c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b46:	4413      	add	r3, r2
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b5c:	e01b      	b.n	8001b96 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d111      	bne.n	8001b96 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b80:	4413      	add	r3, r2
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ba4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bae:	4413      	add	r3, r2
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bba:	d112      	bne.n	8001be2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f81e 	bl	8001bfe <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bca:	4413      	add	r3, r2
 8001bcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bd0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b82      	cmp	r3, #130	; 0x82
 8001c32:	d101      	bne.n	8001c38 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e050      	b.n	8001cda <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2282      	movs	r2, #130	; 0x82
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 031c 	and.w	r3, r3, #28
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8a1b      	ldrh	r3, [r3, #16]
 8001c54:	02db      	lsls	r3, r3, #11
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f023 0302 	bic.w	r3, r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c84:	f7ff fa56 	bl	8001134 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c8a:	e015      	b.n	8001cb8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c8c:	f7ff fa52 	bl	8001134 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d309      	bcc.n	8001cb0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e014      	b.n	8001cda <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e4      	bne.n	8001c8c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	460b      	mov	r3, r1
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b42      	cmp	r3, #66	; 0x42
 8001d02:	d101      	bne.n	8001d08 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
 8001d06:	e04e      	b.n	8001da6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2242      	movs	r2, #66	; 0x42
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 031c 	and.w	r3, r3, #28
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8a1b      	ldrh	r3, [r3, #16]
 8001d24:	02db      	lsls	r3, r3, #11
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5e:	f7ff f9e9 	bl	8001134 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d64:	e015      	b.n	8001d92 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d66:	f7ff f9e5 	bl	8001134 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d309      	bcc.n	8001d8a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e00d      	b.n	8001da6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e4      	bne.n	8001d66 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ETH_Start+0x16>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e01f      	b.n	8001e04 <HAL_ETH_Start+0x56>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb45 	bl	8002464 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fb7c 	bl	80024d8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fc13 	bl	800260c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fbb0 	bl	800254c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fbdd 	bl	80025ac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ETH_Stop+0x16>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e01f      	b.n	8001e62 <HAL_ETH_Stop+0x56>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fba2 	bl	800257c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fbcf 	bl	80025dc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb67 	bl	8002512 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fbe1 	bl	800260c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fb27 	bl	800249e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ETH_ConfigMAC+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e0e4      	b.n	8002052 <HAL_ETH_ConfigMAC+0x1e6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80b1 	beq.w	8002002 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_ETH_ConfigMAC+0x1f0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001eb8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ebe:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ec4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001eca:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ed0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ed6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001edc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001ee2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001ee8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001eee:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ef4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001efa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff f91a 	bl	800114c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f28:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f2e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f34:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f3a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f40:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f46:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f52:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f54:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff f8f4 	bl	800114c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f74:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f7e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f9c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001fa2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001fa8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001fae:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001fb4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff f8bd 	bl	800114c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff f8aa 	bl	800114c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	61da      	str	r2, [r3, #28]
 8002000:	e01e      	b.n	8002040 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002010:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff f88a 	bl	800114c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	ff20810f 	.word	0xff20810f

08002060 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0b0      	sub	sp, #192	; 0xc0
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800207c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002084:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800208e:	2300      	movs	r3, #0
 8002090:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020aa:	663b      	str	r3, [r7, #96]	; 0x60
 80020ac:	e001      	b.n	80020b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020bc:	2300      	movs	r3, #0
 80020be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002134:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002138:	4bab      	ldr	r3, [pc, #684]	; (80023e8 <ETH_MACDMAConfig+0x388>)
 800213a:	4013      	ands	r3, r2
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002140:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002144:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002148:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800214a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800214c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002152:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002156:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800215a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002160:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002164:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002168:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800216a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800216c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800216e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002170:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002174:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002176:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002188:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002194:	2001      	movs	r0, #1
 8002196:	f7fe ffd9 	bl	800114c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021a8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021ac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021b2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021b8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021be:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021d0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7fe ffb4 	bl	800114c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021f6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002200:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800220c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002210:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002214:	4013      	ands	r3, r2
 8002216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800221a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800221e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002224:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800222a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800222c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002230:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002236:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800223c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800223e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002250:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800225c:	2001      	movs	r0, #1
 800225e:	f7fe ff75 	bl	800114c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800226c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002270:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002286:	2001      	movs	r0, #1
 8002288:	f7fe ff60 	bl	800114c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800229a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022a8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022ba:	2304      	movs	r3, #4
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80022da:	2300      	movs	r3, #0
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022de:	2300      	movs	r3, #0
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80022ea:	4413      	add	r3, r2
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80022f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <ETH_MACDMAConfig+0x38c>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022fe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002300:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002302:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002304:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002306:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002308:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800230a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800230c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800230e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002310:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002312:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002314:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002316:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800231a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800231e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002320:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002332:	4413      	add	r3, r2
 8002334:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002338:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe fefe 	bl	800114c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f241 0318 	movw	r3, #4120	; 0x1018
 8002358:	4413      	add	r3, r2
 800235a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800235e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002364:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002368:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800236c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800236e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002370:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002374:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002376:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800237a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002398:	2001      	movs	r0, #1
 800239a:	f7fe fed7 	bl	800114c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023aa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10d      	bne.n	80023d0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f241 031c 	movw	r3, #4124	; 0x101c
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6811      	ldr	r1, [r2, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <ETH_MACDMAConfig+0x390>)
 80023c6:	431a      	orrs	r2, r3
 80023c8:	f241 031c 	movw	r3, #4124	; 0x101c
 80023cc:	440b      	add	r3, r1
 80023ce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	461a      	mov	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f80b 	bl	80023f4 <ETH_MACAddressConfig>
}
 80023de:	bf00      	nop
 80023e0:	37c0      	adds	r7, #192	; 0xc0
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	ff20810f 	.word	0xff20810f
 80023ec:	f8de3f23 	.word	0xf8de3f23
 80023f0:	00010040 	.word	0x00010040

080023f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3305      	adds	r3, #5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	3204      	adds	r2, #4
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <ETH_MACAddressConfig+0x68>)
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3303      	adds	r3, #3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	061a      	lsls	r2, r3, #24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3302      	adds	r3, #2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4313      	orrs	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <ETH_MACAddressConfig+0x6c>)
 8002446:	4413      	add	r3, r2
 8002448:	461a      	mov	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40028040 	.word	0x40028040
 8002460:	40028044 	.word	0x40028044

08002464 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002488:	2001      	movs	r0, #1
 800248a:	f7fe fe5f 	bl	800114c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0208 	bic.w	r2, r2, #8
 80024b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7fe fe42 	bl	800114c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0204 	orr.w	r2, r2, #4
 80024f2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe fe25 	bl	800114c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0204 	bic.w	r2, r2, #4
 800252c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002536:	2001      	movs	r0, #1
 8002538:	f7fe fe08 	bl	800114c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f241 0318 	movw	r3, #4120	; 0x1018
 800255c:	4413      	add	r3, r2
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6811      	ldr	r1, [r2, #0]
 8002564:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002568:	f241 0318 	movw	r3, #4120	; 0x1018
 800256c:	440b      	add	r3, r1
 800256e:	601a      	str	r2, [r3, #0]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f241 0318 	movw	r3, #4120	; 0x1018
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6811      	ldr	r1, [r2, #0]
 8002594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002598:	f241 0318 	movw	r3, #4120	; 0x1018
 800259c:	440b      	add	r3, r1
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025bc:	4413      	add	r3, r2
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6811      	ldr	r1, [r2, #0]
 80025c4:	f043 0202 	orr.w	r2, r3, #2
 80025c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025cc:	440b      	add	r3, r1
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025ec:	4413      	add	r3, r2
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6811      	ldr	r1, [r2, #0]
 80025f4:	f023 0202 	bic.w	r2, r3, #2
 80025f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025fc:	440b      	add	r3, r1
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002620:	4413      	add	r3, r2
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6811      	ldr	r1, [r2, #0]
 8002628:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800262c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002630:	440b      	add	r3, r1
 8002632:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f241 0318 	movw	r3, #4120	; 0x1018
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002642:	2001      	movs	r0, #1
 8002644:	f7fe fd82 	bl	800114c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002652:	440b      	add	r3, r1
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e175      	b.n	800296c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8164 	bne.w	8002966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d00b      	beq.n	80026be <HAL_GPIO_Init+0x5e>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b2:	2b11      	cmp	r3, #17
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b12      	cmp	r3, #18
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x100>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b12      	cmp	r3, #18
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80be 	beq.w	8002966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_GPIO_Init+0x324>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_GPIO_Init+0x324>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_GPIO_Init+0x324>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002802:	4a61      	ldr	r2, [pc, #388]	; (8002988 <HAL_GPIO_Init+0x328>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_GPIO_Init+0x32c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d037      	beq.n	800289e <HAL_GPIO_Init+0x23e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_GPIO_Init+0x330>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d031      	beq.n	800289a <HAL_GPIO_Init+0x23a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_GPIO_Init+0x334>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <HAL_GPIO_Init+0x236>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <HAL_GPIO_Init+0x338>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_Init+0x232>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_GPIO_Init+0x33c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_Init+0x22e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a53      	ldr	r2, [pc, #332]	; (80029a0 <HAL_GPIO_Init+0x340>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x22a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <HAL_GPIO_Init+0x344>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x226>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a51      	ldr	r2, [pc, #324]	; (80029a8 <HAL_GPIO_Init+0x348>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a50      	ldr	r2, [pc, #320]	; (80029ac <HAL_GPIO_Init+0x34c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4f      	ldr	r2, [pc, #316]	; (80029b0 <HAL_GPIO_Init+0x350>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x21a>
 8002876:	2309      	movs	r3, #9
 8002878:	e012      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800287a:	230a      	movs	r3, #10
 800287c:	e010      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800287e:	2308      	movs	r3, #8
 8002880:	e00e      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002882:	2307      	movs	r3, #7
 8002884:	e00c      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002886:	2306      	movs	r3, #6
 8002888:	e00a      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800288a:	2305      	movs	r3, #5
 800288c:	e008      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800288e:	2304      	movs	r3, #4
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002892:	2303      	movs	r3, #3
 8002894:	e004      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002896:	2302      	movs	r3, #2
 8002898:	e002      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800289e:	2300      	movs	r3, #0
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f002 0203 	and.w	r2, r2, #3
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	4093      	lsls	r3, r2
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028b0:	4935      	ldr	r1, [pc, #212]	; (8002988 <HAL_GPIO_Init+0x328>)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_GPIO_Init+0x354>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <HAL_GPIO_Init+0x354>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e8:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_GPIO_Init+0x354>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290c:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_GPIO_Init+0x354>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_GPIO_Init+0x354>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_GPIO_Init+0x354>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_GPIO_Init+0x354>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_GPIO_Init+0x354>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	f67f ae86 	bls.w	8002680 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3724      	adds	r7, #36	; 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40013800 	.word	0x40013800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	40021400 	.word	0x40021400
 80029a4:	40021800 	.word	0x40021800
 80029a8:	40021c00 	.word	0x40021c00
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40022400 	.word	0x40022400
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ec:	b08f      	sub	sp, #60	; 0x3c
 80029ee:	af0a      	add	r7, sp, #40	; 0x28
 80029f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e116      	b.n	8002c2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fa1a 	bl	8000e50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fb2c 	bl	8005098 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	687e      	ldr	r6, [r7, #4]
 8002a48:	466d      	mov	r5, sp
 8002a4a:	f106 0410 	add.w	r4, r6, #16
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a5e:	1d33      	adds	r3, r6, #4
 8002a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f002 fac0 	bl	8004fe8 <USB_CoreInit>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0d7      	b.n	8002c2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fb1a 	bl	80050ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e04a      	b.n	8002b22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	333d      	adds	r3, #61	; 0x3d
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	333c      	adds	r3, #60	; 0x3c
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	b298      	uxth	r0, r3
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3342      	adds	r3, #66	; 0x42
 8002ac8:	4602      	mov	r2, r0
 8002aca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333f      	adds	r3, #63	; 0x3f
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3344      	adds	r3, #68	; 0x44
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3348      	adds	r3, #72	; 0x48
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3350      	adds	r3, #80	; 0x50
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3af      	bcc.n	8002a8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e044      	b.n	8002bbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3b5      	bcc.n	8002b32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	687e      	ldr	r6, [r7, #4]
 8002bce:	466d      	mov	r5, sp
 8002bd0:	f106 0410 	add.w	r4, r6, #16
 8002bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be4:	1d33      	adds	r3, r6, #4
 8002be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be8:	6838      	ldr	r0, [r7, #0]
 8002bea:	f002 fa91 	bl	8005110 <USB_DevInit>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e014      	b.n	8002c2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f80b 	bl	8002c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fc43 	bl	80054ae <USB_DevDisconnect>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	10000003 	.word	0x10000003

08002c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002caa:	f7fe fa43 	bl	8001134 <HAL_GetTick>
 8002cae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cb0:	e009      	b.n	8002cc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb2:	f7fe fa3f 	bl	8001134 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc0:	d901      	bls.n	8002cc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e022      	b.n	8002d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d1ee      	bne.n	8002cb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce0:	f7fe fa28 	bl	8001134 <HAL_GetTick>
 8002ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ce6:	e009      	b.n	8002cfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ce8:	f7fe fa24 	bl	8001134 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cf6:	d901      	bls.n	8002cfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e007      	b.n	8002d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40007000 	.word	0x40007000

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e29b      	b.n	800326a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d40:	4b96      	ldr	r3, [pc, #600]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4c:	4b93      	ldr	r3, [pc, #588]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0x62>
 8002d58:	4b90      	ldr	r3, [pc, #576]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x130>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d168      	bne.n	8002e4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e275      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x7a>
 8002d88:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a83      	ldr	r2, [pc, #524]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e02e      	b.n	8002df4 <HAL_RCC_OscConfig+0xd8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x9c>
 8002d9e:	4b7f      	ldr	r3, [pc, #508]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7e      	ldr	r2, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b7c      	ldr	r3, [pc, #496]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7b      	ldr	r2, [pc, #492]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xd8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xc0>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b73      	ldr	r3, [pc, #460]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a72      	ldr	r2, [pc, #456]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xd8>
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6e      	ldr	r2, [pc, #440]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6b      	ldr	r2, [pc, #428]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f99a 	bl	8001134 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe f996 	bl	8001134 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e229      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe8>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f986 	bl	8001134 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f982 	bl	8001134 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e215      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x110>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d069      	beq.n	8002f2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5a:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x190>
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1e9      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	493d      	ldr	r1, [pc, #244]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e040      	b.n	8002f2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a38      	ldr	r2, [pc, #224]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe f938 	bl	8001134 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe f934 	bl	8001134 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1c7      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4929      	ldr	r1, [pc, #164]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
 8002efa:	e018      	b.n	8002f2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe f914 	bl	8001134 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe f910 	bl	8001134 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1a3      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d038      	beq.n	8002fac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d019      	beq.n	8002f76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f8f1 	bl	8001134 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fe f8ed 	bl	8001134 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e180      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x23a>
 8002f74:	e01a      	b.n	8002fac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe f8d7 	bl	8001134 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f8d3 	bl	8001134 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d903      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e166      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
 8002f9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	4b92      	ldr	r3, [pc, #584]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a4 	beq.w	8003102 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b8c      	ldr	r3, [pc, #560]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a88      	ldr	r2, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b86      	ldr	r3, [pc, #536]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe2:	4b83      	ldr	r3, [pc, #524]	; (80031f0 <HAL_RCC_OscConfig+0x4d4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d118      	bne.n	8003020 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fee:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7f      	ldr	r2, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x4d4>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe f89b 	bl	8001134 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003002:	f7fe f897 	bl	8001134 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b64      	cmp	r3, #100	; 0x64
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e12a      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003014:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x4d4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x31a>
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	e02d      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x33c>
 800303e:	4b6b      	ldr	r3, [pc, #428]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a6a      	ldr	r2, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	4b68      	ldr	r3, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a67      	ldr	r2, [pc, #412]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	e01c      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d10c      	bne.n	800307a <HAL_RCC_OscConfig+0x35e>
 8003060:	4b62      	ldr	r3, [pc, #392]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a61      	ldr	r2, [pc, #388]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a5e      	ldr	r2, [pc, #376]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
 8003078:	e00b      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
 800307a:	4b5c      	ldr	r3, [pc, #368]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a5b      	ldr	r2, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b59      	ldr	r3, [pc, #356]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d015      	beq.n	80030c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe f84b 	bl	8001134 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe f847 	bl	8001134 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0d8      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ee      	beq.n	80030a2 <HAL_RCC_OscConfig+0x386>
 80030c4:	e014      	b.n	80030f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe f835 	bl	8001134 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fe f831 	bl	8001134 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0c2      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ee      	bne.n	80030ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d105      	bne.n	8003102 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80ae 	beq.w	8003268 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310c:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d06d      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d14b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b32      	ldr	r3, [pc, #200]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a31      	ldr	r2, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe f802 	bl	8001134 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fd fffe 	bl	8001134 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e091      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	3b01      	subs	r3, #1
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	491b      	ldr	r1, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fd ffd0 	bl	8001134 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd ffcc 	bl	8001134 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e05f      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x47c>
 80031b6:	e057      	b.n	8003268 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80031be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd ffb6 	bl	8001134 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fd ffb2 	bl	8001134 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e045      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_OscConfig+0x4d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x4b0>
 80031ea:	e03d      	b.n	8003268 <HAL_RCC_OscConfig+0x54c>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_RCC_OscConfig+0x558>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d030      	beq.n	8003264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d129      	bne.n	8003264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d122      	bne.n	8003264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800322c:	4293      	cmp	r3, r2
 800322e:	d119      	bne.n	8003264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d10f      	bne.n	8003264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d107      	bne.n	8003264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0d0      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	4965      	ldr	r1, [pc, #404]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80032de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80032f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d040      	beq.n	800339c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d115      	bne.n	800335a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e073      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06b      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4936      	ldr	r1, [pc, #216]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fd fee2 	bl	8001134 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	e00a      	b.n	800338a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003374:	f7fd fede 	bl	8001134 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e053      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 020c 	and.w	r2, r3, #12
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	429a      	cmp	r2, r3
 800339a:	d1eb      	bne.n	8003374 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d210      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 020f 	bic.w	r2, r3, #15
 80033b2:	4922      	ldr	r1, [pc, #136]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f821 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490a      	ldr	r1, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x1cc>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1d0>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1d4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fd6c 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00
 8003440:	40023800 	.word	0x40023800
 8003444:	0801c44c 	.word	0x0801c44c
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004

08003450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	2300      	movs	r3, #0
 8003462:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003468:	4b67      	ldr	r3, [pc, #412]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d00d      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x40>
 8003474:	2b08      	cmp	r3, #8
 8003476:	f200 80bd 	bhi.w	80035f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x34>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x3a>
 8003482:	e0b7      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003486:	60bb      	str	r3, [r7, #8]
      break;
 8003488:	e0b7      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348a:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800348c:	60bb      	str	r3, [r7, #8]
      break;
 800348e:	e0b4      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003490:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003498:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800349a:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04d      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a6:	4b58      	ldr	r3, [pc, #352]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	461a      	mov	r2, r3
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	ea02 0800 	and.w	r8, r2, r0
 80034be:	ea03 0901 	and.w	r9, r3, r1
 80034c2:	4640      	mov	r0, r8
 80034c4:	4649      	mov	r1, r9
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	014b      	lsls	r3, r1, #5
 80034d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d4:	0142      	lsls	r2, r0, #5
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	ebb0 0008 	subs.w	r0, r0, r8
 80034de:	eb61 0109 	sbc.w	r1, r1, r9
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	018b      	lsls	r3, r1, #6
 80034ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f0:	0182      	lsls	r2, r0, #6
 80034f2:	1a12      	subs	r2, r2, r0
 80034f4:	eb63 0301 	sbc.w	r3, r3, r1
 80034f8:	f04f 0000 	mov.w	r0, #0
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	00d9      	lsls	r1, r3, #3
 8003502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003506:	00d0      	lsls	r0, r2, #3
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	eb12 0208 	adds.w	r2, r2, r8
 8003510:	eb43 0309 	adc.w	r3, r3, r9
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	0259      	lsls	r1, r3, #9
 800351e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003522:	0250      	lsls	r0, r2, #9
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	461a      	mov	r2, r3
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	f7fc fedc 	bl	80002f0 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e04a      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	461a      	mov	r2, r3
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	ea02 0400 	and.w	r4, r2, r0
 800355a:	ea03 0501 	and.w	r5, r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	014b      	lsls	r3, r1, #5
 800356c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003570:	0142      	lsls	r2, r0, #5
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	1b00      	subs	r0, r0, r4
 8003578:	eb61 0105 	sbc.w	r1, r1, r5
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	018b      	lsls	r3, r1, #6
 8003586:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800358a:	0182      	lsls	r2, r0, #6
 800358c:	1a12      	subs	r2, r2, r0
 800358e:	eb63 0301 	sbc.w	r3, r3, r1
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	00d9      	lsls	r1, r3, #3
 800359c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a0:	00d0      	lsls	r0, r2, #3
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	1912      	adds	r2, r2, r4
 80035a8:	eb45 0303 	adc.w	r3, r5, r3
 80035ac:	f04f 0000 	mov.w	r0, #0
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	0299      	lsls	r1, r3, #10
 80035b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035ba:	0290      	lsls	r0, r2, #10
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f7fc fe90 	bl	80002f0 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	3301      	adds	r3, #1
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	60bb      	str	r3, [r7, #8]
      break;
 80035f2:	e002      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035f6:	60bb      	str	r3, [r7, #8]
      break;
 80035f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fa:	68bb      	ldr	r3, [r7, #8]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	00f42400 	.word	0x00f42400
 8003610:	007a1200 	.word	0x007a1200

08003614 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_RCC_GetHCLKFreq+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003630:	f7ff fff0 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	0801c45c 	.word	0x0801c45c

08003654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003658:	f7ff ffdc 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0b5b      	lsrs	r3, r3, #13
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	0801c45c 	.word	0x0801c45c

0800367c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	220f      	movs	r2, #15
 800368a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0203 	and.w	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_RCC_GetClockConfig+0x60>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 020f 	and.w	r2, r3, #15
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40023c00 	.word	0x40023c00

080036e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003708:	4b69      	ldr	r3, [pc, #420]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a68      	ldr	r2, [pc, #416]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003712:	6093      	str	r3, [r2, #8]
 8003714:	4b66      	ldr	r3, [pc, #408]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	4964      	ldr	r1, [pc, #400]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d017      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	4959      	ldr	r1, [pc, #356]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003758:	d101      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800375a:	2301      	movs	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d017      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003776:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	494a      	ldr	r1, [pc, #296]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003794:	d101      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 808b 	beq.w	80038da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c4:	4b3a      	ldr	r3, [pc, #232]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	4a39      	ldr	r2, [pc, #228]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6413      	str	r3, [r2, #64]	; 0x40
 80037d0:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e8:	f7fd fca4 	bl	8001134 <HAL_GetTick>
 80037ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fd fca0 	bl	8001134 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e38f      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800380e:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d035      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	429a      	cmp	r2, r3
 800382a:	d02e      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382c:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d114      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fc68 	bl	8001134 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd fc64 	bl	8001134 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e351      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ee      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003896:	d111      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038a6:	400b      	ands	r3, r1
 80038a8:	4901      	ldr	r1, [pc, #4]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
 80038ae:	e00b      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000
 80038b8:	0ffffcff 	.word	0x0ffffcff
 80038bc:	4bb3      	ldr	r3, [pc, #716]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4ab2      	ldr	r2, [pc, #712]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	4bb0      	ldr	r3, [pc, #704]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	49ad      	ldr	r1, [pc, #692]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038e6:	4ba9      	ldr	r3, [pc, #676]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	4aa7      	ldr	r2, [pc, #668]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038f6:	4ba5      	ldr	r3, [pc, #660]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	49a2      	ldr	r1, [pc, #648]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003914:	4b9d      	ldr	r3, [pc, #628]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003922:	499a      	ldr	r1, [pc, #616]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003936:	4b95      	ldr	r3, [pc, #596]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003944:	4991      	ldr	r1, [pc, #580]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003958:	4b8c      	ldr	r3, [pc, #560]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	4989      	ldr	r1, [pc, #548]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800397a:	4b84      	ldr	r3, [pc, #528]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	4980      	ldr	r1, [pc, #512]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800399c:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4978      	ldr	r1, [pc, #480]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039be:	4b73      	ldr	r3, [pc, #460]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f023 020c 	bic.w	r2, r3, #12
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	496f      	ldr	r1, [pc, #444]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e0:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	4967      	ldr	r1, [pc, #412]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a02:	4b62      	ldr	r3, [pc, #392]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	495e      	ldr	r1, [pc, #376]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	4956      	ldr	r1, [pc, #344]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a46:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	494d      	ldr	r1, [pc, #308]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a68:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	4945      	ldr	r1, [pc, #276]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a8a:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a98:	493c      	ldr	r1, [pc, #240]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aac:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aba:	4934      	ldr	r1, [pc, #208]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d011      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ace:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003adc:	492b      	ldr	r1, [pc, #172]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aec:	d101      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	491b      	ldr	r1, [pc, #108]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b40:	4912      	ldr	r1, [pc, #72]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b64:	4909      	ldr	r1, [pc, #36]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	4986      	ldr	r1, [pc, #536]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ba4:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003baa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb4:	497d      	ldr	r1, [pc, #500]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d006      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80d6 	beq.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd0:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fd faaa 	bl	8001134 <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003be4:	f7fd faa6 	bl	8001134 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e195      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d021      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11d      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c24:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2a:	0e1b      	lsrs	r3, r3, #24
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	019a      	lsls	r2, r3, #6
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	4958      	ldr	r1, [pc, #352]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d02e      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d129      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c7e:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c8c:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c92:	0f1b      	lsrs	r3, r3, #28
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	493e      	ldr	r1, [pc, #248]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cba:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc0:	f023 021f 	bic.w	r2, r3, #31
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	4938      	ldr	r1, [pc, #224]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01d      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce4:	0e1b      	lsrs	r3, r3, #24
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf2:	0f1b      	lsrs	r3, r3, #28
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	019a      	lsls	r2, r3, #6
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	061b      	lsls	r3, r3, #24
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	071b      	lsls	r3, r3, #28
 8003d12:	4926      	ldr	r1, [pc, #152]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d011      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	019a      	lsls	r2, r3, #6
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	491a      	ldr	r1, [pc, #104]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d56:	f7fd f9ed 	bl	8001134 <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d5e:	f7fd f9e9 	bl	8001134 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	; 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0d8      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	f040 80ce 	bne.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d90:	f7fd f9d0 	bl	8001134 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d96:	e00b      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d98:	f7fd f9cc 	bl	8001134 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d904      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0bb      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db0:	4b5e      	ldr	r3, [pc, #376]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dbc:	d0ec      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02e      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d12a      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003de6:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003df4:	4b4d      	ldr	r3, [pc, #308]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	0f1b      	lsrs	r3, r3, #28
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	019a      	lsls	r2, r3, #6
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	071b      	lsls	r3, r3, #28
 8003e1a:	4944      	ldr	r1, [pc, #272]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e22:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	493d      	ldr	r1, [pc, #244]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d022      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e50:	d11d      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e52:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	0f1b      	lsrs	r3, r3, #28
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	019a      	lsls	r2, r3, #6
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	4929      	ldr	r1, [pc, #164]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d028      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	0e1b      	lsrs	r3, r3, #24
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	019a      	lsls	r2, r3, #6
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	071b      	lsls	r3, r3, #28
 8003ece:	4917      	ldr	r1, [pc, #92]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	4911      	ldr	r1, [pc, #68]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0e      	ldr	r2, [pc, #56]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef8:	f7fd f91c 	bl	8001134 <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f00:	f7fd f918 	bl	8001134 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e007      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1e:	d1ef      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e049      	b.n	8003fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f841 	bl	8003fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 fa00 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d001      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e054      	b.n	80040b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d01d      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x80>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_TIM_Base_Start_IT+0xe8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d115      	bne.n	80040a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_TIM_Base_Start_IT+0xec>)
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b06      	cmp	r3, #6
 8004084:	d015      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0xbe>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408c:	d011      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	e008      	b.n	80040b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e000      	b.n	80040b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40010400 	.word	0x40010400
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40001800 	.word	0x40001800
 80040e0:	00010007 	.word	0x00010007

080040e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0202 	mvn.w	r2, #2
 8004110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f905 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8f7 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f908 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0204 	mvn.w	r2, #4
 8004164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8db 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8cd 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8de 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0208 	mvn.w	r2, #8
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2204      	movs	r2, #4
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8b1 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8a3 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8b4 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2208      	movs	r2, #8
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f887 	bl	8004336 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f879 	bl	8004322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f88a 	bl	800434a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10e      	bne.n	8004268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0201 	mvn.w	r2, #1
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fca0 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f91a 	bl	80044c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a2:	d10e      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b80      	cmp	r3, #128	; 0x80
 80042b0:	d107      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f90d 	bl	80044dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f838 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b20      	cmp	r3, #32
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0220 	mvn.w	r2, #32
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f8cd 	bl	80044b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a40      	ldr	r2, [pc, #256]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3d      	ldr	r2, [pc, #244]	; (800448c <TIM_Base_SetConfig+0x118>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2f      	ldr	r2, [pc, #188]	; (8004488 <TIM_Base_SetConfig+0x114>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d027      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2c      	ldr	r2, [pc, #176]	; (800448c <TIM_Base_SetConfig+0x118>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d023      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2b      	ldr	r2, [pc, #172]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a29      	ldr	r2, [pc, #164]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a28      	ldr	r2, [pc, #160]	; (800449c <TIM_Base_SetConfig+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <TIM_Base_SetConfig+0x12c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <TIM_Base_SetConfig+0x130>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <TIM_Base_SetConfig+0x134>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a24      	ldr	r2, [pc, #144]	; (80044ac <TIM_Base_SetConfig+0x138>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <TIM_Base_SetConfig+0x13c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d103      	bne.n	8004474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	615a      	str	r2, [r3, #20]
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800
 80044a8:	40001800 	.word	0x40001800
 80044ac:	40001c00 	.word	0x40001c00
 80044b0:	40002000 	.word	0x40002000

080044b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e040      	b.n	8004584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fc58 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f990 	bl	8004854 <UART_SetConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e022      	b.n	8004584 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fbe6 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fc6d 	bl	8004e5c <UART_CheckIdleState>
 8004582:	4603      	mov	r3, r0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	f040 8081 	bne.w	80046a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_UART_Transmit+0x26>
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e079      	b.n	80046aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Transmit+0x38>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e072      	b.n	80046aa <HAL_UART_Transmit+0x11e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2221      	movs	r2, #33	; 0x21
 80045d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045da:	f7fc fdab 	bl	8001134 <HAL_GetTick>
 80045de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d108      	bne.n	800460c <HAL_UART_Transmit+0x80>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e003      	b.n	8004614 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800461c:	e02c      	b.n	8004678 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fc60 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e038      	b.n	80046aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3302      	adds	r3, #2
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e007      	b.n	8004666 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1cc      	bne.n	800461e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2200      	movs	r2, #0
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fc2d 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e005      	b.n	80046aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b08a      	sub	sp, #40	; 0x28
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	f040 80be 	bne.w	8004848 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Receive+0x26>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0b6      	b.n	800484a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_UART_Receive+0x38>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e0af      	b.n	800484a <HAL_UART_Receive+0x198>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2222      	movs	r2, #34	; 0x22
 80046fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004706:	f7fc fd15 	bl	8001134 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d10e      	bne.n	8004744 <HAL_UART_Receive+0x92>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <HAL_UART_Receive+0x88>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004734:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004738:	e02d      	b.n	8004796 <HAL_UART_Receive+0xe4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004742:	e028      	b.n	8004796 <HAL_UART_Receive+0xe4>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_UART_Receive+0xb6>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_UART_Receive+0xac>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	22ff      	movs	r2, #255	; 0xff
 8004758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800475c:	e01b      	b.n	8004796 <HAL_UART_Receive+0xe4>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	227f      	movs	r2, #127	; 0x7f
 8004762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004766:	e016      	b.n	8004796 <HAL_UART_Receive+0xe4>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004770:	d10d      	bne.n	800478e <HAL_UART_Receive+0xdc>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_UART_Receive+0xd2>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	227f      	movs	r2, #127	; 0x7f
 800477e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004782:	e008      	b.n	8004796 <HAL_UART_Receive+0xe4>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	223f      	movs	r2, #63	; 0x3f
 8004788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478c:	e003      	b.n	8004796 <HAL_UART_Receive+0xe4>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800479c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a6:	d108      	bne.n	80047ba <HAL_UART_Receive+0x108>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	e003      	b.n	80047c2 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047ca:	e032      	b.n	8004832 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	2120      	movs	r1, #32
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb89 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e031      	b.n	800484a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10c      	bne.n	8004806 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	8a7b      	ldrh	r3, [r7, #18]
 80047f6:	4013      	ands	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3302      	adds	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e00c      	b.n	8004820 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8a7b      	ldrh	r3, [r7, #18]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4013      	ands	r3, r2
 8004814:	b2da      	uxtb	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3301      	adds	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1c6      	bne.n	80047cc <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4ba7      	ldr	r3, [pc, #668]	; (8004b1c <UART_SetConfig+0x2c8>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	6979      	ldr	r1, [r7, #20]
 8004888:	430b      	orrs	r3, r1
 800488a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a95      	ldr	r2, [pc, #596]	; (8004b20 <UART_SetConfig+0x2cc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d120      	bne.n	8004912 <UART_SetConfig+0xbe>
 80048d0:	4b94      	ldr	r3, [pc, #592]	; (8004b24 <UART_SetConfig+0x2d0>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d816      	bhi.n	800490c <UART_SetConfig+0xb8>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x90>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	08004901 	.word	0x08004901
 80048ec:	080048fb 	.word	0x080048fb
 80048f0:	08004907 	.word	0x08004907
 80048f4:	2301      	movs	r3, #1
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e14f      	b.n	8004b9a <UART_SetConfig+0x346>
 80048fa:	2302      	movs	r3, #2
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e14c      	b.n	8004b9a <UART_SetConfig+0x346>
 8004900:	2304      	movs	r3, #4
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e149      	b.n	8004b9a <UART_SetConfig+0x346>
 8004906:	2308      	movs	r3, #8
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e146      	b.n	8004b9a <UART_SetConfig+0x346>
 800490c:	2310      	movs	r3, #16
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e143      	b.n	8004b9a <UART_SetConfig+0x346>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a84      	ldr	r2, [pc, #528]	; (8004b28 <UART_SetConfig+0x2d4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d132      	bne.n	8004982 <UART_SetConfig+0x12e>
 800491c:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <UART_SetConfig+0x2d0>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d828      	bhi.n	800497c <UART_SetConfig+0x128>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0xdc>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004965 	.word	0x08004965
 8004934:	0800497d 	.word	0x0800497d
 8004938:	0800497d 	.word	0x0800497d
 800493c:	0800497d 	.word	0x0800497d
 8004940:	08004971 	.word	0x08004971
 8004944:	0800497d 	.word	0x0800497d
 8004948:	0800497d 	.word	0x0800497d
 800494c:	0800497d 	.word	0x0800497d
 8004950:	0800496b 	.word	0x0800496b
 8004954:	0800497d 	.word	0x0800497d
 8004958:	0800497d 	.word	0x0800497d
 800495c:	0800497d 	.word	0x0800497d
 8004960:	08004977 	.word	0x08004977
 8004964:	2300      	movs	r3, #0
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e117      	b.n	8004b9a <UART_SetConfig+0x346>
 800496a:	2302      	movs	r3, #2
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e114      	b.n	8004b9a <UART_SetConfig+0x346>
 8004970:	2304      	movs	r3, #4
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e111      	b.n	8004b9a <UART_SetConfig+0x346>
 8004976:	2308      	movs	r3, #8
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e10e      	b.n	8004b9a <UART_SetConfig+0x346>
 800497c:	2310      	movs	r3, #16
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e10b      	b.n	8004b9a <UART_SetConfig+0x346>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a69      	ldr	r2, [pc, #420]	; (8004b2c <UART_SetConfig+0x2d8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d120      	bne.n	80049ce <UART_SetConfig+0x17a>
 800498c:	4b65      	ldr	r3, [pc, #404]	; (8004b24 <UART_SetConfig+0x2d0>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004996:	2b30      	cmp	r3, #48	; 0x30
 8004998:	d013      	beq.n	80049c2 <UART_SetConfig+0x16e>
 800499a:	2b30      	cmp	r3, #48	; 0x30
 800499c:	d814      	bhi.n	80049c8 <UART_SetConfig+0x174>
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d009      	beq.n	80049b6 <UART_SetConfig+0x162>
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d810      	bhi.n	80049c8 <UART_SetConfig+0x174>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <UART_SetConfig+0x15c>
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d006      	beq.n	80049bc <UART_SetConfig+0x168>
 80049ae:	e00b      	b.n	80049c8 <UART_SetConfig+0x174>
 80049b0:	2300      	movs	r3, #0
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e0f1      	b.n	8004b9a <UART_SetConfig+0x346>
 80049b6:	2302      	movs	r3, #2
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e0ee      	b.n	8004b9a <UART_SetConfig+0x346>
 80049bc:	2304      	movs	r3, #4
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e0eb      	b.n	8004b9a <UART_SetConfig+0x346>
 80049c2:	2308      	movs	r3, #8
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e0e8      	b.n	8004b9a <UART_SetConfig+0x346>
 80049c8:	2310      	movs	r3, #16
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e0e5      	b.n	8004b9a <UART_SetConfig+0x346>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <UART_SetConfig+0x2dc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d120      	bne.n	8004a1a <UART_SetConfig+0x1c6>
 80049d8:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <UART_SetConfig+0x2d0>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049e2:	2bc0      	cmp	r3, #192	; 0xc0
 80049e4:	d013      	beq.n	8004a0e <UART_SetConfig+0x1ba>
 80049e6:	2bc0      	cmp	r3, #192	; 0xc0
 80049e8:	d814      	bhi.n	8004a14 <UART_SetConfig+0x1c0>
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d009      	beq.n	8004a02 <UART_SetConfig+0x1ae>
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d810      	bhi.n	8004a14 <UART_SetConfig+0x1c0>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <UART_SetConfig+0x1a8>
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d006      	beq.n	8004a08 <UART_SetConfig+0x1b4>
 80049fa:	e00b      	b.n	8004a14 <UART_SetConfig+0x1c0>
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e0cb      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a02:	2302      	movs	r3, #2
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e0c8      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e0c5      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e0c2      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a14:	2310      	movs	r3, #16
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e0bf      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a45      	ldr	r2, [pc, #276]	; (8004b34 <UART_SetConfig+0x2e0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d125      	bne.n	8004a70 <UART_SetConfig+0x21c>
 8004a24:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <UART_SetConfig+0x2d0>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a32:	d017      	beq.n	8004a64 <UART_SetConfig+0x210>
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d817      	bhi.n	8004a6a <UART_SetConfig+0x216>
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3e:	d00b      	beq.n	8004a58 <UART_SetConfig+0x204>
 8004a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a44:	d811      	bhi.n	8004a6a <UART_SetConfig+0x216>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <UART_SetConfig+0x1fe>
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d006      	beq.n	8004a5e <UART_SetConfig+0x20a>
 8004a50:	e00b      	b.n	8004a6a <UART_SetConfig+0x216>
 8004a52:	2300      	movs	r3, #0
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e0a0      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e09d      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a5e:	2304      	movs	r3, #4
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e09a      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a64:	2308      	movs	r3, #8
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e097      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e094      	b.n	8004b9a <UART_SetConfig+0x346>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a30      	ldr	r2, [pc, #192]	; (8004b38 <UART_SetConfig+0x2e4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d125      	bne.n	8004ac6 <UART_SetConfig+0x272>
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <UART_SetConfig+0x2d0>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a88:	d017      	beq.n	8004aba <UART_SetConfig+0x266>
 8004a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a8e:	d817      	bhi.n	8004ac0 <UART_SetConfig+0x26c>
 8004a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a94:	d00b      	beq.n	8004aae <UART_SetConfig+0x25a>
 8004a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9a:	d811      	bhi.n	8004ac0 <UART_SetConfig+0x26c>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <UART_SetConfig+0x254>
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	d006      	beq.n	8004ab4 <UART_SetConfig+0x260>
 8004aa6:	e00b      	b.n	8004ac0 <UART_SetConfig+0x26c>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e075      	b.n	8004b9a <UART_SetConfig+0x346>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e072      	b.n	8004b9a <UART_SetConfig+0x346>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e06f      	b.n	8004b9a <UART_SetConfig+0x346>
 8004aba:	2308      	movs	r3, #8
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e06c      	b.n	8004b9a <UART_SetConfig+0x346>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e069      	b.n	8004b9a <UART_SetConfig+0x346>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <UART_SetConfig+0x2e8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d137      	bne.n	8004b40 <UART_SetConfig+0x2ec>
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <UART_SetConfig+0x2d0>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ada:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ade:	d017      	beq.n	8004b10 <UART_SetConfig+0x2bc>
 8004ae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ae4:	d817      	bhi.n	8004b16 <UART_SetConfig+0x2c2>
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aea:	d00b      	beq.n	8004b04 <UART_SetConfig+0x2b0>
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d811      	bhi.n	8004b16 <UART_SetConfig+0x2c2>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <UART_SetConfig+0x2aa>
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d006      	beq.n	8004b0a <UART_SetConfig+0x2b6>
 8004afc:	e00b      	b.n	8004b16 <UART_SetConfig+0x2c2>
 8004afe:	2300      	movs	r3, #0
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e04a      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b04:	2302      	movs	r3, #2
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e047      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e044      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b10:	2308      	movs	r3, #8
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e041      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b16:	2310      	movs	r3, #16
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e03e      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b1c:	efff69f3 	.word	0xefff69f3
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	40011400 	.word	0x40011400
 8004b3c:	40007800 	.word	0x40007800
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a71      	ldr	r2, [pc, #452]	; (8004d0c <UART_SetConfig+0x4b8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d125      	bne.n	8004b96 <UART_SetConfig+0x342>
 8004b4a:	4b71      	ldr	r3, [pc, #452]	; (8004d10 <UART_SetConfig+0x4bc>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b58:	d017      	beq.n	8004b8a <UART_SetConfig+0x336>
 8004b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b5e:	d817      	bhi.n	8004b90 <UART_SetConfig+0x33c>
 8004b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b64:	d00b      	beq.n	8004b7e <UART_SetConfig+0x32a>
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6a:	d811      	bhi.n	8004b90 <UART_SetConfig+0x33c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <UART_SetConfig+0x324>
 8004b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b74:	d006      	beq.n	8004b84 <UART_SetConfig+0x330>
 8004b76:	e00b      	b.n	8004b90 <UART_SetConfig+0x33c>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e00d      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e00a      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b84:	2304      	movs	r3, #4
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e007      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e004      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b90:	2310      	movs	r3, #16
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e001      	b.n	8004b9a <UART_SetConfig+0x346>
 8004b96:	2310      	movs	r3, #16
 8004b98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba2:	d15b      	bne.n	8004c5c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d827      	bhi.n	8004bfa <UART_SetConfig+0x3a6>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x35c>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe fd2a 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8004bd8:	61b8      	str	r0, [r7, #24]
        break;
 8004bda:	e013      	b.n	8004c04 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe fd3a 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 8004be0:	61b8      	str	r0, [r7, #24]
        break;
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <UART_SetConfig+0x4c0>)
 8004be6:	61bb      	str	r3, [r7, #24]
        break;
 8004be8:	e00c      	b.n	8004c04 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fe fc31 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8004bee:	61b8      	str	r0, [r7, #24]
        break;
 8004bf0:	e008      	b.n	8004c04 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	61bb      	str	r3, [r7, #24]
        break;
 8004bf8:	e004      	b.n	8004c04 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	77bb      	strb	r3, [r7, #30]
        break;
 8004c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d074      	beq.n	8004cf4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	005a      	lsls	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b0f      	cmp	r3, #15
 8004c26:	d916      	bls.n	8004c56 <UART_SetConfig+0x402>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d212      	bcs.n	8004c56 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f023 030f 	bic.w	r3, r3, #15
 8004c38:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	89fb      	ldrh	r3, [r7, #14]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	89fa      	ldrh	r2, [r7, #14]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e04e      	b.n	8004cf4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	77bb      	strb	r3, [r7, #30]
 8004c5a:	e04b      	b.n	8004cf4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c5c:	7ffb      	ldrb	r3, [r7, #31]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d827      	bhi.n	8004cb2 <UART_SetConfig+0x45e>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x414>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004cb3 	.word	0x08004cb3
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004cb3 	.word	0x08004cb3
 8004c80:	08004cb3 	.word	0x08004cb3
 8004c84:	08004cb3 	.word	0x08004cb3
 8004c88:	08004cab 	.word	0x08004cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe fcce 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8004c90:	61b8      	str	r0, [r7, #24]
        break;
 8004c92:	e013      	b.n	8004cbc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c94:	f7fe fcde 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 8004c98:	61b8      	str	r0, [r7, #24]
        break;
 8004c9a:	e00f      	b.n	8004cbc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <UART_SetConfig+0x4c0>)
 8004c9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ca0:	e00c      	b.n	8004cbc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca2:	f7fe fbd5 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8004ca6:	61b8      	str	r0, [r7, #24]
        break;
 8004ca8:	e008      	b.n	8004cbc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e004      	b.n	8004cbc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cba:	bf00      	nop
    }

    if (pclk != 0U)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	085a      	lsrs	r2, r3, #1
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	441a      	add	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d908      	bls.n	8004cf0 <UART_SetConfig+0x49c>
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d204      	bcs.n	8004cf0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	60da      	str	r2, [r3, #12]
 8004cee:	e001      	b.n	8004cf4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d00:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40007c00 	.word	0x40007c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	00f42400 	.word	0x00f42400

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d10a      	bne.n	8004e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e6c:	f7fc f962 	bl	8001134 <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d10e      	bne.n	8004e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f82d 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e023      	b.n	8004ee6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d10e      	bne.n	8004eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f817 	bl	8004eee <UART_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e00d      	b.n	8004ee6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	e05e      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d05a      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f08:	f7fc f914 	bl	8001134 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11b      	bne.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e043      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02c      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f72:	d124      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e00f      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d091      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe8:	b084      	sub	sp, #16
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	f107 001c 	add.w	r0, r7, #28
 8004ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d120      	bne.n	8005042 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4b20      	ldr	r3, [pc, #128]	; (8005094 <USB_CoreInit+0xac>)
 8005012:	4013      	ands	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa5a 	bl	80054f0 <USB_CoreReset>
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]
 8005040:	e010      	b.n	8005064 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa4e 	bl	80054f0 <USB_CoreReset>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2b01      	cmp	r3, #1
 8005068:	d10b      	bne.n	8005082 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f043 0206 	orr.w	r2, r3, #6
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f043 0220 	orr.w	r2, r3, #32
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800508e:	b004      	add	sp, #16
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	ffbdffbf 	.word	0xffbdffbf

08005098 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 0201 	bic.w	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	e00b      	b.n	80050fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e001      	b.n	80050fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e003      	b.n	8005106 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050fe:	2032      	movs	r0, #50	; 0x32
 8005100:	f7fc f824 	bl	800114c <HAL_Delay>

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005110:	b084      	sub	sp, #16
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800511e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e009      	b.n	8005144 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3340      	adds	r3, #64	; 0x40
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	2200      	movs	r2, #0
 800513c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	3301      	adds	r3, #1
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b0e      	cmp	r3, #14
 8005148:	d9f2      	bls.n	8005130 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800514a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11c      	bne.n	800518a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800515e:	f043 0302 	orr.w	r3, r3, #2
 8005162:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e005      	b.n	8005196 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800519c:	461a      	mov	r2, r3
 800519e:	2300      	movs	r3, #0
 80051a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a8:	4619      	mov	r1, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	461a      	mov	r2, r3
 80051b2:	680b      	ldr	r3, [r1, #0]
 80051b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10c      	bne.n	80051d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051c2:	2100      	movs	r1, #0
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f959 	bl	800547c <USB_SetDevSpeed>
 80051ca:	e018      	b.n	80051fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051cc:	2101      	movs	r1, #1
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f954 	bl	800547c <USB_SetDevSpeed>
 80051d4:	e013      	b.n	80051fe <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d10c      	bne.n	80051f6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051e2:	2100      	movs	r1, #0
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f949 	bl	800547c <USB_SetDevSpeed>
 80051ea:	e008      	b.n	80051fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051ec:	2101      	movs	r1, #1
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f944 	bl	800547c <USB_SetDevSpeed>
 80051f4:	e003      	b.n	80051fe <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051f6:	2103      	movs	r1, #3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f93f 	bl	800547c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051fe:	2110      	movs	r1, #16
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f8f3 	bl	80053ec <USB_FlushTxFifo>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f911 	bl	8005438 <USB_FlushRxFifo>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	461a      	mov	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	461a      	mov	r2, r3
 8005240:	2300      	movs	r3, #0
 8005242:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	e043      	b.n	80052d2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005260:	d118      	bne.n	8005294 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	461a      	mov	r2, r3
 8005276:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e013      	b.n	80052a6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	461a      	mov	r2, r3
 800528c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e008      	b.n	80052a6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	461a      	mov	r2, r3
 80052a2:	2300      	movs	r3, #0
 80052a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	461a      	mov	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	461a      	mov	r2, r3
 80052c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3301      	adds	r3, #1
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3b7      	bcc.n	800524a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e043      	b.n	8005368 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f6:	d118      	bne.n	800532a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	461a      	mov	r2, r3
 800530c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e013      	b.n	800533c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	461a      	mov	r2, r3
 8005322:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e008      	b.n	800533c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	461a      	mov	r2, r3
 8005338:	2300      	movs	r3, #0
 800533a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	461a      	mov	r2, r3
 800534a:	2300      	movs	r3, #0
 800534c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	461a      	mov	r2, r3
 800535c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005360:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	3301      	adds	r3, #1
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	429a      	cmp	r2, r3
 800536e:	d3b7      	bcc.n	80052e0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005382:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005390:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f043 0210 	orr.w	r2, r3, #16
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <USB_DevInit+0x2d4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f043 0208 	orr.w	r2, r3, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <USB_DevInit+0x2d8>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e0:	b004      	add	sp, #16
 80053e2:	4770      	bx	lr
 80053e4:	803c3800 	.word	0x803c3800
 80053e8:	40000004 	.word	0x40000004

080053ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <USB_FlushTxFifo+0x48>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b20      	cmp	r3, #32
 8005422:	d0f0      	beq.n	8005406 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	00030d40 	.word	0x00030d40

08005438 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2210      	movs	r2, #16
 8005448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <USB_FlushRxFifo+0x40>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e006      	b.n	800546a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b10      	cmp	r3, #16
 8005466:	d0f0      	beq.n	800544a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	00030d40 	.word	0x00030d40

0800547c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054c8:	f023 0303 	bic.w	r3, r3, #3
 80054cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a13      	ldr	r2, [pc, #76]	; (8005554 <USB_CoreReset+0x64>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e01b      	b.n	8005546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	daf2      	bge.n	80054fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f043 0201 	orr.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a09      	ldr	r2, [pc, #36]	; (8005554 <USB_CoreReset+0x64>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e006      	b.n	8005546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d0f0      	beq.n	8005526 <USB_CoreReset+0x36>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	00030d40 	.word	0x00030d40

08005558 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800555e:	4ba0      	ldr	r3, [pc, #640]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005560:	22c0      	movs	r2, #192	; 0xc0
 8005562:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005564:	4b9e      	ldr	r3, [pc, #632]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005566:	22a8      	movs	r2, #168	; 0xa8
 8005568:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800556a:	4b9d      	ldr	r3, [pc, #628]	; (80057e0 <MX_LWIP_Init+0x288>)
 800556c:	2201      	movs	r2, #1
 800556e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8005570:	4b9b      	ldr	r3, [pc, #620]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005572:	2264      	movs	r2, #100	; 0x64
 8005574:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 225;
 8005576:	4b9b      	ldr	r3, [pc, #620]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005578:	22e1      	movs	r2, #225	; 0xe1
 800557a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 225;
 800557c:	4b99      	ldr	r3, [pc, #612]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800557e:	22e1      	movs	r2, #225	; 0xe1
 8005580:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 225;
 8005582:	4b98      	ldr	r3, [pc, #608]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005584:	22e1      	movs	r2, #225	; 0xe1
 8005586:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005588:	4b96      	ldr	r3, [pc, #600]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800558a:	2200      	movs	r2, #0
 800558c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800558e:	4b96      	ldr	r3, [pc, #600]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005590:	22c0      	movs	r2, #192	; 0xc0
 8005592:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005594:	4b94      	ldr	r3, [pc, #592]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005596:	22a8      	movs	r2, #168	; 0xa8
 8005598:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800559a:	4b93      	ldr	r3, [pc, #588]	; (80057e8 <MX_LWIP_Init+0x290>)
 800559c:	2201      	movs	r2, #1
 800559e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80055a0:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <MX_LWIP_Init+0x290>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80055a6:	2100      	movs	r1, #0
 80055a8:	2000      	movs	r0, #0
 80055aa:	f007 f82f 	bl	800c60c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80055ae:	4b8c      	ldr	r3, [pc, #560]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	061a      	lsls	r2, r3, #24
 80055b4:	4b8a      	ldr	r3, [pc, #552]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	431a      	orrs	r2, r3
 80055bc:	4b88      	ldr	r3, [pc, #544]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055be:	789b      	ldrb	r3, [r3, #2]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	4313      	orrs	r3, r2
 80055c4:	4a86      	ldr	r2, [pc, #536]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055c6:	78d2      	ldrb	r2, [r2, #3]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	061a      	lsls	r2, r3, #24
 80055cc:	4b84      	ldr	r3, [pc, #528]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	0619      	lsls	r1, r3, #24
 80055d2:	4b83      	ldr	r3, [pc, #524]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	4319      	orrs	r1, r3
 80055da:	4b81      	ldr	r3, [pc, #516]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055dc:	789b      	ldrb	r3, [r3, #2]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	430b      	orrs	r3, r1
 80055e2:	497f      	ldr	r1, [pc, #508]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055e4:	78c9      	ldrb	r1, [r1, #3]
 80055e6:	430b      	orrs	r3, r1
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ee:	431a      	orrs	r2, r3
 80055f0:	4b7b      	ldr	r3, [pc, #492]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	0619      	lsls	r1, r3, #24
 80055f6:	4b7a      	ldr	r3, [pc, #488]	; (80057e0 <MX_LWIP_Init+0x288>)
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	4319      	orrs	r1, r3
 80055fe:	4b78      	ldr	r3, [pc, #480]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005600:	789b      	ldrb	r3, [r3, #2]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	430b      	orrs	r3, r1
 8005606:	4976      	ldr	r1, [pc, #472]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005608:	78c9      	ldrb	r1, [r1, #3]
 800560a:	430b      	orrs	r3, r1
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005612:	431a      	orrs	r2, r3
 8005614:	4b72      	ldr	r3, [pc, #456]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	0619      	lsls	r1, r3, #24
 800561a:	4b71      	ldr	r3, [pc, #452]	; (80057e0 <MX_LWIP_Init+0x288>)
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	4319      	orrs	r1, r3
 8005622:	4b6f      	ldr	r3, [pc, #444]	; (80057e0 <MX_LWIP_Init+0x288>)
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	430b      	orrs	r3, r1
 800562a:	496d      	ldr	r1, [pc, #436]	; (80057e0 <MX_LWIP_Init+0x288>)
 800562c:	78c9      	ldrb	r1, [r1, #3]
 800562e:	430b      	orrs	r3, r1
 8005630:	0e1b      	lsrs	r3, r3, #24
 8005632:	4313      	orrs	r3, r2
 8005634:	4a6d      	ldr	r2, [pc, #436]	; (80057ec <MX_LWIP_Init+0x294>)
 8005636:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005638:	4b6a      	ldr	r3, [pc, #424]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	061a      	lsls	r2, r3, #24
 800563e:	4b69      	ldr	r3, [pc, #420]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	431a      	orrs	r2, r3
 8005646:	4b67      	ldr	r3, [pc, #412]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005648:	789b      	ldrb	r3, [r3, #2]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	4313      	orrs	r3, r2
 800564e:	4a65      	ldr	r2, [pc, #404]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005650:	78d2      	ldrb	r2, [r2, #3]
 8005652:	4313      	orrs	r3, r2
 8005654:	061a      	lsls	r2, r3, #24
 8005656:	4b63      	ldr	r3, [pc, #396]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	0619      	lsls	r1, r3, #24
 800565c:	4b61      	ldr	r3, [pc, #388]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	4319      	orrs	r1, r3
 8005664:	4b5f      	ldr	r3, [pc, #380]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005666:	789b      	ldrb	r3, [r3, #2]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	430b      	orrs	r3, r1
 800566c:	495d      	ldr	r1, [pc, #372]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800566e:	78c9      	ldrb	r1, [r1, #3]
 8005670:	430b      	orrs	r3, r1
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005678:	431a      	orrs	r2, r3
 800567a:	4b5a      	ldr	r3, [pc, #360]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	0619      	lsls	r1, r3, #24
 8005680:	4b58      	ldr	r3, [pc, #352]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	4319      	orrs	r1, r3
 8005688:	4b56      	ldr	r3, [pc, #344]	; (80057e4 <MX_LWIP_Init+0x28c>)
 800568a:	789b      	ldrb	r3, [r3, #2]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	430b      	orrs	r3, r1
 8005690:	4954      	ldr	r1, [pc, #336]	; (80057e4 <MX_LWIP_Init+0x28c>)
 8005692:	78c9      	ldrb	r1, [r1, #3]
 8005694:	430b      	orrs	r3, r1
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800569c:	431a      	orrs	r2, r3
 800569e:	4b51      	ldr	r3, [pc, #324]	; (80057e4 <MX_LWIP_Init+0x28c>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	0619      	lsls	r1, r3, #24
 80056a4:	4b4f      	ldr	r3, [pc, #316]	; (80057e4 <MX_LWIP_Init+0x28c>)
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	4319      	orrs	r1, r3
 80056ac:	4b4d      	ldr	r3, [pc, #308]	; (80057e4 <MX_LWIP_Init+0x28c>)
 80056ae:	789b      	ldrb	r3, [r3, #2]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	430b      	orrs	r3, r1
 80056b4:	494b      	ldr	r1, [pc, #300]	; (80057e4 <MX_LWIP_Init+0x28c>)
 80056b6:	78c9      	ldrb	r1, [r1, #3]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	0e1b      	lsrs	r3, r3, #24
 80056bc:	4313      	orrs	r3, r2
 80056be:	4a4c      	ldr	r2, [pc, #304]	; (80057f0 <MX_LWIP_Init+0x298>)
 80056c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80056c2:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	061a      	lsls	r2, r3, #24
 80056c8:	4b47      	ldr	r3, [pc, #284]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	431a      	orrs	r2, r3
 80056d0:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056d2:	789b      	ldrb	r3, [r3, #2]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	4313      	orrs	r3, r2
 80056d8:	4a43      	ldr	r2, [pc, #268]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056da:	78d2      	ldrb	r2, [r2, #3]
 80056dc:	4313      	orrs	r3, r2
 80056de:	061a      	lsls	r2, r3, #24
 80056e0:	4b41      	ldr	r3, [pc, #260]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	0619      	lsls	r1, r3, #24
 80056e6:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	4319      	orrs	r1, r3
 80056ee:	4b3e      	ldr	r3, [pc, #248]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056f0:	789b      	ldrb	r3, [r3, #2]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	430b      	orrs	r3, r1
 80056f6:	493c      	ldr	r1, [pc, #240]	; (80057e8 <MX_LWIP_Init+0x290>)
 80056f8:	78c9      	ldrb	r1, [r1, #3]
 80056fa:	430b      	orrs	r3, r1
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005702:	431a      	orrs	r2, r3
 8005704:	4b38      	ldr	r3, [pc, #224]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	0619      	lsls	r1, r3, #24
 800570a:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <MX_LWIP_Init+0x290>)
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	4319      	orrs	r1, r3
 8005712:	4b35      	ldr	r3, [pc, #212]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005714:	789b      	ldrb	r3, [r3, #2]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	430b      	orrs	r3, r1
 800571a:	4933      	ldr	r1, [pc, #204]	; (80057e8 <MX_LWIP_Init+0x290>)
 800571c:	78c9      	ldrb	r1, [r1, #3]
 800571e:	430b      	orrs	r3, r1
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005726:	431a      	orrs	r2, r3
 8005728:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <MX_LWIP_Init+0x290>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	0619      	lsls	r1, r3, #24
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	4319      	orrs	r1, r3
 8005736:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005738:	789b      	ldrb	r3, [r3, #2]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	430b      	orrs	r3, r1
 800573e:	492a      	ldr	r1, [pc, #168]	; (80057e8 <MX_LWIP_Init+0x290>)
 8005740:	78c9      	ldrb	r1, [r1, #3]
 8005742:	430b      	orrs	r3, r1
 8005744:	0e1b      	lsrs	r3, r3, #24
 8005746:	4313      	orrs	r3, r2
 8005748:	4a2a      	ldr	r2, [pc, #168]	; (80057f4 <MX_LWIP_Init+0x29c>)
 800574a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800574c:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <MX_LWIP_Init+0x2a0>)
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <MX_LWIP_Init+0x2a4>)
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	2300      	movs	r3, #0
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <MX_LWIP_Init+0x29c>)
 800575a:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <MX_LWIP_Init+0x298>)
 800575c:	4923      	ldr	r1, [pc, #140]	; (80057ec <MX_LWIP_Init+0x294>)
 800575e:	4828      	ldr	r0, [pc, #160]	; (8005800 <MX_LWIP_Init+0x2a8>)
 8005760:	f007 fcd8 	bl	800d114 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005764:	4826      	ldr	r0, [pc, #152]	; (8005800 <MX_LWIP_Init+0x2a8>)
 8005766:	f007 fe87 	bl	800d478 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <MX_LWIP_Init+0x2a8>)
 800576c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800577c:	4820      	ldr	r0, [pc, #128]	; (8005800 <MX_LWIP_Init+0x2a8>)
 800577e:	f007 fe8b 	bl	800d498 <netif_set_up>
 8005782:	e002      	b.n	800578a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005784:	481e      	ldr	r0, [pc, #120]	; (8005800 <MX_LWIP_Init+0x2a8>)
 8005786:	f007 fef3 	bl	800d570 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800578a:	491e      	ldr	r1, [pc, #120]	; (8005804 <MX_LWIP_Init+0x2ac>)
 800578c:	481c      	ldr	r0, [pc, #112]	; (8005800 <MX_LWIP_Init+0x2a8>)
 800578e:	f007 ff85 	bl	800d69c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005792:	2200      	movs	r2, #0
 8005794:	2101      	movs	r1, #1
 8005796:	2001      	movs	r0, #1
 8005798:	f000 ff14 	bl	80065c4 <osSemaphoreNew>
 800579c:	4603      	mov	r3, r0
 800579e:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <MX_LWIP_Init+0x2b0>)
 80057a0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80057a2:	4b1a      	ldr	r3, [pc, #104]	; (800580c <MX_LWIP_Init+0x2b4>)
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <MX_LWIP_Init+0x2a8>)
 80057a6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80057a8:	4b17      	ldr	r3, [pc, #92]	; (8005808 <MX_LWIP_Init+0x2b0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <MX_LWIP_Init+0x2b4>)
 80057ae:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80057b0:	2224      	movs	r2, #36	; 0x24
 80057b2:	2100      	movs	r1, #0
 80057b4:	4816      	ldr	r0, [pc, #88]	; (8005810 <MX_LWIP_Init+0x2b8>)
 80057b6:	f012 f821 	bl	80177fc <memset>
  attributes.name = "LinkThr";
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <MX_LWIP_Init+0x2b8>)
 80057bc:	4a15      	ldr	r2, [pc, #84]	; (8005814 <MX_LWIP_Init+0x2bc>)
 80057be:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <MX_LWIP_Init+0x2b8>)
 80057c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057c6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <MX_LWIP_Init+0x2b8>)
 80057ca:	2210      	movs	r2, #16
 80057cc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <MX_LWIP_Init+0x2b8>)
 80057d0:	490e      	ldr	r1, [pc, #56]	; (800580c <MX_LWIP_Init+0x2b4>)
 80057d2:	4811      	ldr	r0, [pc, #68]	; (8005818 <MX_LWIP_Init+0x2c0>)
 80057d4:	f000 fcda 	bl	800618c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200050ac 	.word	0x200050ac
 80057e4:	200050a8 	.word	0x200050a8
 80057e8:	20005048 	.word	0x20005048
 80057ec:	200050a4 	.word	0x200050a4
 80057f0:	200050b0 	.word	0x200050b0
 80057f4:	200050b4 	.word	0x200050b4
 80057f8:	0800c51d 	.word	0x0800c51d
 80057fc:	08005e69 	.word	0x08005e69
 8005800:	20005070 	.word	0x20005070
 8005804:	08005f4d 	.word	0x08005f4d
 8005808:	200000a0 	.word	0x200000a0
 800580c:	20005040 	.word	0x20005040
 8005810:	2000504c 	.word	0x2000504c
 8005814:	08018eb8 	.word	0x08018eb8
 8005818:	08005ed5 	.word	0x08005ed5

0800581c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a52      	ldr	r2, [pc, #328]	; (8005984 <HAL_ETH_MspInit+0x168>)
 800583a:	4293      	cmp	r3, r2
 800583c:	f040 809e 	bne.w	800597c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005840:	4b51      	ldr	r3, [pc, #324]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	4a50      	ldr	r2, [pc, #320]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 8005846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800584a:	6313      	str	r3, [r2, #48]	; 0x30
 800584c:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	4b4b      	ldr	r3, [pc, #300]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	4a4a      	ldr	r2, [pc, #296]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 800585e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005862:	6313      	str	r3, [r2, #48]	; 0x30
 8005864:	4b48      	ldr	r3, [pc, #288]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4b45      	ldr	r3, [pc, #276]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	4a44      	ldr	r2, [pc, #272]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 8005876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800587a:	6313      	str	r3, [r2, #48]	; 0x30
 800587c:	4b42      	ldr	r3, [pc, #264]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005888:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	4a3e      	ldr	r2, [pc, #248]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 800588e:	f043 0304 	orr.w	r3, r3, #4
 8005892:	6313      	str	r3, [r2, #48]	; 0x30
 8005894:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a0:	4b39      	ldr	r3, [pc, #228]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	4a38      	ldr	r2, [pc, #224]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6313      	str	r3, [r2, #48]	; 0x30
 80058ac:	4b36      	ldr	r3, [pc, #216]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058b8:	4b33      	ldr	r3, [pc, #204]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	4a32      	ldr	r2, [pc, #200]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058be:	f043 0302 	orr.w	r3, r3, #2
 80058c2:	6313      	str	r3, [r2, #48]	; 0x30
 80058c4:	4b30      	ldr	r3, [pc, #192]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80058d0:	4b2d      	ldr	r3, [pc, #180]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	4a2c      	ldr	r2, [pc, #176]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058da:	6313      	str	r3, [r2, #48]	; 0x30
 80058dc:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <HAL_ETH_MspInit+0x16c>)
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80058e8:	2332      	movs	r3, #50	; 0x32
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ec:	2302      	movs	r3, #2
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f4:	2303      	movs	r3, #3
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058f8:	230b      	movs	r3, #11
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005900:	4619      	mov	r1, r3
 8005902:	4822      	ldr	r0, [pc, #136]	; (800598c <HAL_ETH_MspInit+0x170>)
 8005904:	f7fc feac 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005908:	2386      	movs	r3, #134	; 0x86
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	2302      	movs	r3, #2
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005910:	2300      	movs	r3, #0
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005914:	2303      	movs	r3, #3
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005918:	230b      	movs	r3, #11
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005920:	4619      	mov	r1, r3
 8005922:	481b      	ldr	r0, [pc, #108]	; (8005990 <HAL_ETH_MspInit+0x174>)
 8005924:	f7fc fe9c 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592e:	2302      	movs	r3, #2
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005932:	2300      	movs	r3, #0
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005936:	2303      	movs	r3, #3
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800593a:	230b      	movs	r3, #11
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800593e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005942:	4619      	mov	r1, r3
 8005944:	4813      	ldr	r0, [pc, #76]	; (8005994 <HAL_ETH_MspInit+0x178>)
 8005946:	f7fc fe8b 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800594a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005950:	2302      	movs	r3, #2
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005954:	2300      	movs	r3, #0
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005958:	2303      	movs	r3, #3
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800595c:	230b      	movs	r3, #11
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005964:	4619      	mov	r1, r3
 8005966:	480c      	ldr	r0, [pc, #48]	; (8005998 <HAL_ETH_MspInit+0x17c>)
 8005968:	f7fc fe7a 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800596c:	2200      	movs	r2, #0
 800596e:	2105      	movs	r1, #5
 8005970:	203d      	movs	r0, #61	; 0x3d
 8005972:	f7fb fcc7 	bl	8001304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005976:	203d      	movs	r0, #61	; 0x3d
 8005978:	f7fb fce0 	bl	800133c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800597c:	bf00      	nop
 800597e:	3738      	adds	r7, #56	; 0x38
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40028000 	.word	0x40028000
 8005988:	40023800 	.word	0x40023800
 800598c:	40020800 	.word	0x40020800
 8005990:	40020000 	.word	0x40020000
 8005994:	40020400 	.word	0x40020400
 8005998:	40021800 	.word	0x40021800

0800599c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_ETH_RxCpltCallback+0x1c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ff0d 	bl	80067c8 <osSemaphoreRelease>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200000a4 	.word	0x200000a4

080059bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b090      	sub	sp, #64	; 0x40
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80059c8:	4b5d      	ldr	r3, [pc, #372]	; (8005b40 <low_level_init+0x184>)
 80059ca:	4a5e      	ldr	r2, [pc, #376]	; (8005b44 <low_level_init+0x188>)
 80059cc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80059ce:	4b5c      	ldr	r3, [pc, #368]	; (8005b40 <low_level_init+0x184>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80059d4:	4b5a      	ldr	r3, [pc, #360]	; (8005b40 <low_level_init+0x184>)
 80059d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059da:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80059dc:	4b58      	ldr	r3, [pc, #352]	; (8005b40 <low_level_init+0x184>)
 80059de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80059e4:	4b56      	ldr	r3, [pc, #344]	; (8005b40 <low_level_init+0x184>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80059ea:	2300      	movs	r3, #0
 80059ec:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80059f2:	23e1      	movs	r3, #225	; 0xe1
 80059f4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x01;
 80059fa:	2301      	movs	r3, #1
 80059fc:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x10;
 80059fe:	2310      	movs	r3, #16
 8005a00:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005a02:	4a4f      	ldr	r2, [pc, #316]	; (8005b40 <low_level_init+0x184>)
 8005a04:	f107 030c 	add.w	r3, r7, #12
 8005a08:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005a0a:	4b4d      	ldr	r3, [pc, #308]	; (8005b40 <low_level_init+0x184>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005a10:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <low_level_init+0x184>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005a16:	4b4a      	ldr	r3, [pc, #296]	; (8005b40 <low_level_init+0x184>)
 8005a18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a1c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a1e:	4848      	ldr	r0, [pc, #288]	; (8005b40 <low_level_init+0x184>)
 8005a20:	f7fb fc9a 	bl	8001358 <HAL_ETH_Init>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005a44:	2304      	movs	r3, #4
 8005a46:	4a40      	ldr	r2, [pc, #256]	; (8005b48 <low_level_init+0x18c>)
 8005a48:	4940      	ldr	r1, [pc, #256]	; (8005b4c <low_level_init+0x190>)
 8005a4a:	483d      	ldr	r0, [pc, #244]	; (8005b40 <low_level_init+0x184>)
 8005a4c:	f7fb fe1e 	bl	800168c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005a50:	2304      	movs	r3, #4
 8005a52:	4a3f      	ldr	r2, [pc, #252]	; (8005b50 <low_level_init+0x194>)
 8005a54:	493f      	ldr	r1, [pc, #252]	; (8005b54 <low_level_init+0x198>)
 8005a56:	483a      	ldr	r0, [pc, #232]	; (8005b40 <low_level_init+0x184>)
 8005a58:	f7fb fe81 	bl	800175e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2206      	movs	r2, #6
 8005a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005a64:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <low_level_init+0x184>)
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005a70:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <low_level_init+0x184>)
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	785a      	ldrb	r2, [r3, #1]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005a7c:	4b30      	ldr	r3, [pc, #192]	; (8005b40 <low_level_init+0x184>)
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	789a      	ldrb	r2, [r3, #2]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <low_level_init+0x184>)
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	78da      	ldrb	r2, [r3, #3]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <low_level_init+0x184>)
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	791a      	ldrb	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <low_level_init+0x184>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	795a      	ldrb	r2, [r3, #5]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ab2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005aba:	f043 030a 	orr.w	r3, r3, #10
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2101      	movs	r1, #1
 8005aca:	2001      	movs	r0, #1
 8005acc:	f000 fd7a 	bl	80065c4 <osSemaphoreNew>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <low_level_init+0x19c>)
 8005ad4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f011 fe8c 	bl	80177fc <memset>
  attributes.name = "EthIf";
 8005ae4:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <low_level_init+0x1a0>)
 8005ae6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005ae8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005aee:	2330      	movs	r3, #48	; 0x30
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005af2:	f107 0314 	add.w	r3, r7, #20
 8005af6:	461a      	mov	r2, r3
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4819      	ldr	r0, [pc, #100]	; (8005b60 <low_level_init+0x1a4>)
 8005afc:	f000 fb46 	bl	800618c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005b00:	480f      	ldr	r0, [pc, #60]	; (8005b40 <low_level_init+0x184>)
 8005b02:	f7fc f954 	bl	8001dae <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005b06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	211d      	movs	r1, #29
 8005b0e:	480c      	ldr	r0, [pc, #48]	; (8005b40 <low_level_init+0x184>)
 8005b10:	f7fc f87f 	bl	8001c12 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f043 030b 	orr.w	r3, r3, #11
 8005b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	461a      	mov	r2, r3
 8005b20:	211d      	movs	r1, #29
 8005b22:	4807      	ldr	r0, [pc, #28]	; (8005b40 <low_level_init+0x184>)
 8005b24:	f7fc f8dd 	bl	8001ce2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	211d      	movs	r1, #29
 8005b30:	4803      	ldr	r0, [pc, #12]	; (8005b40 <low_level_init+0x184>)
 8005b32:	f7fc f86e 	bl	8001c12 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005b36:	bf00      	nop
 8005b38:	3740      	adds	r7, #64	; 0x40
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20006988 	.word	0x20006988
 8005b44:	40028000 	.word	0x40028000
 8005b48:	200069d0 	.word	0x200069d0
 8005b4c:	200050b8 	.word	0x200050b8
 8005b50:	20005138 	.word	0x20005138
 8005b54:	20006908 	.word	0x20006908
 8005b58:	200000a4 	.word	0x200000a4
 8005b5c:	08018ec0 	.word	0x08018ec0
 8005b60:	08005e09 	.word	0x08005e09

08005b64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	; 0x28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005b6e:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <low_level_output+0x138>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005b86:	4b45      	ldr	r3, [pc, #276]	; (8005c9c <low_level_output+0x138>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	e05a      	b.n	8005c4c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da03      	bge.n	8005ba6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005b9e:	23f8      	movs	r3, #248	; 0xf8
 8005ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005ba4:	e05c      	b.n	8005c60 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	895b      	ldrh	r3, [r3, #10]
 8005baa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005bb0:	e02f      	b.n	8005c12 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	18d0      	adds	r0, r2, r3
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	18d1      	adds	r1, r2, r3
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f011 fdef 	bl	80177ac <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	da03      	bge.n	8005be4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005bdc:	23f8      	movs	r3, #248	; 0xf8
 8005bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005be2:	e03d      	b.n	8005c60 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005bf4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005c00:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005c0c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d8c8      	bhi.n	8005bb2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	18d0      	adds	r0, r2, r3
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4619      	mov	r1, r3
 8005c32:	f011 fdbb 	bl	80177ac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1a1      	bne.n	8005b96 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	4811      	ldr	r0, [pc, #68]	; (8005c9c <low_level_output+0x138>)
 8005c56:	f7fb fdef 	bl	8001838 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005c60:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <low_level_output+0x138>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c68:	4413      	add	r3, r2
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00d      	beq.n	8005c90 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <low_level_output+0x138>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c7c:	4413      	add	r3, r2
 8005c7e:	2220      	movs	r2, #32
 8005c80:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <low_level_output+0x138>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	f241 0304 	movw	r3, #4100	; 0x1004
 8005c8a:	4413      	add	r3, r2
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3728      	adds	r7, #40	; 0x28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20006988 	.word	0x20006988

08005ca0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	; 0x30
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005cc4:	484f      	ldr	r0, [pc, #316]	; (8005e04 <low_level_input+0x164>)
 8005cc6:	f7fb fea1 	bl	8001a0c <HAL_ETH_GetReceivedFrame_IT>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <low_level_input+0x34>

    return NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e092      	b.n	8005dfa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005cd4:	4b4b      	ldr	r3, [pc, #300]	; (8005e04 <low_level_input+0x164>)
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005cda:	4b4a      	ldr	r3, [pc, #296]	; (8005e04 <low_level_input+0x164>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
 8005ce8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005cec:	4619      	mov	r1, r3
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f007 fd9e 	bl	800d830 <pbuf_alloc>
 8005cf4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d04b      	beq.n	8005d94 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005cfc:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <low_level_input+0x164>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0a:	e040      	b.n	8005d8e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	895b      	ldrh	r3, [r3, #10]
 8005d10:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d16:	e021      	b.n	8005d5c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	18d0      	adds	r0, r2, r3
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	18d1      	adds	r1, r2, r3
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f011 fd3c 	bl	80177ac <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005d4a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005d56:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d8d6      	bhi.n	8005d18 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	18d0      	adds	r0, r2, r3
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	f011 fd16 	bl	80177ac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1bb      	bne.n	8005d0c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <low_level_input+0x164>)
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e00b      	b.n	8005db8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <low_level_input+0x164>)
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d3ee      	bcc.n	8005da0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <low_level_input+0x164>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <low_level_input+0x164>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f241 0314 	movw	r3, #4116	; 0x1014
 8005dd0:	4413      	add	r3, r2
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00d      	beq.n	8005df8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <low_level_input+0x164>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f241 0314 	movw	r3, #4116	; 0x1014
 8005de4:	4413      	add	r3, r2
 8005de6:	2280      	movs	r2, #128	; 0x80
 8005de8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <low_level_input+0x164>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f241 0308 	movw	r3, #4104	; 0x1008
 8005df2:	4413      	add	r3, r2
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3730      	adds	r7, #48	; 0x30
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20006988 	.word	0x20006988

08005e08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <ethernetif_input+0x58>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f04f 31ff 	mov.w	r1, #4294967295
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fc6d 	bl	80066fc <osSemaphoreAcquire>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f5      	bne.n	8005e14 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005e28:	480e      	ldr	r0, [pc, #56]	; (8005e64 <ethernetif_input+0x5c>)
 8005e2a:	f011 fc33 	bl	8017694 <sys_mutex_lock>
        p = low_level_input( netif );
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff36 	bl	8005ca0 <low_level_input>
 8005e34:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	68f9      	ldr	r1, [r7, #12]
 8005e42:	68b8      	ldr	r0, [r7, #8]
 8005e44:	4798      	blx	r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	f007 ffd7 	bl	800de00 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005e52:	4804      	ldr	r0, [pc, #16]	; (8005e64 <ethernetif_input+0x5c>)
 8005e54:	f011 fc2d 	bl	80176b2 <sys_mutex_unlock>
      } while(p!=NULL);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e4      	bne.n	8005e28 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e5e:	e7d9      	b.n	8005e14 <ethernetif_input+0xc>
 8005e60:	200000a4 	.word	0x200000a4
 8005e64:	200081e0 	.word	0x200081e0

08005e68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <ethernetif_init+0x1c>
 8005e76:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <ethernetif_init+0x48>)
 8005e78:	f240 223a 	movw	r2, #570	; 0x23a
 8005e7c:	490d      	ldr	r1, [pc, #52]	; (8005eb4 <ethernetif_init+0x4c>)
 8005e7e:	480e      	ldr	r0, [pc, #56]	; (8005eb8 <ethernetif_init+0x50>)
 8005e80:	f011 fcc4 	bl	801780c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2273      	movs	r2, #115	; 0x73
 8005e88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2274      	movs	r2, #116	; 0x74
 8005e90:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <ethernetif_init+0x54>)
 8005e98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <ethernetif_init+0x58>)
 8005e9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fd8b 	bl	80059bc <low_level_init>

  return ERR_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	08018ec8 	.word	0x08018ec8
 8005eb4:	08018ee4 	.word	0x08018ee4
 8005eb8:	08018ef4 	.word	0x08018ef4
 8005ebc:	080155d1 	.word	0x080155d1
 8005ec0:	08005b65 	.word	0x08005b65

08005ec4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ec8:	f7fb f934 	bl	8001134 <HAL_GetTick>
 8005ecc:	4603      	mov	r3, r0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2101      	movs	r1, #1
 8005eec:	4816      	ldr	r0, [pc, #88]	; (8005f48 <ethernetif_set_link+0x74>)
 8005eee:	f7fb fe90 	bl	8001c12 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <ethernetif_set_link+0x48>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f007 fb5d 	bl	800d5d4 <netif_set_link_up>
 8005f1a:	e011      	b.n	8005f40 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <ethernetif_set_link+0x6c>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f007 fb7e 	bl	800d63c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005f40:	20c8      	movs	r0, #200	; 0xc8
 8005f42:	f000 f9c9 	bl	80062d8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005f46:	e7cd      	b.n	8005ee4 <ethernetif_set_link+0x10>
 8005f48:	20006988 	.word	0x20006988

08005f4c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d05d      	beq.n	800602a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005f6e:	4b34      	ldr	r3, [pc, #208]	; (8006040 <ethernetif_update_config+0xf4>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d03f      	beq.n	8005ff6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4830      	ldr	r0, [pc, #192]	; (8006040 <ethernetif_update_config+0xf4>)
 8005f7e:	f7fb feb0 	bl	8001ce2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005f82:	f7fb f8d7 	bl	8001134 <HAL_GetTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2101      	movs	r1, #1
 8005f92:	482b      	ldr	r0, [pc, #172]	; (8006040 <ethernetif_update_config+0xf4>)
 8005f94:	f7fb fe3d 	bl	8001c12 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005f98:	f7fb f8cc 	bl	8001134 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa6:	d828      	bhi.n	8005ffa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0eb      	beq.n	8005f8a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2110      	movs	r1, #16
 8005fba:	4821      	ldr	r0, [pc, #132]	; (8006040 <ethernetif_update_config+0xf4>)
 8005fbc:	f7fb fe29 	bl	8001c12 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005fca:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <ethernetif_update_config+0xf4>)
 8005fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e002      	b.n	8005fda <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <ethernetif_update_config+0xf4>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005fe4:	4b16      	ldr	r3, [pc, #88]	; (8006040 <ethernetif_update_config+0xf4>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]
 8005fea:	e016      	b.n	800601a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005fec:	4b14      	ldr	r3, [pc, #80]	; (8006040 <ethernetif_update_config+0xf4>)
 8005fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ff2:	609a      	str	r2, [r3, #8]
 8005ff4:	e011      	b.n	800601a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <ethernetif_update_config+0xb0>
          goto error;
 8005ffa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <ethernetif_update_config+0xf4>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <ethernetif_update_config+0xf4>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800600c:	4313      	orrs	r3, r2
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	2100      	movs	r1, #0
 8006014:	480a      	ldr	r0, [pc, #40]	; (8006040 <ethernetif_update_config+0xf4>)
 8006016:	f7fb fe64 	bl	8001ce2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800601a:	2100      	movs	r1, #0
 800601c:	4808      	ldr	r0, [pc, #32]	; (8006040 <ethernetif_update_config+0xf4>)
 800601e:	f7fb ff25 	bl	8001e6c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006022:	4807      	ldr	r0, [pc, #28]	; (8006040 <ethernetif_update_config+0xf4>)
 8006024:	f7fb fec3 	bl	8001dae <HAL_ETH_Start>
 8006028:	e002      	b.n	8006030 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800602a:	4805      	ldr	r0, [pc, #20]	; (8006040 <ethernetif_update_config+0xf4>)
 800602c:	f7fb feee 	bl	8001e0c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f807 	bl	8006044 <ethernetif_notify_conn_changed>
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20006988 	.word	0x20006988

08006044 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800606e:	f3ef 8305 	mrs	r3, IPSR
 8006072:	60bb      	str	r3, [r7, #8]
  return(result);
 8006074:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607a:	f3ef 8310 	mrs	r3, PRIMASK
 800607e:	607b      	str	r3, [r7, #4]
  return(result);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006086:	f3ef 8311 	mrs	r3, BASEPRI
 800608a:	603b      	str	r3, [r7, #0]
  return(result);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <osKernelInitialize+0x3a>
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <osKernelInitialize+0x64>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d103      	bne.n	80060a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800609a:	f06f 0305 	mvn.w	r3, #5
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e00c      	b.n	80060bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <osKernelInitialize+0x64>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <osKernelInitialize+0x64>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e002      	b.n	80060bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80060b6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	200000a8 	.word	0x200000a8

080060d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d6:	f3ef 8305 	mrs	r3, IPSR
 80060da:	60bb      	str	r3, [r7, #8]
  return(result);
 80060dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10f      	bne.n	8006102 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e2:	f3ef 8310 	mrs	r3, PRIMASK
 80060e6:	607b      	str	r3, [r7, #4]
  return(result);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d105      	bne.n	80060fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060ee:	f3ef 8311 	mrs	r3, BASEPRI
 80060f2:	603b      	str	r3, [r7, #0]
  return(result);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <osKernelStart+0x3a>
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <osKernelStart+0x68>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d103      	bne.n	800610a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006102:	f06f 0305 	mvn.w	r3, #5
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e010      	b.n	800612c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <osKernelStart+0x68>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d109      	bne.n	8006126 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006112:	f7ff ffa1 	bl	8006058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006116:	4b08      	ldr	r3, [pc, #32]	; (8006138 <osKernelStart+0x68>)
 8006118:	2202      	movs	r2, #2
 800611a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800611c:	f002 f9ce 	bl	80084bc <vTaskStartScheduler>
      stat = osOK;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e002      	b.n	800612c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
 800612a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200000a8 	.word	0x200000a8

0800613c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006142:	f3ef 8305 	mrs	r3, IPSR
 8006146:	60bb      	str	r3, [r7, #8]
  return(result);
 8006148:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614e:	f3ef 8310 	mrs	r3, PRIMASK
 8006152:	607b      	str	r3, [r7, #4]
  return(result);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800615a:	f3ef 8311 	mrs	r3, BASEPRI
 800615e:	603b      	str	r3, [r7, #0]
  return(result);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <osKernelGetTickCount+0x3a>
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <osKernelGetTickCount+0x4c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d103      	bne.n	8006176 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800616e:	f002 facd 	bl	800870c <xTaskGetTickCountFromISR>
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	e002      	b.n	800617c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006176:	f002 fab9 	bl	80086ec <xTaskGetTickCount>
 800617a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800617c:	68fb      	ldr	r3, [r7, #12]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200000a8 	.word	0x200000a8

0800618c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b090      	sub	sp, #64	; 0x40
 8006190:	af04      	add	r7, sp, #16
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619c:	f3ef 8305 	mrs	r3, IPSR
 80061a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80061a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 808f 	bne.w	80062c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061aa:	f3ef 8310 	mrs	r3, PRIMASK
 80061ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d105      	bne.n	80061c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061b6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ba:	617b      	str	r3, [r7, #20]
  return(result);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <osThreadNew+0x3e>
 80061c2:	4b44      	ldr	r3, [pc, #272]	; (80062d4 <osThreadNew+0x148>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d07e      	beq.n	80062c8 <osThreadNew+0x13c>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d07b      	beq.n	80062c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80061d4:	2318      	movs	r3, #24
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80061dc:	f04f 33ff 	mov.w	r3, #4294967295
 80061e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d045      	beq.n	8006274 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <osThreadNew+0x6a>
        name = attr->name;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <osThreadNew+0x90>
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b38      	cmp	r3, #56	; 0x38
 800620e:	d805      	bhi.n	800621c <osThreadNew+0x90>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <osThreadNew+0x94>
        return (NULL);
 800621c:	2300      	movs	r3, #0
 800621e:	e054      	b.n	80062ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00e      	beq.n	8006256 <osThreadNew+0xca>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b5b      	cmp	r3, #91	; 0x5b
 800623e:	d90a      	bls.n	8006256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006244:	2b00      	cmp	r3, #0
 8006246:	d006      	beq.n	8006256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <osThreadNew+0xca>
        mem = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	e010      	b.n	8006278 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10c      	bne.n	8006278 <osThreadNew+0xec>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d108      	bne.n	8006278 <osThreadNew+0xec>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <osThreadNew+0xec>
          mem = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	e001      	b.n	8006278 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d110      	bne.n	80062a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006286:	9202      	str	r2, [sp, #8]
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 ff31 	bl	80080fc <xTaskCreateStatic>
 800629a:	4603      	mov	r3, r0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	e013      	b.n	80062c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d110      	bne.n	80062c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f107 0310 	add.w	r3, r7, #16
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f001 ff82 	bl	80081c2 <xTaskCreate>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d001      	beq.n	80062c8 <osThreadNew+0x13c>
          hTask = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062c8:	693b      	ldr	r3, [r7, #16]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3730      	adds	r7, #48	; 0x30
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	200000a8 	.word	0x200000a8

080062d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e0:	f3ef 8305 	mrs	r3, IPSR
 80062e4:	613b      	str	r3, [r7, #16]
  return(result);
 80062e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10f      	bne.n	800630c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062f8:	f3ef 8311 	mrs	r3, BASEPRI
 80062fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <osDelay+0x3c>
 8006304:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <osDelay+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d103      	bne.n	8006314 <osDelay+0x3c>
    stat = osErrorISR;
 800630c:	f06f 0305 	mvn.w	r3, #5
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e007      	b.n	8006324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <osDelay+0x4c>
      vTaskDelay(ticks);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f002 f896 	bl	8008450 <vTaskDelay>
    }
  }

  return (stat);
 8006324:	697b      	ldr	r3, [r7, #20]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	200000a8 	.word	0x200000a8

08006334 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006340:	f3ef 8305 	mrs	r3, IPSR
 8006344:	613b      	str	r3, [r7, #16]
  return(result);
 8006346:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 8085 	bne.w	8006458 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634e:	f3ef 8310 	mrs	r3, PRIMASK
 8006352:	60fb      	str	r3, [r7, #12]
  return(result);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800635a:	f3ef 8311 	mrs	r3, BASEPRI
 800635e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <osMutexNew+0x3a>
 8006366:	4b3f      	ldr	r3, [pc, #252]	; (8006464 <osMutexNew+0x130>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d074      	beq.n	8006458 <osMutexNew+0x124>
    if (attr != NULL) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	e001      	b.n	8006380 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <osMutexNew+0x5c>
      rmtx = 1U;
 800638a:	2301      	movs	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e001      	b.n	8006394 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d15c      	bne.n	8006458 <osMutexNew+0x124>
      mem = -1;
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d015      	beq.n	80063d6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <osMutexNew+0x8c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b4f      	cmp	r3, #79	; 0x4f
 80063b8:	d902      	bls.n	80063c0 <osMutexNew+0x8c>
          mem = 1;
 80063ba:	2301      	movs	r3, #1
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e00c      	b.n	80063da <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <osMutexNew+0xa6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <osMutexNew+0xa6>
            mem = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	e001      	b.n	80063da <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d112      	bne.n	8006406 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	4619      	mov	r1, r3
 80063ec:	2004      	movs	r0, #4
 80063ee:	f000 feb8 	bl	8007162 <xQueueCreateMutexStatic>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24
 80063f4:	e016      	b.n	8006424 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4619      	mov	r1, r3
 80063fc:	2001      	movs	r0, #1
 80063fe:	f000 feb0 	bl	8007162 <xQueueCreateMutexStatic>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24
 8006404:	e00e      	b.n	8006424 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006412:	2004      	movs	r0, #4
 8006414:	f000 fe8d 	bl	8007132 <xQueueCreateMutex>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24
 800641a:	e003      	b.n	8006424 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800641c:	2001      	movs	r0, #1
 800641e:	f000 fe88 	bl	8007132 <xQueueCreateMutex>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <osMutexNew+0x110>
        if (attr != NULL) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <osMutexNew+0x104>
          name = attr->name;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e001      	b.n	800643c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800643c:	6979      	ldr	r1, [r7, #20]
 800643e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006440:	f001 fdd4 	bl	8007fec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d006      	beq.n	8006458 <osMutexNew+0x124>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800645a:	4618      	mov	r0, r3
 800645c:	3728      	adds	r7, #40	; 0x28
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200000a8 	.word	0x200000a8

08006468 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006486:	f3ef 8305 	mrs	r3, IPSR
 800648a:	613b      	str	r3, [r7, #16]
  return(result);
 800648c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006492:	f3ef 8310 	mrs	r3, PRIMASK
 8006496:	60fb      	str	r3, [r7, #12]
  return(result);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800649e:	f3ef 8311 	mrs	r3, BASEPRI
 80064a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <osMutexAcquire+0x52>
 80064aa:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <osMutexAcquire+0xb8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d103      	bne.n	80064ba <osMutexAcquire+0x52>
    stat = osErrorISR;
 80064b2:	f06f 0305 	mvn.w	r3, #5
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e02c      	b.n	8006514 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80064c0:	f06f 0303 	mvn.w	r3, #3
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e025      	b.n	8006514 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	69b8      	ldr	r0, [r7, #24]
 80064d2:	f000 fe97 	bl	8007204 <xQueueTakeMutexRecursive>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d01b      	beq.n	8006514 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80064e2:	f06f 0301 	mvn.w	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e014      	b.n	8006514 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80064ea:	f06f 0302 	mvn.w	r3, #2
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e010      	b.n	8006514 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	69b8      	ldr	r0, [r7, #24]
 80064f6:	f001 fa51 	bl	800799c <xQueueSemaphoreTake>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d009      	beq.n	8006514 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006506:	f06f 0301 	mvn.w	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e002      	b.n	8006514 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800650e:	f06f 0302 	mvn.w	r3, #2
 8006512:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006514:	69fb      	ldr	r3, [r7, #28]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	200000a8 	.word	0x200000a8

08006524 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006540:	f3ef 8305 	mrs	r3, IPSR
 8006544:	613b      	str	r3, [r7, #16]
  return(result);
 8006546:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10f      	bne.n	800656c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654c:	f3ef 8310 	mrs	r3, PRIMASK
 8006550:	60fb      	str	r3, [r7, #12]
  return(result);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006558:	f3ef 8311 	mrs	r3, BASEPRI
 800655c:	60bb      	str	r3, [r7, #8]
  return(result);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <osMutexRelease+0x50>
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <osMutexRelease+0x9c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d103      	bne.n	8006574 <osMutexRelease+0x50>
    stat = osErrorISR;
 800656c:	f06f 0305 	mvn.w	r3, #5
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	e01f      	b.n	80065b4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800657a:	f06f 0303 	mvn.w	r3, #3
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	e018      	b.n	80065b4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006588:	69b8      	ldr	r0, [r7, #24]
 800658a:	f000 fe05 	bl	8007198 <xQueueGiveMutexRecursive>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d00f      	beq.n	80065b4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006594:	f06f 0302 	mvn.w	r3, #2
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	e00b      	b.n	80065b4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800659c:	2300      	movs	r3, #0
 800659e:	2200      	movs	r2, #0
 80065a0:	2100      	movs	r1, #0
 80065a2:	69b8      	ldr	r0, [r7, #24]
 80065a4:	f000 fed8 	bl	8007358 <xQueueGenericSend>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d002      	beq.n	80065b4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80065ae:	f06f 0302 	mvn.w	r3, #2
 80065b2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80065b4:	69fb      	ldr	r3, [r7, #28]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200000a8 	.word	0x200000a8

080065c4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08c      	sub	sp, #48	; 0x30
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d4:	f3ef 8305 	mrs	r3, IPSR
 80065d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80065da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 8086 	bne.w	80066ee <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e2:	f3ef 8310 	mrs	r3, PRIMASK
 80065e6:	617b      	str	r3, [r7, #20]
  return(result);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ee:	f3ef 8311 	mrs	r3, BASEPRI
 80065f2:	613b      	str	r3, [r7, #16]
  return(result);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <osSemaphoreNew+0x3e>
 80065fa:	4b3f      	ldr	r3, [pc, #252]	; (80066f8 <osSemaphoreNew+0x134>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d075      	beq.n	80066ee <osSemaphoreNew+0x12a>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d072      	beq.n	80066ee <osSemaphoreNew+0x12a>
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d86e      	bhi.n	80066ee <osSemaphoreNew+0x12a>
    mem = -1;
 8006610:	f04f 33ff 	mov.w	r3, #4294967295
 8006614:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d015      	beq.n	8006648 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d006      	beq.n	8006632 <osSemaphoreNew+0x6e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b4f      	cmp	r3, #79	; 0x4f
 800662a:	d902      	bls.n	8006632 <osSemaphoreNew+0x6e>
        mem = 1;
 800662c:	2301      	movs	r3, #1
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	e00c      	b.n	800664c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d108      	bne.n	800664c <osSemaphoreNew+0x88>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <osSemaphoreNew+0x88>
          mem = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	623b      	str	r3, [r7, #32]
 8006646:	e001      	b.n	800664c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d04c      	beq.n	80066ee <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d128      	bne.n	80066ac <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10a      	bne.n	8006676 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2203      	movs	r2, #3
 8006666:	9200      	str	r2, [sp, #0]
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	2001      	movs	r0, #1
 800666e:	f000 fc5f 	bl	8006f30 <xQueueGenericCreateStatic>
 8006672:	6278      	str	r0, [r7, #36]	; 0x24
 8006674:	e005      	b.n	8006682 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006676:	2203      	movs	r2, #3
 8006678:	2100      	movs	r1, #0
 800667a:	2001      	movs	r0, #1
 800667c:	f000 fcda 	bl	8007034 <xQueueGenericCreate>
 8006680:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d022      	beq.n	80066ce <osSemaphoreNew+0x10a>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01f      	beq.n	80066ce <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800668e:	2300      	movs	r3, #0
 8006690:	2200      	movs	r2, #0
 8006692:	2100      	movs	r1, #0
 8006694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006696:	f000 fe5f 	bl	8007358 <xQueueGenericSend>
 800669a:	4603      	mov	r3, r0
 800669c:	2b01      	cmp	r3, #1
 800669e:	d016      	beq.n	80066ce <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80066a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a2:	f001 fb55 	bl	8007d50 <vQueueDelete>
            hSemaphore = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
 80066aa:	e010      	b.n	80066ce <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d108      	bne.n	80066c4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	461a      	mov	r2, r3
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fdda 	bl	8007274 <xQueueCreateCountingSemaphoreStatic>
 80066c0:	6278      	str	r0, [r7, #36]	; 0x24
 80066c2:	e004      	b.n	80066ce <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fe0f 	bl	80072ea <xQueueCreateCountingSemaphore>
 80066cc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e001      	b.n	80066e6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80066e6:	69f9      	ldr	r1, [r7, #28]
 80066e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ea:	f001 fc7f 	bl	8007fec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	200000a8 	.word	0x200000a8

080066fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006714:	f06f 0303 	mvn.w	r3, #3
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	e04b      	b.n	80067b4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671c:	f3ef 8305 	mrs	r3, IPSR
 8006720:	617b      	str	r3, [r7, #20]
  return(result);
 8006722:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10f      	bne.n	8006748 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006728:	f3ef 8310 	mrs	r3, PRIMASK
 800672c:	613b      	str	r3, [r7, #16]
  return(result);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006734:	f3ef 8311 	mrs	r3, BASEPRI
 8006738:	60fb      	str	r3, [r7, #12]
  return(result);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d026      	beq.n	800678e <osSemaphoreAcquire+0x92>
 8006740:	4b1f      	ldr	r3, [pc, #124]	; (80067c0 <osSemaphoreAcquire+0xc4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d122      	bne.n	800678e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800674e:	f06f 0303 	mvn.w	r3, #3
 8006752:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006754:	e02d      	b.n	80067b2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	461a      	mov	r2, r3
 8006760:	2100      	movs	r1, #0
 8006762:	69b8      	ldr	r0, [r7, #24]
 8006764:	f001 fa2e 	bl	8007bc4 <xQueueReceiveFromISR>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d003      	beq.n	8006776 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800676e:	f06f 0302 	mvn.w	r3, #2
 8006772:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006774:	e01d      	b.n	80067b2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01a      	beq.n	80067b2 <osSemaphoreAcquire+0xb6>
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <osSemaphoreAcquire+0xc8>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800678c:	e011      	b.n	80067b2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	69b8      	ldr	r0, [r7, #24]
 8006792:	f001 f903 	bl	800799c <xQueueSemaphoreTake>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d00b      	beq.n	80067b4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80067a2:	f06f 0301 	mvn.w	r3, #1
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	e004      	b.n	80067b4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80067aa:	f06f 0302 	mvn.w	r3, #2
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e000      	b.n	80067b4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80067b2:	bf00      	nop
      }
    }
  }

  return (stat);
 80067b4:	69fb      	ldr	r3, [r7, #28]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200000a8 	.word	0x200000a8
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80067de:	f06f 0303 	mvn.w	r3, #3
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e03e      	b.n	8006864 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e6:	f3ef 8305 	mrs	r3, IPSR
 80067ea:	617b      	str	r3, [r7, #20]
  return(result);
 80067ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f2:	f3ef 8310 	mrs	r3, PRIMASK
 80067f6:	613b      	str	r3, [r7, #16]
  return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d105      	bne.n	800680a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006802:	60fb      	str	r3, [r7, #12]
  return(result);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01e      	beq.n	8006848 <osSemaphoreRelease+0x80>
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <osSemaphoreRelease+0xa8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d11a      	bne.n	8006848 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4619      	mov	r1, r3
 800681c:	69b8      	ldr	r0, [r7, #24]
 800681e:	f000 ff41 	bl	80076a4 <xQueueGiveFromISR>
 8006822:	4603      	mov	r3, r0
 8006824:	2b01      	cmp	r3, #1
 8006826:	d003      	beq.n	8006830 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006828:	f06f 0302 	mvn.w	r3, #2
 800682c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800682e:	e018      	b.n	8006862 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d015      	beq.n	8006862 <osSemaphoreRelease+0x9a>
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <osSemaphoreRelease+0xac>)
 8006838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006846:	e00c      	b.n	8006862 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006848:	2300      	movs	r3, #0
 800684a:	2200      	movs	r2, #0
 800684c:	2100      	movs	r1, #0
 800684e:	69b8      	ldr	r0, [r7, #24]
 8006850:	f000 fd82 	bl	8007358 <xQueueGenericSend>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d004      	beq.n	8006864 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800685a:	f06f 0302 	mvn.w	r3, #2
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e000      	b.n	8006864 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006862:	bf00      	nop
    }
  }

  return (stat);
 8006864:	69fb      	ldr	r3, [r7, #28]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200000a8 	.word	0x200000a8
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006884:	f3ef 8305 	mrs	r3, IPSR
 8006888:	617b      	str	r3, [r7, #20]
  return(result);
 800688a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10f      	bne.n	80068b0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006890:	f3ef 8310 	mrs	r3, PRIMASK
 8006894:	613b      	str	r3, [r7, #16]
  return(result);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800689c:	f3ef 8311 	mrs	r3, BASEPRI
 80068a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <osSemaphoreDelete+0x40>
 80068a8:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <osSemaphoreDelete+0x68>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d103      	bne.n	80068b8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80068b0:	f06f 0305 	mvn.w	r3, #5
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	e00e      	b.n	80068d6 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80068be:	f06f 0303 	mvn.w	r3, #3
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e007      	b.n	80068d6 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80068c6:	69b8      	ldr	r0, [r7, #24]
 80068c8:	f001 fbba 	bl	8008040 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80068d0:	69b8      	ldr	r0, [r7, #24]
 80068d2:	f001 fa3d 	bl	8007d50 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80068d6:	69fb      	ldr	r3, [r7, #28]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	200000a8 	.word	0x200000a8

080068e4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08c      	sub	sp, #48	; 0x30
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068f4:	f3ef 8305 	mrs	r3, IPSR
 80068f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80068fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d16f      	bne.n	80069e0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	617b      	str	r3, [r7, #20]
  return(result);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800690c:	f3ef 8311 	mrs	r3, BASEPRI
 8006910:	613b      	str	r3, [r7, #16]
  return(result);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <osMessageQueueNew+0x3c>
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <osMessageQueueNew+0x108>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d05f      	beq.n	80069e0 <osMessageQueueNew+0xfc>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d05c      	beq.n	80069e0 <osMessageQueueNew+0xfc>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d059      	beq.n	80069e0 <osMessageQueueNew+0xfc>
    mem = -1;
 800692c:	f04f 33ff 	mov.w	r3, #4294967295
 8006930:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d029      	beq.n	800698c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d012      	beq.n	8006966 <osMessageQueueNew+0x82>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b4f      	cmp	r3, #79	; 0x4f
 8006946:	d90e      	bls.n	8006966 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695a      	ldr	r2, [r3, #20]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <osMessageQueueNew+0x82>
        mem = 1;
 8006960:	2301      	movs	r3, #1
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	e014      	b.n	8006990 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <osMessageQueueNew+0xac>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10c      	bne.n	8006990 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800697a:	2b00      	cmp	r3, #0
 800697c:	d108      	bne.n	8006990 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <osMessageQueueNew+0xac>
          mem = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	e001      	b.n	8006990 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10b      	bne.n	80069ae <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2100      	movs	r1, #0
 80069a0:	9100      	str	r1, [sp, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fac3 	bl	8006f30 <xQueueGenericCreateStatic>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24
 80069ac:	e008      	b.n	80069c0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80069b4:	2200      	movs	r2, #0
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fb3b 	bl	8007034 <xQueueGenericCreate>
 80069be:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00c      	beq.n	80069e0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	e001      	b.n	80069d8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80069d8:	69f9      	ldr	r1, [r7, #28]
 80069da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069dc:	f001 fb06 	bl	8007fec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3728      	adds	r7, #40	; 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200000a8 	.word	0x200000a8

080069f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a08:	f3ef 8305 	mrs	r3, IPSR
 8006a0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a0e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10f      	bne.n	8006a34 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a14:	f3ef 8310 	mrs	r3, PRIMASK
 8006a18:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d105      	bne.n	8006a2c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a20:	f3ef 8311 	mrs	r3, BASEPRI
 8006a24:	617b      	str	r3, [r7, #20]
  return(result);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02c      	beq.n	8006a86 <osMessageQueuePut+0x96>
 8006a2c:	4b28      	ldr	r3, [pc, #160]	; (8006ad0 <osMessageQueuePut+0xe0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d128      	bne.n	8006a86 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <osMessageQueuePut+0x56>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <osMessageQueuePut+0x56>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006a46:	f06f 0303 	mvn.w	r3, #3
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a4c:	e039      	b.n	8006ac2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006a52:	f107 0210 	add.w	r2, r7, #16
 8006a56:	2300      	movs	r3, #0
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	6a38      	ldr	r0, [r7, #32]
 8006a5c:	f000 fd82 	bl	8007564 <xQueueGenericSendFromISR>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d003      	beq.n	8006a6e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006a66:	f06f 0302 	mvn.w	r3, #2
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a6c:	e029      	b.n	8006ac2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d026      	beq.n	8006ac2 <osMessageQueuePut+0xd2>
 8006a74:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <osMessageQueuePut+0xe4>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a84:	e01d      	b.n	8006ac2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <osMessageQueuePut+0xa2>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006a92:	f06f 0303 	mvn.w	r3, #3
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
 8006a98:	e014      	b.n	8006ac4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	6a38      	ldr	r0, [r7, #32]
 8006aa2:	f000 fc59 	bl	8007358 <xQueueGenericSend>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d00b      	beq.n	8006ac4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006ab2:	f06f 0301 	mvn.w	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab8:	e004      	b.n	8006ac4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006aba:	f06f 0302 	mvn.w	r3, #2
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac0:	e000      	b.n	8006ac4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ac2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3728      	adds	r7, #40	; 0x28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	200000a8 	.word	0x200000a8
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aee:	f3ef 8305 	mrs	r3, IPSR
 8006af2:	61fb      	str	r3, [r7, #28]
  return(result);
 8006af4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afa:	f3ef 8310 	mrs	r3, PRIMASK
 8006afe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d105      	bne.n	8006b12 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b06:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d02c      	beq.n	8006b6c <osMessageQueueGet+0x94>
 8006b12:	4b28      	ldr	r3, [pc, #160]	; (8006bb4 <osMessageQueueGet+0xdc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d128      	bne.n	8006b6c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <osMessageQueueGet+0x54>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <osMessageQueueGet+0x54>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006b2c:	f06f 0303 	mvn.w	r3, #3
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b32:	e038      	b.n	8006ba6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006b38:	f107 0310 	add.w	r3, r7, #16
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	6a38      	ldr	r0, [r7, #32]
 8006b42:	f001 f83f 	bl	8007bc4 <xQueueReceiveFromISR>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006b4c:	f06f 0302 	mvn.w	r3, #2
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b52:	e028      	b.n	8006ba6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d025      	beq.n	8006ba6 <osMessageQueueGet+0xce>
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <osMessageQueueGet+0xe0>)
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b6a:	e01c      	b.n	8006ba6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <osMessageQueueGet+0xa0>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d103      	bne.n	8006b80 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006b78:	f06f 0303 	mvn.w	r3, #3
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7e:	e013      	b.n	8006ba8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	6a38      	ldr	r0, [r7, #32]
 8006b86:	f000 fe23 	bl	80077d0 <xQueueReceive>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d00b      	beq.n	8006ba8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006b96:	f06f 0301 	mvn.w	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9c:	e004      	b.n	8006ba8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006b9e:	f06f 0302 	mvn.w	r3, #2
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	e000      	b.n	8006ba8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ba6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	; 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200000a8 	.word	0x200000a8
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	e01e      	b.n	8006c12 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd4:	f3ef 8305 	mrs	r3, IPSR
 8006bd8:	617b      	str	r3, [r7, #20]
  return(result);
 8006bda:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10f      	bne.n	8006c00 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be0:	f3ef 8310 	mrs	r3, PRIMASK
 8006be4:	613b      	str	r3, [r7, #16]
  return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d105      	bne.n	8006bf8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bec:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <osMessageQueueGetCount+0x4e>
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <osMessageQueueGetCount+0x60>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d104      	bne.n	8006c0a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006c00:	69b8      	ldr	r0, [r7, #24]
 8006c02:	f001 f885 	bl	8007d10 <uxQueueMessagesWaitingFromISR>
 8006c06:	61f8      	str	r0, [r7, #28]
 8006c08:	e003      	b.n	8006c12 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006c0a:	69b8      	ldr	r0, [r7, #24]
 8006c0c:	f001 f860 	bl	8007cd0 <uxQueueMessagesWaiting>
 8006c10:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	200000a8 	.word	0x200000a8

08006c20 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c2c:	f3ef 8305 	mrs	r3, IPSR
 8006c30:	617b      	str	r3, [r7, #20]
  return(result);
 8006c32:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10f      	bne.n	8006c58 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c38:	f3ef 8310 	mrs	r3, PRIMASK
 8006c3c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c44:	f3ef 8311 	mrs	r3, BASEPRI
 8006c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <osMessageQueueDelete+0x40>
 8006c50:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <osMessageQueueDelete+0x68>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d103      	bne.n	8006c60 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006c58:	f06f 0305 	mvn.w	r3, #5
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e00e      	b.n	8006c7e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006c66:	f06f 0303 	mvn.w	r3, #3
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e007      	b.n	8006c7e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006c6e:	69b8      	ldr	r0, [r7, #24]
 8006c70:	f001 f9e6 	bl	8008040 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006c78:	69b8      	ldr	r0, [r7, #24]
 8006c7a:	f001 f869 	bl	8007d50 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006c7e:	69fb      	ldr	r3, [r7, #28]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	200000a8 	.word	0x200000a8

08006c8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a07      	ldr	r2, [pc, #28]	; (8006cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a06      	ldr	r2, [pc, #24]	; (8006cbc <vApplicationGetIdleTaskMemory+0x30>)
 8006ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	200000ac 	.word	0x200000ac
 8006cbc:	20000108 	.word	0x20000108

08006cc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a07      	ldr	r2, [pc, #28]	; (8006cec <vApplicationGetTimerTaskMemory+0x2c>)
 8006cd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <vApplicationGetTimerTaskMemory+0x30>)
 8006cd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000308 	.word	0x20000308
 8006cf0:	20000364 	.word	0x20000364

08006cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0208 	add.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f103 0208 	add.w	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0208 	add.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d103      	bne.n	8006db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e00c      	b.n	8006dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e002      	b.n	8006dc4 <vListInsert+0x2e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d2f6      	bcs.n	8006dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6892      	ldr	r2, [r2, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d103      	bne.n	8006e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10c      	bne.n	8006e8a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	b672      	cpsid	i
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	b662      	cpsie	i
 8006e84:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e8a:	f002 fde7 	bl	8009a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	441a      	add	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	441a      	add	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	22ff      	movs	r2, #255	; 0xff
 8006ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d114      	bne.n	8006f0a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01a      	beq.n	8006f1e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3310      	adds	r3, #16
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fd8f 	bl	8008a10 <xTaskRemoveFromEventList>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d012      	beq.n	8006f1e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <xQueueGenericReset+0xd0>)
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	e009      	b.n	8006f1e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3310      	adds	r3, #16
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff fef0 	bl	8006cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3324      	adds	r3, #36	; 0x24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff feeb 	bl	8006cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f1e:	f002 fdd1 	bl	8009ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f22:	2301      	movs	r3, #1
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	; 0x38
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10c      	bne.n	8006f5e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	b672      	cpsid	i
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	b662      	cpsie	i
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10c      	bne.n	8006f7e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	b672      	cpsid	i
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	b662      	cpsie	i
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <xQueueGenericCreateStatic+0x5a>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <xQueueGenericCreateStatic+0x5e>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueGenericCreateStatic+0x60>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10c      	bne.n	8006fae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	b672      	cpsid	i
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	b662      	cpsie	i
 8006fa8:	623b      	str	r3, [r7, #32]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <xQueueGenericCreateStatic+0x8a>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <xQueueGenericCreateStatic+0x8e>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <xQueueGenericCreateStatic+0x90>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10c      	bne.n	8006fde <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	b672      	cpsid	i
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	b662      	cpsie	i
 8006fd8:	61fb      	str	r3, [r7, #28]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fde:	2350      	movs	r3, #80	; 0x50
 8006fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b50      	cmp	r3, #80	; 0x50
 8006fe6:	d00c      	beq.n	8007002 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	b672      	cpsid	i
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	b662      	cpsie	i
 8006ffc:	61bb      	str	r3, [r7, #24]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007002:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00d      	beq.n	800702a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007016:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f847 	bl	80070b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800702c:	4618      	mov	r0, r3
 800702e:	3730      	adds	r7, #48	; 0x30
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10c      	bne.n	8007062 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	b672      	cpsid	i
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	b662      	cpsie	i
 800705c:	613b      	str	r3, [r7, #16]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e004      	b.n	8007078 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	3350      	adds	r3, #80	; 0x50
 800707c:	4618      	mov	r0, r3
 800707e:	f002 fe19 	bl	8009cb4 <pvPortMalloc>
 8007082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d011      	beq.n	80070ae <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3350      	adds	r3, #80	; 0x50
 8007092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800709c:	79fa      	ldrb	r2, [r7, #7]
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f805 	bl	80070b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070ae:	69bb      	ldr	r3, [r7, #24]
	}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e002      	b.n	80070da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070e6:	2101      	movs	r1, #1
 80070e8:	69b8      	ldr	r0, [r7, #24]
 80070ea:	f7ff feb7 	bl	8006e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800711e:	2300      	movs	r3, #0
 8007120:	2200      	movs	r2, #0
 8007122:	2100      	movs	r1, #0
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f917 	bl	8007358 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800713c:	2301      	movs	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	461a      	mov	r2, r3
 8007148:	6939      	ldr	r1, [r7, #16]
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f7ff ff72 	bl	8007034 <xQueueGenericCreate>
 8007150:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff ffd3 	bl	80070fe <prvInitialiseMutex>

		return xNewQueue;
 8007158:	68fb      	ldr	r3, [r7, #12]
	}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007162:	b580      	push	{r7, lr}
 8007164:	b088      	sub	sp, #32
 8007166:	af02      	add	r7, sp, #8
 8007168:	4603      	mov	r3, r0
 800716a:	6039      	str	r1, [r7, #0]
 800716c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800716e:	2301      	movs	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	6939      	ldr	r1, [r7, #16]
 8007180:	6978      	ldr	r0, [r7, #20]
 8007182:	f7ff fed5 	bl	8006f30 <xQueueGenericCreateStatic>
 8007186:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff ffb8 	bl	80070fe <prvInitialiseMutex>

		return xNewQueue;
 800718e:	68fb      	ldr	r3, [r7, #12]
	}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10c      	bne.n	80071c4 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	b672      	cpsid	i
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	b662      	cpsie	i
 80071be:	60fb      	str	r3, [r7, #12]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	689c      	ldr	r4, [r3, #8]
 80071c8:	f001 fde8 	bl	8008d9c <xTaskGetCurrentTaskHandle>
 80071cc:	4603      	mov	r3, r0
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d111      	bne.n	80071f6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	1e5a      	subs	r2, r3, #1
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d105      	bne.n	80071f0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80071e4:	2300      	movs	r3, #0
 80071e6:	2200      	movs	r2, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	6938      	ldr	r0, [r7, #16]
 80071ec:	f000 f8b4 	bl	8007358 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80071f0:	2301      	movs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e001      	b.n	80071fa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80071fa:	697b      	ldr	r3, [r7, #20]
	}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	bd90      	pop	{r4, r7, pc}

08007204 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007204:	b590      	push	{r4, r7, lr}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10c      	bne.n	8007232 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	b672      	cpsid	i
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	b662      	cpsie	i
 800722c:	60fb      	str	r3, [r7, #12]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	689c      	ldr	r4, [r3, #8]
 8007236:	f001 fdb1 	bl	8008d9c <xTaskGetCurrentTaskHandle>
 800723a:	4603      	mov	r3, r0
 800723c:	429c      	cmp	r4, r3
 800723e:	d107      	bne.n	8007250 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800724a:	2301      	movs	r3, #1
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	e00c      	b.n	800726a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6938      	ldr	r0, [r7, #16]
 8007254:	f000 fba2 	bl	800799c <xQueueSemaphoreTake>
 8007258:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800726a:	697b      	ldr	r3, [r7, #20]
	}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd90      	pop	{r4, r7, pc}

08007274 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10c      	bne.n	80072a0 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	b672      	cpsid	i
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	b662      	cpsie	i
 800729a:	61bb      	str	r3, [r7, #24]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d90c      	bls.n	80072c2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	617b      	str	r3, [r7, #20]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072c2:	2302      	movs	r3, #2
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	2100      	movs	r1, #0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fe2f 	bl	8006f30 <xQueueGenericCreateStatic>
 80072d2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072e0:	69fb      	ldr	r3, [r7, #28]
	}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	b672      	cpsid	i
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	b662      	cpsie	i
 800730e:	613b      	str	r3, [r7, #16]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	429a      	cmp	r2, r3
 800731a:	d90c      	bls.n	8007336 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	b672      	cpsid	i
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	b662      	cpsie	i
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007336:	2202      	movs	r2, #2
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fe7a 	bl	8007034 <xQueueGenericCreate>
 8007340:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800734e:	697b      	ldr	r3, [r7, #20]
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10c      	bne.n	800738e <xQueueGenericSend+0x36>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	b672      	cpsid	i
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	b662      	cpsie	i
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <xQueueGenericSend+0x44>
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <xQueueGenericSend+0x48>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <xQueueGenericSend+0x4a>
 80073a0:	2300      	movs	r3, #0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <xQueueGenericSend+0x68>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	b672      	cpsid	i
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	b662      	cpsie	i
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d103      	bne.n	80073ce <xQueueGenericSend+0x76>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <xQueueGenericSend+0x7a>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <xQueueGenericSend+0x7c>
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10c      	bne.n	80073f2 <xQueueGenericSend+0x9a>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	623b      	str	r3, [r7, #32]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073f2:	f001 fce3 	bl	8008dbc <xTaskGetSchedulerState>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <xQueueGenericSend+0xaa>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <xQueueGenericSend+0xae>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <xQueueGenericSend+0xb0>
 8007406:	2300      	movs	r3, #0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10c      	bne.n	8007426 <xQueueGenericSend+0xce>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	b672      	cpsid	i
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	b662      	cpsie	i
 8007420:	61fb      	str	r3, [r7, #28]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007426:	f002 fb19 	bl	8009a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007432:	429a      	cmp	r2, r3
 8007434:	d302      	bcc.n	800743c <xQueueGenericSend+0xe4>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d129      	bne.n	8007490 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007442:	f000 fcc2 	bl	8007dca <prvCopyDataToQueue>
 8007446:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d010      	beq.n	8007472 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	3324      	adds	r3, #36	; 0x24
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fadb 	bl	8008a10 <xTaskRemoveFromEventList>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d013      	beq.n	8007488 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007460:	4b3f      	ldr	r3, [pc, #252]	; (8007560 <xQueueGenericSend+0x208>)
 8007462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	e00a      	b.n	8007488 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007478:	4b39      	ldr	r3, [pc, #228]	; (8007560 <xQueueGenericSend+0x208>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007488:	f002 fb1c 	bl	8009ac4 <vPortExitCritical>
				return pdPASS;
 800748c:	2301      	movs	r3, #1
 800748e:	e063      	b.n	8007558 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007496:	f002 fb15 	bl	8009ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800749a:	2300      	movs	r3, #0
 800749c:	e05c      	b.n	8007558 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fb17 	bl	8008adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b2:	f002 fb07 	bl	8009ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074b6:	f001 f86b 	bl	8008590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ba:	f002 facf 	bl	8009a5c <vPortEnterCritical>
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c4:	b25b      	sxtb	r3, r3
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d103      	bne.n	80074d4 <xQueueGenericSend+0x17c>
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074da:	b25b      	sxtb	r3, r3
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d103      	bne.n	80074ea <xQueueGenericSend+0x192>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ea:	f002 faeb 	bl	8009ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ee:	1d3a      	adds	r2, r7, #4
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fb06 	bl	8008b08 <xTaskCheckForTimeOut>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d124      	bne.n	800754c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007504:	f000 fd59 	bl	8007fba <prvIsQueueFull>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d018      	beq.n	8007540 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	3310      	adds	r3, #16
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fa26 	bl	8008968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800751c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751e:	f000 fce4 	bl	8007eea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007522:	f001 f843 	bl	80085ac <xTaskResumeAll>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	f47f af7c 	bne.w	8007426 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <xQueueGenericSend+0x208>)
 8007530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	e772      	b.n	8007426 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007542:	f000 fcd2 	bl	8007eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007546:	f001 f831 	bl	80085ac <xTaskResumeAll>
 800754a:	e76c      	b.n	8007426 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800754c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800754e:	f000 fccc 	bl	8007eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007552:	f001 f82b 	bl	80085ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007556:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007558:	4618      	mov	r0, r3
 800755a:	3738      	adds	r7, #56	; 0x38
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	e000ed04 	.word	0xe000ed04

08007564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08e      	sub	sp, #56	; 0x38
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10c      	bne.n	8007596 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	b672      	cpsid	i
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	b662      	cpsie	i
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d103      	bne.n	80075a4 <xQueueGenericSendFromISR+0x40>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xQueueGenericSendFromISR+0x44>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xQueueGenericSendFromISR+0x46>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	623b      	str	r3, [r7, #32]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d103      	bne.n	80075d6 <xQueueGenericSendFromISR+0x72>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <xQueueGenericSendFromISR+0x76>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <xQueueGenericSendFromISR+0x78>
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	b672      	cpsid	i
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	b662      	cpsie	i
 80075f4:	61fb      	str	r3, [r7, #28]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075fa:	f002 fb17 	bl	8009c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	b672      	cpsid	i
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	b662      	cpsie	i
 8007616:	61ba      	str	r2, [r7, #24]
 8007618:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800761a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	429a      	cmp	r2, r3
 8007628:	d302      	bcc.n	8007630 <xQueueGenericSendFromISR+0xcc>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d12c      	bne.n	800768a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007640:	f000 fbc3 	bl	8007dca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007644:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d112      	bne.n	8007674 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	3324      	adds	r3, #36	; 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f9d8 	bl	8008a10 <xTaskRemoveFromEventList>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e007      	b.n	8007684 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007674:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007678:	3301      	adds	r3, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	b25a      	sxtb	r2, r3
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007684:	2301      	movs	r3, #1
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007688:	e001      	b.n	800768e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800768a:	2300      	movs	r3, #0
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007698:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800769c:	4618      	mov	r0, r3
 800769e:	3738      	adds	r7, #56	; 0x38
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08e      	sub	sp, #56	; 0x38
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10c      	bne.n	80076d2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	623b      	str	r3, [r7, #32]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <xQueueGiveFromISR+0x50>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	b672      	cpsid	i
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	b662      	cpsie	i
 80076ee:	61fb      	str	r3, [r7, #28]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <xQueueGiveFromISR+0x60>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <xQueueGiveFromISR+0x64>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <xQueueGiveFromISR+0x66>
 8007708:	2300      	movs	r3, #0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10c      	bne.n	8007728 <xQueueGiveFromISR+0x84>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	b672      	cpsid	i
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	b662      	cpsie	i
 8007722:	61bb      	str	r3, [r7, #24]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007728:	f002 fa80 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 800772c:	f3ef 8211 	mrs	r2, BASEPRI
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	b672      	cpsid	i
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	b662      	cpsie	i
 8007744:	617a      	str	r2, [r7, #20]
 8007746:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007748:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007758:	429a      	cmp	r2, r3
 800775a:	d22b      	bcs.n	80077b4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800776e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	d112      	bne.n	800779e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d016      	beq.n	80077ae <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	3324      	adds	r3, #36	; 0x24
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f943 	bl	8008a10 <xTaskRemoveFromEventList>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00e      	beq.n	80077ae <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e007      	b.n	80077ae <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800779e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a2:	3301      	adds	r3, #1
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	b25a      	sxtb	r2, r3
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077ae:	2301      	movs	r3, #1
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
 80077b2:	e001      	b.n	80077b8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f383 8811 	msr	BASEPRI, r3
}
 80077c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3738      	adds	r7, #56	; 0x38
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	; 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077dc:	2300      	movs	r3, #0
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10c      	bne.n	8007804 <xQueueReceive+0x34>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	b672      	cpsid	i
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	b662      	cpsie	i
 80077fe:	623b      	str	r3, [r7, #32]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <xQueueReceive+0x42>
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueReceive+0x46>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueReceive+0x48>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10c      	bne.n	8007836 <xQueueReceive+0x66>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	b672      	cpsid	i
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	b662      	cpsie	i
 8007830:	61fb      	str	r3, [r7, #28]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007836:	f001 fac1 	bl	8008dbc <xTaskGetSchedulerState>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <xQueueReceive+0x76>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <xQueueReceive+0x7a>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <xQueueReceive+0x7c>
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10c      	bne.n	800786a <xQueueReceive+0x9a>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	b672      	cpsid	i
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	b662      	cpsie	i
 8007864:	61bb      	str	r3, [r7, #24]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800786a:	f002 f8f7 	bl	8009a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01f      	beq.n	80078ba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787e:	f000 fb0e 	bl	8007e9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00f      	beq.n	80078b2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	3310      	adds	r3, #16
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f8ba 	bl	8008a10 <xTaskRemoveFromEventList>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078a2:	4b3d      	ldr	r3, [pc, #244]	; (8007998 <xQueueReceive+0x1c8>)
 80078a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078b2:	f002 f907 	bl	8009ac4 <vPortExitCritical>
				return pdPASS;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e069      	b.n	800798e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c0:	f002 f900 	bl	8009ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e062      	b.n	800798e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ce:	f107 0310 	add.w	r3, r7, #16
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 f902 	bl	8008adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078dc:	f002 f8f2 	bl	8009ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e0:	f000 fe56 	bl	8008590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e4:	f002 f8ba 	bl	8009a5c <vPortEnterCritical>
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ee:	b25b      	sxtb	r3, r3
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d103      	bne.n	80078fe <xQueueReceive+0x12e>
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007904:	b25b      	sxtb	r3, r3
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	d103      	bne.n	8007914 <xQueueReceive+0x144>
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007914:	f002 f8d6 	bl	8009ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007918:	1d3a      	adds	r2, r7, #4
 800791a:	f107 0310 	add.w	r3, r7, #16
 800791e:	4611      	mov	r1, r2
 8007920:	4618      	mov	r0, r3
 8007922:	f001 f8f1 	bl	8008b08 <xTaskCheckForTimeOut>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d123      	bne.n	8007974 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f000 fb2e 	bl	8007f8e <prvIsQueueEmpty>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d017      	beq.n	8007968 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	3324      	adds	r3, #36	; 0x24
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 f811 	bl	8008968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007948:	f000 facf 	bl	8007eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800794c:	f000 fe2e 	bl	80085ac <xTaskResumeAll>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d189      	bne.n	800786a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007956:	4b10      	ldr	r3, [pc, #64]	; (8007998 <xQueueReceive+0x1c8>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	e780      	b.n	800786a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796a:	f000 fabe 	bl	8007eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800796e:	f000 fe1d 	bl	80085ac <xTaskResumeAll>
 8007972:	e77a      	b.n	800786a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007976:	f000 fab8 	bl	8007eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797a:	f000 fe17 	bl	80085ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800797e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007980:	f000 fb05 	bl	8007f8e <prvIsQueueEmpty>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	f43f af6f 	beq.w	800786a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800798c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800798e:	4618      	mov	r0, r3
 8007990:	3730      	adds	r7, #48	; 0x30
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08e      	sub	sp, #56	; 0x38
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10c      	bne.n	80079d2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	b672      	cpsid	i
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	b662      	cpsie	i
 80079cc:	623b      	str	r3, [r7, #32]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00c      	beq.n	80079f4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	b672      	cpsid	i
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	b662      	cpsie	i
 80079ee:	61fb      	str	r3, [r7, #28]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f4:	f001 f9e2 	bl	8008dbc <xTaskGetSchedulerState>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <xQueueSemaphoreTake+0x68>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <xQueueSemaphoreTake+0x6c>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <xQueueSemaphoreTake+0x6e>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10c      	bne.n	8007a28 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	b672      	cpsid	i
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	b662      	cpsie	i
 8007a22:	61bb      	str	r3, [r7, #24]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a28:	f002 f818 	bl	8009a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d024      	beq.n	8007a82 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	1e5a      	subs	r2, r3, #1
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a48:	f001 fb36 	bl	80090b8 <pvTaskIncrementMutexHeldCount>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00f      	beq.n	8007a7a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	3310      	adds	r3, #16
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 ffd6 	bl	8008a10 <xTaskRemoveFromEventList>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a6a:	4b55      	ldr	r3, [pc, #340]	; (8007bc0 <xQueueSemaphoreTake+0x224>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a7a:	f002 f823 	bl	8009ac4 <vPortExitCritical>
				return pdPASS;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e099      	b.n	8007bb6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d113      	bne.n	8007ab0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00c      	beq.n	8007aa8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	b672      	cpsid	i
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	b662      	cpsie	i
 8007aa2:	617b      	str	r3, [r7, #20]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007aa8:	f002 f80c 	bl	8009ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e082      	b.n	8007bb6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ab6:	f107 030c 	add.w	r3, r7, #12
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 f80e 	bl	8008adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ac4:	f001 fffe 	bl	8009ac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ac8:	f000 fd62 	bl	8008590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007acc:	f001 ffc6 	bl	8009a5c <vPortEnterCritical>
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007adc:	d103      	bne.n	8007ae6 <xQueueSemaphoreTake+0x14a>
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d103      	bne.n	8007afc <xQueueSemaphoreTake+0x160>
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007afc:	f001 ffe2 	bl	8009ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b00:	463a      	mov	r2, r7
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fffd 	bl	8008b08 <xTaskCheckForTimeOut>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d132      	bne.n	8007b7a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b16:	f000 fa3a 	bl	8007f8e <prvIsQueueEmpty>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d026      	beq.n	8007b6e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007b28:	f001 ff98 	bl	8009a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 f961 	bl	8008df8 <xTaskPriorityInherit>
 8007b36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b38:	f001 ffc4 	bl	8009ac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	3324      	adds	r3, #36	; 0x24
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 ff0f 	bl	8008968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b4c:	f000 f9cd 	bl	8007eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b50:	f000 fd2c 	bl	80085ac <xTaskResumeAll>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f47f af66 	bne.w	8007a28 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007b5c:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <xQueueSemaphoreTake+0x224>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	e75c      	b.n	8007a28 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b70:	f000 f9bb 	bl	8007eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b74:	f000 fd1a 	bl	80085ac <xTaskResumeAll>
 8007b78:	e756      	b.n	8007a28 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b7c:	f000 f9b5 	bl	8007eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b80:	f000 fd14 	bl	80085ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b86:	f000 fa02 	bl	8007f8e <prvIsQueueEmpty>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f43f af4b 	beq.w	8007a28 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b98:	f001 ff60 	bl	8009a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b9e:	f000 f8fc 	bl	8007d9a <prvGetDisinheritPriorityAfterTimeout>
 8007ba2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 f9fe 	bl	8008fac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007bb0:	f001 ff88 	bl	8009ac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3738      	adds	r7, #56	; 0x38
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08e      	sub	sp, #56	; 0x38
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10c      	bne.n	8007bf4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	b672      	cpsid	i
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	b662      	cpsie	i
 8007bee:	623b      	str	r3, [r7, #32]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueReceiveFromISR+0x3e>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <xQueueReceiveFromISR+0x42>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueReceiveFromISR+0x44>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10c      	bne.n	8007c26 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	b672      	cpsid	i
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	b662      	cpsie	i
 8007c20:	61fb      	str	r3, [r7, #28]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c26:	f002 f801 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 8007c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	61ba      	str	r2, [r7, #24]
 8007c44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d02f      	beq.n	8007cb6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c64:	f000 f91b 	bl	8007e9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	1e5a      	subs	r2, r3, #1
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d112      	bne.n	8007ca0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	3310      	adds	r3, #16
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fec2 	bl	8008a10 <xTaskRemoveFromEventList>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e007      	b.n	8007cb0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	b25a      	sxtb	r2, r3
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb4:	e001      	b.n	8007cba <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f383 8811 	msr	BASEPRI, r3
}
 8007cc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3738      	adds	r7, #56	; 0x38
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10c      	bne.n	8007cf8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	b672      	cpsid	i
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	b662      	cpsie	i
 8007cf2:	60bb      	str	r3, [r7, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007cf8:	f001 feb0 	bl	8009a5c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007d02:	f001 fedf 	bl	8009ac4 <vPortExitCritical>

	return uxReturn;
 8007d06:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	b672      	cpsid	i
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	b662      	cpsie	i
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007d42:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d44:	4618      	mov	r0, r3
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10c      	bne.n	8007d7c <vQueueDelete+0x2c>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	b672      	cpsid	i
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	b662      	cpsie	i
 8007d76:	60bb      	str	r3, [r7, #8]
}
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f95f 	bl	8008040 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f002 f85b 	bl	8009e48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d006      	beq.n	8007db8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	e001      	b.n	8007dbc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
	}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10d      	bne.n	8007e04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d14d      	bne.n	8007e8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 f867 	bl	8008ec8 <xTaskPriorityDisinherit>
 8007dfa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	609a      	str	r2, [r3, #8]
 8007e02:	e043      	b.n	8007e8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d119      	bne.n	8007e3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6858      	ldr	r0, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	461a      	mov	r2, r3
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	f00f fcc9 	bl	80177ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	441a      	add	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d32b      	bcc.n	8007e8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	605a      	str	r2, [r3, #4]
 8007e3c:	e026      	b.n	8007e8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68d8      	ldr	r0, [r3, #12]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	461a      	mov	r2, r3
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	f00f fcaf 	bl	80177ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	425b      	negs	r3, r3
 8007e58:	441a      	add	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d207      	bcs.n	8007e7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	425b      	negs	r3, r3
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d105      	bne.n	8007e8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e94:	697b      	ldr	r3, [r7, #20]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d018      	beq.n	8007ee2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	441a      	add	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d303      	bcc.n	8007ed2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68d9      	ldr	r1, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	461a      	mov	r2, r3
 8007edc:	6838      	ldr	r0, [r7, #0]
 8007ede:	f00f fc65 	bl	80177ac <memcpy>
	}
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ef2:	f001 fdb3 	bl	8009a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007efc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007efe:	e011      	b.n	8007f24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d012      	beq.n	8007f2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3324      	adds	r3, #36	; 0x24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fd7f 	bl	8008a10 <xTaskRemoveFromEventList>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f18:	f000 fe5c 	bl	8008bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dce9      	bgt.n	8007f00 <prvUnlockQueue+0x16>
 8007f2c:	e000      	b.n	8007f30 <prvUnlockQueue+0x46>
					break;
 8007f2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	22ff      	movs	r2, #255	; 0xff
 8007f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f38:	f001 fdc4 	bl	8009ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f3c:	f001 fd8e 	bl	8009a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f48:	e011      	b.n	8007f6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d012      	beq.n	8007f78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3310      	adds	r3, #16
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fd5a 	bl	8008a10 <xTaskRemoveFromEventList>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f62:	f000 fe37 	bl	8008bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dce9      	bgt.n	8007f4a <prvUnlockQueue+0x60>
 8007f76:	e000      	b.n	8007f7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f82:	f001 fd9f 	bl	8009ac4 <vPortExitCritical>
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f96:	f001 fd61 	bl	8009a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e001      	b.n	8007fac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fd8a 	bl	8009ac4 <vPortExitCritical>

	return xReturn;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fc2:	f001 fd4b 	bl	8009a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d102      	bne.n	8007fd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e001      	b.n	8007fdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fdc:	f001 fd72 	bl	8009ac4 <vPortExitCritical>

	return xReturn;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	e014      	b.n	8008026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <vQueueAddToRegistry+0x50>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008008:	490c      	ldr	r1, [pc, #48]	; (800803c <vQueueAddToRegistry+0x50>)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <vQueueAddToRegistry+0x50>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800801e:	e006      	b.n	800802e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b07      	cmp	r3, #7
 800802a:	d9e7      	bls.n	8007ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	200081a0 	.word	0x200081a0

08008040 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e016      	b.n	800807c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800804e:	4a10      	ldr	r2, [pc, #64]	; (8008090 <vQueueUnregisterQueue+0x50>)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	4413      	add	r3, r2
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d10b      	bne.n	8008076 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800805e:	4a0c      	ldr	r2, [pc, #48]	; (8008090 <vQueueUnregisterQueue+0x50>)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2100      	movs	r1, #0
 8008064:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <vQueueUnregisterQueue+0x50>)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	4413      	add	r3, r2
 8008070:	2200      	movs	r2, #0
 8008072:	605a      	str	r2, [r3, #4]
				break;
 8008074:	e006      	b.n	8008084 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b07      	cmp	r3, #7
 8008080:	d9e5      	bls.n	800804e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	200081a0 	.word	0x200081a0

08008094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080a4:	f001 fcda 	bl	8009a5c <vPortEnterCritical>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d103      	bne.n	80080be <vQueueWaitForMessageRestricted+0x2a>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d103      	bne.n	80080d4 <vQueueWaitForMessageRestricted+0x40>
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d4:	f001 fcf6 	bl	8009ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	3324      	adds	r3, #36	; 0x24
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fc63 	bl	80089b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f7ff fefb 	bl	8007eea <prvUnlockQueue>
	}
 80080f4:	bf00      	nop
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08e      	sub	sp, #56	; 0x38
 8008100:	af04      	add	r7, sp, #16
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10c      	bne.n	800812a <xTaskCreateStatic+0x2e>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	b672      	cpsid	i
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	b662      	cpsie	i
 8008124:	623b      	str	r3, [r7, #32]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10c      	bne.n	800814a <xTaskCreateStatic+0x4e>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	b672      	cpsid	i
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	b662      	cpsie	i
 8008144:	61fb      	str	r3, [r7, #28]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800814a:	235c      	movs	r3, #92	; 0x5c
 800814c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b5c      	cmp	r3, #92	; 0x5c
 8008152:	d00c      	beq.n	800816e <xTaskCreateStatic+0x72>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	b672      	cpsid	i
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	b662      	cpsie	i
 8008168:	61bb      	str	r3, [r7, #24]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800816e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01e      	beq.n	80081b4 <xTaskCreateStatic+0xb8>
 8008176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01b      	beq.n	80081b4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	2202      	movs	r2, #2
 800818a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800818e:	2300      	movs	r3, #0
 8008190:	9303      	str	r3, [sp, #12]
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	9302      	str	r3, [sp, #8]
 8008196:	f107 0314 	add.w	r3, r7, #20
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 f850 	bl	800824c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ae:	f000 f8df 	bl	8008370 <prvAddNewTaskToReadyList>
 80081b2:	e001      	b.n	80081b8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081b8:	697b      	ldr	r3, [r7, #20]
	}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3728      	adds	r7, #40	; 0x28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b08c      	sub	sp, #48	; 0x30
 80081c6:	af04      	add	r7, sp, #16
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fd6c 	bl	8009cb4 <pvPortMalloc>
 80081dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00e      	beq.n	8008202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081e4:	205c      	movs	r0, #92	; 0x5c
 80081e6:	f001 fd65 	bl	8009cb4 <pvPortMalloc>
 80081ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	631a      	str	r2, [r3, #48]	; 0x30
 80081f8:	e005      	b.n	8008206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081fa:	6978      	ldr	r0, [r7, #20]
 80081fc:	f001 fe24 	bl	8009e48 <vPortFree>
 8008200:	e001      	b.n	8008206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d017      	beq.n	800823c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008214:	88fa      	ldrh	r2, [r7, #6]
 8008216:	2300      	movs	r3, #0
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f80e 	bl	800824c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008230:	69f8      	ldr	r0, [r7, #28]
 8008232:	f000 f89d 	bl	8008370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008236:	2301      	movs	r3, #1
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	e002      	b.n	8008242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008242:	69bb      	ldr	r3, [r7, #24]
	}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	461a      	mov	r2, r3
 8008264:	21a5      	movs	r1, #165	; 0xa5
 8008266:	f00f fac9 	bl	80177fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008274:	440b      	add	r3, r1
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f023 0307 	bic.w	r3, r3, #7
 8008282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	617b      	str	r3, [r7, #20]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01f      	beq.n	80082ee <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ae:	2300      	movs	r3, #0
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	e012      	b.n	80082da <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	7819      	ldrb	r1, [r3, #0]
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	3334      	adds	r3, #52	; 0x34
 80082c4:	460a      	mov	r2, r1
 80082c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d006      	beq.n	80082e2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	61fb      	str	r3, [r7, #28]
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2b0f      	cmp	r3, #15
 80082de:	d9e9      	bls.n	80082b4 <prvInitialiseNewTask+0x68>
 80082e0:	e000      	b.n	80082e4 <prvInitialiseNewTask+0x98>
			{
				break;
 80082e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082ec:	e003      	b.n	80082f6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2b37      	cmp	r3, #55	; 0x37
 80082fa:	d901      	bls.n	8008300 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082fc:	2337      	movs	r3, #55	; 0x37
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008304:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	2200      	movs	r2, #0
 8008310:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	3304      	adds	r3, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fd0c 	bl	8006d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	3318      	adds	r3, #24
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fd07 	bl	8006d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	2200      	movs	r2, #0
 8008340:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	69b8      	ldr	r0, [r7, #24]
 8008350:	f001 fa76 	bl	8009840 <pxPortInitialiseStack>
 8008354:	4602      	mov	r2, r0
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008366:	bf00      	nop
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008378:	f001 fb70 	bl	8009a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800837c:	4b2d      	ldr	r3, [pc, #180]	; (8008434 <prvAddNewTaskToReadyList+0xc4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3301      	adds	r3, #1
 8008382:	4a2c      	ldr	r2, [pc, #176]	; (8008434 <prvAddNewTaskToReadyList+0xc4>)
 8008384:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008386:	4b2c      	ldr	r3, [pc, #176]	; (8008438 <prvAddNewTaskToReadyList+0xc8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800838e:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <prvAddNewTaskToReadyList+0xc8>)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008394:	4b27      	ldr	r3, [pc, #156]	; (8008434 <prvAddNewTaskToReadyList+0xc4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d110      	bne.n	80083be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800839c:	f000 fc3e 	bl	8008c1c <prvInitialiseTaskLists>
 80083a0:	e00d      	b.n	80083be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083a2:	4b26      	ldr	r3, [pc, #152]	; (800843c <prvAddNewTaskToReadyList+0xcc>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083aa:	4b23      	ldr	r3, [pc, #140]	; (8008438 <prvAddNewTaskToReadyList+0xc8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d802      	bhi.n	80083be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083b8:	4a1f      	ldr	r2, [pc, #124]	; (8008438 <prvAddNewTaskToReadyList+0xc8>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083be:	4b20      	ldr	r3, [pc, #128]	; (8008440 <prvAddNewTaskToReadyList+0xd0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <prvAddNewTaskToReadyList+0xd0>)
 80083c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083c8:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <prvAddNewTaskToReadyList+0xd0>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <prvAddNewTaskToReadyList+0xd4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d903      	bls.n	80083e4 <prvAddNewTaskToReadyList+0x74>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a18      	ldr	r2, [pc, #96]	; (8008444 <prvAddNewTaskToReadyList+0xd4>)
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4a15      	ldr	r2, [pc, #84]	; (8008448 <prvAddNewTaskToReadyList+0xd8>)
 80083f2:	441a      	add	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fe fca7 	bl	8006d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008400:	f001 fb60 	bl	8009ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008404:	4b0d      	ldr	r3, [pc, #52]	; (800843c <prvAddNewTaskToReadyList+0xcc>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00e      	beq.n	800842a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800840c:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <prvAddNewTaskToReadyList+0xc8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	429a      	cmp	r2, r3
 8008418:	d207      	bcs.n	800842a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <prvAddNewTaskToReadyList+0xdc>)
 800841c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000c38 	.word	0x20000c38
 8008438:	20000764 	.word	0x20000764
 800843c:	20000c44 	.word	0x20000c44
 8008440:	20000c54 	.word	0x20000c54
 8008444:	20000c40 	.word	0x20000c40
 8008448:	20000768 	.word	0x20000768
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d019      	beq.n	8008496 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008462:	4b14      	ldr	r3, [pc, #80]	; (80084b4 <vTaskDelay+0x64>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <vTaskDelay+0x34>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	b672      	cpsid	i
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	b662      	cpsie	i
 800847e:	60bb      	str	r3, [r7, #8]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008484:	f000 f884 	bl	8008590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fe28 	bl	80090e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008490:	f000 f88c 	bl	80085ac <xTaskResumeAll>
 8008494:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <vTaskDelay+0x68>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000c60 	.word	0x20000c60
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ca:	463a      	mov	r2, r7
 80084cc:	1d39      	adds	r1, r7, #4
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fbda 	bl	8006c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	460a      	mov	r2, r1
 80084ea:	4923      	ldr	r1, [pc, #140]	; (8008578 <vTaskStartScheduler+0xbc>)
 80084ec:	4823      	ldr	r0, [pc, #140]	; (800857c <vTaskStartScheduler+0xc0>)
 80084ee:	f7ff fe05 	bl	80080fc <xTaskCreateStatic>
 80084f2:	4603      	mov	r3, r0
 80084f4:	4a22      	ldr	r2, [pc, #136]	; (8008580 <vTaskStartScheduler+0xc4>)
 80084f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084f8:	4b21      	ldr	r3, [pc, #132]	; (8008580 <vTaskStartScheduler+0xc4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e001      	b.n	800850a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d102      	bne.n	8008516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008510:	f000 fe3a 	bl	8009188 <xTimerCreateTimerTask>
 8008514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d118      	bne.n	800854e <vTaskStartScheduler+0x92>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	b672      	cpsid	i
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	b662      	cpsie	i
 8008530:	613b      	str	r3, [r7, #16]
}
 8008532:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008534:	4b13      	ldr	r3, [pc, #76]	; (8008584 <vTaskStartScheduler+0xc8>)
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800853c:	4b12      	ldr	r3, [pc, #72]	; (8008588 <vTaskStartScheduler+0xcc>)
 800853e:	2201      	movs	r2, #1
 8008540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <vTaskStartScheduler+0xd0>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008548:	f001 fa0a 	bl	8009960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800854c:	e010      	b.n	8008570 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d10c      	bne.n	8008570 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	b672      	cpsid	i
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	b662      	cpsie	i
 800856a:	60fb      	str	r3, [r7, #12]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <vTaskStartScheduler+0xb2>
}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	08018f1c 	.word	0x08018f1c
 800857c:	08008bed 	.word	0x08008bed
 8008580:	20000c5c 	.word	0x20000c5c
 8008584:	20000c58 	.word	0x20000c58
 8008588:	20000c44 	.word	0x20000c44
 800858c:	20000c3c 	.word	0x20000c3c

08008590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008594:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <vTaskSuspendAll+0x18>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	4a03      	ldr	r2, [pc, #12]	; (80085a8 <vTaskSuspendAll+0x18>)
 800859c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800859e:	bf00      	nop
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20000c60 	.word	0x20000c60

080085ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085ba:	4b43      	ldr	r3, [pc, #268]	; (80086c8 <xTaskResumeAll+0x11c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <xTaskResumeAll+0x30>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	603b      	str	r3, [r7, #0]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085dc:	f001 fa3e 	bl	8009a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085e0:	4b39      	ldr	r3, [pc, #228]	; (80086c8 <xTaskResumeAll+0x11c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	4a38      	ldr	r2, [pc, #224]	; (80086c8 <xTaskResumeAll+0x11c>)
 80085e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ea:	4b37      	ldr	r3, [pc, #220]	; (80086c8 <xTaskResumeAll+0x11c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d162      	bne.n	80086b8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085f2:	4b36      	ldr	r3, [pc, #216]	; (80086cc <xTaskResumeAll+0x120>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d05e      	beq.n	80086b8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085fa:	e02f      	b.n	800865c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fc:	4b34      	ldr	r3, [pc, #208]	; (80086d0 <xTaskResumeAll+0x124>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3318      	adds	r3, #24
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe fbfd 	bl	8006e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fbf8 	bl	8006e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <xTaskResumeAll+0x128>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <xTaskResumeAll+0x80>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <xTaskResumeAll+0x128>)
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4a27      	ldr	r2, [pc, #156]	; (80086d8 <xTaskResumeAll+0x12c>)
 800863a:	441a      	add	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fe fb83 	bl	8006d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864c:	4b23      	ldr	r3, [pc, #140]	; (80086dc <xTaskResumeAll+0x130>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	429a      	cmp	r2, r3
 8008654:	d302      	bcc.n	800865c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008656:	4b22      	ldr	r3, [pc, #136]	; (80086e0 <xTaskResumeAll+0x134>)
 8008658:	2201      	movs	r2, #1
 800865a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800865c:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <xTaskResumeAll+0x124>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1cb      	bne.n	80085fc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800866a:	f000 fb77 	bl	8008d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800866e:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <xTaskResumeAll+0x138>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d010      	beq.n	800869c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800867a:	f000 f859 	bl	8008730 <xTaskIncrementTick>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008684:	4b16      	ldr	r3, [pc, #88]	; (80086e0 <xTaskResumeAll+0x134>)
 8008686:	2201      	movs	r2, #1
 8008688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3b01      	subs	r3, #1
 800868e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1f1      	bne.n	800867a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <xTaskResumeAll+0x138>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800869c:	4b10      	ldr	r3, [pc, #64]	; (80086e0 <xTaskResumeAll+0x134>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d009      	beq.n	80086b8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <xTaskResumeAll+0x13c>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b8:	f001 fa04 	bl	8009ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80086bc:	68bb      	ldr	r3, [r7, #8]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000c60 	.word	0x20000c60
 80086cc:	20000c38 	.word	0x20000c38
 80086d0:	20000bf8 	.word	0x20000bf8
 80086d4:	20000c40 	.word	0x20000c40
 80086d8:	20000768 	.word	0x20000768
 80086dc:	20000764 	.word	0x20000764
 80086e0:	20000c4c 	.word	0x20000c4c
 80086e4:	20000c48 	.word	0x20000c48
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <xTaskGetTickCount+0x1c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086f8:	687b      	ldr	r3, [r7, #4]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	20000c3c 	.word	0x20000c3c

0800870c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008712:	f001 fa8b 	bl	8009c2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008716:	2300      	movs	r3, #0
 8008718:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800871a:	4b04      	ldr	r3, [pc, #16]	; (800872c <xTaskGetTickCountFromISR+0x20>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008720:	683b      	ldr	r3, [r7, #0]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000c3c 	.word	0x20000c3c

08008730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008736:	2300      	movs	r3, #0
 8008738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800873a:	4b50      	ldr	r3, [pc, #320]	; (800887c <xTaskIncrementTick+0x14c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 808b 	bne.w	800885a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008744:	4b4e      	ldr	r3, [pc, #312]	; (8008880 <xTaskIncrementTick+0x150>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800874c:	4a4c      	ldr	r2, [pc, #304]	; (8008880 <xTaskIncrementTick+0x150>)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d122      	bne.n	800879e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008758:	4b4a      	ldr	r3, [pc, #296]	; (8008884 <xTaskIncrementTick+0x154>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00c      	beq.n	800877c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	b672      	cpsid	i
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	b662      	cpsie	i
 8008776:	603b      	str	r3, [r7, #0]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <xTaskIncrementTick+0x4a>
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <xTaskIncrementTick+0x154>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	4b41      	ldr	r3, [pc, #260]	; (8008888 <xTaskIncrementTick+0x158>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a3f      	ldr	r2, [pc, #252]	; (8008884 <xTaskIncrementTick+0x154>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	4a3f      	ldr	r2, [pc, #252]	; (8008888 <xTaskIncrementTick+0x158>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	4b3e      	ldr	r3, [pc, #248]	; (800888c <xTaskIncrementTick+0x15c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3301      	adds	r3, #1
 8008796:	4a3d      	ldr	r2, [pc, #244]	; (800888c <xTaskIncrementTick+0x15c>)
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	f000 fadf 	bl	8008d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800879e:	4b3c      	ldr	r3, [pc, #240]	; (8008890 <xTaskIncrementTick+0x160>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d349      	bcc.n	800883c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087a8:	4b36      	ldr	r3, [pc, #216]	; (8008884 <xTaskIncrementTick+0x154>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b2:	4b37      	ldr	r3, [pc, #220]	; (8008890 <xTaskIncrementTick+0x160>)
 80087b4:	f04f 32ff 	mov.w	r2, #4294967295
 80087b8:	601a      	str	r2, [r3, #0]
					break;
 80087ba:	e03f      	b.n	800883c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087bc:	4b31      	ldr	r3, [pc, #196]	; (8008884 <xTaskIncrementTick+0x154>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d203      	bcs.n	80087dc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087d4:	4a2e      	ldr	r2, [pc, #184]	; (8008890 <xTaskIncrementTick+0x160>)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087da:	e02f      	b.n	800883c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe fb11 	bl	8006e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	3318      	adds	r3, #24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fb08 	bl	8006e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	4b25      	ldr	r3, [pc, #148]	; (8008894 <xTaskIncrementTick+0x164>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d903      	bls.n	800880c <xTaskIncrementTick+0xdc>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	4a22      	ldr	r2, [pc, #136]	; (8008894 <xTaskIncrementTick+0x164>)
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4a1f      	ldr	r2, [pc, #124]	; (8008898 <xTaskIncrementTick+0x168>)
 800881a:	441a      	add	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f7fe fa93 	bl	8006d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882c:	4b1b      	ldr	r3, [pc, #108]	; (800889c <xTaskIncrementTick+0x16c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	429a      	cmp	r2, r3
 8008834:	d3b8      	bcc.n	80087a8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008836:	2301      	movs	r3, #1
 8008838:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800883a:	e7b5      	b.n	80087a8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <xTaskIncrementTick+0x16c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	4915      	ldr	r1, [pc, #84]	; (8008898 <xTaskIncrementTick+0x168>)
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d907      	bls.n	8008864 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e004      	b.n	8008864 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <xTaskIncrementTick+0x170>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3301      	adds	r3, #1
 8008860:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <xTaskIncrementTick+0x170>)
 8008862:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008864:	4b0f      	ldr	r3, [pc, #60]	; (80088a4 <xTaskIncrementTick+0x174>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008870:	697b      	ldr	r3, [r7, #20]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000c60 	.word	0x20000c60
 8008880:	20000c3c 	.word	0x20000c3c
 8008884:	20000bf0 	.word	0x20000bf0
 8008888:	20000bf4 	.word	0x20000bf4
 800888c:	20000c50 	.word	0x20000c50
 8008890:	20000c58 	.word	0x20000c58
 8008894:	20000c40 	.word	0x20000c40
 8008898:	20000768 	.word	0x20000768
 800889c:	20000764 	.word	0x20000764
 80088a0:	20000c48 	.word	0x20000c48
 80088a4:	20000c4c 	.word	0x20000c4c

080088a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088ae:	4b29      	ldr	r3, [pc, #164]	; (8008954 <vTaskSwitchContext+0xac>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088b6:	4b28      	ldr	r3, [pc, #160]	; (8008958 <vTaskSwitchContext+0xb0>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088bc:	e043      	b.n	8008946 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80088be:	4b26      	ldr	r3, [pc, #152]	; (8008958 <vTaskSwitchContext+0xb0>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c4:	4b25      	ldr	r3, [pc, #148]	; (800895c <vTaskSwitchContext+0xb4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e012      	b.n	80088f2 <vTaskSwitchContext+0x4a>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10c      	bne.n	80088ec <vTaskSwitchContext+0x44>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	b672      	cpsid	i
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	b662      	cpsie	i
 80088e6:	607b      	str	r3, [r7, #4]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <vTaskSwitchContext+0x42>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	491b      	ldr	r1, [pc, #108]	; (8008960 <vTaskSwitchContext+0xb8>)
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0e2      	beq.n	80088cc <vTaskSwitchContext+0x24>
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <vTaskSwitchContext+0xb8>)
 8008912:	4413      	add	r3, r2
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	605a      	str	r2, [r3, #4]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3308      	adds	r3, #8
 8008928:	429a      	cmp	r2, r3
 800892a:	d104      	bne.n	8008936 <vTaskSwitchContext+0x8e>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	4a09      	ldr	r2, [pc, #36]	; (8008964 <vTaskSwitchContext+0xbc>)
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	4a06      	ldr	r2, [pc, #24]	; (800895c <vTaskSwitchContext+0xb4>)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6013      	str	r3, [r2, #0]
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20000c60 	.word	0x20000c60
 8008958:	20000c4c 	.word	0x20000c4c
 800895c:	20000c40 	.word	0x20000c40
 8008960:	20000768 	.word	0x20000768
 8008964:	20000764 	.word	0x20000764

08008968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10c      	bne.n	8008992 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	b672      	cpsid	i
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	b662      	cpsie	i
 800898c:	60fb      	str	r3, [r7, #12]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <vTaskPlaceOnEventList+0x48>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3318      	adds	r3, #24
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7fe f9fb 	bl	8006d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089a0:	2101      	movs	r1, #1
 80089a2:	6838      	ldr	r0, [r7, #0]
 80089a4:	f000 fb9c 	bl	80090e0 <prvAddCurrentTaskToDelayedList>
}
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20000764 	.word	0x20000764

080089b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10c      	bne.n	80089e0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	b672      	cpsid	i
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	b662      	cpsie	i
 80089da:	617b      	str	r3, [r7, #20]
}
 80089dc:	bf00      	nop
 80089de:	e7fe      	b.n	80089de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <vTaskPlaceOnEventListRestricted+0x58>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3318      	adds	r3, #24
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7fe f9b0 	bl	8006d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	68b8      	ldr	r0, [r7, #8]
 80089fe:	f000 fb6f 	bl	80090e0 <prvAddCurrentTaskToDelayedList>
	}
 8008a02:	bf00      	nop
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000764 	.word	0x20000764

08008a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10c      	bne.n	8008a40 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	b672      	cpsid	i
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	b662      	cpsie	i
 8008a3a:	60fb      	str	r3, [r7, #12]
}
 8008a3c:	bf00      	nop
 8008a3e:	e7fe      	b.n	8008a3e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	3318      	adds	r3, #24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe f9df 	bl	8006e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4a:	4b1e      	ldr	r3, [pc, #120]	; (8008ac4 <xTaskRemoveFromEventList+0xb4>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d11d      	bne.n	8008a8e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe f9d6 	bl	8006e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <xTaskRemoveFromEventList+0xb8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d903      	bls.n	8008a70 <xTaskRemoveFromEventList+0x60>
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	4a16      	ldr	r2, [pc, #88]	; (8008ac8 <xTaskRemoveFromEventList+0xb8>)
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4a13      	ldr	r2, [pc, #76]	; (8008acc <xTaskRemoveFromEventList+0xbc>)
 8008a7e:	441a      	add	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f7fe f961 	bl	8006d4e <vListInsertEnd>
 8008a8c:	e005      	b.n	8008a9a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	3318      	adds	r3, #24
 8008a92:	4619      	mov	r1, r3
 8008a94:	480e      	ldr	r0, [pc, #56]	; (8008ad0 <xTaskRemoveFromEventList+0xc0>)
 8008a96:	f7fe f95a 	bl	8006d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <xTaskRemoveFromEventList+0xc4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d905      	bls.n	8008ab4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <xTaskRemoveFromEventList+0xc8>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e001      	b.n	8008ab8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ab8:	697b      	ldr	r3, [r7, #20]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000c60 	.word	0x20000c60
 8008ac8:	20000c40 	.word	0x20000c40
 8008acc:	20000768 	.word	0x20000768
 8008ad0:	20000bf8 	.word	0x20000bf8
 8008ad4:	20000764 	.word	0x20000764
 8008ad8:	20000c4c 	.word	0x20000c4c

08008adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <vTaskInternalSetTimeOutState+0x24>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <vTaskInternalSetTimeOutState+0x28>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	605a      	str	r2, [r3, #4]
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20000c50 	.word	0x20000c50
 8008b04:	20000c3c 	.word	0x20000c3c

08008b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10c      	bne.n	8008b32 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	b672      	cpsid	i
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	b662      	cpsie	i
 8008b2c:	613b      	str	r3, [r7, #16]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10c      	bne.n	8008b52 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	b672      	cpsid	i
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	b662      	cpsie	i
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008b52:	f000 ff83 	bl	8009a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <xTaskCheckForTimeOut+0xc4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d102      	bne.n	8008b76 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61fb      	str	r3, [r7, #28]
 8008b74:	e023      	b.n	8008bbe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <xTaskCheckForTimeOut+0xc8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d007      	beq.n	8008b92 <xTaskCheckForTimeOut+0x8a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d302      	bcc.n	8008b92 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]
 8008b90:	e015      	b.n	8008bbe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d20b      	bcs.n	8008bb4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff97 	bl	8008adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e004      	b.n	8008bbe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bbe:	f000 ff81 	bl	8009ac4 <vPortExitCritical>

	return xReturn;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20000c3c 	.word	0x20000c3c
 8008bd0:	20000c50 	.word	0x20000c50

08008bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bd8:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <vTaskMissedYield+0x14>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	20000c4c 	.word	0x20000c4c

08008bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bf4:	f000 f852 	bl	8008c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <prvIdleTask+0x28>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d9f9      	bls.n	8008bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c00:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <prvIdleTask+0x2c>)
 8008c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c10:	e7f0      	b.n	8008bf4 <prvIdleTask+0x8>
 8008c12:	bf00      	nop
 8008c14:	20000768 	.word	0x20000768
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
 8008c26:	e00c      	b.n	8008c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4a12      	ldr	r2, [pc, #72]	; (8008c7c <prvInitialiseTaskLists+0x60>)
 8008c34:	4413      	add	r3, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe f85c 	bl	8006cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b37      	cmp	r3, #55	; 0x37
 8008c46:	d9ef      	bls.n	8008c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c48:	480d      	ldr	r0, [pc, #52]	; (8008c80 <prvInitialiseTaskLists+0x64>)
 8008c4a:	f7fe f853 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c4e:	480d      	ldr	r0, [pc, #52]	; (8008c84 <prvInitialiseTaskLists+0x68>)
 8008c50:	f7fe f850 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c54:	480c      	ldr	r0, [pc, #48]	; (8008c88 <prvInitialiseTaskLists+0x6c>)
 8008c56:	f7fe f84d 	bl	8006cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c5a:	480c      	ldr	r0, [pc, #48]	; (8008c8c <prvInitialiseTaskLists+0x70>)
 8008c5c:	f7fe f84a 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c60:	480b      	ldr	r0, [pc, #44]	; (8008c90 <prvInitialiseTaskLists+0x74>)
 8008c62:	f7fe f847 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <prvInitialiseTaskLists+0x78>)
 8008c68:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <prvInitialiseTaskLists+0x64>)
 8008c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <prvInitialiseTaskLists+0x7c>)
 8008c6e:	4a05      	ldr	r2, [pc, #20]	; (8008c84 <prvInitialiseTaskLists+0x68>)
 8008c70:	601a      	str	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000768 	.word	0x20000768
 8008c80:	20000bc8 	.word	0x20000bc8
 8008c84:	20000bdc 	.word	0x20000bdc
 8008c88:	20000bf8 	.word	0x20000bf8
 8008c8c:	20000c0c 	.word	0x20000c0c
 8008c90:	20000c24 	.word	0x20000c24
 8008c94:	20000bf0 	.word	0x20000bf0
 8008c98:	20000bf4 	.word	0x20000bf4

08008c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca2:	e019      	b.n	8008cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ca4:	f000 feda 	bl	8009a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <prvCheckTasksWaitingTermination+0x50>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe f8a7 	bl	8006e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <prvCheckTasksWaitingTermination+0x54>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <prvCheckTasksWaitingTermination+0x54>)
 8008cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	4a0a      	ldr	r2, [pc, #40]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cce:	f000 fef9 	bl	8009ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f810 	bl	8008cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e1      	bne.n	8008ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000c0c 	.word	0x20000c0c
 8008cf0:	20000c38 	.word	0x20000c38
 8008cf4:	20000c20 	.word	0x20000c20

08008cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d108      	bne.n	8008d1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f89a 	bl	8009e48 <vPortFree>
				vPortFree( pxTCB );
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 f897 	bl	8009e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d1a:	e01a      	b.n	8008d52 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d103      	bne.n	8008d2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 f88e 	bl	8009e48 <vPortFree>
	}
 8008d2c:	e011      	b.n	8008d52 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d00c      	beq.n	8008d52 <prvDeleteTCB+0x5a>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	b672      	cpsid	i
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	b662      	cpsie	i
 8008d4c:	60fb      	str	r3, [r7, #12]
}
 8008d4e:	bf00      	nop
 8008d50:	e7fe      	b.n	8008d50 <prvDeleteTCB+0x58>
	}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <prvResetNextTaskUnblockTime+0x38>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <prvResetNextTaskUnblockTime+0x3c>)
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d74:	e008      	b.n	8008d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d76:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <prvResetNextTaskUnblockTime+0x38>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <prvResetNextTaskUnblockTime+0x3c>)
 8008d86:	6013      	str	r3, [r2, #0]
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20000bf0 	.word	0x20000bf0
 8008d98:	20000c58 	.word	0x20000c58

08008d9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008da2:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008da8:	687b      	ldr	r3, [r7, #4]
	}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000764 	.word	0x20000764

08008dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <xTaskGetSchedulerState+0x34>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	e008      	b.n	8008de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd0:	4b08      	ldr	r3, [pc, #32]	; (8008df4 <xTaskGetSchedulerState+0x38>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dd8:	2302      	movs	r3, #2
 8008dda:	607b      	str	r3, [r7, #4]
 8008ddc:	e001      	b.n	8008de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008de2:	687b      	ldr	r3, [r7, #4]
	}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20000c44 	.word	0x20000c44
 8008df4:	20000c60 	.word	0x20000c60

08008df8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d051      	beq.n	8008eb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	4b2a      	ldr	r3, [pc, #168]	; (8008ebc <xTaskPriorityInherit+0xc4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d241      	bcs.n	8008ea0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	db06      	blt.n	8008e32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	4b25      	ldr	r3, [pc, #148]	; (8008ebc <xTaskPriorityInherit+0xc4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6959      	ldr	r1, [r3, #20]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <xTaskPriorityInherit+0xc8>)
 8008e44:	4413      	add	r3, r2
 8008e46:	4299      	cmp	r1, r3
 8008e48:	d122      	bne.n	8008e90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd ffda 	bl	8006e08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <xTaskPriorityInherit+0xc4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <xTaskPriorityInherit+0xcc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d903      	bls.n	8008e72 <xTaskPriorityInherit+0x7a>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a15      	ldr	r2, [pc, #84]	; (8008ec4 <xTaskPriorityInherit+0xcc>)
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a10      	ldr	r2, [pc, #64]	; (8008ec0 <xTaskPriorityInherit+0xc8>)
 8008e80:	441a      	add	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fd ff60 	bl	8006d4e <vListInsertEnd>
 8008e8e:	e004      	b.n	8008e9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <xTaskPriorityInherit+0xc4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	e008      	b.n	8008eb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <xTaskPriorityInherit+0xc4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d201      	bcs.n	8008eb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
	}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000764 	.word	0x20000764
 8008ec0:	20000768 	.word	0x20000768
 8008ec4:	20000c40 	.word	0x20000c40

08008ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d05a      	beq.n	8008f94 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ede:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <xTaskPriorityDisinherit+0xd8>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d00c      	beq.n	8008f02 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	b672      	cpsid	i
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	b662      	cpsie	i
 8008efc:	60fb      	str	r3, [r7, #12]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10c      	bne.n	8008f24 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	b672      	cpsid	i
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	b662      	cpsie	i
 8008f1e:	60bb      	str	r3, [r7, #8]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f28:	1e5a      	subs	r2, r3, #1
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d02c      	beq.n	8008f94 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d128      	bne.n	8008f94 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd ff5e 	bl	8006e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <xTaskPriorityDisinherit+0xdc>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d903      	bls.n	8008f74 <xTaskPriorityDisinherit+0xac>
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	4a0c      	ldr	r2, [pc, #48]	; (8008fa4 <xTaskPriorityDisinherit+0xdc>)
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4a09      	ldr	r2, [pc, #36]	; (8008fa8 <xTaskPriorityDisinherit+0xe0>)
 8008f82:	441a      	add	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7fd fedf 	bl	8006d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f90:	2301      	movs	r3, #1
 8008f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f94:	697b      	ldr	r3, [r7, #20]
	}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000764 	.word	0x20000764
 8008fa4:	20000c40 	.word	0x20000c40
 8008fa8:	20000768 	.word	0x20000768

08008fac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d06e      	beq.n	80090a2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10c      	bne.n	8008fe6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	b672      	cpsid	i
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	b662      	cpsie	i
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d902      	bls.n	8008ff6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	e002      	b.n	8008ffc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	69fa      	ldr	r2, [r7, #28]
 8009002:	429a      	cmp	r2, r3
 8009004:	d04d      	beq.n	80090a2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	429a      	cmp	r2, r3
 800900e:	d148      	bne.n	80090a2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009010:	4b26      	ldr	r3, [pc, #152]	; (80090ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	429a      	cmp	r2, r3
 8009018:	d10c      	bne.n	8009034 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	b672      	cpsid	i
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	b662      	cpsie	i
 800902e:	60bb      	str	r3, [r7, #8]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009038:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	db04      	blt.n	8009052 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	6959      	ldr	r1, [r3, #20]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009062:	4413      	add	r3, r2
 8009064:	4299      	cmp	r1, r3
 8009066:	d11c      	bne.n	80090a2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	3304      	adds	r3, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f7fd fecb 	bl	8006e08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d903      	bls.n	8009086 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	4a0c      	ldr	r2, [pc, #48]	; (80090b4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908a:	4613      	mov	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4a07      	ldr	r2, [pc, #28]	; (80090b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009094:	441a      	add	r2, r3
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	3304      	adds	r3, #4
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7fd fe56 	bl	8006d4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090a2:	bf00      	nop
 80090a4:	3720      	adds	r7, #32
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20000764 	.word	0x20000764
 80090b0:	20000768 	.word	0x20000768
 80090b4:	20000c40 	.word	0x20000c40

080090b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80090bc:	4b07      	ldr	r3, [pc, #28]	; (80090dc <pvTaskIncrementMutexHeldCount+0x24>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <pvTaskIncrementMutexHeldCount+0x24>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090ca:	3201      	adds	r2, #1
 80090cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80090ce:	4b03      	ldr	r3, [pc, #12]	; (80090dc <pvTaskIncrementMutexHeldCount+0x24>)
 80090d0:	681b      	ldr	r3, [r3, #0]
	}
 80090d2:	4618      	mov	r0, r3
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	20000764 	.word	0x20000764

080090e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090ea:	4b21      	ldr	r3, [pc, #132]	; (8009170 <prvAddCurrentTaskToDelayedList+0x90>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090f0:	4b20      	ldr	r3, [pc, #128]	; (8009174 <prvAddCurrentTaskToDelayedList+0x94>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd fe86 	bl	8006e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d10a      	bne.n	800911a <prvAddCurrentTaskToDelayedList+0x3a>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910a:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <prvAddCurrentTaskToDelayedList+0x94>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4819      	ldr	r0, [pc, #100]	; (8009178 <prvAddCurrentTaskToDelayedList+0x98>)
 8009114:	f7fd fe1b 	bl	8006d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009118:	e026      	b.n	8009168 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4413      	add	r3, r2
 8009120:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009122:	4b14      	ldr	r3, [pc, #80]	; (8009174 <prvAddCurrentTaskToDelayedList+0x94>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	429a      	cmp	r2, r3
 8009130:	d209      	bcs.n	8009146 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009132:	4b12      	ldr	r3, [pc, #72]	; (800917c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <prvAddCurrentTaskToDelayedList+0x94>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f7fd fe29 	bl	8006d96 <vListInsert>
}
 8009144:	e010      	b.n	8009168 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <prvAddCurrentTaskToDelayedList+0x94>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3304      	adds	r3, #4
 8009150:	4619      	mov	r1, r3
 8009152:	4610      	mov	r0, r2
 8009154:	f7fd fe1f 	bl	8006d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <prvAddCurrentTaskToDelayedList+0xa4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	429a      	cmp	r2, r3
 8009160:	d202      	bcs.n	8009168 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009162:	4a08      	ldr	r2, [pc, #32]	; (8009184 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6013      	str	r3, [r2, #0]
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000c3c 	.word	0x20000c3c
 8009174:	20000764 	.word	0x20000764
 8009178:	20000c24 	.word	0x20000c24
 800917c:	20000bf4 	.word	0x20000bf4
 8009180:	20000bf0 	.word	0x20000bf0
 8009184:	20000c58 	.word	0x20000c58

08009188 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	; 0x28
 800918c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009192:	f000 fb15 	bl	80097c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <xTimerCreateTimerTask+0x84>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d021      	beq.n	80091e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091a6:	1d3a      	adds	r2, r7, #4
 80091a8:	f107 0108 	add.w	r1, r7, #8
 80091ac:	f107 030c 	add.w	r3, r7, #12
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fd fd85 	bl	8006cc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	9202      	str	r2, [sp, #8]
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	2302      	movs	r3, #2
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	460a      	mov	r2, r1
 80091c8:	4911      	ldr	r1, [pc, #68]	; (8009210 <xTimerCreateTimerTask+0x88>)
 80091ca:	4812      	ldr	r0, [pc, #72]	; (8009214 <xTimerCreateTimerTask+0x8c>)
 80091cc:	f7fe ff96 	bl	80080fc <xTaskCreateStatic>
 80091d0:	4603      	mov	r3, r0
 80091d2:	4a11      	ldr	r2, [pc, #68]	; (8009218 <xTimerCreateTimerTask+0x90>)
 80091d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091d6:	4b10      	ldr	r3, [pc, #64]	; (8009218 <xTimerCreateTimerTask+0x90>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091de:	2301      	movs	r3, #1
 80091e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10c      	bne.n	8009202 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	b672      	cpsid	i
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	b662      	cpsie	i
 80091fc:	613b      	str	r3, [r7, #16]
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009202:	697b      	ldr	r3, [r7, #20]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000c94 	.word	0x20000c94
 8009210:	08018f24 	.word	0x08018f24
 8009214:	08009359 	.word	0x08009359
 8009218:	20000c98 	.word	0x20000c98

0800921c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	; 0x28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800922a:	2300      	movs	r3, #0
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10c      	bne.n	800924e <xTimerGenericCommand+0x32>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	b672      	cpsid	i
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	b662      	cpsie	i
 8009248:	623b      	str	r3, [r7, #32]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800924e:	4b1a      	ldr	r3, [pc, #104]	; (80092b8 <xTimerGenericCommand+0x9c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02a      	beq.n	80092ac <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b05      	cmp	r3, #5
 8009266:	dc18      	bgt.n	800929a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009268:	f7ff fda8 	bl	8008dbc <xTaskGetSchedulerState>
 800926c:	4603      	mov	r3, r0
 800926e:	2b02      	cmp	r3, #2
 8009270:	d109      	bne.n	8009286 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009272:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <xTimerGenericCommand+0x9c>)
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f107 0110 	add.w	r1, r7, #16
 800927a:	2300      	movs	r3, #0
 800927c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927e:	f7fe f86b 	bl	8007358 <xQueueGenericSend>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24
 8009284:	e012      	b.n	80092ac <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009286:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <xTimerGenericCommand+0x9c>)
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f107 0110 	add.w	r1, r7, #16
 800928e:	2300      	movs	r3, #0
 8009290:	2200      	movs	r2, #0
 8009292:	f7fe f861 	bl	8007358 <xQueueGenericSend>
 8009296:	6278      	str	r0, [r7, #36]	; 0x24
 8009298:	e008      	b.n	80092ac <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <xTimerGenericCommand+0x9c>)
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f107 0110 	add.w	r1, r7, #16
 80092a2:	2300      	movs	r3, #0
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	f7fe f95d 	bl	8007564 <xQueueGenericSendFromISR>
 80092aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3728      	adds	r7, #40	; 0x28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20000c94 	.word	0x20000c94

080092bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c6:	4b23      	ldr	r3, [pc, #140]	; (8009354 <prvProcessExpiredTimer+0x98>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd fd97 	bl	8006e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d024      	beq.n	8009332 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	18d1      	adds	r1, r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	6978      	ldr	r0, [r7, #20]
 80092f6:	f000 f8d3 	bl	80094a0 <prvInsertTimerInActiveList>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d021      	beq.n	8009344 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009300:	2300      	movs	r3, #0
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2300      	movs	r3, #0
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	2100      	movs	r1, #0
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	f7ff ff86 	bl	800921c <xTimerGenericCommand>
 8009310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d115      	bne.n	8009344 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	b672      	cpsid	i
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	b662      	cpsie	i
 800932c:	60fb      	str	r3, [r7, #12]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	b2da      	uxtb	r2, r3
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	6978      	ldr	r0, [r7, #20]
 800934a:	4798      	blx	r3
}
 800934c:	bf00      	nop
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20000c8c 	.word	0x20000c8c

08009358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009360:	f107 0308 	add.w	r3, r7, #8
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f857 	bl	8009418 <prvGetNextExpireTime>
 800936a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4619      	mov	r1, r3
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f803 	bl	800937c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009376:	f000 f8d5 	bl	8009524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800937a:	e7f1      	b.n	8009360 <prvTimerTask+0x8>

0800937c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009386:	f7ff f903 	bl	8008590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f866 	bl	8009460 <prvSampleTimeNow>
 8009394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d130      	bne.n	80093fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <prvProcessTimerOrBlockTask+0x3c>
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d806      	bhi.n	80093b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093aa:	f7ff f8ff 	bl	80085ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ff83 	bl	80092bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093b6:	e024      	b.n	8009402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <prvProcessTimerOrBlockTask+0x90>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <prvProcessTimerOrBlockTask+0x50>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <prvProcessTimerOrBlockTask+0x52>
 80093cc:	2300      	movs	r3, #0
 80093ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093d0:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <prvProcessTimerOrBlockTask+0x94>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4619      	mov	r1, r3
 80093de:	f7fe fe59 	bl	8008094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093e2:	f7ff f8e3 	bl	80085ac <xTaskResumeAll>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <prvProcessTimerOrBlockTask+0x98>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	f3bf 8f6f 	isb	sy
}
 80093fc:	e001      	b.n	8009402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093fe:	f7ff f8d5 	bl	80085ac <xTaskResumeAll>
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000c90 	.word	0x20000c90
 8009410:	20000c94 	.word	0x20000c94
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009420:	4b0e      	ldr	r3, [pc, #56]	; (800945c <prvGetNextExpireTime+0x44>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <prvGetNextExpireTime+0x16>
 800942a:	2201      	movs	r2, #1
 800942c:	e000      	b.n	8009430 <prvGetNextExpireTime+0x18>
 800942e:	2200      	movs	r2, #0
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800943c:	4b07      	ldr	r3, [pc, #28]	; (800945c <prvGetNextExpireTime+0x44>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	e001      	b.n	800944c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800944c:	68fb      	ldr	r3, [r7, #12]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000c8c 	.word	0x20000c8c

08009460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009468:	f7ff f940 	bl	80086ec <xTaskGetTickCount>
 800946c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800946e:	4b0b      	ldr	r3, [pc, #44]	; (800949c <prvSampleTimeNow+0x3c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	429a      	cmp	r2, r3
 8009476:	d205      	bcs.n	8009484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009478:	f000 f93c 	bl	80096f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e002      	b.n	800948a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800948a:	4a04      	ldr	r2, [pc, #16]	; (800949c <prvSampleTimeNow+0x3c>)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009490:	68fb      	ldr	r3, [r7, #12]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000c9c 	.word	0x20000c9c

080094a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d812      	bhi.n	80094ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	1ad2      	subs	r2, r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d302      	bcc.n	80094da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094d4:	2301      	movs	r3, #1
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	e01b      	b.n	8009512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094da:	4b10      	ldr	r3, [pc, #64]	; (800951c <prvInsertTimerInActiveList+0x7c>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fd fc56 	bl	8006d96 <vListInsert>
 80094ea:	e012      	b.n	8009512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d206      	bcs.n	8009502 <prvInsertTimerInActiveList+0x62>
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d302      	bcc.n	8009502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094fc:	2301      	movs	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	e007      	b.n	8009512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <prvInsertTimerInActiveList+0x80>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7fd fc42 	bl	8006d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009512:	697b      	ldr	r3, [r7, #20]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20000c90 	.word	0x20000c90
 8009520:	20000c8c 	.word	0x20000c8c

08009524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08e      	sub	sp, #56	; 0x38
 8009528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800952a:	e0d0      	b.n	80096ce <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	da1a      	bge.n	8009568 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009532:	1d3b      	adds	r3, r7, #4
 8009534:	3304      	adds	r3, #4
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	b672      	cpsid	i
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	b662      	cpsie	i
 8009552:	61fb      	str	r3, [r7, #28]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955e:	6850      	ldr	r0, [r2, #4]
 8009560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009562:	6892      	ldr	r2, [r2, #8]
 8009564:	4611      	mov	r1, r2
 8009566:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f2c0 80ae 	blt.w	80096cc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	3304      	adds	r3, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f7fd fc41 	bl	8006e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009586:	463b      	mov	r3, r7
 8009588:	4618      	mov	r0, r3
 800958a:	f7ff ff69 	bl	8009460 <prvSampleTimeNow>
 800958e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b09      	cmp	r3, #9
 8009594:	f200 809b 	bhi.w	80096ce <prvProcessReceivedCommands+0x1aa>
 8009598:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <prvProcessReceivedCommands+0x7c>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095c9 	.word	0x080095c9
 80095a8:	080095c9 	.word	0x080095c9
 80095ac:	08009641 	.word	0x08009641
 80095b0:	08009655 	.word	0x08009655
 80095b4:	080096a3 	.word	0x080096a3
 80095b8:	080095c9 	.word	0x080095c9
 80095bc:	080095c9 	.word	0x080095c9
 80095c0:	08009641 	.word	0x08009641
 80095c4:	08009655 	.word	0x08009655
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	18d1      	adds	r1, r2, r3
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e8:	f7ff ff5a 	bl	80094a0 <prvInsertTimerInActiveList>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d06d      	beq.n	80096ce <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d062      	beq.n	80096ce <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	441a      	add	r2, r3
 8009610:	2300      	movs	r3, #0
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2300      	movs	r3, #0
 8009616:	2100      	movs	r1, #0
 8009618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800961a:	f7ff fdff 	bl	800921c <xTimerGenericCommand>
 800961e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d153      	bne.n	80096ce <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	b672      	cpsid	i
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	b662      	cpsie	i
 800963a:	61bb      	str	r3, [r7, #24]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009652:	e03c      	b.n	80096ce <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800965a:	f043 0301 	orr.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10c      	bne.n	800968e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	b672      	cpsid	i
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	b662      	cpsie	i
 8009688:	617b      	str	r3, [r7, #20]
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	18d1      	adds	r1, r2, r3
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969c:	f7ff ff00 	bl	80094a0 <prvInsertTimerInActiveList>
					break;
 80096a0:	e015      	b.n	80096ce <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d103      	bne.n	80096b8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80096b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b2:	f000 fbc9 	bl	8009e48 <vPortFree>
 80096b6:	e00a      	b.n	80096ce <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096be:	f023 0301 	bic.w	r3, r3, #1
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096ca:	e000      	b.n	80096ce <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ce:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <prvProcessReceivedCommands+0x1cc>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	1d39      	adds	r1, r7, #4
 80096d4:	2200      	movs	r2, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe f87a 	bl	80077d0 <xQueueReceive>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f47f af24 	bne.w	800952c <prvProcessReceivedCommands+0x8>
	}
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3730      	adds	r7, #48	; 0x30
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000c94 	.word	0x20000c94

080096f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096fa:	e04a      	b.n	8009792 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096fc:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <prvSwitchTimerLists+0xc4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009706:	4b2c      	ldr	r3, [pc, #176]	; (80097b8 <prvSwitchTimerLists+0xc4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3304      	adds	r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f7fd fb77 	bl	8006e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d030      	beq.n	8009792 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4413      	add	r3, r2
 8009738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d90e      	bls.n	8009760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800974e:	4b1a      	ldr	r3, [pc, #104]	; (80097b8 <prvSwitchTimerLists+0xc4>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3304      	adds	r3, #4
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f7fd fb1c 	bl	8006d96 <vListInsert>
 800975e:	e018      	b.n	8009792 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009760:	2300      	movs	r3, #0
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	2300      	movs	r3, #0
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	2100      	movs	r1, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff fd56 	bl	800921c <xTimerGenericCommand>
 8009770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10c      	bne.n	8009792 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	b672      	cpsid	i
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	b662      	cpsie	i
 800978c:	603b      	str	r3, [r7, #0]
}
 800978e:	bf00      	nop
 8009790:	e7fe      	b.n	8009790 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <prvSwitchTimerLists+0xc4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1af      	bne.n	80096fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <prvSwitchTimerLists+0xc4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097a2:	4b06      	ldr	r3, [pc, #24]	; (80097bc <prvSwitchTimerLists+0xc8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a04      	ldr	r2, [pc, #16]	; (80097b8 <prvSwitchTimerLists+0xc4>)
 80097a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097aa:	4a04      	ldr	r2, [pc, #16]	; (80097bc <prvSwitchTimerLists+0xc8>)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6013      	str	r3, [r2, #0]
}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20000c8c 	.word	0x20000c8c
 80097bc:	20000c90 	.word	0x20000c90

080097c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097c6:	f000 f949 	bl	8009a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097ca:	4b15      	ldr	r3, [pc, #84]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d120      	bne.n	8009814 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097d2:	4814      	ldr	r0, [pc, #80]	; (8009824 <prvCheckForValidListAndQueue+0x64>)
 80097d4:	f7fd fa8e 	bl	8006cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097d8:	4813      	ldr	r0, [pc, #76]	; (8009828 <prvCheckForValidListAndQueue+0x68>)
 80097da:	f7fd fa8b 	bl	8006cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <prvCheckForValidListAndQueue+0x6c>)
 80097e0:	4a10      	ldr	r2, [pc, #64]	; (8009824 <prvCheckForValidListAndQueue+0x64>)
 80097e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097e4:	4b12      	ldr	r3, [pc, #72]	; (8009830 <prvCheckForValidListAndQueue+0x70>)
 80097e6:	4a10      	ldr	r2, [pc, #64]	; (8009828 <prvCheckForValidListAndQueue+0x68>)
 80097e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097ea:	2300      	movs	r3, #0
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4b11      	ldr	r3, [pc, #68]	; (8009834 <prvCheckForValidListAndQueue+0x74>)
 80097f0:	4a11      	ldr	r2, [pc, #68]	; (8009838 <prvCheckForValidListAndQueue+0x78>)
 80097f2:	2110      	movs	r1, #16
 80097f4:	200a      	movs	r0, #10
 80097f6:	f7fd fb9b 	bl	8006f30 <xQueueGenericCreateStatic>
 80097fa:	4603      	mov	r3, r0
 80097fc:	4a08      	ldr	r2, [pc, #32]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 80097fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	490b      	ldr	r1, [pc, #44]	; (800983c <prvCheckForValidListAndQueue+0x7c>)
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fbec 	bl	8007fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009814:	f000 f956 	bl	8009ac4 <vPortExitCritical>
}
 8009818:	bf00      	nop
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000c94 	.word	0x20000c94
 8009824:	20000c64 	.word	0x20000c64
 8009828:	20000c78 	.word	0x20000c78
 800982c:	20000c8c 	.word	0x20000c8c
 8009830:	20000c90 	.word	0x20000c90
 8009834:	20000d40 	.word	0x20000d40
 8009838:	20000ca0 	.word	0x20000ca0
 800983c:	08018f2c 	.word	0x08018f2c

08009840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3b04      	subs	r3, #4
 8009850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3b04      	subs	r3, #4
 800985e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f023 0201 	bic.w	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3b04      	subs	r3, #4
 800986e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009870:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <pxPortInitialiseStack+0x64>)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3b14      	subs	r3, #20
 800987a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3b04      	subs	r3, #4
 8009886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f06f 0202 	mvn.w	r2, #2
 800988e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3b20      	subs	r3, #32
 8009894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009896:	68fb      	ldr	r3, [r7, #12]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	080098a9 	.word	0x080098a9

080098a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098b2:	4b14      	ldr	r3, [pc, #80]	; (8009904 <prvTaskExitError+0x5c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ba:	d00c      	beq.n	80098d6 <prvTaskExitError+0x2e>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	b672      	cpsid	i
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	b662      	cpsie	i
 80098d0:	60fb      	str	r3, [r7, #12]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <prvTaskExitError+0x2c>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	b672      	cpsid	i
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	b662      	cpsie	i
 80098ea:	60bb      	str	r3, [r7, #8]
}
 80098ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098ee:	bf00      	nop
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0fc      	beq.n	80098f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	2000000c 	.word	0x2000000c
	...

08009910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <pxCurrentTCBConst2>)
 8009912:	6819      	ldr	r1, [r3, #0]
 8009914:	6808      	ldr	r0, [r1, #0]
 8009916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	f380 8809 	msr	PSP, r0
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f380 8811 	msr	BASEPRI, r0
 800992a:	4770      	bx	lr
 800992c:	f3af 8000 	nop.w

08009930 <pxCurrentTCBConst2>:
 8009930:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009938:	4808      	ldr	r0, [pc, #32]	; (800995c <prvPortStartFirstTask+0x24>)
 800993a:	6800      	ldr	r0, [r0, #0]
 800993c:	6800      	ldr	r0, [r0, #0]
 800993e:	f380 8808 	msr	MSP, r0
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f380 8814 	msr	CONTROL, r0
 800994a:	b662      	cpsie	i
 800994c:	b661      	cpsie	f
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	df00      	svc	0
 8009958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800995a:	bf00      	nop
 800995c:	e000ed08 	.word	0xe000ed08

08009960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009966:	4b37      	ldr	r3, [pc, #220]	; (8009a44 <xPortStartScheduler+0xe4>)
 8009968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	22ff      	movs	r2, #255	; 0xff
 8009976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009988:	b2da      	uxtb	r2, r3
 800998a:	4b2f      	ldr	r3, [pc, #188]	; (8009a48 <xPortStartScheduler+0xe8>)
 800998c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800998e:	4b2f      	ldr	r3, [pc, #188]	; (8009a4c <xPortStartScheduler+0xec>)
 8009990:	2207      	movs	r2, #7
 8009992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009994:	e009      	b.n	80099aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009996:	4b2d      	ldr	r3, [pc, #180]	; (8009a4c <xPortStartScheduler+0xec>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3b01      	subs	r3, #1
 800999c:	4a2b      	ldr	r2, [pc, #172]	; (8009a4c <xPortStartScheduler+0xec>)
 800999e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b2:	2b80      	cmp	r3, #128	; 0x80
 80099b4:	d0ef      	beq.n	8009996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099b6:	4b25      	ldr	r3, [pc, #148]	; (8009a4c <xPortStartScheduler+0xec>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f1c3 0307 	rsb	r3, r3, #7
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d00c      	beq.n	80099dc <xPortStartScheduler+0x7c>
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c6:	b672      	cpsid	i
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	b662      	cpsie	i
 80099d6:	60bb      	str	r3, [r7, #8]
}
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099dc:	4b1b      	ldr	r3, [pc, #108]	; (8009a4c <xPortStartScheduler+0xec>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	021b      	lsls	r3, r3, #8
 80099e2:	4a1a      	ldr	r2, [pc, #104]	; (8009a4c <xPortStartScheduler+0xec>)
 80099e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099e6:	4b19      	ldr	r3, [pc, #100]	; (8009a4c <xPortStartScheduler+0xec>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099ee:	4a17      	ldr	r2, [pc, #92]	; (8009a4c <xPortStartScheduler+0xec>)
 80099f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <xPortStartScheduler+0xf0>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <xPortStartScheduler+0xf0>)
 8009a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a06:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <xPortStartScheduler+0xf0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a11      	ldr	r2, [pc, #68]	; (8009a50 <xPortStartScheduler+0xf0>)
 8009a0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a12:	f000 f8dd 	bl	8009bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a16:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <xPortStartScheduler+0xf4>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a1c:	f000 f8fc 	bl	8009c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a20:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <xPortStartScheduler+0xf8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a0c      	ldr	r2, [pc, #48]	; (8009a58 <xPortStartScheduler+0xf8>)
 8009a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a2c:	f7ff ff84 	bl	8009938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a30:	f7fe ff3a 	bl	80088a8 <vTaskSwitchContext>
	prvTaskExitError();
 8009a34:	f7ff ff38 	bl	80098a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	e000e400 	.word	0xe000e400
 8009a48:	20000d90 	.word	0x20000d90
 8009a4c:	20000d94 	.word	0x20000d94
 8009a50:	e000ed20 	.word	0xe000ed20
 8009a54:	2000000c 	.word	0x2000000c
 8009a58:	e000ef34 	.word	0xe000ef34

08009a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	b672      	cpsid	i
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	b662      	cpsie	i
 8009a76:	607b      	str	r3, [r7, #4]
}
 8009a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a7a:	4b10      	ldr	r3, [pc, #64]	; (8009abc <vPortEnterCritical+0x60>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	4a0e      	ldr	r2, [pc, #56]	; (8009abc <vPortEnterCritical+0x60>)
 8009a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a84:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <vPortEnterCritical+0x60>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d111      	bne.n	8009ab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <vPortEnterCritical+0x64>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00c      	beq.n	8009ab0 <vPortEnterCritical+0x54>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9a:	b672      	cpsid	i
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	b662      	cpsie	i
 8009aaa:	603b      	str	r3, [r7, #0]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <vPortEnterCritical+0x52>
	}
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	2000000c 	.word	0x2000000c
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <vPortExitCritical+0x54>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10c      	bne.n	8009aec <vPortExitCritical+0x28>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	b672      	cpsid	i
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	b662      	cpsie	i
 8009ae6:	607b      	str	r3, [r7, #4]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <vPortExitCritical+0x54>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <vPortExitCritical+0x54>)
 8009af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009af6:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <vPortExitCritical+0x54>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d105      	bne.n	8009b0a <vPortExitCritical+0x46>
 8009afe:	2300      	movs	r3, #0
 8009b00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	f383 8811 	msr	BASEPRI, r3
}
 8009b08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b0a:	bf00      	nop
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	2000000c 	.word	0x2000000c
 8009b1c:	00000000 	.word	0x00000000

08009b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b20:	f3ef 8009 	mrs	r0, PSP
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	4b15      	ldr	r3, [pc, #84]	; (8009b80 <pxCurrentTCBConst>)
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	f01e 0f10 	tst.w	lr, #16
 8009b30:	bf08      	it	eq
 8009b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3a:	6010      	str	r0, [r2, #0]
 8009b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b44:	b672      	cpsid	i
 8009b46:	f380 8811 	msr	BASEPRI, r0
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	b662      	cpsie	i
 8009b54:	f7fe fea8 	bl	80088a8 <vTaskSwitchContext>
 8009b58:	f04f 0000 	mov.w	r0, #0
 8009b5c:	f380 8811 	msr	BASEPRI, r0
 8009b60:	bc09      	pop	{r0, r3}
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	6808      	ldr	r0, [r1, #0]
 8009b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	f01e 0f10 	tst.w	lr, #16
 8009b6e:	bf08      	it	eq
 8009b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b74:	f380 8809 	msr	PSP, r0
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop

08009b80 <pxCurrentTCBConst>:
 8009b80:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop

08009b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	b672      	cpsid	i
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	b662      	cpsie	i
 8009ba2:	607b      	str	r3, [r7, #4]
}
 8009ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ba6:	f7fe fdc3 	bl	8008730 <xTaskIncrementTick>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d003      	beq.n	8009bb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bb0:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <SysTick_Handler+0x44>)
 8009bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	f383 8811 	msr	BASEPRI, r3
}
 8009bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bd4:	4b0b      	ldr	r3, [pc, #44]	; (8009c04 <vPortSetupTimerInterrupt+0x34>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <vPortSetupTimerInterrupt+0x38>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <vPortSetupTimerInterrupt+0x3c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a0a      	ldr	r2, [pc, #40]	; (8009c10 <vPortSetupTimerInterrupt+0x40>)
 8009be6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bea:	099b      	lsrs	r3, r3, #6
 8009bec:	4a09      	ldr	r2, [pc, #36]	; (8009c14 <vPortSetupTimerInterrupt+0x44>)
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bf2:	4b04      	ldr	r3, [pc, #16]	; (8009c04 <vPortSetupTimerInterrupt+0x34>)
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	601a      	str	r2, [r3, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	e000e010 	.word	0xe000e010
 8009c08:	e000e018 	.word	0xe000e018
 8009c0c:	20000000 	.word	0x20000000
 8009c10:	10624dd3 	.word	0x10624dd3
 8009c14:	e000e014 	.word	0xe000e014

08009c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c28 <vPortEnableVFP+0x10>
 8009c1c:	6801      	ldr	r1, [r0, #0]
 8009c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c22:	6001      	str	r1, [r0, #0]
 8009c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c26:	bf00      	nop
 8009c28:	e000ed88 	.word	0xe000ed88

08009c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c32:	f3ef 8305 	mrs	r3, IPSR
 8009c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b0f      	cmp	r3, #15
 8009c3c:	d916      	bls.n	8009c6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c3e:	4a19      	ldr	r2, [pc, #100]	; (8009ca4 <vPortValidateInterruptPriority+0x78>)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <vPortValidateInterruptPriority+0x7c>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	7afa      	ldrb	r2, [r7, #11]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d20c      	bcs.n	8009c6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	b672      	cpsid	i
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	b662      	cpsie	i
 8009c66:	607b      	str	r3, [r7, #4]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <vPortValidateInterruptPriority+0x80>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <vPortValidateInterruptPriority+0x84>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d90c      	bls.n	8009c96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	b672      	cpsid	i
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	b662      	cpsie	i
 8009c90:	603b      	str	r3, [r7, #0]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <vPortValidateInterruptPriority+0x68>
	}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	e000e3f0 	.word	0xe000e3f0
 8009ca8:	20000d90 	.word	0x20000d90
 8009cac:	e000ed0c 	.word	0xe000ed0c
 8009cb0:	20000d94 	.word	0x20000d94

08009cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08a      	sub	sp, #40	; 0x28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cc0:	f7fe fc66 	bl	8008590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009cc4:	4b5b      	ldr	r3, [pc, #364]	; (8009e34 <pvPortMalloc+0x180>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ccc:	f000 f91a 	bl	8009f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cd0:	4b59      	ldr	r3, [pc, #356]	; (8009e38 <pvPortMalloc+0x184>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f040 8092 	bne.w	8009e02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d01f      	beq.n	8009d24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4413      	add	r3, r2
 8009cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d016      	beq.n	8009d24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f023 0307 	bic.w	r3, r3, #7
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00c      	beq.n	8009d24 <pvPortMalloc+0x70>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	b672      	cpsid	i
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	b662      	cpsie	i
 8009d1e:	617b      	str	r3, [r7, #20]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d06b      	beq.n	8009e02 <pvPortMalloc+0x14e>
 8009d2a:	4b44      	ldr	r3, [pc, #272]	; (8009e3c <pvPortMalloc+0x188>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d866      	bhi.n	8009e02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d34:	4b42      	ldr	r3, [pc, #264]	; (8009e40 <pvPortMalloc+0x18c>)
 8009d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d38:	4b41      	ldr	r3, [pc, #260]	; (8009e40 <pvPortMalloc+0x18c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d3e:	e004      	b.n	8009d4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d903      	bls.n	8009d5c <pvPortMalloc+0xa8>
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f1      	bne.n	8009d40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d5c:	4b35      	ldr	r3, [pc, #212]	; (8009e34 <pvPortMalloc+0x180>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d04d      	beq.n	8009e02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	4413      	add	r3, r2
 8009d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	2308      	movs	r3, #8
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d921      	bls.n	8009dcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00c      	beq.n	8009db4 <pvPortMalloc+0x100>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	b672      	cpsid	i
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	b662      	cpsie	i
 8009dae:	613b      	str	r3, [r7, #16]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	1ad2      	subs	r2, r2, r3
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dc6:	69b8      	ldr	r0, [r7, #24]
 8009dc8:	f000 f8fe 	bl	8009fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dcc:	4b1b      	ldr	r3, [pc, #108]	; (8009e3c <pvPortMalloc+0x188>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <pvPortMalloc+0x188>)
 8009dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dda:	4b18      	ldr	r3, [pc, #96]	; (8009e3c <pvPortMalloc+0x188>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	4b19      	ldr	r3, [pc, #100]	; (8009e44 <pvPortMalloc+0x190>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d203      	bcs.n	8009dee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009de6:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <pvPortMalloc+0x188>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a16      	ldr	r2, [pc, #88]	; (8009e44 <pvPortMalloc+0x190>)
 8009dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <pvPortMalloc+0x184>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e02:	f7fe fbd3 	bl	80085ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	f003 0307 	and.w	r3, r3, #7
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00c      	beq.n	8009e2a <pvPortMalloc+0x176>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	b672      	cpsid	i
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	b662      	cpsie	i
 8009e24:	60fb      	str	r3, [r7, #12]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <pvPortMalloc+0x174>
	return pvReturn;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3728      	adds	r7, #40	; 0x28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	200049a0 	.word	0x200049a0
 8009e38:	200049ac 	.word	0x200049ac
 8009e3c:	200049a4 	.word	0x200049a4
 8009e40:	20004998 	.word	0x20004998
 8009e44:	200049a8 	.word	0x200049a8

08009e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d04c      	beq.n	8009ef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	425b      	negs	r3, r3
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4413      	add	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	4b23      	ldr	r3, [pc, #140]	; (8009efc <vPortFree+0xb4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4013      	ands	r3, r2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10c      	bne.n	8009e90 <vPortFree+0x48>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7a:	b672      	cpsid	i
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	b662      	cpsie	i
 8009e8a:	60fb      	str	r3, [r7, #12]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <vPortFree+0x6a>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	b672      	cpsid	i
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	b662      	cpsie	i
 8009eac:	60bb      	str	r3, [r7, #8]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <vPortFree+0xb4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d019      	beq.n	8009ef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d115      	bne.n	8009ef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <vPortFree+0xb4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	43db      	mvns	r3, r3
 8009ed2:	401a      	ands	r2, r3
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ed8:	f7fe fb5a 	bl	8008590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <vPortFree+0xb8>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	4a06      	ldr	r2, [pc, #24]	; (8009f00 <vPortFree+0xb8>)
 8009ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f000 f86c 	bl	8009fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ef0:	f7fe fb5c 	bl	80085ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ef4:	bf00      	nop
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	200049ac 	.word	0x200049ac
 8009f00:	200049a4 	.word	0x200049a4

08009f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f10:	4b27      	ldr	r3, [pc, #156]	; (8009fb0 <prvHeapInit+0xac>)
 8009f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00c      	beq.n	8009f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3307      	adds	r3, #7
 8009f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	4a1f      	ldr	r2, [pc, #124]	; (8009fb0 <prvHeapInit+0xac>)
 8009f34:	4413      	add	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	; (8009fb4 <prvHeapInit+0xb0>)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <prvHeapInit+0xb0>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f50:	2208      	movs	r2, #8
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 0307 	bic.w	r3, r3, #7
 8009f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <prvHeapInit+0xb4>)
 8009f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <prvHeapInit+0xb4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f6e:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <prvHeapInit+0xb4>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <prvHeapInit+0xb4>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4a0a      	ldr	r2, [pc, #40]	; (8009fbc <prvHeapInit+0xb8>)
 8009f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	4a09      	ldr	r2, [pc, #36]	; (8009fc0 <prvHeapInit+0xbc>)
 8009f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f9c:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <prvHeapInit+0xc0>)
 8009f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fa2:	601a      	str	r2, [r3, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	20000d98 	.word	0x20000d98
 8009fb4:	20004998 	.word	0x20004998
 8009fb8:	200049a0 	.word	0x200049a0
 8009fbc:	200049a8 	.word	0x200049a8
 8009fc0:	200049a4 	.word	0x200049a4
 8009fc4:	200049ac 	.word	0x200049ac

08009fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fd0:	4b28      	ldr	r3, [pc, #160]	; (800a074 <prvInsertBlockIntoFreeList+0xac>)
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e002      	b.n	8009fdc <prvInsertBlockIntoFreeList+0x14>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d8f7      	bhi.n	8009fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d108      	bne.n	800a00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	441a      	add	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	441a      	add	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d118      	bne.n	800a050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b15      	ldr	r3, [pc, #84]	; (800a078 <prvInsertBlockIntoFreeList+0xb0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d00d      	beq.n	800a046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	441a      	add	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	e008      	b.n	800a058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a046:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <prvInsertBlockIntoFreeList+0xb0>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	e003      	b.n	800a058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d002      	beq.n	800a066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a066:	bf00      	nop
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	20004998 	.word	0x20004998
 800a078:	200049a0 	.word	0x200049a0

0800a07c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	330c      	adds	r3, #12
 800a08c:	461a      	mov	r2, r3
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f002 faa5 	bl	800c5e0 <tcpip_send_msg_wait_sem>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <netconn_apimsg+0x2e>
    return apimsg->err;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a0a8:	e001      	b.n	800a0ae <netconn_apimsg+0x32>
  }
  return err;
 800a0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08c      	sub	sp, #48	; 0x30
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	603a      	str	r2, [r7, #0]
 800a0c2:	71fb      	strb	r3, [r7, #7]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 f927 	bl	800b320 <netconn_alloc>
 800a0d2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d054      	beq.n	800a184 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a0da:	79bb      	ldrb	r3, [r7, #6]
 800a0dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4829      	ldr	r0, [pc, #164]	; (800a190 <netconn_new_with_proto_and_callback+0xd8>)
 800a0ea:	f7ff ffc7 	bl	800a07c <netconn_apimsg>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a0f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d043      	beq.n	800a184 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <netconn_new_with_proto_and_callback+0x58>
 800a104:	4b23      	ldr	r3, [pc, #140]	; (800a194 <netconn_new_with_proto_and_callback+0xdc>)
 800a106:	22a3      	movs	r2, #163	; 0xa3
 800a108:	4923      	ldr	r1, [pc, #140]	; (800a198 <netconn_new_with_proto_and_callback+0xe0>)
 800a10a:	4824      	ldr	r0, [pc, #144]	; (800a19c <netconn_new_with_proto_and_callback+0xe4>)
 800a10c:	f00d fb7e 	bl	801780c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	3310      	adds	r3, #16
 800a114:	4618      	mov	r0, r3
 800a116:	f00d f9ef 	bl	80174f8 <sys_mbox_valid>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d105      	bne.n	800a12c <netconn_new_with_proto_and_callback+0x74>
 800a120:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <netconn_new_with_proto_and_callback+0xdc>)
 800a122:	22a4      	movs	r2, #164	; 0xa4
 800a124:	491e      	ldr	r1, [pc, #120]	; (800a1a0 <netconn_new_with_proto_and_callback+0xe8>)
 800a126:	481d      	ldr	r0, [pc, #116]	; (800a19c <netconn_new_with_proto_and_callback+0xe4>)
 800a128:	f00d fb70 	bl	801780c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	3314      	adds	r3, #20
 800a130:	4618      	mov	r0, r3
 800a132:	f00d f9e1 	bl	80174f8 <sys_mbox_valid>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <netconn_new_with_proto_and_callback+0x90>
 800a13c:	4b15      	ldr	r3, [pc, #84]	; (800a194 <netconn_new_with_proto_and_callback+0xdc>)
 800a13e:	22a6      	movs	r2, #166	; 0xa6
 800a140:	4918      	ldr	r1, [pc, #96]	; (800a1a4 <netconn_new_with_proto_and_callback+0xec>)
 800a142:	4816      	ldr	r0, [pc, #88]	; (800a19c <netconn_new_with_proto_and_callback+0xe4>)
 800a144:	f00d fb62 	bl	801780c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	330c      	adds	r3, #12
 800a14c:	4618      	mov	r0, r3
 800a14e:	f00d fa61 	bl	8017614 <sys_sem_valid>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d105      	bne.n	800a164 <netconn_new_with_proto_and_callback+0xac>
 800a158:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <netconn_new_with_proto_and_callback+0xdc>)
 800a15a:	22a9      	movs	r2, #169	; 0xa9
 800a15c:	4912      	ldr	r1, [pc, #72]	; (800a1a8 <netconn_new_with_proto_and_callback+0xf0>)
 800a15e:	480f      	ldr	r0, [pc, #60]	; (800a19c <netconn_new_with_proto_and_callback+0xe4>)
 800a160:	f00d fb54 	bl	801780c <iprintf>
      sys_sem_free(&conn->op_completed);
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	330c      	adds	r3, #12
 800a168:	4618      	mov	r0, r3
 800a16a:	f00d fa46 	bl	80175fa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a170:	3310      	adds	r3, #16
 800a172:	4618      	mov	r0, r3
 800a174:	f00d f94c 	bl	8017410 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a17a:	2007      	movs	r0, #7
 800a17c:	f002 ff98 	bl	800d0b0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a180:	2300      	movs	r3, #0
 800a182:	e000      	b.n	800a186 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a186:	4618      	mov	r0, r3
 800a188:	3730      	adds	r7, #48	; 0x30
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	0800b2f5 	.word	0x0800b2f5
 800a194:	08018f34 	.word	0x08018f34
 800a198:	08018f68 	.word	0x08018f68
 800a19c:	08018f8c 	.word	0x08018f8c
 800a1a0:	08018fb4 	.word	0x08018fb4
 800a1a4:	08018fcc 	.word	0x08018fcc
 800a1a8:	08018ff0 	.word	0x08018ff0

0800a1ac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e014      	b.n	800a1e8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a1c2:	2329      	movs	r3, #41	; 0x29
 800a1c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a1c6:	f107 030c 	add.w	r3, r7, #12
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4808      	ldr	r0, [pc, #32]	; (800a1f0 <netconn_prepare_delete+0x44>)
 800a1ce:	f7ff ff55 	bl	800a07c <netconn_apimsg>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a1d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <netconn_prepare_delete+0x3a>
    return err;
 800a1e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1e4:	e000      	b.n	800a1e8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3730      	adds	r7, #48	; 0x30
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	0800b859 	.word	0x0800b859

0800a1f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <netconn_delete+0x12>
    return ERR_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	e00d      	b.n	800a222 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7ff ffd0 	bl	800a1ac <netconn_prepare_delete>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <netconn_delete+0x2a>
    netconn_free(conn);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f8ef 	bl	800b3fc <netconn_free>
  }
  return err;
 800a21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08e      	sub	sp, #56	; 0x38
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d109      	bne.n	800a254 <netconn_bind+0x28>
 800a240:	4b11      	ldr	r3, [pc, #68]	; (800a288 <netconn_bind+0x5c>)
 800a242:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a246:	4911      	ldr	r1, [pc, #68]	; (800a28c <netconn_bind+0x60>)
 800a248:	4811      	ldr	r0, [pc, #68]	; (800a290 <netconn_bind+0x64>)
 800a24a:	f00d fadf 	bl	801780c <iprintf>
 800a24e:	f06f 030f 	mvn.w	r3, #15
 800a252:	e015      	b.n	800a280 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a25a:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <netconn_bind+0x68>)
 800a25c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a26a:	f107 0314 	add.w	r3, r7, #20
 800a26e:	4619      	mov	r1, r3
 800a270:	4809      	ldr	r0, [pc, #36]	; (800a298 <netconn_bind+0x6c>)
 800a272:	f7ff ff03 	bl	800a07c <netconn_apimsg>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a27c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a280:	4618      	mov	r0, r3
 800a282:	3738      	adds	r7, #56	; 0x38
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	08018f34 	.word	0x08018f34
 800a28c:	0801906c 	.word	0x0801906c
 800a290:	08018f8c 	.word	0x08018f8c
 800a294:	0801c578 	.word	0x0801c578
 800a298:	0800ba21 	.word	0x0800ba21

0800a29c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08c      	sub	sp, #48	; 0x30
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <netconn_listen_with_backlog+0x26>
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <netconn_listen_with_backlog+0x48>)
 800a2b0:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a2b4:	490c      	ldr	r1, [pc, #48]	; (800a2e8 <netconn_listen_with_backlog+0x4c>)
 800a2b6:	480d      	ldr	r0, [pc, #52]	; (800a2ec <netconn_listen_with_backlog+0x50>)
 800a2b8:	f00d faa8 	bl	801780c <iprintf>
 800a2bc:	f06f 030f 	mvn.w	r3, #15
 800a2c0:	e00c      	b.n	800a2dc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a2c6:	f107 030c 	add.w	r3, r7, #12
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <netconn_listen_with_backlog+0x54>)
 800a2ce:	f7ff fed5 	bl	800a07c <netconn_apimsg>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a2d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3730      	adds	r7, #48	; 0x30
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	08018f34 	.word	0x08018f34
 800a2e8:	080190ec 	.word	0x080190ec
 800a2ec:	08018f8c 	.word	0x08018f8c
 800a2f0:	0800ba95 	.word	0x0800ba95

0800a2f4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <netconn_accept+0x24>
 800a304:	4b3d      	ldr	r3, [pc, #244]	; (800a3fc <netconn_accept+0x108>)
 800a306:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a30a:	493d      	ldr	r1, [pc, #244]	; (800a400 <netconn_accept+0x10c>)
 800a30c:	483d      	ldr	r0, [pc, #244]	; (800a404 <netconn_accept+0x110>)
 800a30e:	f00d fa7d 	bl	801780c <iprintf>
 800a312:	f06f 030f 	mvn.w	r3, #15
 800a316:	e06c      	b.n	800a3f2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <netconn_accept+0x44>
 800a324:	4b35      	ldr	r3, [pc, #212]	; (800a3fc <netconn_accept+0x108>)
 800a326:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a32a:	4937      	ldr	r1, [pc, #220]	; (800a408 <netconn_accept+0x114>)
 800a32c:	4835      	ldr	r0, [pc, #212]	; (800a404 <netconn_accept+0x110>)
 800a32e:	f00d fa6d 	bl	801780c <iprintf>
 800a332:	f06f 030f 	mvn.w	r3, #15
 800a336:	e05c      	b.n	800a3f2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fb6c 	bl	800aa16 <netconn_err>
 800a33e:	4603      	mov	r3, r0
 800a340:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a34a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a34e:	e050      	b.n	800a3f2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3314      	adds	r3, #20
 800a354:	4618      	mov	r0, r3
 800a356:	f00d f8cf 	bl	80174f8 <sys_mbox_valid>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <netconn_accept+0x78>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	7f1b      	ldrb	r3, [r3, #28]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a36c:	f06f 030e 	mvn.w	r3, #14
 800a370:	e03f      	b.n	800a3f2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7f1b      	ldrb	r3, [r3, #28]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00e      	beq.n	800a39c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3314      	adds	r3, #20
 800a382:	f107 020c 	add.w	r2, r7, #12
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f00d f89e 	bl	80174ca <sys_arch_mbox_tryfetch>
 800a38e:	4603      	mov	r3, r0
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a394:	d10a      	bne.n	800a3ac <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a396:	f06f 0306 	mvn.w	r3, #6
 800a39a:	e02a      	b.n	800a3f2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3314      	adds	r3, #20
 800a3a0:	f107 010c 	add.w	r1, r7, #12
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f00d f85e 	bl	8017468 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <netconn_accept+0xcc>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f107 0213 	add.w	r2, r7, #19
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fb75 	bl	800aab8 <lwip_netconn_is_err_msg>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a3d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3d8:	e00b      	b.n	800a3f2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a3e0:	f06f 030e 	mvn.w	r3, #14
 800a3e4:	e005      	b.n	800a3f2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a3f0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	08018f34 	.word	0x08018f34
 800a400:	0801910c 	.word	0x0801910c
 800a404:	08018f8c 	.word	0x08018f8c
 800a408:	0801912c 	.word	0x0801912c

0800a40c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d109      	bne.n	800a438 <netconn_recv_data+0x2c>
 800a424:	4b58      	ldr	r3, [pc, #352]	; (800a588 <netconn_recv_data+0x17c>)
 800a426:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a42a:	4958      	ldr	r1, [pc, #352]	; (800a58c <netconn_recv_data+0x180>)
 800a42c:	4858      	ldr	r0, [pc, #352]	; (800a590 <netconn_recv_data+0x184>)
 800a42e:	f00d f9ed 	bl	801780c <iprintf>
 800a432:	f06f 030f 	mvn.w	r3, #15
 800a436:	e0a2      	b.n	800a57e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d109      	bne.n	800a458 <netconn_recv_data+0x4c>
 800a444:	4b50      	ldr	r3, [pc, #320]	; (800a588 <netconn_recv_data+0x17c>)
 800a446:	f240 224a 	movw	r2, #586	; 0x24a
 800a44a:	4952      	ldr	r1, [pc, #328]	; (800a594 <netconn_recv_data+0x188>)
 800a44c:	4850      	ldr	r0, [pc, #320]	; (800a590 <netconn_recv_data+0x184>)
 800a44e:	f00d f9dd 	bl	801780c <iprintf>
 800a452:	f06f 030f 	mvn.w	r3, #15
 800a456:	e092      	b.n	800a57e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3310      	adds	r3, #16
 800a45c:	4618      	mov	r0, r3
 800a45e:	f00d f84b 	bl	80174f8 <sys_mbox_valid>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10e      	bne.n	800a486 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 fad4 	bl	800aa16 <netconn_err>
 800a46e:	4603      	mov	r3, r0
 800a470:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a472:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a47a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a47e:	e07e      	b.n	800a57e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a480:	f06f 030a 	mvn.w	r3, #10
 800a484:	e07b      	b.n	800a57e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	7f1b      	ldrb	r3, [r3, #28]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10f      	bne.n	800a4b2 <netconn_recv_data+0xa6>
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	7f1b      	ldrb	r3, [r3, #28]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d104      	bne.n	800a4b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d023      	beq.n	800a4fa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	f107 0218 	add.w	r2, r7, #24
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f00d f804 	bl	80174ca <sys_arch_mbox_tryfetch>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c8:	d11f      	bne.n	800a50a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 faa3 	bl	800aa16 <netconn_err>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a4d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a4dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a4e0:	e04d      	b.n	800a57e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	7f1b      	ldrb	r3, [r3, #28]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a4ee:	f06f 030a 	mvn.w	r3, #10
 800a4f2:	e044      	b.n	800a57e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a4f4:	f06f 0306 	mvn.w	r3, #6
 800a4f8:	e041      	b.n	800a57e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3310      	adds	r3, #16
 800a4fe:	f107 0118 	add.w	r1, r7, #24
 800a502:	2200      	movs	r2, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f00c ffaf 	bl	8017468 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a512:	2b10      	cmp	r3, #16
 800a514:	d117      	bne.n	800a546 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	f107 0217 	add.w	r2, r7, #23
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 faca 	bl	800aab8 <lwip_netconn_is_err_msg>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d009      	beq.n	800a53e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a52a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a52e:	f113 0f0f 	cmn.w	r3, #15
 800a532:	d101      	bne.n	800a538 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	e022      	b.n	800a57e <netconn_recv_data+0x172>
      }
      return err;
 800a538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a53c:	e01f      	b.n	800a57e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	891b      	ldrh	r3, [r3, #8]
 800a542:	83fb      	strh	r3, [r7, #30]
 800a544:	e00d      	b.n	800a562 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <netconn_recv_data+0x14e>
 800a54c:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <netconn_recv_data+0x17c>)
 800a54e:	f240 2291 	movw	r2, #657	; 0x291
 800a552:	4911      	ldr	r1, [pc, #68]	; (800a598 <netconn_recv_data+0x18c>)
 800a554:	480e      	ldr	r0, [pc, #56]	; (800a590 <netconn_recv_data+0x184>)
 800a556:	f00d f959 	bl	801780c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	891b      	ldrh	r3, [r3, #8]
 800a560:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <netconn_recv_data+0x16a>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	8bfa      	ldrh	r2, [r7, #30]
 800a570:	2101      	movs	r1, #1
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	08018f34 	.word	0x08018f34
 800a58c:	0801914c 	.word	0x0801914c
 800a590:	08018f8c 	.word	0x08018f8c
 800a594:	0801916c 	.word	0x0801916c
 800a598:	08019188 	.word	0x08019188

0800a59c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <netconn_tcp_recvd_msg+0x1e>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5b6:	2b10      	cmp	r3, #16
 800a5b8:	d009      	beq.n	800a5ce <netconn_tcp_recvd_msg+0x32>
 800a5ba:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <netconn_tcp_recvd_msg+0x50>)
 800a5bc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a5c0:	490b      	ldr	r1, [pc, #44]	; (800a5f0 <netconn_tcp_recvd_msg+0x54>)
 800a5c2:	480c      	ldr	r0, [pc, #48]	; (800a5f4 <netconn_tcp_recvd_msg+0x58>)
 800a5c4:	f00d f922 	bl	801780c <iprintf>
 800a5c8:	f06f 030f 	mvn.w	r3, #15
 800a5cc:	e00a      	b.n	800a5e4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	4806      	ldr	r0, [pc, #24]	; (800a5f8 <netconn_tcp_recvd_msg+0x5c>)
 800a5de:	f7ff fd4d 	bl	800a07c <netconn_apimsg>
 800a5e2:	4603      	mov	r3, r0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	08018f34 	.word	0x08018f34
 800a5f0:	08019194 	.word	0x08019194
 800a5f4:	08018f8c 	.word	0x08018f8c
 800a5f8:	0800bbc5 	.word	0x0800bbc5

0800a5fc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b090      	sub	sp, #64	; 0x40
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3310      	adds	r3, #16
 800a60e:	4618      	mov	r0, r3
 800a610:	f00c ff72 	bl	80174f8 <sys_mbox_valid>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a61a:	f06f 030a 	mvn.w	r3, #10
 800a61e:	e06d      	b.n	800a6fc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	7f1b      	ldrb	r3, [r3, #28]
 800a624:	b25b      	sxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	da07      	bge.n	800a63a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	7f1b      	ldrb	r3, [r3, #28]
 800a62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a632:	b2da      	uxtb	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a638:	e039      	b.n	800a6ae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	461a      	mov	r2, r3
 800a63e:	68b9      	ldr	r1, [r7, #8]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff fee3 	bl	800a40c <netconn_recv_data>
 800a646:	4603      	mov	r3, r0
 800a648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a64c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a654:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a658:	e050      	b.n	800a6fc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	f003 0308 	and.w	r3, r3, #8
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10e      	bne.n	800a688 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <netconn_recv_data_tcp+0x7a>
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	891b      	ldrh	r3, [r3, #8]
 800a674:	e000      	b.n	800a678 <netconn_recv_data_tcp+0x7c>
 800a676:	2301      	movs	r3, #1
 800a678:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a67a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a67c:	f107 0214 	add.w	r2, r7, #20
 800a680:	4619      	mov	r1, r3
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff ff8a 	bl	800a59c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d134      	bne.n	800a6f8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	2b00      	cmp	r3, #0
 800a696:	d009      	beq.n	800a6ac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	7f1b      	ldrb	r3, [r3, #28]
 800a69c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a6a6:	f06f 0306 	mvn.w	r3, #6
 800a6aa:	e027      	b.n	800a6fc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a6ac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <netconn_recv_data_tcp+0xc6>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2101      	movs	r1, #1
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10f      	bne.n	800a6ea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 f9a3 	bl	800aa16 <netconn_err>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a6d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <netconn_recv_data_tcp+0xe8>
          return err;
 800a6de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6e2:	e00b      	b.n	800a6fc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a6e4:	f06f 030d 	mvn.w	r3, #13
 800a6e8:	e008      	b.n	800a6fc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f955 	bl	800a99c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a6f2:	f06f 030e 	mvn.w	r3, #14
 800a6f6:	e001      	b.n	800a6fc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a6f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3740      	adds	r7, #64	; 0x40
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d109      	bne.n	800a72c <netconn_recv+0x28>
 800a718:	4b32      	ldr	r3, [pc, #200]	; (800a7e4 <netconn_recv+0xe0>)
 800a71a:	f240 3263 	movw	r2, #867	; 0x363
 800a71e:	4932      	ldr	r1, [pc, #200]	; (800a7e8 <netconn_recv+0xe4>)
 800a720:	4832      	ldr	r0, [pc, #200]	; (800a7ec <netconn_recv+0xe8>)
 800a722:	f00d f873 	bl	801780c <iprintf>
 800a726:	f06f 030f 	mvn.w	r3, #15
 800a72a:	e056      	b.n	800a7da <netconn_recv+0xd6>
  *new_buf = NULL;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <netconn_recv+0x48>
 800a738:	4b2a      	ldr	r3, [pc, #168]	; (800a7e4 <netconn_recv+0xe0>)
 800a73a:	f240 3265 	movw	r2, #869	; 0x365
 800a73e:	492c      	ldr	r1, [pc, #176]	; (800a7f0 <netconn_recv+0xec>)
 800a740:	482a      	ldr	r0, [pc, #168]	; (800a7ec <netconn_recv+0xe8>)
 800a742:	f00d f863 	bl	801780c <iprintf>
 800a746:	f06f 030f 	mvn.w	r3, #15
 800a74a:	e046      	b.n	800a7da <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a754:	2b10      	cmp	r3, #16
 800a756:	d13a      	bne.n	800a7ce <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a75c:	2006      	movs	r0, #6
 800a75e:	f002 fc55 	bl	800d00c <memp_malloc>
 800a762:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d102      	bne.n	800a770 <netconn_recv+0x6c>
      return ERR_MEM;
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295
 800a76e:	e034      	b.n	800a7da <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a770:	f107 030c 	add.w	r3, r7, #12
 800a774:	2200      	movs	r2, #0
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff ff3f 	bl	800a5fc <netconn_recv_data_tcp>
 800a77e:	4603      	mov	r3, r0
 800a780:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a782:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d006      	beq.n	800a798 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a78a:	6979      	ldr	r1, [r7, #20]
 800a78c:	2006      	movs	r0, #6
 800a78e:	f002 fc8f 	bl	800d0b0 <memp_free>
      return err;
 800a792:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a796:	e020      	b.n	800a7da <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <netconn_recv+0xa8>
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <netconn_recv+0xe0>)
 800a7a0:	f240 3279 	movw	r2, #889	; 0x379
 800a7a4:	4913      	ldr	r1, [pc, #76]	; (800a7f4 <netconn_recv+0xf0>)
 800a7a6:	4811      	ldr	r0, [pc, #68]	; (800a7ec <netconn_recv+0xe8>)
 800a7a8:	f00d f830 	bl	801780c <iprintf>

    buf->p = p;
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e005      	b.n	800a7da <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fe1a 	bl	800a40c <netconn_recv_data>
 800a7d8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	08018f34 	.word	0x08018f34
 800a7e8:	0801914c 	.word	0x0801914c
 800a7ec:	08018f8c 	.word	0x08018f8c
 800a7f0:	0801916c 	.word	0x0801916c
 800a7f4:	080191e4 	.word	0x080191e4

0800a7f8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a80e:	78fa      	ldrb	r2, [r7, #3]
 800a810:	f107 0110 	add.w	r1, r7, #16
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	2201      	movs	r2, #1
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f805 	bl	800a82c <netconn_write_vectors_partly>
 800a822:	4603      	mov	r3, r0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b092      	sub	sp, #72	; 0x48
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	4611      	mov	r1, r2
 800a838:	461a      	mov	r2, r3
 800a83a:	460b      	mov	r3, r1
 800a83c:	80fb      	strh	r3, [r7, #6]
 800a83e:	4613      	mov	r3, r2
 800a840:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d109      	bne.n	800a85c <netconn_write_vectors_partly+0x30>
 800a848:	4b4e      	ldr	r3, [pc, #312]	; (800a984 <netconn_write_vectors_partly+0x158>)
 800a84a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a84e:	494e      	ldr	r1, [pc, #312]	; (800a988 <netconn_write_vectors_partly+0x15c>)
 800a850:	484e      	ldr	r0, [pc, #312]	; (800a98c <netconn_write_vectors_partly+0x160>)
 800a852:	f00c ffdb 	bl	801780c <iprintf>
 800a856:	f06f 030f 	mvn.w	r3, #15
 800a85a:	e08e      	b.n	800a97a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a864:	2b10      	cmp	r3, #16
 800a866:	d009      	beq.n	800a87c <netconn_write_vectors_partly+0x50>
 800a868:	4b46      	ldr	r3, [pc, #280]	; (800a984 <netconn_write_vectors_partly+0x158>)
 800a86a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a86e:	4948      	ldr	r1, [pc, #288]	; (800a990 <netconn_write_vectors_partly+0x164>)
 800a870:	4846      	ldr	r0, [pc, #280]	; (800a98c <netconn_write_vectors_partly+0x160>)
 800a872:	f00c ffcb 	bl	801780c <iprintf>
 800a876:	f06f 0305 	mvn.w	r3, #5
 800a87a:	e07e      	b.n	800a97a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	7f1b      	ldrb	r3, [r3, #28]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d104      	bne.n	800a892 <netconn_write_vectors_partly+0x66>
 800a888:	797b      	ldrb	r3, [r7, #5]
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <netconn_write_vectors_partly+0x6a>
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <netconn_write_vectors_partly+0x6c>
 800a896:	2300      	movs	r3, #0
 800a898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a89c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <netconn_write_vectors_partly+0x84>
 800a8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a8aa:	f06f 0305 	mvn.w	r3, #5
 800a8ae:	e064      	b.n	800a97a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
 800a8b8:	e015      	b.n	800a8e6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8bc:	00db      	lsls	r3, r3, #3
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8c6:	4413      	add	r3, r2
 800a8c8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d202      	bcs.n	800a8e0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a8da:	f06f 0305 	mvn.w	r3, #5
 800a8de:	e04c      	b.n	800a97a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a8e6:	88fb      	ldrh	r3, [r7, #6]
 800a8e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	dbe5      	blt.n	800a8ba <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	e040      	b.n	800a97a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	da0a      	bge.n	800a914 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a904:	f06f 0305 	mvn.w	r3, #5
 800a908:	e037      	b.n	800a97a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a90a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a90e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a91c:	88fb      	ldrh	r3, [r7, #6]
 800a91e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a924:	797b      	ldrb	r3, [r7, #5]
 800a926:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a92c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a932:	f107 0314 	add.w	r3, r7, #20
 800a936:	4619      	mov	r1, r3
 800a938:	4816      	ldr	r0, [pc, #88]	; (800a994 <netconn_write_vectors_partly+0x168>)
 800a93a:	f7ff fb9f 	bl	800a07c <netconn_apimsg>
 800a93e:	4603      	mov	r3, r0
 800a940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a944:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d114      	bne.n	800a976 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a956:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a964:	429a      	cmp	r2, r3
 800a966:	d006      	beq.n	800a976 <netconn_write_vectors_partly+0x14a>
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <netconn_write_vectors_partly+0x158>)
 800a96a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a96e:	490a      	ldr	r1, [pc, #40]	; (800a998 <netconn_write_vectors_partly+0x16c>)
 800a970:	4806      	ldr	r0, [pc, #24]	; (800a98c <netconn_write_vectors_partly+0x160>)
 800a972:	f00c ff4b 	bl	801780c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a976:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3748      	adds	r7, #72	; 0x48
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	08018f34 	.word	0x08018f34
 800a988:	0801920c 	.word	0x0801920c
 800a98c:	08018f8c 	.word	0x08018f8c
 800a990:	08019228 	.word	0x08019228
 800a994:	0800bfcd 	.word	0x0800bfcd
 800a998:	0801924c 	.word	0x0801924c

0800a99c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08c      	sub	sp, #48	; 0x30
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d109      	bne.n	800a9c2 <netconn_close_shutdown+0x26>
 800a9ae:	4b0f      	ldr	r3, [pc, #60]	; (800a9ec <netconn_close_shutdown+0x50>)
 800a9b0:	f240 4247 	movw	r2, #1095	; 0x447
 800a9b4:	490e      	ldr	r1, [pc, #56]	; (800a9f0 <netconn_close_shutdown+0x54>)
 800a9b6:	480f      	ldr	r0, [pc, #60]	; (800a9f4 <netconn_close_shutdown+0x58>)
 800a9b8:	f00c ff28 	bl	801780c <iprintf>
 800a9bc:	f06f 030f 	mvn.w	r3, #15
 800a9c0:	e010      	b.n	800a9e4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a9c6:	78fb      	ldrb	r3, [r7, #3]
 800a9c8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a9ca:	2329      	movs	r3, #41	; 0x29
 800a9cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a9ce:	f107 030c 	add.w	r3, r7, #12
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4808      	ldr	r0, [pc, #32]	; (800a9f8 <netconn_close_shutdown+0x5c>)
 800a9d6:	f7ff fb51 	bl	800a07c <netconn_apimsg>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a9e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3730      	adds	r7, #48	; 0x30
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	08018f34 	.word	0x08018f34
 800a9f0:	08019270 	.word	0x08019270
 800a9f4:	08018f8c 	.word	0x08018f8c
 800a9f8:	0800c0e5 	.word	0x0800c0e5

0800a9fc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800aa04:	2103      	movs	r1, #3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff ffc8 	bl	800a99c <netconn_close_shutdown>
 800aa0c:	4603      	mov	r3, r0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <netconn_err+0x12>
    return ERR_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	e00d      	b.n	800aa44 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800aa28:	f00c fe70 	bl	801770c <sys_arch_protect>
 800aa2c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7a1b      	ldrb	r3, [r3, #8]
 800aa32:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f00c fe74 	bl	8017728 <sys_arch_unprotect>
  return err;
 800aa40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800aa56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa5a:	f113 0f0d 	cmn.w	r3, #13
 800aa5e:	d009      	beq.n	800aa74 <lwip_netconn_err_to_msg+0x28>
 800aa60:	f113 0f0d 	cmn.w	r3, #13
 800aa64:	dc0c      	bgt.n	800aa80 <lwip_netconn_err_to_msg+0x34>
 800aa66:	f113 0f0f 	cmn.w	r3, #15
 800aa6a:	d007      	beq.n	800aa7c <lwip_netconn_err_to_msg+0x30>
 800aa6c:	f113 0f0e 	cmn.w	r3, #14
 800aa70:	d002      	beq.n	800aa78 <lwip_netconn_err_to_msg+0x2c>
 800aa72:	e005      	b.n	800aa80 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <lwip_netconn_err_to_msg+0x54>)
 800aa76:	e00e      	b.n	800aa96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <lwip_netconn_err_to_msg+0x58>)
 800aa7a:	e00c      	b.n	800aa96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <lwip_netconn_err_to_msg+0x5c>)
 800aa7e:	e00a      	b.n	800aa96 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800aa80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <lwip_netconn_err_to_msg+0x48>
 800aa88:	4b08      	ldr	r3, [pc, #32]	; (800aaac <lwip_netconn_err_to_msg+0x60>)
 800aa8a:	227d      	movs	r2, #125	; 0x7d
 800aa8c:	4908      	ldr	r1, [pc, #32]	; (800aab0 <lwip_netconn_err_to_msg+0x64>)
 800aa8e:	4809      	ldr	r0, [pc, #36]	; (800aab4 <lwip_netconn_err_to_msg+0x68>)
 800aa90:	f00c febc 	bl	801780c <iprintf>
      return NULL;
 800aa94:	2300      	movs	r3, #0
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0801c464 	.word	0x0801c464
 800aaa4:	0801c465 	.word	0x0801c465
 800aaa8:	0801c466 	.word	0x0801c466
 800aaac:	0801928c 	.word	0x0801928c
 800aab0:	080192c0 	.word	0x080192c0
 800aab4:	080192d0 	.word	0x080192d0

0800aab8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d105      	bne.n	800aad4 <lwip_netconn_is_err_msg+0x1c>
 800aac8:	4b12      	ldr	r3, [pc, #72]	; (800ab14 <lwip_netconn_is_err_msg+0x5c>)
 800aaca:	2285      	movs	r2, #133	; 0x85
 800aacc:	4912      	ldr	r1, [pc, #72]	; (800ab18 <lwip_netconn_is_err_msg+0x60>)
 800aace:	4813      	ldr	r0, [pc, #76]	; (800ab1c <lwip_netconn_is_err_msg+0x64>)
 800aad0:	f00c fe9c 	bl	801780c <iprintf>

  if (msg == &netconn_aborted) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a12      	ldr	r2, [pc, #72]	; (800ab20 <lwip_netconn_is_err_msg+0x68>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d104      	bne.n	800aae6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	22f3      	movs	r2, #243	; 0xf3
 800aae0:	701a      	strb	r2, [r3, #0]
    return 1;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e012      	b.n	800ab0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a0e      	ldr	r2, [pc, #56]	; (800ab24 <lwip_netconn_is_err_msg+0x6c>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d104      	bne.n	800aaf8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	22f2      	movs	r2, #242	; 0xf2
 800aaf2:	701a      	strb	r2, [r3, #0]
    return 1;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e009      	b.n	800ab0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a0b      	ldr	r2, [pc, #44]	; (800ab28 <lwip_netconn_is_err_msg+0x70>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d104      	bne.n	800ab0a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	22f1      	movs	r2, #241	; 0xf1
 800ab04:	701a      	strb	r2, [r3, #0]
    return 1;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	0801928c 	.word	0x0801928c
 800ab18:	080192f8 	.word	0x080192f8
 800ab1c:	080192d0 	.word	0x080192d0
 800ab20:	0801c464 	.word	0x0801c464
 800ab24:	0801c465 	.word	0x0801c465
 800ab28:	0801c466 	.word	0x0801c466

0800ab2c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b088      	sub	sp, #32
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <recv_udp+0x20>
 800ab40:	4b34      	ldr	r3, [pc, #208]	; (800ac14 <recv_udp+0xe8>)
 800ab42:	22e5      	movs	r2, #229	; 0xe5
 800ab44:	4934      	ldr	r1, [pc, #208]	; (800ac18 <recv_udp+0xec>)
 800ab46:	4835      	ldr	r0, [pc, #212]	; (800ac1c <recv_udp+0xf0>)
 800ab48:	f00c fe60 	bl	801780c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <recv_udp+0x32>
 800ab52:	4b30      	ldr	r3, [pc, #192]	; (800ac14 <recv_udp+0xe8>)
 800ab54:	22e6      	movs	r2, #230	; 0xe6
 800ab56:	4932      	ldr	r1, [pc, #200]	; (800ac20 <recv_udp+0xf4>)
 800ab58:	4830      	ldr	r0, [pc, #192]	; (800ac1c <recv_udp+0xf0>)
 800ab5a:	f00c fe57 	bl	801780c <iprintf>
  conn = (struct netconn *)arg;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <recv_udp+0x44>
    pbuf_free(p);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f003 f949 	bl	800de00 <pbuf_free>
    return;
 800ab6e:	e04d      	b.n	800ac0c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d005      	beq.n	800ab86 <recv_udp+0x5a>
 800ab7a:	4b26      	ldr	r3, [pc, #152]	; (800ac14 <recv_udp+0xe8>)
 800ab7c:	22ee      	movs	r2, #238	; 0xee
 800ab7e:	4929      	ldr	r1, [pc, #164]	; (800ac24 <recv_udp+0xf8>)
 800ab80:	4826      	ldr	r0, [pc, #152]	; (800ac1c <recv_udp+0xf0>)
 800ab82:	f00c fe43 	bl	801780c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	3310      	adds	r3, #16
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f00c fcb4 	bl	80174f8 <sys_mbox_valid>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f003 f932 	bl	800de00 <pbuf_free>
    return;
 800ab9c:	e036      	b.n	800ac0c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ab9e:	2006      	movs	r0, #6
 800aba0:	f002 fa34 	bl	800d00c <memp_malloc>
 800aba4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <recv_udp+0x88>
    pbuf_free(p);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f003 f927 	bl	800de00 <pbuf_free>
    return;
 800abb2:	e02b      	b.n	800ac0c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <recv_udp+0xa0>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	e000      	b.n	800abce <recv_udp+0xa2>
 800abcc:	2300      	movs	r3, #0
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800abd6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	891b      	ldrh	r3, [r3, #8]
 800abdc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	3310      	adds	r3, #16
 800abe2:	69b9      	ldr	r1, [r7, #24]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f00c fc25 	bl	8017434 <sys_mbox_trypost>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800abf0:	69b8      	ldr	r0, [r7, #24]
 800abf2:	f001 fb03 	bl	800c1fc <netbuf_delete>
    return;
 800abf6:	e009      	b.n	800ac0c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d005      	beq.n	800ac0c <recv_udp+0xe0>
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	8afa      	ldrh	r2, [r7, #22]
 800ac06:	2100      	movs	r1, #0
 800ac08:	69f8      	ldr	r0, [r7, #28]
 800ac0a:	4798      	blx	r3
  }
}
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	0801928c 	.word	0x0801928c
 800ac18:	08019304 	.word	0x08019304
 800ac1c:	080192d0 	.word	0x080192d0
 800ac20:	08019328 	.word	0x08019328
 800ac24:	08019348 	.word	0x08019348

0800ac28 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <recv_tcp+0x22>
 800ac3c:	4b36      	ldr	r3, [pc, #216]	; (800ad18 <recv_tcp+0xf0>)
 800ac3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac42:	4936      	ldr	r1, [pc, #216]	; (800ad1c <recv_tcp+0xf4>)
 800ac44:	4836      	ldr	r0, [pc, #216]	; (800ad20 <recv_tcp+0xf8>)
 800ac46:	f00c fde1 	bl	801780c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <recv_tcp+0x36>
 800ac50:	4b31      	ldr	r3, [pc, #196]	; (800ad18 <recv_tcp+0xf0>)
 800ac52:	f240 122d 	movw	r2, #301	; 0x12d
 800ac56:	4933      	ldr	r1, [pc, #204]	; (800ad24 <recv_tcp+0xfc>)
 800ac58:	4831      	ldr	r0, [pc, #196]	; (800ad20 <recv_tcp+0xf8>)
 800ac5a:	f00c fdd7 	bl	801780c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ac5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d006      	beq.n	800ac74 <recv_tcp+0x4c>
 800ac66:	4b2c      	ldr	r3, [pc, #176]	; (800ad18 <recv_tcp+0xf0>)
 800ac68:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ac6c:	492e      	ldr	r1, [pc, #184]	; (800ad28 <recv_tcp+0x100>)
 800ac6e:	482c      	ldr	r0, [pc, #176]	; (800ad20 <recv_tcp+0xf8>)
 800ac70:	f00c fdcc 	bl	801780c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <recv_tcp+0x5c>
    return ERR_VAL;
 800ac7e:	f06f 0305 	mvn.w	r3, #5
 800ac82:	e045      	b.n	800ad10 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d006      	beq.n	800ac9c <recv_tcp+0x74>
 800ac8e:	4b22      	ldr	r3, [pc, #136]	; (800ad18 <recv_tcp+0xf0>)
 800ac90:	f240 1235 	movw	r2, #309	; 0x135
 800ac94:	4925      	ldr	r1, [pc, #148]	; (800ad2c <recv_tcp+0x104>)
 800ac96:	4822      	ldr	r0, [pc, #136]	; (800ad20 <recv_tcp+0xf8>)
 800ac98:	f00c fdb8 	bl	801780c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3310      	adds	r3, #16
 800aca0:	4618      	mov	r0, r3
 800aca2:	f00c fc29 	bl	80174f8 <sys_mbox_valid>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d008      	beq.n	800acc4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	891b      	ldrh	r3, [r3, #8]
 800acb6:	4619      	mov	r1, r3
 800acb8:	68b8      	ldr	r0, [r7, #8]
 800acba:	f004 f859 	bl	800ed70 <tcp_recved>
      pbuf_free(p);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f003 f89e 	bl	800de00 <pbuf_free>
    }
    return ERR_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	e023      	b.n	800ad10 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <recv_tcp+0xb2>
    msg = p;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	891b      	ldrh	r3, [r3, #8]
 800acd6:	83fb      	strh	r3, [r7, #30]
 800acd8:	e003      	b.n	800ace2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800acda:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <recv_tcp+0x108>)
 800acdc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	3310      	adds	r3, #16
 800ace6:	69b9      	ldr	r1, [r7, #24]
 800ace8:	4618      	mov	r0, r3
 800acea:	f00c fba3 	bl	8017434 <sys_mbox_trypost>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800acf4:	f04f 33ff 	mov.w	r3, #4294967295
 800acf8:	e00a      	b.n	800ad10 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <recv_tcp+0xe6>
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	8bfa      	ldrh	r2, [r7, #30]
 800ad08:	2100      	movs	r1, #0
 800ad0a:	6978      	ldr	r0, [r7, #20]
 800ad0c:	4798      	blx	r3
  }

  return ERR_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	0801928c 	.word	0x0801928c
 800ad1c:	08019368 	.word	0x08019368
 800ad20:	080192d0 	.word	0x080192d0
 800ad24:	0801938c 	.word	0x0801938c
 800ad28:	080193ac 	.word	0x080193ac
 800ad2c:	080193c4 	.word	0x080193c4
 800ad30:	0801c466 	.word	0x0801c466

0800ad34 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <poll_tcp+0x22>
 800ad48:	4b2a      	ldr	r3, [pc, #168]	; (800adf4 <poll_tcp+0xc0>)
 800ad4a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ad4e:	492a      	ldr	r1, [pc, #168]	; (800adf8 <poll_tcp+0xc4>)
 800ad50:	482a      	ldr	r0, [pc, #168]	; (800adfc <poll_tcp+0xc8>)
 800ad52:	f00c fd5b 	bl	801780c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	785b      	ldrb	r3, [r3, #1]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d104      	bne.n	800ad68 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ad5e:	2101      	movs	r1, #1
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 ff65 	bl	800bc30 <lwip_netconn_do_writemore>
 800ad66:	e016      	b.n	800ad96 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	785b      	ldrb	r3, [r3, #1]
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d112      	bne.n	800ad96 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <poll_tcp+0x5a>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	7a5b      	ldrb	r3, [r3, #9]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	7a5a      	ldrb	r2, [r3, #9]
 800ad88:	3a01      	subs	r2, #1
 800ad8a:	b2d2      	uxtb	r2, r2
 800ad8c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ad8e:	2101      	movs	r1, #1
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 fbfb 	bl	800b58c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	7f1b      	ldrb	r3, [r3, #28]
 800ad9a:	f003 0310 	and.w	r3, r3, #16
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d022      	beq.n	800ade8 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d01e      	beq.n	800ade8 <poll_tcp+0xb4>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adb2:	f640 3269 	movw	r2, #2921	; 0xb69
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d916      	bls.n	800ade8 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800adc2:	2b07      	cmp	r3, #7
 800adc4:	d810      	bhi.n	800ade8 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	7f1b      	ldrb	r3, [r3, #28]
 800adca:	f023 0310 	bic.w	r3, r3, #16
 800adce:	b2da      	uxtb	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <poll_tcp+0xb4>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2200      	movs	r2, #0
 800ade2:	2102      	movs	r1, #2
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0801928c 	.word	0x0801928c
 800adf8:	080193e4 	.word	0x080193e4
 800adfc:	080192d0 	.word	0x080192d0

0800ae00 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d106      	bne.n	800ae26 <sent_tcp+0x26>
 800ae18:	4b21      	ldr	r3, [pc, #132]	; (800aea0 <sent_tcp+0xa0>)
 800ae1a:	f240 1293 	movw	r2, #403	; 0x193
 800ae1e:	4921      	ldr	r1, [pc, #132]	; (800aea4 <sent_tcp+0xa4>)
 800ae20:	4821      	ldr	r0, [pc, #132]	; (800aea8 <sent_tcp+0xa8>)
 800ae22:	f00c fcf3 	bl	801780c <iprintf>

  if (conn) {
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d033      	beq.n	800ae94 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d104      	bne.n	800ae3e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ae34:	2101      	movs	r1, #1
 800ae36:	6978      	ldr	r0, [r7, #20]
 800ae38:	f000 fefa 	bl	800bc30 <lwip_netconn_do_writemore>
 800ae3c:	e007      	b.n	800ae4e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d103      	bne.n	800ae4e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ae46:	2101      	movs	r1, #1
 800ae48:	6978      	ldr	r0, [r7, #20]
 800ae4a:	f000 fb9f 	bl	800b58c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d01e      	beq.n	800ae94 <sent_tcp+0x94>
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae5e:	f640 3269 	movw	r2, #2921	; 0xb69
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d916      	bls.n	800ae94 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae6e:	2b07      	cmp	r3, #7
 800ae70:	d810      	bhi.n	800ae94 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	7f1b      	ldrb	r3, [r3, #28]
 800ae76:	f023 0310 	bic.w	r3, r3, #16
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <sent_tcp+0x94>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	88fa      	ldrh	r2, [r7, #6]
 800ae8e:	2102      	movs	r1, #2
 800ae90:	6978      	ldr	r0, [r7, #20]
 800ae92:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	0801928c 	.word	0x0801928c
 800aea4:	080193e4 	.word	0x080193e4
 800aea8:	080192d0 	.word	0x080192d0

0800aeac <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <err_tcp+0x24>
 800aec2:	4b5f      	ldr	r3, [pc, #380]	; (800b040 <err_tcp+0x194>)
 800aec4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800aec8:	495e      	ldr	r1, [pc, #376]	; (800b044 <err_tcp+0x198>)
 800aeca:	485f      	ldr	r0, [pc, #380]	; (800b048 <err_tcp+0x19c>)
 800aecc:	f00c fc9e 	bl	801780c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800aed0:	f00c fc1c 	bl	801770c <sys_arch_protect>
 800aed4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	2200      	movs	r2, #0
 800aeda:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	7f1b      	ldrb	r3, [r3, #28]
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	2200      	movs	r2, #0
 800aefa:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800aefc:	69b8      	ldr	r0, [r7, #24]
 800aefe:	f00c fc13 	bl	8017728 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	2b00      	cmp	r3, #0
 800af08:	d005      	beq.n	800af16 <err_tcp+0x6a>
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0e:	2200      	movs	r2, #0
 800af10:	2104      	movs	r1, #4
 800af12:	69f8      	ldr	r0, [r7, #28]
 800af14:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <err_tcp+0x7e>
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2200      	movs	r2, #0
 800af24:	2100      	movs	r1, #0
 800af26:	69f8      	ldr	r0, [r7, #28]
 800af28:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d005      	beq.n	800af3e <err_tcp+0x92>
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	2200      	movs	r2, #0
 800af38:	2102      	movs	r1, #2
 800af3a:	69f8      	ldr	r0, [r7, #28]
 800af3c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800af3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fd82 	bl	800aa4c <lwip_netconn_err_to_msg>
 800af48:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	3310      	adds	r3, #16
 800af4e:	4618      	mov	r0, r3
 800af50:	f00c fad2 	bl	80174f8 <sys_mbox_valid>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	3310      	adds	r3, #16
 800af5e:	6939      	ldr	r1, [r7, #16]
 800af60:	4618      	mov	r0, r3
 800af62:	f00c fa67 	bl	8017434 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	3314      	adds	r3, #20
 800af6a:	4618      	mov	r0, r3
 800af6c:	f00c fac4 	bl	80174f8 <sys_mbox_valid>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	3314      	adds	r3, #20
 800af7a:	6939      	ldr	r1, [r7, #16]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f00c fa59 	bl	8017434 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d005      	beq.n	800af94 <err_tcp+0xe8>
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d002      	beq.n	800af94 <err_tcp+0xe8>
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	2b03      	cmp	r3, #3
 800af92:	d143      	bne.n	800b01c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	7f1b      	ldrb	r3, [r3, #28]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	bf14      	ite	ne
 800afa0:	2301      	movne	r3, #1
 800afa2:	2300      	moveq	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	7f1b      	ldrb	r3, [r3, #28]
 800afac:	f023 0304 	bic.w	r3, r3, #4
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d13b      	bne.n	800b034 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d106      	bne.n	800afd2 <err_tcp+0x126>
 800afc4:	4b1e      	ldr	r3, [pc, #120]	; (800b040 <err_tcp+0x194>)
 800afc6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800afca:	4920      	ldr	r1, [pc, #128]	; (800b04c <err_tcp+0x1a0>)
 800afcc:	481e      	ldr	r0, [pc, #120]	; (800b048 <err_tcp+0x19c>)
 800afce:	f00c fc1d 	bl	801780c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d104      	bne.n	800afe2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	2200      	movs	r2, #0
 800afde:	711a      	strb	r2, [r3, #4]
 800afe0:	e003      	b.n	800afea <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	78fa      	ldrb	r2, [r7, #3]
 800afe8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	330c      	adds	r3, #12
 800aff2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800aff4:	68b8      	ldr	r0, [r7, #8]
 800aff6:	f00c fb0d 	bl	8017614 <sys_sem_valid>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <err_tcp+0x162>
 800b000:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <err_tcp+0x194>)
 800b002:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b006:	4912      	ldr	r1, [pc, #72]	; (800b050 <err_tcp+0x1a4>)
 800b008:	480f      	ldr	r0, [pc, #60]	; (800b048 <err_tcp+0x19c>)
 800b00a:	f00c fbff 	bl	801780c <iprintf>
      conn->current_msg = NULL;
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	2200      	movs	r2, #0
 800b012:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b014:	68b8      	ldr	r0, [r7, #8]
 800b016:	f00c fae3 	bl	80175e0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b01a:	e00b      	b.n	800b034 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d008      	beq.n	800b036 <err_tcp+0x18a>
 800b024:	4b06      	ldr	r3, [pc, #24]	; (800b040 <err_tcp+0x194>)
 800b026:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b02a:	490a      	ldr	r1, [pc, #40]	; (800b054 <err_tcp+0x1a8>)
 800b02c:	4806      	ldr	r0, [pc, #24]	; (800b048 <err_tcp+0x19c>)
 800b02e:	f00c fbed 	bl	801780c <iprintf>
  }
}
 800b032:	e000      	b.n	800b036 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b034:	bf00      	nop
}
 800b036:	bf00      	nop
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	0801928c 	.word	0x0801928c
 800b044:	080193e4 	.word	0x080193e4
 800b048:	080192d0 	.word	0x080192d0
 800b04c:	080193f4 	.word	0x080193f4
 800b050:	08019410 	.word	0x08019410
 800b054:	0801942c 	.word	0x0801942c

0800b058 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f004 fd4b 	bl	800fb04 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b06e:	490a      	ldr	r1, [pc, #40]	; (800b098 <setup_tcp+0x40>)
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f004 fd59 	bl	800fb28 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b076:	4909      	ldr	r1, [pc, #36]	; (800b09c <setup_tcp+0x44>)
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f004 fd77 	bl	800fb6c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b07e:	2202      	movs	r2, #2
 800b080:	4907      	ldr	r1, [pc, #28]	; (800b0a0 <setup_tcp+0x48>)
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f004 fdce 	bl	800fc24 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b088:	4906      	ldr	r1, [pc, #24]	; (800b0a4 <setup_tcp+0x4c>)
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f004 fd90 	bl	800fbb0 <tcp_err>
}
 800b090:	bf00      	nop
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	0800ac29 	.word	0x0800ac29
 800b09c:	0800ae01 	.word	0x0800ae01
 800b0a0:	0800ad35 	.word	0x0800ad35
 800b0a4:	0800aead 	.word	0x0800aead

0800b0a8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b0a8:	b590      	push	{r4, r7, lr}
 800b0aa:	b089      	sub	sp, #36	; 0x24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d102      	bne.n	800b0c6 <accept_function+0x1e>
    return ERR_VAL;
 800b0c0:	f06f 0305 	mvn.w	r3, #5
 800b0c4:	e0a1      	b.n	800b20a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	3314      	adds	r3, #20
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f00c fa14 	bl	80174f8 <sys_mbox_valid>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d102      	bne.n	800b0dc <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b0d6:	f06f 0305 	mvn.w	r3, #5
 800b0da:	e096      	b.n	800b20a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d11b      	bne.n	800b11a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	f103 0414 	add.w	r4, r3, #20
 800b0e8:	f06f 000c 	mvn.w	r0, #12
 800b0ec:	f7ff fcae 	bl	800aa4c <lwip_netconn_err_to_msg>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f00c f99d 	bl	8017434 <sys_mbox_trypost>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d109      	bne.n	800b114 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <accept_function+0x6c>
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	2200      	movs	r2, #0
 800b10e:	2100      	movs	r1, #0
 800b110:	69f8      	ldr	r0, [r7, #28]
 800b112:	4798      	blx	r3
    }
    return ERR_VAL;
 800b114:	f06f 0305 	mvn.w	r3, #5
 800b118:	e077      	b.n	800b20a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b11a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <accept_function+0x88>
 800b122:	4b3c      	ldr	r3, [pc, #240]	; (800b214 <accept_function+0x16c>)
 800b124:	f240 222a 	movw	r2, #554	; 0x22a
 800b128:	493b      	ldr	r1, [pc, #236]	; (800b218 <accept_function+0x170>)
 800b12a:	483c      	ldr	r0, [pc, #240]	; (800b21c <accept_function+0x174>)
 800b12c:	f00c fb6e 	bl	801780c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	781a      	ldrb	r2, [r3, #0]
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	4619      	mov	r1, r3
 800b13a:	4610      	mov	r0, r2
 800b13c:	f000 f8f0 	bl	800b320 <netconn_alloc>
 800b140:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d11b      	bne.n	800b180 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	f103 0414 	add.w	r4, r3, #20
 800b14e:	f06f 000c 	mvn.w	r0, #12
 800b152:	f7ff fc7b 	bl	800aa4c <lwip_netconn_err_to_msg>
 800b156:	4603      	mov	r3, r0
 800b158:	4619      	mov	r1, r3
 800b15a:	4620      	mov	r0, r4
 800b15c:	f00c f96a 	bl	8017434 <sys_mbox_trypost>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d109      	bne.n	800b17a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <accept_function+0xd2>
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	2100      	movs	r1, #0
 800b176:	69f8      	ldr	r0, [r7, #28]
 800b178:	4798      	blx	r3
    }
    return ERR_MEM;
 800b17a:	f04f 33ff 	mov.w	r3, #4294967295
 800b17e:	e044      	b.n	800b20a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b186:	69b8      	ldr	r0, [r7, #24]
 800b188:	f7ff ff66 	bl	800b058 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	3314      	adds	r3, #20
 800b190:	69b9      	ldr	r1, [r7, #24]
 800b192:	4618      	mov	r0, r3
 800b194:	f00c f94e 	bl	8017434 <sys_mbox_trypost>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d02a      	beq.n	800b1f4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	6978      	ldr	r0, [r7, #20]
 800b1a8:	f004 fcac 	bl	800fb04 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6978      	ldr	r0, [r7, #20]
 800b1b0:	f004 fcba 	bl	800fb28 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	6978      	ldr	r0, [r7, #20]
 800b1b8:	f004 fcd8 	bl	800fb6c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	6978      	ldr	r0, [r7, #20]
 800b1c2:	f004 fd2f 	bl	800fc24 <tcp_poll>
    tcp_err(pcb, NULL);
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	6978      	ldr	r0, [r7, #20]
 800b1ca:	f004 fcf1 	bl	800fbb0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f00c f919 	bl	8017410 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f00c f999 	bl	801751a <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b1e8:	69b8      	ldr	r0, [r7, #24]
 800b1ea:	f000 f907 	bl	800b3fc <netconn_free>
    return ERR_MEM;
 800b1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f2:	e00a      	b.n	800b20a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <accept_function+0x160>
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2200      	movs	r2, #0
 800b202:	2100      	movs	r1, #0
 800b204:	69f8      	ldr	r0, [r7, #28]
 800b206:	4798      	blx	r3
  }

  return ERR_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3724      	adds	r7, #36	; 0x24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd90      	pop	{r4, r7, pc}
 800b212:	bf00      	nop
 800b214:	0801928c 	.word	0x0801928c
 800b218:	08019448 	.word	0x08019448
 800b21c:	080192d0 	.word	0x080192d0

0800b220 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b220:	b590      	push	{r4, r7, lr}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <pcb_new+0x24>
 800b236:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <pcb_new+0xc4>)
 800b238:	f240 2265 	movw	r2, #613	; 0x265
 800b23c:	492a      	ldr	r1, [pc, #168]	; (800b2e8 <pcb_new+0xc8>)
 800b23e:	482b      	ldr	r0, [pc, #172]	; (800b2ec <pcb_new+0xcc>)
 800b240:	f00c fae4 	bl	801780c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b24e:	2b10      	cmp	r3, #16
 800b250:	d022      	beq.n	800b298 <pcb_new+0x78>
 800b252:	2b20      	cmp	r3, #32
 800b254:	d133      	bne.n	800b2be <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681c      	ldr	r4, [r3, #0]
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f009 fd2e 	bl	8014cbe <udp_new_ip_type>
 800b262:	4603      	mov	r3, r0
 800b264:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d02a      	beq.n	800b2c6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2b22      	cmp	r3, #34	; 0x22
 800b278:	d104      	bne.n	800b284 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6858      	ldr	r0, [r3, #4]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	4917      	ldr	r1, [pc, #92]	; (800b2f0 <pcb_new+0xd0>)
 800b292:	f009 fc9b 	bl	8014bcc <udp_recv>
      }
      break;
 800b296:	e016      	b.n	800b2c6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681c      	ldr	r4, [r3, #0]
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f004 fc22 	bl	800fae8 <tcp_new_ip_type>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fece 	bl	800b058 <setup_tcp>
      }
      break;
 800b2bc:	e005      	b.n	800b2ca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	22fa      	movs	r2, #250	; 0xfa
 800b2c2:	711a      	strb	r2, [r3, #4]
      return;
 800b2c4:	e00a      	b.n	800b2dc <pcb_new+0xbc>
      break;
 800b2c6:	bf00      	nop
 800b2c8:	e000      	b.n	800b2cc <pcb_new+0xac>
      break;
 800b2ca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	22ff      	movs	r2, #255	; 0xff
 800b2da:	711a      	strb	r2, [r3, #4]
  }
}
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd90      	pop	{r4, r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	0801928c 	.word	0x0801928c
 800b2e8:	08019470 	.word	0x08019470
 800b2ec:	080192d0 	.word	0x080192d0
 800b2f0:	0800ab2d 	.word	0x0800ab2d

0800b2f4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff ff85 	bl	800b220 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b316:	bf00      	nop
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	6039      	str	r1, [r7, #0]
 800b32a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b330:	2007      	movs	r0, #7
 800b332:	f001 fe6b 	bl	800d00c <memp_malloc>
 800b336:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <netconn_alloc+0x22>
    return NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	e052      	b.n	800b3e8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	79fa      	ldrb	r2, [r7, #7]
 800b34c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b35a:	2b10      	cmp	r3, #16
 800b35c:	d004      	beq.n	800b368 <netconn_alloc+0x48>
 800b35e:	2b20      	cmp	r3, #32
 800b360:	d105      	bne.n	800b36e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b362:	2306      	movs	r3, #6
 800b364:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b366:	e00a      	b.n	800b37e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b368:	2306      	movs	r3, #6
 800b36a:	617b      	str	r3, [r7, #20]
      break;
 800b36c:	e007      	b.n	800b37e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b36e:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <netconn_alloc+0xd0>)
 800b370:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b374:	491f      	ldr	r1, [pc, #124]	; (800b3f4 <netconn_alloc+0xd4>)
 800b376:	4820      	ldr	r0, [pc, #128]	; (800b3f8 <netconn_alloc+0xd8>)
 800b378:	f00c fa48 	bl	801780c <iprintf>
      goto free_and_return;
 800b37c:	e02f      	b.n	800b3de <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3310      	adds	r3, #16
 800b382:	6979      	ldr	r1, [r7, #20]
 800b384:	4618      	mov	r0, r3
 800b386:	f00c f829 	bl	80173dc <sys_mbox_new>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d125      	bne.n	800b3dc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	330c      	adds	r3, #12
 800b394:	2100      	movs	r1, #0
 800b396:	4618      	mov	r0, r3
 800b398:	f00c f8cc 	bl	8017534 <sys_sem_new>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d005      	beq.n	800b3ae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3310      	adds	r3, #16
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f00c f832 	bl	8017410 <sys_mbox_free>
    goto free_and_return;
 800b3ac:	e017      	b.n	800b3de <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3314      	adds	r3, #20
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f00c f8b1 	bl	801751a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	7cfa      	ldrb	r2, [r7, #19]
 800b3d6:	771a      	strb	r2, [r3, #28]
  return conn;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	e005      	b.n	800b3e8 <netconn_alloc+0xc8>
    goto free_and_return;
 800b3dc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b3de:	68f9      	ldr	r1, [r7, #12]
 800b3e0:	2007      	movs	r0, #7
 800b3e2:	f001 fe65 	bl	800d0b0 <memp_free>
  return NULL;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	0801928c 	.word	0x0801928c
 800b3f4:	08019490 	.word	0x08019490
 800b3f8:	080192d0 	.word	0x080192d0

0800b3fc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d006      	beq.n	800b41a <netconn_free+0x1e>
 800b40c:	4b1b      	ldr	r3, [pc, #108]	; (800b47c <netconn_free+0x80>)
 800b40e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b412:	491b      	ldr	r1, [pc, #108]	; (800b480 <netconn_free+0x84>)
 800b414:	481b      	ldr	r0, [pc, #108]	; (800b484 <netconn_free+0x88>)
 800b416:	f00c f9f9 	bl	801780c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3310      	adds	r3, #16
 800b41e:	4618      	mov	r0, r3
 800b420:	f00c f86a 	bl	80174f8 <sys_mbox_valid>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d006      	beq.n	800b438 <netconn_free+0x3c>
 800b42a:	4b14      	ldr	r3, [pc, #80]	; (800b47c <netconn_free+0x80>)
 800b42c:	f240 3223 	movw	r2, #803	; 0x323
 800b430:	4915      	ldr	r1, [pc, #84]	; (800b488 <netconn_free+0x8c>)
 800b432:	4814      	ldr	r0, [pc, #80]	; (800b484 <netconn_free+0x88>)
 800b434:	f00c f9ea 	bl	801780c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3314      	adds	r3, #20
 800b43c:	4618      	mov	r0, r3
 800b43e:	f00c f85b 	bl	80174f8 <sys_mbox_valid>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d006      	beq.n	800b456 <netconn_free+0x5a>
 800b448:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <netconn_free+0x80>)
 800b44a:	f240 3226 	movw	r2, #806	; 0x326
 800b44e:	490f      	ldr	r1, [pc, #60]	; (800b48c <netconn_free+0x90>)
 800b450:	480c      	ldr	r0, [pc, #48]	; (800b484 <netconn_free+0x88>)
 800b452:	f00c f9db 	bl	801780c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	330c      	adds	r3, #12
 800b45a:	4618      	mov	r0, r3
 800b45c:	f00c f8cd 	bl	80175fa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	330c      	adds	r3, #12
 800b464:	4618      	mov	r0, r3
 800b466:	f00c f8e6 	bl	8017636 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b46a:	6879      	ldr	r1, [r7, #4]
 800b46c:	2007      	movs	r0, #7
 800b46e:	f001 fe1f 	bl	800d0b0 <memp_free>
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	0801928c 	.word	0x0801928c
 800b480:	080194b8 	.word	0x080194b8
 800b484:	080192d0 	.word	0x080192d0
 800b488:	080194e8 	.word	0x080194e8
 800b48c:	08019524 	.word	0x08019524

0800b490 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3310      	adds	r3, #16
 800b49c:	4618      	mov	r0, r3
 800b49e:	f00c f82b 	bl	80174f8 <sys_mbox_valid>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d02f      	beq.n	800b508 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b4a8:	e018      	b.n	800b4dc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4b2:	2b10      	cmp	r3, #16
 800b4b4:	d10e      	bne.n	800b4d4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f107 020f 	add.w	r2, r7, #15
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff fafa 	bl	800aab8 <lwip_netconn_is_err_msg>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d108      	bne.n	800b4dc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f002 fc97 	bl	800de00 <pbuf_free>
 800b4d2:	e003      	b.n	800b4dc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 fe90 	bl	800c1fc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3310      	adds	r3, #16
 800b4e0:	f107 0210 	add.w	r2, r7, #16
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f00b ffef 	bl	80174ca <sys_arch_mbox_tryfetch>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f2:	d1da      	bne.n	800b4aa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3310      	adds	r3, #16
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f00b ff89 	bl	8017410 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3310      	adds	r3, #16
 800b502:	4618      	mov	r0, r3
 800b504:	f00c f809 	bl	801751a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3314      	adds	r3, #20
 800b50c:	4618      	mov	r0, r3
 800b50e:	f00b fff3 	bl	80174f8 <sys_mbox_valid>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d034      	beq.n	800b582 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b518:	e01d      	b.n	800b556 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f107 020e 	add.w	r2, r7, #14
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff fac8 	bl	800aab8 <lwip_netconn_is_err_msg>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d113      	bne.n	800b556 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b532:	6978      	ldr	r0, [r7, #20]
 800b534:	f7ff ffac 	bl	800b490 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d007      	beq.n	800b550 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	f003 fa4b 	bl	800e9e0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2200      	movs	r2, #0
 800b54e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b550:	6978      	ldr	r0, [r7, #20]
 800b552:	f7ff ff53 	bl	800b3fc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3314      	adds	r3, #20
 800b55a:	f107 0210 	add.w	r2, r7, #16
 800b55e:	4611      	mov	r1, r2
 800b560:	4618      	mov	r0, r3
 800b562:	f00b ffb2 	bl	80174ca <sys_arch_mbox_tryfetch>
 800b566:	4603      	mov	r3, r0
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56c:	d1d5      	bne.n	800b51a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3314      	adds	r3, #20
 800b572:	4618      	mov	r0, r3
 800b574:	f00b ff4c 	bl	8017410 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3314      	adds	r3, #20
 800b57c:	4618      	mov	r0, r3
 800b57e:	f00b ffcc 	bl	801751a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b582:	bf00      	nop
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <lwip_netconn_do_close_internal+0x24>
 800b5a2:	4ba1      	ldr	r3, [pc, #644]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b5a4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b5a8:	49a0      	ldr	r1, [pc, #640]	; (800b82c <lwip_netconn_do_close_internal+0x2a0>)
 800b5aa:	48a1      	ldr	r0, [pc, #644]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b5ac:	f00c f92e 	bl	801780c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	d006      	beq.n	800b5ca <lwip_netconn_do_close_internal+0x3e>
 800b5bc:	4b9a      	ldr	r3, [pc, #616]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b5be:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b5c2:	499c      	ldr	r1, [pc, #624]	; (800b834 <lwip_netconn_do_close_internal+0x2a8>)
 800b5c4:	489a      	ldr	r0, [pc, #616]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b5c6:	f00c f921 	bl	801780c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	785b      	ldrb	r3, [r3, #1]
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d006      	beq.n	800b5e0 <lwip_netconn_do_close_internal+0x54>
 800b5d2:	4b95      	ldr	r3, [pc, #596]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b5d4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b5d8:	4997      	ldr	r1, [pc, #604]	; (800b838 <lwip_netconn_do_close_internal+0x2ac>)
 800b5da:	4895      	ldr	r0, [pc, #596]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b5dc:	f00c f916 	bl	801780c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d106      	bne.n	800b5f6 <lwip_netconn_do_close_internal+0x6a>
 800b5e8:	4b8f      	ldr	r3, [pc, #572]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b5ea:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b5ee:	4993      	ldr	r1, [pc, #588]	; (800b83c <lwip_netconn_do_close_internal+0x2b0>)
 800b5f0:	488f      	ldr	r0, [pc, #572]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b5f2:	f00c f90b 	bl	801780c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <lwip_netconn_do_close_internal+0x80>
 800b5fe:	4b8a      	ldr	r3, [pc, #552]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b600:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b604:	498e      	ldr	r1, [pc, #568]	; (800b840 <lwip_netconn_do_close_internal+0x2b4>)
 800b606:	488a      	ldr	r0, [pc, #552]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b608:	f00c f900 	bl	801780c <iprintf>

  tpcb = conn->pcb.tcp;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	7a1b      	ldrb	r3, [r3, #8]
 800b618:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b622:	7bfb      	ldrb	r3, [r7, #15]
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d102      	bne.n	800b636 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b630:	2301      	movs	r3, #1
 800b632:	75bb      	strb	r3, [r7, #22]
 800b634:	e01f      	b.n	800b676 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b640:	2b05      	cmp	r3, #5
 800b642:	d007      	beq.n	800b654 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b648:	2b06      	cmp	r3, #6
 800b64a:	d003      	beq.n	800b654 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b650:	2b08      	cmp	r3, #8
 800b652:	d102      	bne.n	800b65a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b654:	2301      	movs	r3, #1
 800b656:	75bb      	strb	r3, [r7, #22]
 800b658:	e00d      	b.n	800b676 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b65a:	7b7b      	ldrb	r3, [r7, #13]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d008      	beq.n	800b672 <lwip_netconn_do_close_internal+0xe6>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	8b5b      	ldrh	r3, [r3, #26]
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b66c:	2301      	movs	r3, #1
 800b66e:	75bb      	strb	r3, [r7, #22]
 800b670:	e001      	b.n	800b676 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b676:	7dbb      	ldrb	r3, [r7, #22]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b67c:	2100      	movs	r1, #0
 800b67e:	6938      	ldr	r0, [r7, #16]
 800b680:	f004 fa40 	bl	800fb04 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	7d1b      	ldrb	r3, [r3, #20]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d104      	bne.n	800b696 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b68c:	2100      	movs	r1, #0
 800b68e:	6938      	ldr	r0, [r7, #16]
 800b690:	f004 fab0 	bl	800fbf4 <tcp_accept>
 800b694:	e01d      	b.n	800b6d2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b69c:	2100      	movs	r1, #0
 800b69e:	6938      	ldr	r0, [r7, #16]
 800b6a0:	f004 fa42 	bl	800fb28 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6938      	ldr	r0, [r7, #16]
 800b6a8:	f004 faa4 	bl	800fbf4 <tcp_accept>
    }
    if (shut_tx) {
 800b6ac:	7b7b      	ldrb	r3, [r7, #13]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	6938      	ldr	r0, [r7, #16]
 800b6b6:	f004 fa59 	bl	800fb6c <tcp_sent>
    }
    if (shut_close) {
 800b6ba:	7dbb      	ldrb	r3, [r7, #22]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d008      	beq.n	800b6d2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6938      	ldr	r0, [r7, #16]
 800b6c6:	f004 faad 	bl	800fc24 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	6938      	ldr	r0, [r7, #16]
 800b6ce:	f004 fa6f 	bl	800fbb0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b6d2:	7dbb      	ldrb	r3, [r7, #22]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d005      	beq.n	800b6e4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b6d8:	6938      	ldr	r0, [r7, #16]
 800b6da:	f003 f83b 	bl	800e754 <tcp_close>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75fb      	strb	r3, [r7, #23]
 800b6e2:	e007      	b.n	800b6f4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	7b7a      	ldrb	r2, [r7, #13]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6938      	ldr	r0, [r7, #16]
 800b6ec:	f003 f85e 	bl	800e7ac <tcp_shutdown>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b6f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	757b      	strb	r3, [r7, #21]
 800b700:	e016      	b.n	800b730 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d10f      	bne.n	800b72c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	7a5b      	ldrb	r3, [r3, #9]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10c      	bne.n	800b730 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b716:	2301      	movs	r3, #1
 800b718:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b71a:	7dbb      	ldrb	r3, [r7, #22]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d007      	beq.n	800b730 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b720:	6938      	ldr	r0, [r7, #16]
 800b722:	f003 f95d 	bl	800e9e0 <tcp_abort>
          err = ERR_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	75fb      	strb	r3, [r7, #23]
 800b72a:	e001      	b.n	800b730 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b72c:	2301      	movs	r3, #1
 800b72e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b730:	7d7b      	ldrb	r3, [r7, #21]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d044      	beq.n	800b7c0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	330c      	adds	r3, #12
 800b73e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	7dfa      	ldrb	r2, [r7, #23]
 800b746:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d129      	bne.n	800b7b0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b75c:	7dbb      	ldrb	r3, [r7, #22]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00c      	beq.n	800b77c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <lwip_netconn_do_close_internal+0x1f0>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2200      	movs	r2, #0
 800b776:	2104      	movs	r1, #4
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	4798      	blx	r3
      }
      if (shut_rx) {
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d009      	beq.n	800b796 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b00      	cmp	r3, #0
 800b788:	d005      	beq.n	800b796 <lwip_netconn_do_close_internal+0x20a>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	2200      	movs	r2, #0
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
      }
      if (shut_tx) {
 800b796:	7b7b      	ldrb	r3, [r7, #13]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d009      	beq.n	800b7b0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d005      	beq.n	800b7b0 <lwip_netconn_do_close_internal+0x224>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2102      	movs	r1, #2
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b7b0:	78fb      	ldrb	r3, [r7, #3]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b7b6:	68b8      	ldr	r0, [r7, #8]
 800b7b8:	f00b ff12 	bl	80175e0 <sys_sem_signal>
    }
    return ERR_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e02e      	b.n	800b81e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b7c0:	7d7b      	ldrb	r3, [r7, #21]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d11e      	bne.n	800b804 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d106      	bne.n	800b7dc <lwip_netconn_do_close_internal+0x250>
 800b7ce:	4b16      	ldr	r3, [pc, #88]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b7d0:	f240 4241 	movw	r2, #1089	; 0x441
 800b7d4:	491b      	ldr	r1, [pc, #108]	; (800b844 <lwip_netconn_do_close_internal+0x2b8>)
 800b7d6:	4816      	ldr	r0, [pc, #88]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b7d8:	f00c f818 	bl	801780c <iprintf>
    if (shut_tx) {
 800b7dc:	7b7b      	ldrb	r3, [r7, #13]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b7e2:	4919      	ldr	r1, [pc, #100]	; (800b848 <lwip_netconn_do_close_internal+0x2bc>)
 800b7e4:	6938      	ldr	r0, [r7, #16]
 800b7e6:	f004 f9c1 	bl	800fb6c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4917      	ldr	r1, [pc, #92]	; (800b84c <lwip_netconn_do_close_internal+0x2c0>)
 800b7ee:	6938      	ldr	r0, [r7, #16]
 800b7f0:	f004 fa18 	bl	800fc24 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b7f4:	4916      	ldr	r1, [pc, #88]	; (800b850 <lwip_netconn_do_close_internal+0x2c4>)
 800b7f6:	6938      	ldr	r0, [r7, #16]
 800b7f8:	f004 f9da 	bl	800fbb0 <tcp_err>
    tcp_arg(tpcb, conn);
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	6938      	ldr	r0, [r7, #16]
 800b800:	f004 f980 	bl	800fb04 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <lwip_netconn_do_close_internal+0x28e>
 800b80c:	4b06      	ldr	r3, [pc, #24]	; (800b828 <lwip_netconn_do_close_internal+0x29c>)
 800b80e:	f240 424d 	movw	r2, #1101	; 0x44d
 800b812:	4910      	ldr	r1, [pc, #64]	; (800b854 <lwip_netconn_do_close_internal+0x2c8>)
 800b814:	4806      	ldr	r0, [pc, #24]	; (800b830 <lwip_netconn_do_close_internal+0x2a4>)
 800b816:	f00b fff9 	bl	801780c <iprintf>
  return err;
 800b81a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	0801928c 	.word	0x0801928c
 800b82c:	08019560 	.word	0x08019560
 800b830:	080192d0 	.word	0x080192d0
 800b834:	08019570 	.word	0x08019570
 800b838:	08019590 	.word	0x08019590
 800b83c:	080195b4 	.word	0x080195b4
 800b840:	080193f4 	.word	0x080193f4
 800b844:	080195c8 	.word	0x080195c8
 800b848:	0800ae01 	.word	0x0800ae01
 800b84c:	0800ad35 	.word	0x0800ad35
 800b850:	0800aead 	.word	0x0800aead
 800b854:	080195ec 	.word	0x080195ec

0800b858 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00d      	beq.n	800b88e <lwip_netconn_do_delconn+0x36>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b87c:	2b10      	cmp	r3, #16
 800b87e:	d006      	beq.n	800b88e <lwip_netconn_do_delconn+0x36>
 800b880:	4b60      	ldr	r3, [pc, #384]	; (800ba04 <lwip_netconn_do_delconn+0x1ac>)
 800b882:	f240 425e 	movw	r2, #1118	; 0x45e
 800b886:	4960      	ldr	r1, [pc, #384]	; (800ba08 <lwip_netconn_do_delconn+0x1b0>)
 800b888:	4860      	ldr	r0, [pc, #384]	; (800ba0c <lwip_netconn_do_delconn+0x1b4>)
 800b88a:	f00b ffbf 	bl	801780c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d005      	beq.n	800b8a0 <lwip_netconn_do_delconn+0x48>
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d002      	beq.n	800b8a0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b89a:	7afb      	ldrb	r3, [r7, #11]
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d109      	bne.n	800b8b4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	2b03      	cmp	r3, #3
 800b8a4:	d10a      	bne.n	800b8bc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	7f1b      	ldrb	r3, [r3, #28]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d103      	bne.n	800b8bc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	22fb      	movs	r2, #251	; 0xfb
 800b8b8:	711a      	strb	r2, [r3, #4]
 800b8ba:	e097      	b.n	800b9ec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	d10d      	bne.n	800b8de <lwip_netconn_do_delconn+0x86>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	7f1b      	ldrb	r3, [r3, #28]
 800b8c8:	f003 0304 	and.w	r3, r3, #4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d106      	bne.n	800b8de <lwip_netconn_do_delconn+0x86>
 800b8d0:	4b4c      	ldr	r3, [pc, #304]	; (800ba04 <lwip_netconn_do_delconn+0x1ac>)
 800b8d2:	f240 427a 	movw	r2, #1146	; 0x47a
 800b8d6:	494e      	ldr	r1, [pc, #312]	; (800ba10 <lwip_netconn_do_delconn+0x1b8>)
 800b8d8:	484c      	ldr	r0, [pc, #304]	; (800ba0c <lwip_netconn_do_delconn+0x1b4>)
 800b8da:	f00b ff97 	bl	801780c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fdd1 	bl	800b490 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d05f      	beq.n	800b9b8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b902:	2b10      	cmp	r3, #16
 800b904:	d00d      	beq.n	800b922 <lwip_netconn_do_delconn+0xca>
 800b906:	2b20      	cmp	r3, #32
 800b908:	d151      	bne.n	800b9ae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f009 f976 	bl	8014c0c <udp_remove>
          break;
 800b920:	e046      	b.n	800b9b0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6a1b      	ldr	r3, [r3, #32]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d006      	beq.n	800b93a <lwip_netconn_do_delconn+0xe2>
 800b92c:	4b35      	ldr	r3, [pc, #212]	; (800ba04 <lwip_netconn_do_delconn+0x1ac>)
 800b92e:	f240 4294 	movw	r2, #1172	; 0x494
 800b932:	4938      	ldr	r1, [pc, #224]	; (800ba14 <lwip_netconn_do_delconn+0x1bc>)
 800b934:	4835      	ldr	r0, [pc, #212]	; (800ba0c <lwip_netconn_do_delconn+0x1b4>)
 800b936:	f00b ff69 	bl	801780c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2204      	movs	r2, #4
 800b940:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2203      	movs	r2, #3
 800b946:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2100      	movs	r1, #0
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fe18 	bl	800b58c <lwip_netconn_do_close_internal>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d04b      	beq.n	800b9fa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d006      	beq.n	800b97a <lwip_netconn_do_delconn+0x122>
 800b96c:	4b25      	ldr	r3, [pc, #148]	; (800ba04 <lwip_netconn_do_delconn+0x1ac>)
 800b96e:	f240 429a 	movw	r2, #1178	; 0x49a
 800b972:	4929      	ldr	r1, [pc, #164]	; (800ba18 <lwip_netconn_do_delconn+0x1c0>)
 800b974:	4825      	ldr	r0, [pc, #148]	; (800ba0c <lwip_netconn_do_delconn+0x1b4>)
 800b976:	f00b ff49 	bl	801780c <iprintf>
            UNLOCK_TCPIP_CORE();
 800b97a:	4828      	ldr	r0, [pc, #160]	; (800ba1c <lwip_netconn_do_delconn+0x1c4>)
 800b97c:	f00b fe99 	bl	80176b2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	330c      	adds	r3, #12
 800b986:	2100      	movs	r1, #0
 800b988:	4618      	mov	r0, r3
 800b98a:	f00b fdf8 	bl	801757e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b98e:	4823      	ldr	r0, [pc, #140]	; (800ba1c <lwip_netconn_do_delconn+0x1c4>)
 800b990:	f00b fe80 	bl	8017694 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	785b      	ldrb	r3, [r3, #1]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d02d      	beq.n	800b9fa <lwip_netconn_do_delconn+0x1a2>
 800b99e:	4b19      	ldr	r3, [pc, #100]	; (800ba04 <lwip_netconn_do_delconn+0x1ac>)
 800b9a0:	f240 429e 	movw	r2, #1182	; 0x49e
 800b9a4:	491c      	ldr	r1, [pc, #112]	; (800ba18 <lwip_netconn_do_delconn+0x1c0>)
 800b9a6:	4819      	ldr	r0, [pc, #100]	; (800ba0c <lwip_netconn_do_delconn+0x1b4>)
 800b9a8:	f00b ff30 	bl	801780c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b9ac:	e025      	b.n	800b9fa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b9ae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d007      	beq.n	800b9d2 <lwip_netconn_do_delconn+0x17a>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	6810      	ldr	r0, [r2, #0]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <lwip_netconn_do_delconn+0x194>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	6810      	ldr	r0, [r2, #0]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	330c      	adds	r3, #12
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f00b fe0e 	bl	8017614 <sys_sem_valid>
 800b9f8:	e000      	b.n	800b9fc <lwip_netconn_do_delconn+0x1a4>
          return;
 800b9fa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	0801928c 	.word	0x0801928c
 800ba08:	080195fc 	.word	0x080195fc
 800ba0c:	080192d0 	.word	0x080192d0
 800ba10:	08019610 	.word	0x08019610
 800ba14:	08019630 	.word	0x08019630
 800ba18:	0801964c 	.word	0x0801964c
 800ba1c:	200081e0 	.word	0x200081e0

0800ba20 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d025      	beq.n	800ba82 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba40:	2b10      	cmp	r3, #16
 800ba42:	d00e      	beq.n	800ba62 <lwip_netconn_do_bind+0x42>
 800ba44:	2b20      	cmp	r3, #32
 800ba46:	d119      	bne.n	800ba7c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6858      	ldr	r0, [r3, #4]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6899      	ldr	r1, [r3, #8]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	899b      	ldrh	r3, [r3, #12]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f009 f830 	bl	8014abc <udp_bind>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]
        break;
 800ba60:	e011      	b.n	800ba86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6858      	ldr	r0, [r3, #4]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6899      	ldr	r1, [r3, #8]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	899b      	ldrh	r3, [r3, #12]
 800ba70:	461a      	mov	r2, r3
 800ba72:	f002 ffc1 	bl	800e9f8 <tcp_bind>
 800ba76:	4603      	mov	r3, r0
 800ba78:	73fb      	strb	r3, [r7, #15]
        break;
 800ba7a:	e004      	b.n	800ba86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ba7c:	23fa      	movs	r3, #250	; 0xfa
 800ba7e:	73fb      	strb	r3, [r7, #15]
        break;
 800ba80:	e001      	b.n	800ba86 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ba82:	23fa      	movs	r3, #250	; 0xfa
 800ba84:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	7bfa      	ldrb	r2, [r7, #15]
 800ba8a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ba8c:	bf00      	nop
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d07f      	beq.n	800bbaa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bab4:	2b10      	cmp	r3, #16
 800bab6:	d175      	bne.n	800bba4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	785b      	ldrb	r3, [r3, #1]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d165      	bne.n	800bb8e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	7d1b      	ldrb	r3, [r3, #20]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800bace:	23fa      	movs	r3, #250	; 0xfa
 800bad0:	72fb      	strb	r3, [r7, #11]
 800bad2:	e06c      	b.n	800bbae <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800bad4:	23ff      	movs	r3, #255	; 0xff
 800bad6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f107 020b 	add.w	r2, r7, #11
 800bae2:	7cf9      	ldrb	r1, [r7, #19]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f003 f83f 	bl	800eb68 <tcp_listen_with_backlog_and_err>
 800baea:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d05d      	beq.n	800bbae <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3310      	adds	r3, #16
 800baf8:	4618      	mov	r0, r3
 800bafa:	f00b fcfd 	bl	80174f8 <sys_mbox_valid>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3310      	adds	r3, #16
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f00b fc80 	bl	8017410 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3310      	adds	r3, #16
 800bb16:	4618      	mov	r0, r3
 800bb18:	f00b fcff 	bl	801751a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3314      	adds	r3, #20
 800bb26:	4618      	mov	r0, r3
 800bb28:	f00b fce6 	bl	80174f8 <sys_mbox_valid>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d108      	bne.n	800bb44 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3314      	adds	r3, #20
 800bb38:	2106      	movs	r1, #6
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f00b fc4e 	bl	80173dc <sys_mbox_new>
 800bb40:	4603      	mov	r3, r0
 800bb42:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bb44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d118      	bne.n	800bb7e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2202      	movs	r2, #2
 800bb52:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f003 ffcb 	bl	800fb04 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	4912      	ldr	r1, [pc, #72]	; (800bbc0 <lwip_netconn_do_listen+0x12c>)
 800bb76:	4618      	mov	r0, r3
 800bb78:	f004 f83c 	bl	800fbf4 <tcp_accept>
 800bb7c:	e017      	b.n	800bbae <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f002 fde8 	bl	800e754 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	605a      	str	r2, [r3, #4]
 800bb8c:	e00f      	b.n	800bbae <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	785b      	ldrb	r3, [r3, #1]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d102      	bne.n	800bb9e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	72fb      	strb	r3, [r7, #11]
 800bb9c:	e007      	b.n	800bbae <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bb9e:	23f5      	movs	r3, #245	; 0xf5
 800bba0:	72fb      	strb	r3, [r7, #11]
 800bba2:	e004      	b.n	800bbae <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bba4:	23f0      	movs	r3, #240	; 0xf0
 800bba6:	72fb      	strb	r3, [r7, #11]
 800bba8:	e001      	b.n	800bbae <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bbaa:	23f5      	movs	r3, #245	; 0xf5
 800bbac:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bbae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bbb6:	bf00      	nop
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0800b0a9 	.word	0x0800b0a9

0800bbc4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d022      	beq.n	800bc26 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbea:	2b10      	cmp	r3, #16
 800bbec:	d11b      	bne.n	800bc26 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbfa:	d202      	bcs.n	800bc02 <lwip_netconn_do_recv+0x3e>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	e001      	b.n	800bc06 <lwip_netconn_do_recv+0x42>
 800bc02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc06:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	89fa      	ldrh	r2, [r7, #14]
 800bc10:	4611      	mov	r1, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f003 f8ac 	bl	800ed70 <tcp_recved>
        remaining -= recved;
 800bc18:	89fb      	ldrh	r3, [r7, #14]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e6      	bne.n	800bbf4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bc26:	bf00      	nop
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <lwip_netconn_do_writemore+0x24>
 800bc46:	4b96      	ldr	r3, [pc, #600]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bc48:	f240 6273 	movw	r2, #1651	; 0x673
 800bc4c:	4995      	ldr	r1, [pc, #596]	; (800bea4 <lwip_netconn_do_writemore+0x274>)
 800bc4e:	4896      	ldr	r0, [pc, #600]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bc50:	f00b fddc 	bl	801780c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d006      	beq.n	800bc6a <lwip_netconn_do_writemore+0x3a>
 800bc5c:	4b90      	ldr	r3, [pc, #576]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bc5e:	f240 6274 	movw	r2, #1652	; 0x674
 800bc62:	4992      	ldr	r1, [pc, #584]	; (800beac <lwip_netconn_do_writemore+0x27c>)
 800bc64:	4890      	ldr	r0, [pc, #576]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bc66:	f00b fdd1 	bl	801780c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <lwip_netconn_do_writemore+0x50>
 800bc72:	4b8b      	ldr	r3, [pc, #556]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bc74:	f240 6275 	movw	r2, #1653	; 0x675
 800bc78:	498d      	ldr	r1, [pc, #564]	; (800beb0 <lwip_netconn_do_writemore+0x280>)
 800bc7a:	488b      	ldr	r0, [pc, #556]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bc7c:	f00b fdc6 	bl	801780c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d106      	bne.n	800bc96 <lwip_netconn_do_writemore+0x66>
 800bc88:	4b85      	ldr	r3, [pc, #532]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bc8a:	f240 6276 	movw	r2, #1654	; 0x676
 800bc8e:	4989      	ldr	r1, [pc, #548]	; (800beb4 <lwip_netconn_do_writemore+0x284>)
 800bc90:	4885      	ldr	r0, [pc, #532]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bc92:	f00b fdbb 	bl	801780c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d306      	bcc.n	800bcb4 <lwip_netconn_do_writemore+0x84>
 800bca6:	4b7e      	ldr	r3, [pc, #504]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bca8:	f240 6277 	movw	r2, #1655	; 0x677
 800bcac:	4982      	ldr	r1, [pc, #520]	; (800beb8 <lwip_netconn_do_writemore+0x288>)
 800bcae:	487e      	ldr	r0, [pc, #504]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bcb0:	f00b fdac 	bl	801780c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a1b      	ldr	r3, [r3, #32]
 800bcb8:	899b      	ldrh	r3, [r3, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <lwip_netconn_do_writemore+0x9c>
 800bcbe:	4b78      	ldr	r3, [pc, #480]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bcc0:	f240 6279 	movw	r2, #1657	; 0x679
 800bcc4:	497d      	ldr	r1, [pc, #500]	; (800bebc <lwip_netconn_do_writemore+0x28c>)
 800bcc6:	4878      	ldr	r0, [pc, #480]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bcc8:	f00b fda0 	bl	801780c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	7f1b      	ldrb	r3, [r3, #28]
 800bcd2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7f1b      	ldrb	r3, [r3, #28]
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <lwip_netconn_do_writemore+0xba>
 800bce0:	7ebb      	ldrb	r3, [r7, #26]
 800bce2:	f003 0304 	and.w	r3, r3, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <lwip_netconn_do_writemore+0xbe>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <lwip_netconn_do_writemore+0xc0>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	4413      	add	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a1b      	ldr	r3, [r3, #32]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd1c:	d307      	bcc.n	800bd2e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bd1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd22:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bd24:	7ebb      	ldrb	r3, [r7, #26]
 800bd26:	f043 0302 	orr.w	r3, r3, #2
 800bd2a:	76bb      	strb	r3, [r7, #26]
 800bd2c:	e001      	b.n	800bd32 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bd3a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bd3c:	89fa      	ldrh	r2, [r7, #14]
 800bd3e:	8bbb      	ldrh	r3, [r7, #28]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d216      	bcs.n	800bd72 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800bd44:	89fb      	ldrh	r3, [r7, #14]
 800bd46:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bd48:	7e3b      	ldrb	r3, [r7, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00d      	beq.n	800bd6a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800bd4e:	8bbb      	ldrh	r3, [r7, #28]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10e      	bne.n	800bd72 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a1b      	ldr	r3, [r3, #32]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <lwip_netconn_do_writemore+0x134>
 800bd5e:	f06f 0306 	mvn.w	r3, #6
 800bd62:	e000      	b.n	800bd66 <lwip_netconn_do_writemore+0x136>
 800bd64:	2300      	movs	r3, #0
 800bd66:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800bd68:	e07d      	b.n	800be66 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800bd6a:	7ebb      	ldrb	r3, [r7, #26]
 800bd6c:	f043 0302 	orr.w	r3, r3, #2
 800bd70:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	691a      	ldr	r2, [r3, #16]
 800bd78:	8bbb      	ldrh	r3, [r7, #28]
 800bd7a:	441a      	add	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d906      	bls.n	800bd96 <lwip_netconn_do_writemore+0x166>
 800bd88:	4b45      	ldr	r3, [pc, #276]	; (800bea0 <lwip_netconn_do_writemore+0x270>)
 800bd8a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800bd8e:	494c      	ldr	r1, [pc, #304]	; (800bec0 <lwip_netconn_do_writemore+0x290>)
 800bd90:	4845      	ldr	r0, [pc, #276]	; (800bea8 <lwip_netconn_do_writemore+0x278>)
 800bd92:	f00b fd3b 	bl	801780c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bd96:	8bbb      	ldrh	r3, [r7, #28]
 800bd98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d103      	bne.n	800bda8 <lwip_netconn_do_writemore+0x178>
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bda6:	d209      	bcs.n	800bdbc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bdac:	8bba      	ldrh	r2, [r7, #28]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d10b      	bne.n	800bdca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	899b      	ldrh	r3, [r3, #12]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d906      	bls.n	800bdca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bdc0:	7ebb      	ldrb	r3, [r7, #26]
 800bdc2:	f043 0302 	orr.w	r3, r3, #2
 800bdc6:	76bb      	strb	r3, [r7, #26]
 800bdc8:	e001      	b.n	800bdce <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6858      	ldr	r0, [r3, #4]
 800bdd2:	7ebb      	ldrb	r3, [r7, #26]
 800bdd4:	8bba      	ldrh	r2, [r7, #28]
 800bdd6:	6979      	ldr	r1, [r7, #20]
 800bdd8:	f006 fdd4 	bl	8012984 <tcp_write>
 800bddc:	4603      	mov	r3, r0
 800bdde:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800bde0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d12c      	bne.n	800be42 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	6999      	ldr	r1, [r3, #24]
 800bdee:	8bba      	ldrh	r2, [r7, #28]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	440a      	add	r2, r1
 800bdf6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	6919      	ldr	r1, [r3, #16]
 800bdfe:	8bba      	ldrh	r2, [r7, #28]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	440a      	add	r2, r1
 800be06:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	691a      	ldr	r2, [r3, #16]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	429a      	cmp	r2, r3
 800be18:	d113      	bne.n	800be42 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	899a      	ldrh	r2, [r3, #12]
 800be20:	3a01      	subs	r2, #1
 800be22:	b292      	uxth	r2, r2
 800be24:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	899b      	ldrh	r3, [r3, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d008      	beq.n	800be42 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	3208      	adds	r2, #8
 800be38:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	2200      	movs	r2, #0
 800be40:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800be42:	7e7b      	ldrb	r3, [r7, #25]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d004      	beq.n	800be52 <lwip_netconn_do_writemore+0x222>
 800be48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f43f af50 	beq.w	800bcf2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800be52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <lwip_netconn_do_writemore+0x234>
 800be5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be62:	d147      	bne.n	800bef4 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800be64:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800be66:	7e3b      	ldrb	r3, [r7, #24]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d02b      	beq.n	800bec4 <lwip_netconn_do_writemore+0x294>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	699a      	ldr	r2, [r3, #24]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	695b      	ldr	r3, [r3, #20]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d223      	bcs.n	800bec4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d005      	beq.n	800be90 <lwip_netconn_do_writemore+0x260>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be88:	2200      	movs	r2, #0
 800be8a:	2103      	movs	r1, #3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7f1b      	ldrb	r3, [r3, #28]
 800be94:	f043 0310 	orr.w	r3, r3, #16
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	771a      	strb	r2, [r3, #28]
 800be9e:	e029      	b.n	800bef4 <lwip_netconn_do_writemore+0x2c4>
 800bea0:	0801928c 	.word	0x0801928c
 800bea4:	080193e4 	.word	0x080193e4
 800bea8:	080192d0 	.word	0x080192d0
 800beac:	080196ec 	.word	0x080196ec
 800beb0:	080193f4 	.word	0x080193f4
 800beb4:	0801970c 	.word	0x0801970c
 800beb8:	08019724 	.word	0x08019724
 800bebc:	08019764 	.word	0x08019764
 800bec0:	0801978c 	.word	0x0801978c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800becc:	f640 3269 	movw	r2, #2921	; 0xb69
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d905      	bls.n	800bee0 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bedc:	2b07      	cmp	r3, #7
 800bede:	d909      	bls.n	800bef4 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <lwip_netconn_do_writemore+0x2c4>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2200      	movs	r2, #0
 800beee:	2103      	movs	r1, #3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bef4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d11d      	bne.n	800bf38 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	699a      	ldr	r2, [r3, #24]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d002      	beq.n	800bf12 <lwip_netconn_do_writemore+0x2e2>
 800bf0c:	7e3b      	ldrb	r3, [r7, #24]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bf12:	2301      	movs	r3, #1
 800bf14:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f007 fb1c 	bl	8013558 <tcp_output>
 800bf20:	4603      	mov	r3, r0
 800bf22:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bf24:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bf28:	f113 0f04 	cmn.w	r3, #4
 800bf2c:	d12c      	bne.n	800bf88 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bf2e:	7b3b      	ldrb	r3, [r7, #12]
 800bf30:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bf32:	2301      	movs	r3, #1
 800bf34:	76fb      	strb	r3, [r7, #27]
 800bf36:	e027      	b.n	800bf88 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800bf38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf40:	d120      	bne.n	800bf84 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f007 fb06 	bl	8013558 <tcp_output>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bf50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bf54:	f113 0f04 	cmn.w	r3, #4
 800bf58:	d104      	bne.n	800bf64 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bf5a:	7b7b      	ldrb	r3, [r7, #13]
 800bf5c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	76fb      	strb	r3, [r7, #27]
 800bf62:	e011      	b.n	800bf88 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800bf64:	7e3b      	ldrb	r3, [r7, #24]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00e      	beq.n	800bf88 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <lwip_netconn_do_writemore+0x34a>
 800bf74:	f06f 0306 	mvn.w	r3, #6
 800bf78:	e000      	b.n	800bf7c <lwip_netconn_do_writemore+0x34c>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	76fb      	strb	r3, [r7, #27]
 800bf82:	e001      	b.n	800bf88 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bf84:	2301      	movs	r3, #1
 800bf86:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bf88:	7efb      	ldrb	r3, [r7, #27]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d015      	beq.n	800bfba <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	330c      	adds	r3, #12
 800bf96:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a1b      	ldr	r3, [r3, #32]
 800bf9c:	7ffa      	ldrb	r2, [r7, #31]
 800bf9e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bfac:	78fb      	ldrb	r3, [r7, #3]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d006      	beq.n	800bfc0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bfb2:	68b8      	ldr	r0, [r7, #8]
 800bfb4:	f00b fb14 	bl	80175e0 <sys_sem_signal>
 800bfb8:	e002      	b.n	800bfc0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bfba:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbe:	e000      	b.n	800bfc2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop

0800bfcc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fd1a 	bl	800aa16 <netconn_err>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bfe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d166      	bne.n	800c0bc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff8:	2b10      	cmp	r3, #16
 800bffa:	d15d      	bne.n	800c0b8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	785b      	ldrb	r3, [r3, #1]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c006:	23fb      	movs	r3, #251	; 0xfb
 800c008:	73fb      	strb	r3, [r7, #15]
 800c00a:	e057      	b.n	800c0bc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d04d      	beq.n	800c0b2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2201      	movs	r2, #1
 800c01c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d006      	beq.n	800c036 <lwip_netconn_do_write+0x6a>
 800c028:	4b28      	ldr	r3, [pc, #160]	; (800c0cc <lwip_netconn_do_write+0x100>)
 800c02a:	f240 7223 	movw	r2, #1827	; 0x723
 800c02e:	4928      	ldr	r1, [pc, #160]	; (800c0d0 <lwip_netconn_do_write+0x104>)
 800c030:	4828      	ldr	r0, [pc, #160]	; (800c0d4 <lwip_netconn_do_write+0x108>)
 800c032:	f00b fbeb 	bl	801780c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <lwip_netconn_do_write+0x80>
 800c03e:	4b23      	ldr	r3, [pc, #140]	; (800c0cc <lwip_netconn_do_write+0x100>)
 800c040:	f240 7224 	movw	r2, #1828	; 0x724
 800c044:	4924      	ldr	r1, [pc, #144]	; (800c0d8 <lwip_netconn_do_write+0x10c>)
 800c046:	4823      	ldr	r0, [pc, #140]	; (800c0d4 <lwip_netconn_do_write+0x108>)
 800c048:	f00b fbe0 	bl	801780c <iprintf>
        msg->conn->current_msg = msg;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2100      	movs	r1, #0
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff fde8 	bl	800bc30 <lwip_netconn_do_writemore>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d02e      	beq.n	800c0c4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	785b      	ldrb	r3, [r3, #1]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d006      	beq.n	800c07e <lwip_netconn_do_write+0xb2>
 800c070:	4b16      	ldr	r3, [pc, #88]	; (800c0cc <lwip_netconn_do_write+0x100>)
 800c072:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c076:	4919      	ldr	r1, [pc, #100]	; (800c0dc <lwip_netconn_do_write+0x110>)
 800c078:	4816      	ldr	r0, [pc, #88]	; (800c0d4 <lwip_netconn_do_write+0x108>)
 800c07a:	f00b fbc7 	bl	801780c <iprintf>
          UNLOCK_TCPIP_CORE();
 800c07e:	4818      	ldr	r0, [pc, #96]	; (800c0e0 <lwip_netconn_do_write+0x114>)
 800c080:	f00b fb17 	bl	80176b2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	330c      	adds	r3, #12
 800c08a:	2100      	movs	r1, #0
 800c08c:	4618      	mov	r0, r3
 800c08e:	f00b fa76 	bl	801757e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c092:	4813      	ldr	r0, [pc, #76]	; (800c0e0 <lwip_netconn_do_write+0x114>)
 800c094:	f00b fafe 	bl	8017694 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	785b      	ldrb	r3, [r3, #1]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d110      	bne.n	800c0c4 <lwip_netconn_do_write+0xf8>
 800c0a2:	4b0a      	ldr	r3, [pc, #40]	; (800c0cc <lwip_netconn_do_write+0x100>)
 800c0a4:	f240 722c 	movw	r2, #1836	; 0x72c
 800c0a8:	490c      	ldr	r1, [pc, #48]	; (800c0dc <lwip_netconn_do_write+0x110>)
 800c0aa:	480a      	ldr	r0, [pc, #40]	; (800c0d4 <lwip_netconn_do_write+0x108>)
 800c0ac:	f00b fbae 	bl	801780c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c0b0:	e008      	b.n	800c0c4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c0b2:	23f5      	movs	r3, #245	; 0xf5
 800c0b4:	73fb      	strb	r3, [r7, #15]
 800c0b6:	e001      	b.n	800c0bc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c0b8:	23fa      	movs	r3, #250	; 0xfa
 800c0ba:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	7bfa      	ldrb	r2, [r7, #15]
 800c0c0:	711a      	strb	r2, [r3, #4]
 800c0c2:	e000      	b.n	800c0c6 <lwip_netconn_do_write+0xfa>
        return;
 800c0c4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	0801928c 	.word	0x0801928c
 800c0d0:	08019630 	.word	0x08019630
 800c0d4:	080192d0 	.word	0x080192d0
 800c0d8:	080197b8 	.word	0x080197b8
 800c0dc:	0801964c 	.word	0x0801964c
 800c0e0:	200081e0 	.word	0x200081e0

0800c0e4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d069      	beq.n	800c1d6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c10c:	2b10      	cmp	r3, #16
 800c10e:	d162      	bne.n	800c1d6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c114:	2b03      	cmp	r3, #3
 800c116:	d002      	beq.n	800c11e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d05b      	beq.n	800c1d6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c11e:	7afb      	ldrb	r3, [r7, #11]
 800c120:	2b03      	cmp	r3, #3
 800c122:	d103      	bne.n	800c12c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	22f5      	movs	r2, #245	; 0xf5
 800c128:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c12a:	e059      	b.n	800c1e0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c12c:	7afb      	ldrb	r3, [r7, #11]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d103      	bne.n	800c13a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	22fb      	movs	r2, #251	; 0xfb
 800c136:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c138:	e052      	b.n	800c1e0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	7a1b      	ldrb	r3, [r3, #8]
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	2b00      	cmp	r3, #0
 800c144:	d004      	beq.n	800c150 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff f9a0 	bl	800b490 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d006      	beq.n	800c168 <lwip_netconn_do_close+0x84>
 800c15a:	4b23      	ldr	r3, [pc, #140]	; (800c1e8 <lwip_netconn_do_close+0x104>)
 800c15c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c160:	4922      	ldr	r1, [pc, #136]	; (800c1ec <lwip_netconn_do_close+0x108>)
 800c162:	4823      	ldr	r0, [pc, #140]	; (800c1f0 <lwip_netconn_do_close+0x10c>)
 800c164:	f00b fb52 	bl	801780c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2204      	movs	r2, #4
 800c16e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2100      	movs	r1, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fa04 	bl	800b58c <lwip_netconn_do_close_internal>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d029      	beq.n	800c1de <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	785b      	ldrb	r3, [r3, #1]
 800c190:	2b04      	cmp	r3, #4
 800c192:	d006      	beq.n	800c1a2 <lwip_netconn_do_close+0xbe>
 800c194:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <lwip_netconn_do_close+0x104>)
 800c196:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c19a:	4916      	ldr	r1, [pc, #88]	; (800c1f4 <lwip_netconn_do_close+0x110>)
 800c19c:	4814      	ldr	r0, [pc, #80]	; (800c1f0 <lwip_netconn_do_close+0x10c>)
 800c19e:	f00b fb35 	bl	801780c <iprintf>
        UNLOCK_TCPIP_CORE();
 800c1a2:	4815      	ldr	r0, [pc, #84]	; (800c1f8 <lwip_netconn_do_close+0x114>)
 800c1a4:	f00b fa85 	bl	80176b2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	330c      	adds	r3, #12
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f00b f9e4 	bl	801757e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c1b6:	4810      	ldr	r0, [pc, #64]	; (800c1f8 <lwip_netconn_do_close+0x114>)
 800c1b8:	f00b fa6c 	bl	8017694 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	785b      	ldrb	r3, [r3, #1]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00b      	beq.n	800c1de <lwip_netconn_do_close+0xfa>
 800c1c6:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <lwip_netconn_do_close+0x104>)
 800c1c8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c1cc:	4909      	ldr	r1, [pc, #36]	; (800c1f4 <lwip_netconn_do_close+0x110>)
 800c1ce:	4808      	ldr	r0, [pc, #32]	; (800c1f0 <lwip_netconn_do_close+0x10c>)
 800c1d0:	f00b fb1c 	bl	801780c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c1d4:	e003      	b.n	800c1de <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	22f5      	movs	r2, #245	; 0xf5
 800c1da:	711a      	strb	r2, [r3, #4]
 800c1dc:	e000      	b.n	800c1e0 <lwip_netconn_do_close+0xfc>
      return;
 800c1de:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	0801928c 	.word	0x0801928c
 800c1ec:	08019630 	.word	0x08019630
 800c1f0:	080192d0 	.word	0x080192d0
 800c1f4:	0801964c 	.word	0x0801964c
 800c1f8:	200081e0 	.word	0x200081e0

0800c1fc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d013      	beq.n	800c232 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00b      	beq.n	800c22a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f001 fdf2 	bl	800de00 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	605a      	str	r2, [r3, #4]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	2006      	movs	r0, #6
 800c22e:	f000 ff3f 	bl	800d0b0 <memp_free>
  }
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d108      	bne.n	800c260 <netbuf_data+0x24>
 800c24e:	4b1b      	ldr	r3, [pc, #108]	; (800c2bc <netbuf_data+0x80>)
 800c250:	22c6      	movs	r2, #198	; 0xc6
 800c252:	491b      	ldr	r1, [pc, #108]	; (800c2c0 <netbuf_data+0x84>)
 800c254:	481b      	ldr	r0, [pc, #108]	; (800c2c4 <netbuf_data+0x88>)
 800c256:	f00b fad9 	bl	801780c <iprintf>
 800c25a:	f06f 030f 	mvn.w	r3, #15
 800c25e:	e029      	b.n	800c2b4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d108      	bne.n	800c278 <netbuf_data+0x3c>
 800c266:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <netbuf_data+0x80>)
 800c268:	22c7      	movs	r2, #199	; 0xc7
 800c26a:	4917      	ldr	r1, [pc, #92]	; (800c2c8 <netbuf_data+0x8c>)
 800c26c:	4815      	ldr	r0, [pc, #84]	; (800c2c4 <netbuf_data+0x88>)
 800c26e:	f00b facd 	bl	801780c <iprintf>
 800c272:	f06f 030f 	mvn.w	r3, #15
 800c276:	e01d      	b.n	800c2b4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d108      	bne.n	800c290 <netbuf_data+0x54>
 800c27e:	4b0f      	ldr	r3, [pc, #60]	; (800c2bc <netbuf_data+0x80>)
 800c280:	22c8      	movs	r2, #200	; 0xc8
 800c282:	4912      	ldr	r1, [pc, #72]	; (800c2cc <netbuf_data+0x90>)
 800c284:	480f      	ldr	r0, [pc, #60]	; (800c2c4 <netbuf_data+0x88>)
 800c286:	f00b fac1 	bl	801780c <iprintf>
 800c28a:	f06f 030f 	mvn.w	r3, #15
 800c28e:	e011      	b.n	800c2b4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <netbuf_data+0x62>
    return ERR_BUF;
 800c298:	f06f 0301 	mvn.w	r3, #1
 800c29c:	e00a      	b.n	800c2b4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	895a      	ldrh	r2, [r3, #10]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	080197e4 	.word	0x080197e4
 800c2c0:	080198ec 	.word	0x080198ec
 800c2c4:	08019834 	.word	0x08019834
 800c2c8:	08019908 	.word	0x08019908
 800c2cc:	08019928 	.word	0x08019928

0800c2d0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d108      	bne.n	800c2f0 <netbuf_next+0x20>
 800c2de:	4b11      	ldr	r3, [pc, #68]	; (800c324 <netbuf_next+0x54>)
 800c2e0:	22e0      	movs	r2, #224	; 0xe0
 800c2e2:	4911      	ldr	r1, [pc, #68]	; (800c328 <netbuf_next+0x58>)
 800c2e4:	4811      	ldr	r0, [pc, #68]	; (800c32c <netbuf_next+0x5c>)
 800c2e6:	f00b fa91 	bl	801780c <iprintf>
 800c2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ee:	e014      	b.n	800c31a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d102      	bne.n	800c300 <netbuf_next+0x30>
    return -1;
 800c2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fe:	e00c      	b.n	800c31a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d101      	bne.n	800c318 <netbuf_next+0x48>
    return 1;
 800c314:	2301      	movs	r3, #1
 800c316:	e000      	b.n	800c31a <netbuf_next+0x4a>
  }
  return 0;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	080197e4 	.word	0x080197e4
 800c328:	08019944 	.word	0x08019944
 800c32c:	08019834 	.word	0x08019834

0800c330 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c33a:	f008 f9c5 	bl	80146c8 <sys_timeouts_sleeptime>
 800c33e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c346:	d10b      	bne.n	800c360 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c348:	4813      	ldr	r0, [pc, #76]	; (800c398 <tcpip_timeouts_mbox_fetch+0x68>)
 800c34a:	f00b f9b2 	bl	80176b2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c34e:	2200      	movs	r2, #0
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f00b f888 	bl	8017468 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c358:	480f      	ldr	r0, [pc, #60]	; (800c398 <tcpip_timeouts_mbox_fetch+0x68>)
 800c35a:	f00b f99b 	bl	8017694 <sys_mutex_lock>
    return;
 800c35e:	e018      	b.n	800c392 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c366:	f008 f975 	bl	8014654 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c36a:	e7e6      	b.n	800c33a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c36c:	480a      	ldr	r0, [pc, #40]	; (800c398 <tcpip_timeouts_mbox_fetch+0x68>)
 800c36e:	f00b f9a0 	bl	80176b2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f00b f876 	bl	8017468 <sys_arch_mbox_fetch>
 800c37c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c37e:	4806      	ldr	r0, [pc, #24]	; (800c398 <tcpip_timeouts_mbox_fetch+0x68>)
 800c380:	f00b f988 	bl	8017694 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d102      	bne.n	800c392 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c38c:	f008 f962 	bl	8014654 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c390:	e7d3      	b.n	800c33a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	200081e0 	.word	0x200081e0

0800c39c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c3a4:	4810      	ldr	r0, [pc, #64]	; (800c3e8 <tcpip_thread+0x4c>)
 800c3a6:	f00b f975 	bl	8017694 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c3aa:	4b10      	ldr	r3, [pc, #64]	; (800c3ec <tcpip_thread+0x50>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d005      	beq.n	800c3be <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c3b2:	4b0e      	ldr	r3, [pc, #56]	; (800c3ec <tcpip_thread+0x50>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a0e      	ldr	r2, [pc, #56]	; (800c3f0 <tcpip_thread+0x54>)
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3be:	f107 030c 	add.w	r3, r7, #12
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	480b      	ldr	r0, [pc, #44]	; (800c3f4 <tcpip_thread+0x58>)
 800c3c6:	f7ff ffb3 	bl	800c330 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d106      	bne.n	800c3de <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c3d0:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <tcpip_thread+0x5c>)
 800c3d2:	2291      	movs	r2, #145	; 0x91
 800c3d4:	4909      	ldr	r1, [pc, #36]	; (800c3fc <tcpip_thread+0x60>)
 800c3d6:	480a      	ldr	r0, [pc, #40]	; (800c400 <tcpip_thread+0x64>)
 800c3d8:	f00b fa18 	bl	801780c <iprintf>
      continue;
 800c3dc:	e003      	b.n	800c3e6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 f80f 	bl	800c404 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3e6:	e7ea      	b.n	800c3be <tcpip_thread+0x22>
 800c3e8:	200081e0 	.word	0x200081e0
 800c3ec:	200049b0 	.word	0x200049b0
 800c3f0:	200049b4 	.word	0x200049b4
 800c3f4:	200049b8 	.word	0x200049b8
 800c3f8:	0801997c 	.word	0x0801997c
 800c3fc:	080199ac 	.word	0x080199ac
 800c400:	080199cc 	.word	0x080199cc

0800c404 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b02      	cmp	r3, #2
 800c412:	d026      	beq.n	800c462 <tcpip_thread_handle_msg+0x5e>
 800c414:	2b02      	cmp	r3, #2
 800c416:	dc2b      	bgt.n	800c470 <tcpip_thread_handle_msg+0x6c>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <tcpip_thread_handle_msg+0x1e>
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d015      	beq.n	800c44c <tcpip_thread_handle_msg+0x48>
 800c420:	e026      	b.n	800c470 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6850      	ldr	r0, [r2, #4]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	6892      	ldr	r2, [r2, #8]
 800c42e:	4611      	mov	r1, r2
 800c430:	4798      	blx	r3
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 fcdf 	bl	800de00 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	2009      	movs	r0, #9
 800c446:	f000 fe33 	bl	800d0b0 <memp_free>
      break;
 800c44a:	e018      	b.n	800c47e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	6892      	ldr	r2, [r2, #8]
 800c454:	4610      	mov	r0, r2
 800c456:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	2008      	movs	r0, #8
 800c45c:	f000 fe28 	bl	800d0b0 <memp_free>
      break;
 800c460:	e00d      	b.n	800c47e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6892      	ldr	r2, [r2, #8]
 800c46a:	4610      	mov	r0, r2
 800c46c:	4798      	blx	r3
      break;
 800c46e:	e006      	b.n	800c47e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <tcpip_thread_handle_msg+0x84>)
 800c472:	22cf      	movs	r2, #207	; 0xcf
 800c474:	4905      	ldr	r1, [pc, #20]	; (800c48c <tcpip_thread_handle_msg+0x88>)
 800c476:	4806      	ldr	r0, [pc, #24]	; (800c490 <tcpip_thread_handle_msg+0x8c>)
 800c478:	f00b f9c8 	bl	801780c <iprintf>
      break;
 800c47c:	bf00      	nop
  }
}
 800c47e:	bf00      	nop
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	0801997c 	.word	0x0801997c
 800c48c:	080199ac 	.word	0x080199ac
 800c490:	080199cc 	.word	0x080199cc

0800c494 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c4a0:	481a      	ldr	r0, [pc, #104]	; (800c50c <tcpip_inpkt+0x78>)
 800c4a2:	f00b f829 	bl	80174f8 <sys_mbox_valid>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d105      	bne.n	800c4b8 <tcpip_inpkt+0x24>
 800c4ac:	4b18      	ldr	r3, [pc, #96]	; (800c510 <tcpip_inpkt+0x7c>)
 800c4ae:	22fc      	movs	r2, #252	; 0xfc
 800c4b0:	4918      	ldr	r1, [pc, #96]	; (800c514 <tcpip_inpkt+0x80>)
 800c4b2:	4819      	ldr	r0, [pc, #100]	; (800c518 <tcpip_inpkt+0x84>)
 800c4b4:	f00b f9aa 	bl	801780c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c4b8:	2009      	movs	r0, #9
 800c4ba:	f000 fda7 	bl	800d00c <memp_malloc>
 800c4be:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d102      	bne.n	800c4cc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	e01a      	b.n	800c502 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c4e4:	6979      	ldr	r1, [r7, #20]
 800c4e6:	4809      	ldr	r0, [pc, #36]	; (800c50c <tcpip_inpkt+0x78>)
 800c4e8:	f00a ffa4 	bl	8017434 <sys_mbox_trypost>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d006      	beq.n	800c500 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4f2:	6979      	ldr	r1, [r7, #20]
 800c4f4:	2009      	movs	r0, #9
 800c4f6:	f000 fddb 	bl	800d0b0 <memp_free>
    return ERR_MEM;
 800c4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fe:	e000      	b.n	800c502 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c500:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c502:	4618      	mov	r0, r3
 800c504:	3718      	adds	r7, #24
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200049b8 	.word	0x200049b8
 800c510:	0801997c 	.word	0x0801997c
 800c514:	080199f4 	.word	0x080199f4
 800c518:	080199cc 	.word	0x080199cc

0800c51c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c52c:	f003 0318 	and.w	r3, r3, #24
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c534:	4a08      	ldr	r2, [pc, #32]	; (800c558 <tcpip_input+0x3c>)
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ffab 	bl	800c494 <tcpip_inpkt>
 800c53e:	4603      	mov	r3, r0
 800c540:	e005      	b.n	800c54e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c542:	4a06      	ldr	r2, [pc, #24]	; (800c55c <tcpip_input+0x40>)
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff ffa4 	bl	800c494 <tcpip_inpkt>
 800c54c:	4603      	mov	r3, r0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	08017231 	.word	0x08017231
 800c55c:	08016021 	.word	0x08016021

0800c560 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c56a:	4819      	ldr	r0, [pc, #100]	; (800c5d0 <tcpip_try_callback+0x70>)
 800c56c:	f00a ffc4 	bl	80174f8 <sys_mbox_valid>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <tcpip_try_callback+0x24>
 800c576:	4b17      	ldr	r3, [pc, #92]	; (800c5d4 <tcpip_try_callback+0x74>)
 800c578:	f240 125d 	movw	r2, #349	; 0x15d
 800c57c:	4916      	ldr	r1, [pc, #88]	; (800c5d8 <tcpip_try_callback+0x78>)
 800c57e:	4817      	ldr	r0, [pc, #92]	; (800c5dc <tcpip_try_callback+0x7c>)
 800c580:	f00b f944 	bl	801780c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c584:	2008      	movs	r0, #8
 800c586:	f000 fd41 	bl	800d00c <memp_malloc>
 800c58a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c592:	f04f 33ff 	mov.w	r3, #4294967295
 800c596:	e017      	b.n	800c5c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2201      	movs	r2, #1
 800c59c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c5aa:	68f9      	ldr	r1, [r7, #12]
 800c5ac:	4808      	ldr	r0, [pc, #32]	; (800c5d0 <tcpip_try_callback+0x70>)
 800c5ae:	f00a ff41 	bl	8017434 <sys_mbox_trypost>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d006      	beq.n	800c5c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c5b8:	68f9      	ldr	r1, [r7, #12]
 800c5ba:	2008      	movs	r0, #8
 800c5bc:	f000 fd78 	bl	800d0b0 <memp_free>
    return ERR_MEM;
 800c5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c4:	e000      	b.n	800c5c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	200049b8 	.word	0x200049b8
 800c5d4:	0801997c 	.word	0x0801997c
 800c5d8:	080199f4 	.word	0x080199f4
 800c5dc:	080199cc 	.word	0x080199cc

0800c5e0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c5ec:	4806      	ldr	r0, [pc, #24]	; (800c608 <tcpip_send_msg_wait_sem+0x28>)
 800c5ee:	f00b f851 	bl	8017694 <sys_mutex_lock>
  fn(apimsg);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	68b8      	ldr	r0, [r7, #8]
 800c5f6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c5f8:	4803      	ldr	r0, [pc, #12]	; (800c608 <tcpip_send_msg_wait_sem+0x28>)
 800c5fa:	f00b f85a 	bl	80176b2 <sys_mutex_unlock>
  return ERR_OK;
 800c5fe:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	200081e0 	.word	0x200081e0

0800c60c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af02      	add	r7, sp, #8
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c616:	f000 f871 	bl	800c6fc <lwip_init>

  tcpip_init_done = initfunc;
 800c61a:	4a17      	ldr	r2, [pc, #92]	; (800c678 <tcpip_init+0x6c>)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c620:	4a16      	ldr	r2, [pc, #88]	; (800c67c <tcpip_init+0x70>)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c626:	2106      	movs	r1, #6
 800c628:	4815      	ldr	r0, [pc, #84]	; (800c680 <tcpip_init+0x74>)
 800c62a:	f00a fed7 	bl	80173dc <sys_mbox_new>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c634:	4b13      	ldr	r3, [pc, #76]	; (800c684 <tcpip_init+0x78>)
 800c636:	f240 2261 	movw	r2, #609	; 0x261
 800c63a:	4913      	ldr	r1, [pc, #76]	; (800c688 <tcpip_init+0x7c>)
 800c63c:	4813      	ldr	r0, [pc, #76]	; (800c68c <tcpip_init+0x80>)
 800c63e:	f00b f8e5 	bl	801780c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c642:	4813      	ldr	r0, [pc, #76]	; (800c690 <tcpip_init+0x84>)
 800c644:	f00b f810 	bl	8017668 <sys_mutex_new>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c64e:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <tcpip_init+0x78>)
 800c650:	f240 2265 	movw	r2, #613	; 0x265
 800c654:	490f      	ldr	r1, [pc, #60]	; (800c694 <tcpip_init+0x88>)
 800c656:	480d      	ldr	r0, [pc, #52]	; (800c68c <tcpip_init+0x80>)
 800c658:	f00b f8d8 	bl	801780c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c65c:	2318      	movs	r3, #24
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c664:	2200      	movs	r2, #0
 800c666:	490c      	ldr	r1, [pc, #48]	; (800c698 <tcpip_init+0x8c>)
 800c668:	480c      	ldr	r0, [pc, #48]	; (800c69c <tcpip_init+0x90>)
 800c66a:	f00b f82f 	bl	80176cc <sys_thread_new>
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	200049b0 	.word	0x200049b0
 800c67c:	200049b4 	.word	0x200049b4
 800c680:	200049b8 	.word	0x200049b8
 800c684:	0801997c 	.word	0x0801997c
 800c688:	08019a04 	.word	0x08019a04
 800c68c:	080199cc 	.word	0x080199cc
 800c690:	200081e0 	.word	0x200081e0
 800c694:	08019a28 	.word	0x08019a28
 800c698:	0800c39d 	.word	0x0800c39d
 800c69c:	08019a4c 	.word	0x08019a4c

0800c6a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	b21a      	sxth	r2, r3
 800c6b0:	88fb      	ldrh	r3, [r7, #6]
 800c6b2:	0a1b      	lsrs	r3, r3, #8
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	b21b      	sxth	r3, r3
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	b21b      	sxth	r3, r3
 800c6bc:	b29b      	uxth	r3, r3
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b083      	sub	sp, #12
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	061a      	lsls	r2, r3, #24
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	021b      	lsls	r3, r3, #8
 800c6da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6de:	431a      	orrs	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	0a1b      	lsrs	r3, r3, #8
 800c6e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	0e1b      	lsrs	r3, r3, #24
 800c6ee:	4313      	orrs	r3, r2
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c706:	f00a ffa3 	bl	8017650 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c70a:	f000 f8d5 	bl	800c8b8 <mem_init>
  memp_init();
 800c70e:	f000 fc31 	bl	800cf74 <memp_init>
  pbuf_init();
  netif_init();
 800c712:	f000 fcf7 	bl	800d104 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c716:	f008 f80f 	bl	8014738 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c71a:	f001 fe0b 	bl	800e334 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c71e:	f007 ff51 	bl	80145c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c722:	bf00      	nop
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
	...

0800c72c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c736:	4b05      	ldr	r3, [pc, #20]	; (800c74c <ptr_to_mem+0x20>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	88fb      	ldrh	r3, [r7, #6]
 800c73c:	4413      	add	r3, r2
}
 800c73e:	4618      	mov	r0, r3
 800c740:	370c      	adds	r7, #12
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	200049bc 	.word	0x200049bc

0800c750 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c758:	4b05      	ldr	r3, [pc, #20]	; (800c770 <mem_to_ptr+0x20>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	b29b      	uxth	r3, r3
}
 800c762:	4618      	mov	r0, r3
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	200049bc 	.word	0x200049bc

0800c774 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c774:	b590      	push	{r4, r7, lr}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c77c:	4b45      	ldr	r3, [pc, #276]	; (800c894 <plug_holes+0x120>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d206      	bcs.n	800c794 <plug_holes+0x20>
 800c786:	4b44      	ldr	r3, [pc, #272]	; (800c898 <plug_holes+0x124>)
 800c788:	f240 12df 	movw	r2, #479	; 0x1df
 800c78c:	4943      	ldr	r1, [pc, #268]	; (800c89c <plug_holes+0x128>)
 800c78e:	4844      	ldr	r0, [pc, #272]	; (800c8a0 <plug_holes+0x12c>)
 800c790:	f00b f83c 	bl	801780c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c794:	4b43      	ldr	r3, [pc, #268]	; (800c8a4 <plug_holes+0x130>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d306      	bcc.n	800c7ac <plug_holes+0x38>
 800c79e:	4b3e      	ldr	r3, [pc, #248]	; (800c898 <plug_holes+0x124>)
 800c7a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c7a4:	4940      	ldr	r1, [pc, #256]	; (800c8a8 <plug_holes+0x134>)
 800c7a6:	483e      	ldr	r0, [pc, #248]	; (800c8a0 <plug_holes+0x12c>)
 800c7a8:	f00b f830 	bl	801780c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	791b      	ldrb	r3, [r3, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d006      	beq.n	800c7c2 <plug_holes+0x4e>
 800c7b4:	4b38      	ldr	r3, [pc, #224]	; (800c898 <plug_holes+0x124>)
 800c7b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c7ba:	493c      	ldr	r1, [pc, #240]	; (800c8ac <plug_holes+0x138>)
 800c7bc:	4838      	ldr	r0, [pc, #224]	; (800c8a0 <plug_holes+0x12c>)
 800c7be:	f00b f825 	bl	801780c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	881b      	ldrh	r3, [r3, #0]
 800c7c6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c7ca:	d906      	bls.n	800c7da <plug_holes+0x66>
 800c7cc:	4b32      	ldr	r3, [pc, #200]	; (800c898 <plug_holes+0x124>)
 800c7ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c7d2:	4937      	ldr	r1, [pc, #220]	; (800c8b0 <plug_holes+0x13c>)
 800c7d4:	4832      	ldr	r0, [pc, #200]	; (800c8a0 <plug_holes+0x12c>)
 800c7d6:	f00b f819 	bl	801780c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7ff ffa4 	bl	800c72c <ptr_to_mem>
 800c7e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d024      	beq.n	800c838 <plug_holes+0xc4>
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	791b      	ldrb	r3, [r3, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d120      	bne.n	800c838 <plug_holes+0xc4>
 800c7f6:	4b2b      	ldr	r3, [pc, #172]	; (800c8a4 <plug_holes+0x130>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d01b      	beq.n	800c838 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c800:	4b2c      	ldr	r3, [pc, #176]	; (800c8b4 <plug_holes+0x140>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	429a      	cmp	r2, r3
 800c808:	d102      	bne.n	800c810 <plug_holes+0x9c>
      lfree = mem;
 800c80a:	4a2a      	ldr	r2, [pc, #168]	; (800c8b4 <plug_holes+0x140>)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	881a      	ldrh	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c820:	d00a      	beq.n	800c838 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff ff80 	bl	800c72c <ptr_to_mem>
 800c82c:	4604      	mov	r4, r0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff ff8e 	bl	800c750 <mem_to_ptr>
 800c834:	4603      	mov	r3, r0
 800c836:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	885b      	ldrh	r3, [r3, #2]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff ff75 	bl	800c72c <ptr_to_mem>
 800c842:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d01f      	beq.n	800c88c <plug_holes+0x118>
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	791b      	ldrb	r3, [r3, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d11b      	bne.n	800c88c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c854:	4b17      	ldr	r3, [pc, #92]	; (800c8b4 <plug_holes+0x140>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d102      	bne.n	800c864 <plug_holes+0xf0>
      lfree = pmem;
 800c85e:	4a15      	ldr	r2, [pc, #84]	; (800c8b4 <plug_holes+0x140>)
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	881a      	ldrh	r2, [r3, #0]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c874:	d00a      	beq.n	800c88c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff ff56 	bl	800c72c <ptr_to_mem>
 800c880:	4604      	mov	r4, r0
 800c882:	68b8      	ldr	r0, [r7, #8]
 800c884:	f7ff ff64 	bl	800c750 <mem_to_ptr>
 800c888:	4603      	mov	r3, r0
 800c88a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c88c:	bf00      	nop
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	bd90      	pop	{r4, r7, pc}
 800c894:	200049bc 	.word	0x200049bc
 800c898:	08019a5c 	.word	0x08019a5c
 800c89c:	08019a8c 	.word	0x08019a8c
 800c8a0:	08019aa4 	.word	0x08019aa4
 800c8a4:	200049c0 	.word	0x200049c0
 800c8a8:	08019acc 	.word	0x08019acc
 800c8ac:	08019ae8 	.word	0x08019ae8
 800c8b0:	08019b04 	.word	0x08019b04
 800c8b4:	200049c8 	.word	0x200049c8

0800c8b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c8be:	4b1f      	ldr	r3, [pc, #124]	; (800c93c <mem_init+0x84>)
 800c8c0:	3303      	adds	r3, #3
 800c8c2:	f023 0303 	bic.w	r3, r3, #3
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	4b1d      	ldr	r3, [pc, #116]	; (800c940 <mem_init+0x88>)
 800c8ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c8cc:	4b1c      	ldr	r3, [pc, #112]	; (800c940 <mem_init+0x88>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c8d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c8e6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c8ea:	f7ff ff1f 	bl	800c72c <ptr_to_mem>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	4a14      	ldr	r2, [pc, #80]	; (800c944 <mem_init+0x8c>)
 800c8f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c8f4:	4b13      	ldr	r3, [pc, #76]	; (800c944 <mem_init+0x8c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8fc:	4b11      	ldr	r3, [pc, #68]	; (800c944 <mem_init+0x8c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c904:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c906:	4b0f      	ldr	r3, [pc, #60]	; (800c944 <mem_init+0x8c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c90e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <mem_init+0x88>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a0c      	ldr	r2, [pc, #48]	; (800c948 <mem_init+0x90>)
 800c916:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c918:	480c      	ldr	r0, [pc, #48]	; (800c94c <mem_init+0x94>)
 800c91a:	f00a fea5 	bl	8017668 <sys_mutex_new>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d006      	beq.n	800c932 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c924:	4b0a      	ldr	r3, [pc, #40]	; (800c950 <mem_init+0x98>)
 800c926:	f240 221f 	movw	r2, #543	; 0x21f
 800c92a:	490a      	ldr	r1, [pc, #40]	; (800c954 <mem_init+0x9c>)
 800c92c:	480a      	ldr	r0, [pc, #40]	; (800c958 <mem_init+0xa0>)
 800c92e:	f00a ff6d 	bl	801780c <iprintf>
  }
}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	200081fc 	.word	0x200081fc
 800c940:	200049bc 	.word	0x200049bc
 800c944:	200049c0 	.word	0x200049c0
 800c948:	200049c8 	.word	0x200049c8
 800c94c:	200049c4 	.word	0x200049c4
 800c950:	08019a5c 	.word	0x08019a5c
 800c954:	08019b30 	.word	0x08019b30
 800c958:	08019aa4 	.word	0x08019aa4

0800c95c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7ff fef3 	bl	800c750 <mem_to_ptr>
 800c96a:	4603      	mov	r3, r0
 800c96c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff feda 	bl	800c72c <ptr_to_mem>
 800c978:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	885b      	ldrh	r3, [r3, #2]
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff fed4 	bl	800c72c <ptr_to_mem>
 800c984:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c98e:	d818      	bhi.n	800c9c2 <mem_link_valid+0x66>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	885b      	ldrh	r3, [r3, #2]
 800c994:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c998:	d813      	bhi.n	800c9c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c99e:	8afa      	ldrh	r2, [r7, #22]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d004      	beq.n	800c9ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	8afa      	ldrh	r2, [r7, #22]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d109      	bne.n	800c9c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c9ae:	4b08      	ldr	r3, [pc, #32]	; (800c9d0 <mem_link_valid+0x74>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d006      	beq.n	800c9c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	885b      	ldrh	r3, [r3, #2]
 800c9bc:	8afa      	ldrh	r2, [r7, #22]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d001      	beq.n	800c9c6 <mem_link_valid+0x6a>
    return 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e000      	b.n	800c9c8 <mem_link_valid+0x6c>
  }
  return 1;
 800c9c6:	2301      	movs	r3, #1
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	200049c0 	.word	0x200049c0

0800c9d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b088      	sub	sp, #32
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d070      	beq.n	800cac4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f003 0303 	and.w	r3, r3, #3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00d      	beq.n	800ca08 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c9ec:	4b37      	ldr	r3, [pc, #220]	; (800cacc <mem_free+0xf8>)
 800c9ee:	f240 2273 	movw	r2, #627	; 0x273
 800c9f2:	4937      	ldr	r1, [pc, #220]	; (800cad0 <mem_free+0xfc>)
 800c9f4:	4837      	ldr	r0, [pc, #220]	; (800cad4 <mem_free+0x100>)
 800c9f6:	f00a ff09 	bl	801780c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9fa:	f00a fe87 	bl	801770c <sys_arch_protect>
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f00a fe91 	bl	8017728 <sys_arch_unprotect>
    return;
 800ca06:	e05e      	b.n	800cac6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3b08      	subs	r3, #8
 800ca0c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ca0e:	4b32      	ldr	r3, [pc, #200]	; (800cad8 <mem_free+0x104>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69fa      	ldr	r2, [r7, #28]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d306      	bcc.n	800ca26 <mem_free+0x52>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f103 020c 	add.w	r2, r3, #12
 800ca1e:	4b2f      	ldr	r3, [pc, #188]	; (800cadc <mem_free+0x108>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d90d      	bls.n	800ca42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ca26:	4b29      	ldr	r3, [pc, #164]	; (800cacc <mem_free+0xf8>)
 800ca28:	f240 227f 	movw	r2, #639	; 0x27f
 800ca2c:	492c      	ldr	r1, [pc, #176]	; (800cae0 <mem_free+0x10c>)
 800ca2e:	4829      	ldr	r0, [pc, #164]	; (800cad4 <mem_free+0x100>)
 800ca30:	f00a feec 	bl	801780c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca34:	f00a fe6a 	bl	801770c <sys_arch_protect>
 800ca38:	6138      	str	r0, [r7, #16]
 800ca3a:	6938      	ldr	r0, [r7, #16]
 800ca3c:	f00a fe74 	bl	8017728 <sys_arch_unprotect>
    return;
 800ca40:	e041      	b.n	800cac6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca42:	4828      	ldr	r0, [pc, #160]	; (800cae4 <mem_free+0x110>)
 800ca44:	f00a fe26 	bl	8017694 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d110      	bne.n	800ca72 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca50:	4b1e      	ldr	r3, [pc, #120]	; (800cacc <mem_free+0xf8>)
 800ca52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca56:	4924      	ldr	r1, [pc, #144]	; (800cae8 <mem_free+0x114>)
 800ca58:	481e      	ldr	r0, [pc, #120]	; (800cad4 <mem_free+0x100>)
 800ca5a:	f00a fed7 	bl	801780c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca5e:	4821      	ldr	r0, [pc, #132]	; (800cae4 <mem_free+0x110>)
 800ca60:	f00a fe27 	bl	80176b2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca64:	f00a fe52 	bl	801770c <sys_arch_protect>
 800ca68:	6178      	str	r0, [r7, #20]
 800ca6a:	6978      	ldr	r0, [r7, #20]
 800ca6c:	f00a fe5c 	bl	8017728 <sys_arch_unprotect>
    return;
 800ca70:	e029      	b.n	800cac6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca72:	69f8      	ldr	r0, [r7, #28]
 800ca74:	f7ff ff72 	bl	800c95c <mem_link_valid>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d110      	bne.n	800caa0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <mem_free+0xf8>)
 800ca80:	f240 2295 	movw	r2, #661	; 0x295
 800ca84:	4919      	ldr	r1, [pc, #100]	; (800caec <mem_free+0x118>)
 800ca86:	4813      	ldr	r0, [pc, #76]	; (800cad4 <mem_free+0x100>)
 800ca88:	f00a fec0 	bl	801780c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca8c:	4815      	ldr	r0, [pc, #84]	; (800cae4 <mem_free+0x110>)
 800ca8e:	f00a fe10 	bl	80176b2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca92:	f00a fe3b 	bl	801770c <sys_arch_protect>
 800ca96:	61b8      	str	r0, [r7, #24]
 800ca98:	69b8      	ldr	r0, [r7, #24]
 800ca9a:	f00a fe45 	bl	8017728 <sys_arch_unprotect>
    return;
 800ca9e:	e012      	b.n	800cac6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2200      	movs	r2, #0
 800caa4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800caa6:	4b12      	ldr	r3, [pc, #72]	; (800caf0 <mem_free+0x11c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69fa      	ldr	r2, [r7, #28]
 800caac:	429a      	cmp	r2, r3
 800caae:	d202      	bcs.n	800cab6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cab0:	4a0f      	ldr	r2, [pc, #60]	; (800caf0 <mem_free+0x11c>)
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cab6:	69f8      	ldr	r0, [r7, #28]
 800cab8:	f7ff fe5c 	bl	800c774 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cabc:	4809      	ldr	r0, [pc, #36]	; (800cae4 <mem_free+0x110>)
 800cabe:	f00a fdf8 	bl	80176b2 <sys_mutex_unlock>
 800cac2:	e000      	b.n	800cac6 <mem_free+0xf2>
    return;
 800cac4:	bf00      	nop
}
 800cac6:	3720      	adds	r7, #32
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	08019a5c 	.word	0x08019a5c
 800cad0:	08019b4c 	.word	0x08019b4c
 800cad4:	08019aa4 	.word	0x08019aa4
 800cad8:	200049bc 	.word	0x200049bc
 800cadc:	200049c0 	.word	0x200049c0
 800cae0:	08019b70 	.word	0x08019b70
 800cae4:	200049c4 	.word	0x200049c4
 800cae8:	08019b8c 	.word	0x08019b8c
 800caec:	08019bb4 	.word	0x08019bb4
 800caf0:	200049c8 	.word	0x200049c8

0800caf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b088      	sub	sp, #32
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cb00:	887b      	ldrh	r3, [r7, #2]
 800cb02:	3303      	adds	r3, #3
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	f023 0303 	bic.w	r3, r3, #3
 800cb0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cb0c:	8bfb      	ldrh	r3, [r7, #30]
 800cb0e:	2b0b      	cmp	r3, #11
 800cb10:	d801      	bhi.n	800cb16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cb12:	230c      	movs	r3, #12
 800cb14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cb16:	8bfb      	ldrh	r3, [r7, #30]
 800cb18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cb1c:	d803      	bhi.n	800cb26 <mem_trim+0x32>
 800cb1e:	8bfa      	ldrh	r2, [r7, #30]
 800cb20:	887b      	ldrh	r3, [r7, #2]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d201      	bcs.n	800cb2a <mem_trim+0x36>
    return NULL;
 800cb26:	2300      	movs	r3, #0
 800cb28:	e0d8      	b.n	800ccdc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cb2a:	4b6e      	ldr	r3, [pc, #440]	; (800cce4 <mem_trim+0x1f0>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d304      	bcc.n	800cb3e <mem_trim+0x4a>
 800cb34:	4b6c      	ldr	r3, [pc, #432]	; (800cce8 <mem_trim+0x1f4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d306      	bcc.n	800cb4c <mem_trim+0x58>
 800cb3e:	4b6b      	ldr	r3, [pc, #428]	; (800ccec <mem_trim+0x1f8>)
 800cb40:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb44:	496a      	ldr	r1, [pc, #424]	; (800ccf0 <mem_trim+0x1fc>)
 800cb46:	486b      	ldr	r0, [pc, #428]	; (800ccf4 <mem_trim+0x200>)
 800cb48:	f00a fe60 	bl	801780c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb4c:	4b65      	ldr	r3, [pc, #404]	; (800cce4 <mem_trim+0x1f0>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d304      	bcc.n	800cb60 <mem_trim+0x6c>
 800cb56:	4b64      	ldr	r3, [pc, #400]	; (800cce8 <mem_trim+0x1f4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d307      	bcc.n	800cb70 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb60:	f00a fdd4 	bl	801770c <sys_arch_protect>
 800cb64:	60b8      	str	r0, [r7, #8]
 800cb66:	68b8      	ldr	r0, [r7, #8]
 800cb68:	f00a fdde 	bl	8017728 <sys_arch_unprotect>
    return rmem;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	e0b5      	b.n	800ccdc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	3b08      	subs	r3, #8
 800cb74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb76:	69b8      	ldr	r0, [r7, #24]
 800cb78:	f7ff fdea 	bl	800c750 <mem_to_ptr>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	881a      	ldrh	r2, [r3, #0]
 800cb84:	8afb      	ldrh	r3, [r7, #22]
 800cb86:	1ad3      	subs	r3, r2, r3
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	3b08      	subs	r3, #8
 800cb8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb8e:	8bfa      	ldrh	r2, [r7, #30]
 800cb90:	8abb      	ldrh	r3, [r7, #20]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d906      	bls.n	800cba4 <mem_trim+0xb0>
 800cb96:	4b55      	ldr	r3, [pc, #340]	; (800ccec <mem_trim+0x1f8>)
 800cb98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb9c:	4956      	ldr	r1, [pc, #344]	; (800ccf8 <mem_trim+0x204>)
 800cb9e:	4855      	ldr	r0, [pc, #340]	; (800ccf4 <mem_trim+0x200>)
 800cba0:	f00a fe34 	bl	801780c <iprintf>
  if (newsize > size) {
 800cba4:	8bfa      	ldrh	r2, [r7, #30]
 800cba6:	8abb      	ldrh	r3, [r7, #20]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d901      	bls.n	800cbb0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	e095      	b.n	800ccdc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cbb0:	8bfa      	ldrh	r2, [r7, #30]
 800cbb2:	8abb      	ldrh	r3, [r7, #20]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d101      	bne.n	800cbbc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	e08f      	b.n	800ccdc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cbbc:	484f      	ldr	r0, [pc, #316]	; (800ccfc <mem_trim+0x208>)
 800cbbe:	f00a fd69 	bl	8017694 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7ff fdb0 	bl	800c72c <ptr_to_mem>
 800cbcc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	791b      	ldrb	r3, [r3, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d13f      	bne.n	800cc56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cbde:	d106      	bne.n	800cbee <mem_trim+0xfa>
 800cbe0:	4b42      	ldr	r3, [pc, #264]	; (800ccec <mem_trim+0x1f8>)
 800cbe2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cbe6:	4946      	ldr	r1, [pc, #280]	; (800cd00 <mem_trim+0x20c>)
 800cbe8:	4842      	ldr	r0, [pc, #264]	; (800ccf4 <mem_trim+0x200>)
 800cbea:	f00a fe0f 	bl	801780c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbf4:	8afa      	ldrh	r2, [r7, #22]
 800cbf6:	8bfb      	ldrh	r3, [r7, #30]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cc00:	4b40      	ldr	r3, [pc, #256]	; (800cd04 <mem_trim+0x210>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d106      	bne.n	800cc18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cc0a:	89fb      	ldrh	r3, [r7, #14]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff fd8d 	bl	800c72c <ptr_to_mem>
 800cc12:	4603      	mov	r3, r0
 800cc14:	4a3b      	ldr	r2, [pc, #236]	; (800cd04 <mem_trim+0x210>)
 800cc16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cc18:	89fb      	ldrh	r3, [r7, #14]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff fd86 	bl	800c72c <ptr_to_mem>
 800cc20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	2200      	movs	r2, #0
 800cc26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	89ba      	ldrh	r2, [r7, #12]
 800cc2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	8afa      	ldrh	r2, [r7, #22]
 800cc32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	89fa      	ldrh	r2, [r7, #14]
 800cc38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc42:	d047      	beq.n	800ccd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff fd6f 	bl	800c72c <ptr_to_mem>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	89fb      	ldrh	r3, [r7, #14]
 800cc52:	8053      	strh	r3, [r2, #2]
 800cc54:	e03e      	b.n	800ccd4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc56:	8bfb      	ldrh	r3, [r7, #30]
 800cc58:	f103 0214 	add.w	r2, r3, #20
 800cc5c:	8abb      	ldrh	r3, [r7, #20]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d838      	bhi.n	800ccd4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc62:	8afa      	ldrh	r2, [r7, #22]
 800cc64:	8bfb      	ldrh	r3, [r7, #30]
 800cc66:	4413      	add	r3, r2
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc76:	d106      	bne.n	800cc86 <mem_trim+0x192>
 800cc78:	4b1c      	ldr	r3, [pc, #112]	; (800ccec <mem_trim+0x1f8>)
 800cc7a:	f240 3216 	movw	r2, #790	; 0x316
 800cc7e:	4920      	ldr	r1, [pc, #128]	; (800cd00 <mem_trim+0x20c>)
 800cc80:	481c      	ldr	r0, [pc, #112]	; (800ccf4 <mem_trim+0x200>)
 800cc82:	f00a fdc3 	bl	801780c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc86:	89fb      	ldrh	r3, [r7, #14]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff fd4f 	bl	800c72c <ptr_to_mem>
 800cc8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc90:	4b1c      	ldr	r3, [pc, #112]	; (800cd04 <mem_trim+0x210>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d202      	bcs.n	800cca0 <mem_trim+0x1ac>
      lfree = mem2;
 800cc9a:	4a1a      	ldr	r2, [pc, #104]	; (800cd04 <mem_trim+0x210>)
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	2200      	movs	r2, #0
 800cca4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	881a      	ldrh	r2, [r3, #0]
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	8afa      	ldrh	r2, [r7, #22]
 800ccb2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	89fa      	ldrh	r2, [r7, #14]
 800ccb8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ccc2:	d007      	beq.n	800ccd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff fd2f 	bl	800c72c <ptr_to_mem>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
 800ccd2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ccd4:	4809      	ldr	r0, [pc, #36]	; (800ccfc <mem_trim+0x208>)
 800ccd6:	f00a fcec 	bl	80176b2 <sys_mutex_unlock>
  return rmem;
 800ccda:	687b      	ldr	r3, [r7, #4]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3720      	adds	r7, #32
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	200049bc 	.word	0x200049bc
 800cce8:	200049c0 	.word	0x200049c0
 800ccec:	08019a5c 	.word	0x08019a5c
 800ccf0:	08019be8 	.word	0x08019be8
 800ccf4:	08019aa4 	.word	0x08019aa4
 800ccf8:	08019c00 	.word	0x08019c00
 800ccfc:	200049c4 	.word	0x200049c4
 800cd00:	08019c20 	.word	0x08019c20
 800cd04:	200049c8 	.word	0x200049c8

0800cd08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cd12:	88fb      	ldrh	r3, [r7, #6]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <mem_malloc+0x14>
    return NULL;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	e0e2      	b.n	800cee2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cd1c:	88fb      	ldrh	r3, [r7, #6]
 800cd1e:	3303      	adds	r3, #3
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	f023 0303 	bic.w	r3, r3, #3
 800cd26:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cd28:	8bbb      	ldrh	r3, [r7, #28]
 800cd2a:	2b0b      	cmp	r3, #11
 800cd2c:	d801      	bhi.n	800cd32 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cd2e:	230c      	movs	r3, #12
 800cd30:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cd32:	8bbb      	ldrh	r3, [r7, #28]
 800cd34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd38:	d803      	bhi.n	800cd42 <mem_malloc+0x3a>
 800cd3a:	8bba      	ldrh	r2, [r7, #28]
 800cd3c:	88fb      	ldrh	r3, [r7, #6]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d201      	bcs.n	800cd46 <mem_malloc+0x3e>
    return NULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	e0cd      	b.n	800cee2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cd46:	4869      	ldr	r0, [pc, #420]	; (800ceec <mem_malloc+0x1e4>)
 800cd48:	f00a fca4 	bl	8017694 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd4c:	4b68      	ldr	r3, [pc, #416]	; (800cef0 <mem_malloc+0x1e8>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff fcfd 	bl	800c750 <mem_to_ptr>
 800cd56:	4603      	mov	r3, r0
 800cd58:	83fb      	strh	r3, [r7, #30]
 800cd5a:	e0b7      	b.n	800cecc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd5c:	8bfb      	ldrh	r3, [r7, #30]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff fce4 	bl	800c72c <ptr_to_mem>
 800cd64:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	791b      	ldrb	r3, [r3, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f040 80a7 	bne.w	800cebe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	461a      	mov	r2, r3
 800cd76:	8bfb      	ldrh	r3, [r7, #30]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	f1a3 0208 	sub.w	r2, r3, #8
 800cd7e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd80:	429a      	cmp	r2, r3
 800cd82:	f0c0 809c 	bcc.w	800cebe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	8bfb      	ldrh	r3, [r7, #30]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	f1a3 0208 	sub.w	r2, r3, #8
 800cd94:	8bbb      	ldrh	r3, [r7, #28]
 800cd96:	3314      	adds	r3, #20
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d333      	bcc.n	800ce04 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd9c:	8bfa      	ldrh	r2, [r7, #30]
 800cd9e:	8bbb      	ldrh	r3, [r7, #28]
 800cda0:	4413      	add	r3, r2
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	3308      	adds	r3, #8
 800cda6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cda8:	8a7b      	ldrh	r3, [r7, #18]
 800cdaa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdae:	d106      	bne.n	800cdbe <mem_malloc+0xb6>
 800cdb0:	4b50      	ldr	r3, [pc, #320]	; (800cef4 <mem_malloc+0x1ec>)
 800cdb2:	f240 3287 	movw	r2, #903	; 0x387
 800cdb6:	4950      	ldr	r1, [pc, #320]	; (800cef8 <mem_malloc+0x1f0>)
 800cdb8:	4850      	ldr	r0, [pc, #320]	; (800cefc <mem_malloc+0x1f4>)
 800cdba:	f00a fd27 	bl	801780c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cdbe:	8a7b      	ldrh	r3, [r7, #18]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fcb3 	bl	800c72c <ptr_to_mem>
 800cdc6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	881a      	ldrh	r2, [r3, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	8bfa      	ldrh	r2, [r7, #30]
 800cdda:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	8a7a      	ldrh	r2, [r7, #18]
 800cde0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2201      	movs	r2, #1
 800cde6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdf0:	d00b      	beq.n	800ce0a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7ff fc98 	bl	800c72c <ptr_to_mem>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	8a7b      	ldrh	r3, [r7, #18]
 800ce00:	8053      	strh	r3, [r2, #2]
 800ce02:	e002      	b.n	800ce0a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2201      	movs	r2, #1
 800ce08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce0a:	4b39      	ldr	r3, [pc, #228]	; (800cef0 <mem_malloc+0x1e8>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d127      	bne.n	800ce64 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ce14:	4b36      	ldr	r3, [pc, #216]	; (800cef0 <mem_malloc+0x1e8>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ce1a:	e005      	b.n	800ce28 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fc83 	bl	800c72c <ptr_to_mem>
 800ce26:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	791b      	ldrb	r3, [r3, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d004      	beq.n	800ce3a <mem_malloc+0x132>
 800ce30:	4b33      	ldr	r3, [pc, #204]	; (800cf00 <mem_malloc+0x1f8>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d1f0      	bne.n	800ce1c <mem_malloc+0x114>
          }
          lfree = cur;
 800ce3a:	4a2d      	ldr	r2, [pc, #180]	; (800cef0 <mem_malloc+0x1e8>)
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce40:	4b2b      	ldr	r3, [pc, #172]	; (800cef0 <mem_malloc+0x1e8>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	4b2e      	ldr	r3, [pc, #184]	; (800cf00 <mem_malloc+0x1f8>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d00b      	beq.n	800ce64 <mem_malloc+0x15c>
 800ce4c:	4b28      	ldr	r3, [pc, #160]	; (800cef0 <mem_malloc+0x1e8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	791b      	ldrb	r3, [r3, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d006      	beq.n	800ce64 <mem_malloc+0x15c>
 800ce56:	4b27      	ldr	r3, [pc, #156]	; (800cef4 <mem_malloc+0x1ec>)
 800ce58:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce5c:	4929      	ldr	r1, [pc, #164]	; (800cf04 <mem_malloc+0x1fc>)
 800ce5e:	4827      	ldr	r0, [pc, #156]	; (800cefc <mem_malloc+0x1f4>)
 800ce60:	f00a fcd4 	bl	801780c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce64:	4821      	ldr	r0, [pc, #132]	; (800ceec <mem_malloc+0x1e4>)
 800ce66:	f00a fc24 	bl	80176b2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce6a:	8bba      	ldrh	r2, [r7, #28]
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	4413      	add	r3, r2
 800ce70:	3308      	adds	r3, #8
 800ce72:	4a23      	ldr	r2, [pc, #140]	; (800cf00 <mem_malloc+0x1f8>)
 800ce74:	6812      	ldr	r2, [r2, #0]
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d906      	bls.n	800ce88 <mem_malloc+0x180>
 800ce7a:	4b1e      	ldr	r3, [pc, #120]	; (800cef4 <mem_malloc+0x1ec>)
 800ce7c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce80:	4921      	ldr	r1, [pc, #132]	; (800cf08 <mem_malloc+0x200>)
 800ce82:	481e      	ldr	r0, [pc, #120]	; (800cefc <mem_malloc+0x1f4>)
 800ce84:	f00a fcc2 	bl	801780c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	f003 0303 	and.w	r3, r3, #3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d006      	beq.n	800cea0 <mem_malloc+0x198>
 800ce92:	4b18      	ldr	r3, [pc, #96]	; (800cef4 <mem_malloc+0x1ec>)
 800ce94:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce98:	491c      	ldr	r1, [pc, #112]	; (800cf0c <mem_malloc+0x204>)
 800ce9a:	4818      	ldr	r0, [pc, #96]	; (800cefc <mem_malloc+0x1f4>)
 800ce9c:	f00a fcb6 	bl	801780c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f003 0303 	and.w	r3, r3, #3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <mem_malloc+0x1b0>
 800ceaa:	4b12      	ldr	r3, [pc, #72]	; (800cef4 <mem_malloc+0x1ec>)
 800ceac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ceb0:	4917      	ldr	r1, [pc, #92]	; (800cf10 <mem_malloc+0x208>)
 800ceb2:	4812      	ldr	r0, [pc, #72]	; (800cefc <mem_malloc+0x1f4>)
 800ceb4:	f00a fcaa 	bl	801780c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	3308      	adds	r3, #8
 800cebc:	e011      	b.n	800cee2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cebe:	8bfb      	ldrh	r3, [r7, #30]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff fc33 	bl	800c72c <ptr_to_mem>
 800cec6:	4603      	mov	r3, r0
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cecc:	8bfa      	ldrh	r2, [r7, #30]
 800cece:	8bbb      	ldrh	r3, [r7, #28]
 800ced0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ced4:	429a      	cmp	r2, r3
 800ced6:	f4ff af41 	bcc.w	800cd5c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ceda:	4804      	ldr	r0, [pc, #16]	; (800ceec <mem_malloc+0x1e4>)
 800cedc:	f00a fbe9 	bl	80176b2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3720      	adds	r7, #32
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	200049c4 	.word	0x200049c4
 800cef0:	200049c8 	.word	0x200049c8
 800cef4:	08019a5c 	.word	0x08019a5c
 800cef8:	08019c20 	.word	0x08019c20
 800cefc:	08019aa4 	.word	0x08019aa4
 800cf00:	200049c0 	.word	0x200049c0
 800cf04:	08019c34 	.word	0x08019c34
 800cf08:	08019c50 	.word	0x08019c50
 800cf0c:	08019c80 	.word	0x08019c80
 800cf10:	08019cb0 	.word	0x08019cb0

0800cf14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	3303      	adds	r3, #3
 800cf2a:	f023 0303 	bic.w	r3, r3, #3
 800cf2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cf30:	2300      	movs	r3, #0
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e011      	b.n	800cf5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	881b      	ldrh	r3, [r3, #0]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4413      	add	r3, r2
 800cf52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3301      	adds	r3, #1
 800cf58:	60fb      	str	r3, [r7, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	885b      	ldrh	r3, [r3, #2]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4293      	cmp	r3, r2
 800cf64:	dbe7      	blt.n	800cf36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	80fb      	strh	r3, [r7, #6]
 800cf7e:	e009      	b.n	800cf94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf80:	88fb      	ldrh	r3, [r7, #6]
 800cf82:	4a08      	ldr	r2, [pc, #32]	; (800cfa4 <memp_init+0x30>)
 800cf84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7ff ffc3 	bl	800cf14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	3301      	adds	r3, #1
 800cf92:	80fb      	strh	r3, [r7, #6]
 800cf94:	88fb      	ldrh	r3, [r7, #6]
 800cf96:	2b0c      	cmp	r3, #12
 800cf98:	d9f2      	bls.n	800cf80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf9a:	bf00      	nop
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	0801c504 	.word	0x0801c504

0800cfa8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cfb0:	f00a fbac 	bl	801770c <sys_arch_protect>
 800cfb4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d015      	beq.n	800cff0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	6812      	ldr	r2, [r2, #0]
 800cfcc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f003 0303 	and.w	r3, r3, #3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d006      	beq.n	800cfe6 <do_memp_malloc_pool+0x3e>
 800cfd8:	4b09      	ldr	r3, [pc, #36]	; (800d000 <do_memp_malloc_pool+0x58>)
 800cfda:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cfde:	4909      	ldr	r1, [pc, #36]	; (800d004 <do_memp_malloc_pool+0x5c>)
 800cfe0:	4809      	ldr	r0, [pc, #36]	; (800d008 <do_memp_malloc_pool+0x60>)
 800cfe2:	f00a fc13 	bl	801780c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f00a fb9e 	bl	8017728 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	e003      	b.n	800cff8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f00a fb99 	bl	8017728 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	08019cd4 	.word	0x08019cd4
 800d004:	08019d04 	.word	0x08019d04
 800d008:	08019d28 	.word	0x08019d28

0800d00c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	2b0c      	cmp	r3, #12
 800d01a:	d908      	bls.n	800d02e <memp_malloc+0x22>
 800d01c:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <memp_malloc+0x3c>)
 800d01e:	f240 1257 	movw	r2, #343	; 0x157
 800d022:	490a      	ldr	r1, [pc, #40]	; (800d04c <memp_malloc+0x40>)
 800d024:	480a      	ldr	r0, [pc, #40]	; (800d050 <memp_malloc+0x44>)
 800d026:	f00a fbf1 	bl	801780c <iprintf>
 800d02a:	2300      	movs	r3, #0
 800d02c:	e008      	b.n	800d040 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	4a08      	ldr	r2, [pc, #32]	; (800d054 <memp_malloc+0x48>)
 800d032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff ffb6 	bl	800cfa8 <do_memp_malloc_pool>
 800d03c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d03e:	68fb      	ldr	r3, [r7, #12]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	08019cd4 	.word	0x08019cd4
 800d04c:	08019d64 	.word	0x08019d64
 800d050:	08019d28 	.word	0x08019d28
 800d054:	0801c504 	.word	0x0801c504

0800d058 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	f003 0303 	and.w	r3, r3, #3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d006      	beq.n	800d07a <do_memp_free_pool+0x22>
 800d06c:	4b0d      	ldr	r3, [pc, #52]	; (800d0a4 <do_memp_free_pool+0x4c>)
 800d06e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d072:	490d      	ldr	r1, [pc, #52]	; (800d0a8 <do_memp_free_pool+0x50>)
 800d074:	480d      	ldr	r0, [pc, #52]	; (800d0ac <do_memp_free_pool+0x54>)
 800d076:	f00a fbc9 	bl	801780c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d07e:	f00a fb45 	bl	801770c <sys_arch_protect>
 800d082:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d096:	68b8      	ldr	r0, [r7, #8]
 800d098:	f00a fb46 	bl	8017728 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d09c:	bf00      	nop
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	08019cd4 	.word	0x08019cd4
 800d0a8:	08019d84 	.word	0x08019d84
 800d0ac:	08019d28 	.word	0x08019d28

0800d0b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	6039      	str	r1, [r7, #0]
 800d0ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	2b0c      	cmp	r3, #12
 800d0c0:	d907      	bls.n	800d0d2 <memp_free+0x22>
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <memp_free+0x44>)
 800d0c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d0c8:	490b      	ldr	r1, [pc, #44]	; (800d0f8 <memp_free+0x48>)
 800d0ca:	480c      	ldr	r0, [pc, #48]	; (800d0fc <memp_free+0x4c>)
 800d0cc:	f00a fb9e 	bl	801780c <iprintf>
 800d0d0:	e00c      	b.n	800d0ec <memp_free+0x3c>

  if (mem == NULL) {
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d008      	beq.n	800d0ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	4a09      	ldr	r2, [pc, #36]	; (800d100 <memp_free+0x50>)
 800d0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff ffb8 	bl	800d058 <do_memp_free_pool>
 800d0e8:	e000      	b.n	800d0ec <memp_free+0x3c>
    return;
 800d0ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	08019cd4 	.word	0x08019cd4
 800d0f8:	08019da4 	.word	0x08019da4
 800d0fc:	08019d28 	.word	0x08019d28
 800d100:	0801c504 	.word	0x0801c504

0800d104 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d108:	bf00      	nop
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
	...

0800d114 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d108      	bne.n	800d13a <netif_add+0x26>
 800d128:	4b57      	ldr	r3, [pc, #348]	; (800d288 <netif_add+0x174>)
 800d12a:	f240 1227 	movw	r2, #295	; 0x127
 800d12e:	4957      	ldr	r1, [pc, #348]	; (800d28c <netif_add+0x178>)
 800d130:	4857      	ldr	r0, [pc, #348]	; (800d290 <netif_add+0x17c>)
 800d132:	f00a fb6b 	bl	801780c <iprintf>
 800d136:	2300      	movs	r3, #0
 800d138:	e0a2      	b.n	800d280 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d108      	bne.n	800d152 <netif_add+0x3e>
 800d140:	4b51      	ldr	r3, [pc, #324]	; (800d288 <netif_add+0x174>)
 800d142:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d146:	4953      	ldr	r1, [pc, #332]	; (800d294 <netif_add+0x180>)
 800d148:	4851      	ldr	r0, [pc, #324]	; (800d290 <netif_add+0x17c>)
 800d14a:	f00a fb5f 	bl	801780c <iprintf>
 800d14e:	2300      	movs	r3, #0
 800d150:	e096      	b.n	800d280 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d158:	4b4f      	ldr	r3, [pc, #316]	; (800d298 <netif_add+0x184>)
 800d15a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d162:	4b4d      	ldr	r3, [pc, #308]	; (800d298 <netif_add+0x184>)
 800d164:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d16c:	4b4a      	ldr	r3, [pc, #296]	; (800d298 <netif_add+0x184>)
 800d16e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	4a45      	ldr	r2, [pc, #276]	; (800d29c <netif_add+0x188>)
 800d186:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6a3a      	ldr	r2, [r7, #32]
 800d1a0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d1a2:	4b3f      	ldr	r3, [pc, #252]	; (800d2a0 <netif_add+0x18c>)
 800d1a4:	781a      	ldrb	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 f913 	bl	800d3e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	4798      	blx	r3
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <netif_add+0xba>
    return NULL;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e058      	b.n	800d280 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1d4:	2bff      	cmp	r3, #255	; 0xff
 800d1d6:	d103      	bne.n	800d1e0 <netif_add+0xcc>
        netif->num = 0;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1e4:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <netif_add+0x190>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	617b      	str	r3, [r7, #20]
 800d1ea:	e02b      	b.n	800d244 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d1ec:	697a      	ldr	r2, [r7, #20]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d106      	bne.n	800d202 <netif_add+0xee>
 800d1f4:	4b24      	ldr	r3, [pc, #144]	; (800d288 <netif_add+0x174>)
 800d1f6:	f240 128b 	movw	r2, #395	; 0x18b
 800d1fa:	492b      	ldr	r1, [pc, #172]	; (800d2a8 <netif_add+0x194>)
 800d1fc:	4824      	ldr	r0, [pc, #144]	; (800d290 <netif_add+0x17c>)
 800d1fe:	f00a fb05 	bl	801780c <iprintf>
        num_netifs++;
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	3301      	adds	r3, #1
 800d206:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	2bff      	cmp	r3, #255	; 0xff
 800d20c:	dd06      	ble.n	800d21c <netif_add+0x108>
 800d20e:	4b1e      	ldr	r3, [pc, #120]	; (800d288 <netif_add+0x174>)
 800d210:	f240 128d 	movw	r2, #397	; 0x18d
 800d214:	4925      	ldr	r1, [pc, #148]	; (800d2ac <netif_add+0x198>)
 800d216:	481e      	ldr	r0, [pc, #120]	; (800d290 <netif_add+0x17c>)
 800d218:	f00a faf8 	bl	801780c <iprintf>
        if (netif2->num == netif->num) {
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d228:	429a      	cmp	r2, r3
 800d22a:	d108      	bne.n	800d23e <netif_add+0x12a>
          netif->num++;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d232:	3301      	adds	r3, #1
 800d234:	b2da      	uxtb	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d23c:	e005      	b.n	800d24a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1d0      	bne.n	800d1ec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1be      	bne.n	800d1ce <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d256:	2bfe      	cmp	r3, #254	; 0xfe
 800d258:	d103      	bne.n	800d262 <netif_add+0x14e>
    netif_num = 0;
 800d25a:	4b11      	ldr	r3, [pc, #68]	; (800d2a0 <netif_add+0x18c>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	701a      	strb	r2, [r3, #0]
 800d260:	e006      	b.n	800d270 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d268:	3301      	adds	r3, #1
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <netif_add+0x18c>)
 800d26e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d270:	4b0c      	ldr	r3, [pc, #48]	; (800d2a4 <netif_add+0x190>)
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d278:	4a0a      	ldr	r2, [pc, #40]	; (800d2a4 <netif_add+0x190>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d27e:	68fb      	ldr	r3, [r7, #12]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	08019dc0 	.word	0x08019dc0
 800d28c:	08019e54 	.word	0x08019e54
 800d290:	08019e10 	.word	0x08019e10
 800d294:	08019e70 	.word	0x08019e70
 800d298:	0801c578 	.word	0x0801c578
 800d29c:	0800d6bf 	.word	0x0800d6bf
 800d2a0:	20004a00 	.word	0x20004a00
 800d2a4:	200114e8 	.word	0x200114e8
 800d2a8:	08019e94 	.word	0x08019e94
 800d2ac:	08019ea8 	.word	0x08019ea8

0800d2b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f002 fe57 	bl	800ff70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f007 fd07 	bl	8014cd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <netif_do_set_ipaddr+0x20>
 800d2e6:	4b1d      	ldr	r3, [pc, #116]	; (800d35c <netif_do_set_ipaddr+0x88>)
 800d2e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d2ec:	491c      	ldr	r1, [pc, #112]	; (800d360 <netif_do_set_ipaddr+0x8c>)
 800d2ee:	481d      	ldr	r0, [pc, #116]	; (800d364 <netif_do_set_ipaddr+0x90>)
 800d2f0:	f00a fa8c 	bl	801780c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <netif_do_set_ipaddr+0x34>
 800d2fa:	4b18      	ldr	r3, [pc, #96]	; (800d35c <netif_do_set_ipaddr+0x88>)
 800d2fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d300:	4917      	ldr	r1, [pc, #92]	; (800d360 <netif_do_set_ipaddr+0x8c>)
 800d302:	4818      	ldr	r0, [pc, #96]	; (800d364 <netif_do_set_ipaddr+0x90>)
 800d304:	f00a fa82 	bl	801780c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	3304      	adds	r3, #4
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	429a      	cmp	r2, r3
 800d314:	d01c      	beq.n	800d350 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3304      	adds	r3, #4
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d326:	f107 0314 	add.w	r3, r7, #20
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f7ff ffbf 	bl	800d2b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d002      	beq.n	800d33e <netif_do_set_ipaddr+0x6a>
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	e000      	b.n	800d340 <netif_do_set_ipaddr+0x6c>
 800d33e:	2300      	movs	r3, #0
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d344:	2101      	movs	r1, #1
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f000 f8d2 	bl	800d4f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d34c:	2301      	movs	r3, #1
 800d34e:	e000      	b.n	800d352 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	08019dc0 	.word	0x08019dc0
 800d360:	08019ed8 	.word	0x08019ed8
 800d364:	08019e10 	.word	0x08019e10

0800d368 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3308      	adds	r3, #8
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d00a      	beq.n	800d398 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <netif_do_set_netmask+0x26>
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	e000      	b.n	800d390 <netif_do_set_netmask+0x28>
 800d38e:	2300      	movs	r3, #0
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d394:	2301      	movs	r3, #1
 800d396:	e000      	b.n	800d39a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b085      	sub	sp, #20
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	60f8      	str	r0, [r7, #12]
 800d3ae:	60b9      	str	r1, [r7, #8]
 800d3b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d00a      	beq.n	800d3d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <netif_do_set_gw+0x26>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	e000      	b.n	800d3ce <netif_do_set_gw+0x28>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e000      	b.n	800d3d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b088      	sub	sp, #32
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
 800d3f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d400:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <netif_set_addr+0x90>)
 800d402:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d40a:	4b1a      	ldr	r3, [pc, #104]	; (800d474 <netif_set_addr+0x90>)
 800d40c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d414:	4b17      	ldr	r3, [pc, #92]	; (800d474 <netif_set_addr+0x90>)
 800d416:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d003      	beq.n	800d426 <netif_set_addr+0x42>
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <netif_set_addr+0x46>
 800d426:	2301      	movs	r3, #1
 800d428:	e000      	b.n	800d42c <netif_set_addr+0x48>
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d006      	beq.n	800d442 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d434:	f107 0310 	add.w	r3, r7, #16
 800d438:	461a      	mov	r2, r3
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff ff49 	bl	800d2d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f7ff ff8e 	bl	800d368 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff ffa8 	bl	800d3a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d106      	bne.n	800d46a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d45c:	f107 0310 	add.w	r3, r7, #16
 800d460:	461a      	mov	r2, r3
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7ff ff35 	bl	800d2d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d46a:	bf00      	nop
 800d46c:	3720      	adds	r7, #32
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	0801c578 	.word	0x0801c578

0800d478 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d480:	4a04      	ldr	r2, [pc, #16]	; (800d494 <netif_set_default+0x1c>)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d486:	bf00      	nop
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	200114ec 	.word	0x200114ec

0800d498 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d107      	bne.n	800d4b6 <netif_set_up+0x1e>
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <netif_set_up+0x4c>)
 800d4a8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d4ac:	490e      	ldr	r1, [pc, #56]	; (800d4e8 <netif_set_up+0x50>)
 800d4ae:	480f      	ldr	r0, [pc, #60]	; (800d4ec <netif_set_up+0x54>)
 800d4b0:	f00a f9ac 	bl	801780c <iprintf>
 800d4b4:	e013      	b.n	800d4de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4bc:	f003 0301 	and.w	r3, r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10c      	bne.n	800d4de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ca:	f043 0301 	orr.w	r3, r3, #1
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d4d6:	2103      	movs	r1, #3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f809 	bl	800d4f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	08019dc0 	.word	0x08019dc0
 800d4e8:	08019f48 	.word	0x08019f48
 800d4ec:	08019e10 	.word	0x08019e10

0800d4f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <netif_issue_reports+0x20>
 800d502:	4b18      	ldr	r3, [pc, #96]	; (800d564 <netif_issue_reports+0x74>)
 800d504:	f240 326d 	movw	r2, #877	; 0x36d
 800d508:	4917      	ldr	r1, [pc, #92]	; (800d568 <netif_issue_reports+0x78>)
 800d50a:	4818      	ldr	r0, [pc, #96]	; (800d56c <netif_issue_reports+0x7c>)
 800d50c:	f00a f97e 	bl	801780c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d516:	f003 0304 	and.w	r3, r3, #4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d01e      	beq.n	800d55c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d524:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d017      	beq.n	800d55c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d52c:	78fb      	ldrb	r3, [r7, #3]
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	2b00      	cmp	r3, #0
 800d534:	d013      	beq.n	800d55e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3304      	adds	r3, #4
 800d53a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00e      	beq.n	800d55e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d546:	f003 0308 	and.w	r3, r3, #8
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d007      	beq.n	800d55e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3304      	adds	r3, #4
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f008 fb29 	bl	8015bac <etharp_request>
 800d55a:	e000      	b.n	800d55e <netif_issue_reports+0x6e>
    return;
 800d55c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	08019dc0 	.word	0x08019dc0
 800d568:	08019f64 	.word	0x08019f64
 800d56c:	08019e10 	.word	0x08019e10

0800d570 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <netif_set_down+0x1e>
 800d57e:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <netif_set_down+0x58>)
 800d580:	f240 329b 	movw	r2, #923	; 0x39b
 800d584:	4911      	ldr	r1, [pc, #68]	; (800d5cc <netif_set_down+0x5c>)
 800d586:	4812      	ldr	r0, [pc, #72]	; (800d5d0 <netif_set_down+0x60>)
 800d588:	f00a f940 	bl	801780c <iprintf>
 800d58c:	e019      	b.n	800d5c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d012      	beq.n	800d5c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5a2:	f023 0301 	bic.w	r3, r3, #1
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5b4:	f003 0308 	and.w	r3, r3, #8
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f007 feb3 	bl	8015328 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	08019dc0 	.word	0x08019dc0
 800d5cc:	08019f88 	.word	0x08019f88
 800d5d0:	08019e10 	.word	0x08019e10

0800d5d4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d107      	bne.n	800d5f2 <netif_set_link_up+0x1e>
 800d5e2:	4b13      	ldr	r3, [pc, #76]	; (800d630 <netif_set_link_up+0x5c>)
 800d5e4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d5e8:	4912      	ldr	r1, [pc, #72]	; (800d634 <netif_set_link_up+0x60>)
 800d5ea:	4813      	ldr	r0, [pc, #76]	; (800d638 <netif_set_link_up+0x64>)
 800d5ec:	f00a f90e 	bl	801780c <iprintf>
 800d5f0:	e01b      	b.n	800d62a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5f8:	f003 0304 	and.w	r3, r3, #4
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d114      	bne.n	800d62a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d606:	f043 0304 	orr.w	r3, r3, #4
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d612:	2103      	movs	r1, #3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff ff6b 	bl	800d4f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <netif_set_link_up+0x56>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	08019dc0 	.word	0x08019dc0
 800d634:	08019fa8 	.word	0x08019fa8
 800d638:	08019e10 	.word	0x08019e10

0800d63c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d107      	bne.n	800d65a <netif_set_link_down+0x1e>
 800d64a:	4b11      	ldr	r3, [pc, #68]	; (800d690 <netif_set_link_down+0x54>)
 800d64c:	f240 4206 	movw	r2, #1030	; 0x406
 800d650:	4910      	ldr	r1, [pc, #64]	; (800d694 <netif_set_link_down+0x58>)
 800d652:	4811      	ldr	r0, [pc, #68]	; (800d698 <netif_set_link_down+0x5c>)
 800d654:	f00a f8da 	bl	801780c <iprintf>
 800d658:	e017      	b.n	800d68a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d660:	f003 0304 	and.w	r3, r3, #4
 800d664:	2b00      	cmp	r3, #0
 800d666:	d010      	beq.n	800d68a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d66e:	f023 0304 	bic.w	r3, r3, #4
 800d672:	b2da      	uxtb	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <netif_set_link_down+0x4e>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	69db      	ldr	r3, [r3, #28]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	08019dc0 	.word	0x08019dc0
 800d694:	08019fcc 	.word	0x08019fcc
 800d698:	08019e10 	.word	0x08019e10

0800d69c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	683a      	ldr	r2, [r7, #0]
 800d6b0:	61da      	str	r2, [r3, #28]
  }
}
 800d6b2:	bf00      	nop
 800d6b4:	370c      	adds	r7, #12
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr

0800d6be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6be:	b480      	push	{r7}
 800d6c0:	b085      	sub	sp, #20
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d6ca:	f06f 030b 	mvn.w	r3, #11
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
	...

0800d6dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d013      	beq.n	800d714 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6ec:	4b0d      	ldr	r3, [pc, #52]	; (800d724 <netif_get_by_index+0x48>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e00c      	b.n	800d70e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	79fa      	ldrb	r2, [r7, #7]
 800d700:	429a      	cmp	r2, r3
 800d702:	d101      	bne.n	800d708 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	e006      	b.n	800d716 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	60fb      	str	r3, [r7, #12]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1ef      	bne.n	800d6f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	200114e8 	.word	0x200114e8

0800d728 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d72e:	f009 ffed 	bl	801770c <sys_arch_protect>
 800d732:	6038      	str	r0, [r7, #0]
 800d734:	4b0d      	ldr	r3, [pc, #52]	; (800d76c <pbuf_free_ooseq+0x44>)
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
 800d73a:	6838      	ldr	r0, [r7, #0]
 800d73c:	f009 fff4 	bl	8017728 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d740:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <pbuf_free_ooseq+0x48>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	607b      	str	r3, [r7, #4]
 800d746:	e00a      	b.n	800d75e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f002 fc4b 	bl	800ffec <tcp_free_ooseq>
      return;
 800d756:	e005      	b.n	800d764 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	607b      	str	r3, [r7, #4]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1f1      	bne.n	800d748 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	200114f0 	.word	0x200114f0
 800d770:	200114f8 	.word	0x200114f8

0800d774 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d77c:	f7ff ffd4 	bl	800d728 <pbuf_free_ooseq>
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d78e:	f009 ffbd 	bl	801770c <sys_arch_protect>
 800d792:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d794:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <pbuf_pool_is_empty+0x4c>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d79a:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <pbuf_pool_is_empty+0x4c>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f009 ffc1 	bl	8017728 <sys_arch_unprotect>

  if (!queued) {
 800d7a6:	78fb      	ldrb	r3, [r7, #3]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10f      	bne.n	800d7cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	480a      	ldr	r0, [pc, #40]	; (800d7d8 <pbuf_pool_is_empty+0x50>)
 800d7b0:	f7fe fed6 	bl	800c560 <tcpip_try_callback>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d008      	beq.n	800d7cc <pbuf_pool_is_empty+0x44>
 800d7ba:	f009 ffa7 	bl	801770c <sys_arch_protect>
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	4b04      	ldr	r3, [pc, #16]	; (800d7d4 <pbuf_pool_is_empty+0x4c>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	701a      	strb	r2, [r3, #0]
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f009 ffae 	bl	8017728 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	200114f0 	.word	0x200114f0
 800d7d8:	0800d775 	.word	0x0800d775

0800d7dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	80fb      	strh	r3, [r7, #6]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	88fa      	ldrh	r2, [r7, #6]
 800d802:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	88ba      	ldrh	r2, [r7, #4]
 800d808:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d80a:	8b3b      	ldrh	r3, [r7, #24]
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	7f3a      	ldrb	r2, [r7, #28]
 800d816:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2201      	movs	r2, #1
 800d81c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	73da      	strb	r2, [r3, #15]
}
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08c      	sub	sp, #48	; 0x30
 800d834:	af02      	add	r7, sp, #8
 800d836:	4603      	mov	r3, r0
 800d838:	71fb      	strb	r3, [r7, #7]
 800d83a:	460b      	mov	r3, r1
 800d83c:	80bb      	strh	r3, [r7, #4]
 800d83e:	4613      	mov	r3, r2
 800d840:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d842:	79fb      	ldrb	r3, [r7, #7]
 800d844:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d84c:	f000 8082 	beq.w	800d954 <pbuf_alloc+0x124>
 800d850:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d854:	f300 80ca 	bgt.w	800d9ec <pbuf_alloc+0x1bc>
 800d858:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d85c:	d010      	beq.n	800d880 <pbuf_alloc+0x50>
 800d85e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d862:	f300 80c3 	bgt.w	800d9ec <pbuf_alloc+0x1bc>
 800d866:	2b01      	cmp	r3, #1
 800d868:	d002      	beq.n	800d870 <pbuf_alloc+0x40>
 800d86a:	2b41      	cmp	r3, #65	; 0x41
 800d86c:	f040 80be 	bne.w	800d9ec <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d870:	887a      	ldrh	r2, [r7, #2]
 800d872:	88bb      	ldrh	r3, [r7, #4]
 800d874:	4619      	mov	r1, r3
 800d876:	2000      	movs	r0, #0
 800d878:	f000 f8d4 	bl	800da24 <pbuf_alloc_reference>
 800d87c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d87e:	e0bf      	b.n	800da00 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d880:	2300      	movs	r3, #0
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d888:	88bb      	ldrh	r3, [r7, #4]
 800d88a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d88c:	200c      	movs	r0, #12
 800d88e:	f7ff fbbd 	bl	800d00c <memp_malloc>
 800d892:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d109      	bne.n	800d8ae <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800d89a:	f7ff ff75 	bl	800d788 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <pbuf_alloc+0x7a>
            pbuf_free(p);
 800d8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8a6:	f000 faab 	bl	800de00 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	e0a9      	b.n	800da02 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d8ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8b0:	3303      	adds	r3, #3
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	f023 0303 	bic.w	r3, r3, #3
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d8be:	1a9b      	subs	r3, r3, r2
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	8b7a      	ldrh	r2, [r7, #26]
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	bf28      	it	cs
 800d8c8:	4613      	movcs	r3, r2
 800d8ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d8cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ce:	3310      	adds	r3, #16
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	3303      	adds	r3, #3
 800d8d6:	f023 0303 	bic.w	r3, r3, #3
 800d8da:	4618      	mov	r0, r3
 800d8dc:	89f9      	ldrh	r1, [r7, #14]
 800d8de:	8b7a      	ldrh	r2, [r7, #26]
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	9301      	str	r3, [sp, #4]
 800d8e4:	887b      	ldrh	r3, [r7, #2]
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	6938      	ldr	r0, [r7, #16]
 800d8ee:	f7ff ff75 	bl	800d7dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	f003 0303 	and.w	r3, r3, #3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d006      	beq.n	800d90c <pbuf_alloc+0xdc>
 800d8fe:	4b43      	ldr	r3, [pc, #268]	; (800da0c <pbuf_alloc+0x1dc>)
 800d900:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d904:	4942      	ldr	r1, [pc, #264]	; (800da10 <pbuf_alloc+0x1e0>)
 800d906:	4843      	ldr	r0, [pc, #268]	; (800da14 <pbuf_alloc+0x1e4>)
 800d908:	f009 ff80 	bl	801780c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d90c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90e:	3303      	adds	r3, #3
 800d910:	f023 0303 	bic.w	r3, r3, #3
 800d914:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d918:	4293      	cmp	r3, r2
 800d91a:	d106      	bne.n	800d92a <pbuf_alloc+0xfa>
 800d91c:	4b3b      	ldr	r3, [pc, #236]	; (800da0c <pbuf_alloc+0x1dc>)
 800d91e:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d922:	493d      	ldr	r1, [pc, #244]	; (800da18 <pbuf_alloc+0x1e8>)
 800d924:	483b      	ldr	r0, [pc, #236]	; (800da14 <pbuf_alloc+0x1e4>)
 800d926:	f009 ff71 	bl	801780c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	627b      	str	r3, [r7, #36]	; 0x24
 800d934:	e002      	b.n	800d93c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d940:	8b7a      	ldrh	r2, [r7, #26]
 800d942:	89fb      	ldrh	r3, [r7, #14]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d94c:	8b7b      	ldrh	r3, [r7, #26]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d19c      	bne.n	800d88c <pbuf_alloc+0x5c>
      break;
 800d952:	e055      	b.n	800da00 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d956:	3303      	adds	r3, #3
 800d958:	b29b      	uxth	r3, r3
 800d95a:	f023 0303 	bic.w	r3, r3, #3
 800d95e:	b29a      	uxth	r2, r3
 800d960:	88bb      	ldrh	r3, [r7, #4]
 800d962:	3303      	adds	r3, #3
 800d964:	b29b      	uxth	r3, r3
 800d966:	f023 0303 	bic.w	r3, r3, #3
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	4413      	add	r3, r2
 800d96e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d970:	8b3b      	ldrh	r3, [r7, #24]
 800d972:	3310      	adds	r3, #16
 800d974:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d976:	8b3a      	ldrh	r2, [r7, #24]
 800d978:	88bb      	ldrh	r3, [r7, #4]
 800d97a:	3303      	adds	r3, #3
 800d97c:	f023 0303 	bic.w	r3, r3, #3
 800d980:	429a      	cmp	r2, r3
 800d982:	d306      	bcc.n	800d992 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d984:	8afa      	ldrh	r2, [r7, #22]
 800d986:	88bb      	ldrh	r3, [r7, #4]
 800d988:	3303      	adds	r3, #3
 800d98a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d98e:	429a      	cmp	r2, r3
 800d990:	d201      	bcs.n	800d996 <pbuf_alloc+0x166>
        return NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	e035      	b.n	800da02 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d996:	8afb      	ldrh	r3, [r7, #22]
 800d998:	4618      	mov	r0, r3
 800d99a:	f7ff f9b5 	bl	800cd08 <mem_malloc>
 800d99e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <pbuf_alloc+0x17a>
        return NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e02b      	b.n	800da02 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d9aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9ac:	3310      	adds	r3, #16
 800d9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b0:	4413      	add	r3, r2
 800d9b2:	3303      	adds	r3, #3
 800d9b4:	f023 0303 	bic.w	r3, r3, #3
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	88b9      	ldrh	r1, [r7, #4]
 800d9bc:	88ba      	ldrh	r2, [r7, #4]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	9301      	str	r3, [sp, #4]
 800d9c2:	887b      	ldrh	r3, [r7, #2]
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4601      	mov	r1, r0
 800d9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9cc:	f7ff ff06 	bl	800d7dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f003 0303 	and.w	r3, r3, #3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d010      	beq.n	800d9fe <pbuf_alloc+0x1ce>
 800d9dc:	4b0b      	ldr	r3, [pc, #44]	; (800da0c <pbuf_alloc+0x1dc>)
 800d9de:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d9e2:	490e      	ldr	r1, [pc, #56]	; (800da1c <pbuf_alloc+0x1ec>)
 800d9e4:	480b      	ldr	r0, [pc, #44]	; (800da14 <pbuf_alloc+0x1e4>)
 800d9e6:	f009 ff11 	bl	801780c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9ea:	e008      	b.n	800d9fe <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9ec:	4b07      	ldr	r3, [pc, #28]	; (800da0c <pbuf_alloc+0x1dc>)
 800d9ee:	f240 1227 	movw	r2, #295	; 0x127
 800d9f2:	490b      	ldr	r1, [pc, #44]	; (800da20 <pbuf_alloc+0x1f0>)
 800d9f4:	4807      	ldr	r0, [pc, #28]	; (800da14 <pbuf_alloc+0x1e4>)
 800d9f6:	f009 ff09 	bl	801780c <iprintf>
      return NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e001      	b.n	800da02 <pbuf_alloc+0x1d2>
      break;
 800d9fe:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da02:	4618      	mov	r0, r3
 800da04:	3728      	adds	r7, #40	; 0x28
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	08019ff0 	.word	0x08019ff0
 800da10:	0801a020 	.word	0x0801a020
 800da14:	0801a050 	.word	0x0801a050
 800da18:	0801a078 	.word	0x0801a078
 800da1c:	0801a0ac 	.word	0x0801a0ac
 800da20:	0801a0d8 	.word	0x0801a0d8

0800da24 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af02      	add	r7, sp, #8
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	807b      	strh	r3, [r7, #2]
 800da30:	4613      	mov	r3, r2
 800da32:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da34:	883b      	ldrh	r3, [r7, #0]
 800da36:	2b41      	cmp	r3, #65	; 0x41
 800da38:	d009      	beq.n	800da4e <pbuf_alloc_reference+0x2a>
 800da3a:	883b      	ldrh	r3, [r7, #0]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d006      	beq.n	800da4e <pbuf_alloc_reference+0x2a>
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <pbuf_alloc_reference+0x5c>)
 800da42:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da46:	490f      	ldr	r1, [pc, #60]	; (800da84 <pbuf_alloc_reference+0x60>)
 800da48:	480f      	ldr	r0, [pc, #60]	; (800da88 <pbuf_alloc_reference+0x64>)
 800da4a:	f009 fedf 	bl	801780c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da4e:	200b      	movs	r0, #11
 800da50:	f7ff fadc 	bl	800d00c <memp_malloc>
 800da54:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da5c:	2300      	movs	r3, #0
 800da5e:	e00b      	b.n	800da78 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da60:	8879      	ldrh	r1, [r7, #2]
 800da62:	887a      	ldrh	r2, [r7, #2]
 800da64:	2300      	movs	r3, #0
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	883b      	ldrh	r3, [r7, #0]
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	460b      	mov	r3, r1
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f7ff feb3 	bl	800d7dc <pbuf_init_alloced_pbuf>
  return p;
 800da76:	68fb      	ldr	r3, [r7, #12]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	08019ff0 	.word	0x08019ff0
 800da84:	0801a0f4 	.word	0x0801a0f4
 800da88:	0801a050 	.word	0x0801a050

0800da8c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b088      	sub	sp, #32
 800da90:	af02      	add	r7, sp, #8
 800da92:	607b      	str	r3, [r7, #4]
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]
 800da98:	460b      	mov	r3, r1
 800da9a:	81bb      	strh	r3, [r7, #12]
 800da9c:	4613      	mov	r3, r2
 800da9e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
 800daa2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800daa4:	8a7b      	ldrh	r3, [r7, #18]
 800daa6:	3303      	adds	r3, #3
 800daa8:	f023 0203 	bic.w	r2, r3, #3
 800daac:	89bb      	ldrh	r3, [r7, #12]
 800daae:	441a      	add	r2, r3
 800dab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d901      	bls.n	800daba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	e018      	b.n	800daec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d007      	beq.n	800dad0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dac0:	8a7b      	ldrh	r3, [r7, #18]
 800dac2:	3303      	adds	r3, #3
 800dac4:	f023 0303 	bic.w	r3, r3, #3
 800dac8:	6a3a      	ldr	r2, [r7, #32]
 800daca:	4413      	add	r3, r2
 800dacc:	617b      	str	r3, [r7, #20]
 800dace:	e001      	b.n	800dad4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dad0:	2300      	movs	r3, #0
 800dad2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	89b9      	ldrh	r1, [r7, #12]
 800dad8:	89ba      	ldrh	r2, [r7, #12]
 800dada:	2302      	movs	r3, #2
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	897b      	ldrh	r3, [r7, #10]
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	460b      	mov	r3, r1
 800dae4:	6979      	ldr	r1, [r7, #20]
 800dae6:	f7ff fe79 	bl	800d7dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800daea:	687b      	ldr	r3, [r7, #4]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3718      	adds	r7, #24
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	460b      	mov	r3, r1
 800dafe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <pbuf_realloc+0x20>
 800db06:	4b3a      	ldr	r3, [pc, #232]	; (800dbf0 <pbuf_realloc+0xfc>)
 800db08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800db0c:	4939      	ldr	r1, [pc, #228]	; (800dbf4 <pbuf_realloc+0x100>)
 800db0e:	483a      	ldr	r0, [pc, #232]	; (800dbf8 <pbuf_realloc+0x104>)
 800db10:	f009 fe7c 	bl	801780c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	891b      	ldrh	r3, [r3, #8]
 800db18:	887a      	ldrh	r2, [r7, #2]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d263      	bcs.n	800dbe6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	891a      	ldrh	r2, [r3, #8]
 800db22:	887b      	ldrh	r3, [r7, #2]
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db28:	887b      	ldrh	r3, [r7, #2]
 800db2a:	817b      	strh	r3, [r7, #10]
  q = p;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db30:	e018      	b.n	800db64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	895b      	ldrh	r3, [r3, #10]
 800db36:	897a      	ldrh	r2, [r7, #10]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	891a      	ldrh	r2, [r3, #8]
 800db40:	893b      	ldrh	r3, [r7, #8]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	b29a      	uxth	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d106      	bne.n	800db64 <pbuf_realloc+0x70>
 800db56:	4b26      	ldr	r3, [pc, #152]	; (800dbf0 <pbuf_realloc+0xfc>)
 800db58:	f240 12af 	movw	r2, #431	; 0x1af
 800db5c:	4927      	ldr	r1, [pc, #156]	; (800dbfc <pbuf_realloc+0x108>)
 800db5e:	4826      	ldr	r0, [pc, #152]	; (800dbf8 <pbuf_realloc+0x104>)
 800db60:	f009 fe54 	bl	801780c <iprintf>
  while (rem_len > q->len) {
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	895b      	ldrh	r3, [r3, #10]
 800db68:	897a      	ldrh	r2, [r7, #10]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d8e1      	bhi.n	800db32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	7b1b      	ldrb	r3, [r3, #12]
 800db72:	f003 030f 	and.w	r3, r3, #15
 800db76:	2b00      	cmp	r3, #0
 800db78:	d121      	bne.n	800dbbe <pbuf_realloc+0xca>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	895b      	ldrh	r3, [r3, #10]
 800db7e:	897a      	ldrh	r2, [r7, #10]
 800db80:	429a      	cmp	r2, r3
 800db82:	d01c      	beq.n	800dbbe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	7b5b      	ldrb	r3, [r3, #13]
 800db88:	f003 0302 	and.w	r3, r3, #2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d116      	bne.n	800dbbe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	685a      	ldr	r2, [r3, #4]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	b29a      	uxth	r2, r3
 800db9a:	897b      	ldrh	r3, [r7, #10]
 800db9c:	4413      	add	r3, r2
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	4619      	mov	r1, r3
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f7fe ffa6 	bl	800caf4 <mem_trim>
 800dba8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d106      	bne.n	800dbbe <pbuf_realloc+0xca>
 800dbb0:	4b0f      	ldr	r3, [pc, #60]	; (800dbf0 <pbuf_realloc+0xfc>)
 800dbb2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dbb6:	4912      	ldr	r1, [pc, #72]	; (800dc00 <pbuf_realloc+0x10c>)
 800dbb8:	480f      	ldr	r0, [pc, #60]	; (800dbf8 <pbuf_realloc+0x104>)
 800dbba:	f009 fe27 	bl	801780c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	897a      	ldrh	r2, [r7, #10]
 800dbc2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	895a      	ldrh	r2, [r3, #10]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d004      	beq.n	800dbde <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f000 f911 	bl	800de00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	e000      	b.n	800dbe8 <pbuf_realloc+0xf4>
    return;
 800dbe6:	bf00      	nop

}
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	08019ff0 	.word	0x08019ff0
 800dbf4:	0801a108 	.word	0x0801a108
 800dbf8:	0801a050 	.word	0x0801a050
 800dbfc:	0801a120 	.word	0x0801a120
 800dc00:	0801a138 	.word	0x0801a138

0800dc04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d106      	bne.n	800dc26 <pbuf_add_header_impl+0x22>
 800dc18:	4b2b      	ldr	r3, [pc, #172]	; (800dcc8 <pbuf_add_header_impl+0xc4>)
 800dc1a:	f240 12df 	movw	r2, #479	; 0x1df
 800dc1e:	492b      	ldr	r1, [pc, #172]	; (800dccc <pbuf_add_header_impl+0xc8>)
 800dc20:	482b      	ldr	r0, [pc, #172]	; (800dcd0 <pbuf_add_header_impl+0xcc>)
 800dc22:	f009 fdf3 	bl	801780c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d003      	beq.n	800dc34 <pbuf_add_header_impl+0x30>
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc32:	d301      	bcc.n	800dc38 <pbuf_add_header_impl+0x34>
    return 1;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e043      	b.n	800dcc0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d101      	bne.n	800dc42 <pbuf_add_header_impl+0x3e>
    return 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e03e      	b.n	800dcc0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	891a      	ldrh	r2, [r3, #8]
 800dc4a:	8a7b      	ldrh	r3, [r7, #18]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	8a7a      	ldrh	r2, [r7, #18]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d901      	bls.n	800dc5a <pbuf_add_header_impl+0x56>
    return 1;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e032      	b.n	800dcc0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7b1b      	ldrb	r3, [r3, #12]
 800dc5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc60:	8a3b      	ldrh	r3, [r7, #16]
 800dc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00c      	beq.n	800dc84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	425b      	negs	r3, r3
 800dc72:	4413      	add	r3, r2
 800dc74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	3310      	adds	r3, #16
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d20d      	bcs.n	800dc9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc80:	2301      	movs	r3, #1
 800dc82:	e01d      	b.n	800dcc0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc84:	79fb      	ldrb	r3, [r7, #7]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d006      	beq.n	800dc98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	425b      	negs	r3, r3
 800dc92:	4413      	add	r3, r2
 800dc94:	617b      	str	r3, [r7, #20]
 800dc96:	e001      	b.n	800dc9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e011      	b.n	800dcc0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	697a      	ldr	r2, [r7, #20]
 800dca0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	895a      	ldrh	r2, [r3, #10]
 800dca6:	8a7b      	ldrh	r3, [r7, #18]
 800dca8:	4413      	add	r3, r2
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	891a      	ldrh	r2, [r3, #8]
 800dcb4:	8a7b      	ldrh	r3, [r7, #18]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	811a      	strh	r2, [r3, #8]


  return 0;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	08019ff0 	.word	0x08019ff0
 800dccc:	0801a154 	.word	0x0801a154
 800dcd0:	0801a050 	.word	0x0801a050

0800dcd4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dcde:	2200      	movs	r2, #0
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff ff8e 	bl	800dc04 <pbuf_add_header_impl>
 800dce8:	4603      	mov	r3, r0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d106      	bne.n	800dd12 <pbuf_remove_header+0x1e>
 800dd04:	4b20      	ldr	r3, [pc, #128]	; (800dd88 <pbuf_remove_header+0x94>)
 800dd06:	f240 224b 	movw	r2, #587	; 0x24b
 800dd0a:	4920      	ldr	r1, [pc, #128]	; (800dd8c <pbuf_remove_header+0x98>)
 800dd0c:	4820      	ldr	r0, [pc, #128]	; (800dd90 <pbuf_remove_header+0x9c>)
 800dd0e:	f009 fd7d 	bl	801780c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d003      	beq.n	800dd20 <pbuf_remove_header+0x2c>
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd1e:	d301      	bcc.n	800dd24 <pbuf_remove_header+0x30>
    return 1;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e02c      	b.n	800dd7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <pbuf_remove_header+0x3a>
    return 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e027      	b.n	800dd7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	895b      	ldrh	r3, [r3, #10]
 800dd36:	89fa      	ldrh	r2, [r7, #14]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d908      	bls.n	800dd4e <pbuf_remove_header+0x5a>
 800dd3c:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <pbuf_remove_header+0x94>)
 800dd3e:	f240 2255 	movw	r2, #597	; 0x255
 800dd42:	4914      	ldr	r1, [pc, #80]	; (800dd94 <pbuf_remove_header+0xa0>)
 800dd44:	4812      	ldr	r0, [pc, #72]	; (800dd90 <pbuf_remove_header+0x9c>)
 800dd46:	f009 fd61 	bl	801780c <iprintf>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e017      	b.n	800dd7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	441a      	add	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	895a      	ldrh	r2, [r3, #10]
 800dd64:	89fb      	ldrh	r3, [r7, #14]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	891a      	ldrh	r2, [r3, #8]
 800dd72:	89fb      	ldrh	r3, [r7, #14]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	08019ff0 	.word	0x08019ff0
 800dd8c:	0801a154 	.word	0x0801a154
 800dd90:	0801a050 	.word	0x0801a050
 800dd94:	0801a160 	.word	0x0801a160

0800dd98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	807b      	strh	r3, [r7, #2]
 800dda4:	4613      	mov	r3, r2
 800dda6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dda8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	da08      	bge.n	800ddc2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ddb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddb4:	425b      	negs	r3, r3
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ff9b 	bl	800dcf4 <pbuf_remove_header>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	e007      	b.n	800ddd2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ddc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddc6:	787a      	ldrb	r2, [r7, #1]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff ff1a 	bl	800dc04 <pbuf_add_header_impl>
 800ddd0:	4603      	mov	r3, r0
  }
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	460b      	mov	r3, r1
 800dde4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dde6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddea:	2201      	movs	r2, #1
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff ffd2 	bl	800dd98 <pbuf_header_impl>
 800ddf4:	4603      	mov	r3, r0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
	...

0800de00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10b      	bne.n	800de26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d106      	bne.n	800de22 <pbuf_free+0x22>
 800de14:	4b3b      	ldr	r3, [pc, #236]	; (800df04 <pbuf_free+0x104>)
 800de16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de1a:	493b      	ldr	r1, [pc, #236]	; (800df08 <pbuf_free+0x108>)
 800de1c:	483b      	ldr	r0, [pc, #236]	; (800df0c <pbuf_free+0x10c>)
 800de1e:	f009 fcf5 	bl	801780c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de22:	2300      	movs	r3, #0
 800de24:	e069      	b.n	800defa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de2a:	e062      	b.n	800def2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de2c:	f009 fc6e 	bl	801770c <sys_arch_protect>
 800de30:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	7b9b      	ldrb	r3, [r3, #14]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d106      	bne.n	800de48 <pbuf_free+0x48>
 800de3a:	4b32      	ldr	r3, [pc, #200]	; (800df04 <pbuf_free+0x104>)
 800de3c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de40:	4933      	ldr	r1, [pc, #204]	; (800df10 <pbuf_free+0x110>)
 800de42:	4832      	ldr	r0, [pc, #200]	; (800df0c <pbuf_free+0x10c>)
 800de44:	f009 fce2 	bl	801780c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	7b9b      	ldrb	r3, [r3, #14]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	739a      	strb	r2, [r3, #14]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	7b9b      	ldrb	r3, [r3, #14]
 800de58:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de5a:	69b8      	ldr	r0, [r7, #24]
 800de5c:	f009 fc64 	bl	8017728 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de60:	7dfb      	ldrb	r3, [r7, #23]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d143      	bne.n	800deee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7b1b      	ldrb	r3, [r3, #12]
 800de70:	f003 030f 	and.w	r3, r3, #15
 800de74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	7b5b      	ldrb	r3, [r3, #13]
 800de7a:	f003 0302 	and.w	r3, r3, #2
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d011      	beq.n	800dea6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d106      	bne.n	800de9c <pbuf_free+0x9c>
 800de8e:	4b1d      	ldr	r3, [pc, #116]	; (800df04 <pbuf_free+0x104>)
 800de90:	f240 22ff 	movw	r2, #767	; 0x2ff
 800de94:	491f      	ldr	r1, [pc, #124]	; (800df14 <pbuf_free+0x114>)
 800de96:	481d      	ldr	r0, [pc, #116]	; (800df0c <pbuf_free+0x10c>)
 800de98:	f009 fcb8 	bl	801780c <iprintf>
        pc->custom_free_function(p);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	4798      	blx	r3
 800dea4:	e01d      	b.n	800dee2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dea6:	7bfb      	ldrb	r3, [r7, #15]
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d104      	bne.n	800deb6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800deac:	6879      	ldr	r1, [r7, #4]
 800deae:	200c      	movs	r0, #12
 800deb0:	f7ff f8fe 	bl	800d0b0 <memp_free>
 800deb4:	e015      	b.n	800dee2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d104      	bne.n	800dec6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800debc:	6879      	ldr	r1, [r7, #4]
 800debe:	200b      	movs	r0, #11
 800dec0:	f7ff f8f6 	bl	800d0b0 <memp_free>
 800dec4:	e00d      	b.n	800dee2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d103      	bne.n	800ded4 <pbuf_free+0xd4>
          mem_free(p);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7fe fd81 	bl	800c9d4 <mem_free>
 800ded2:	e006      	b.n	800dee2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ded4:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <pbuf_free+0x104>)
 800ded6:	f240 320f 	movw	r2, #783	; 0x30f
 800deda:	490f      	ldr	r1, [pc, #60]	; (800df18 <pbuf_free+0x118>)
 800dedc:	480b      	ldr	r0, [pc, #44]	; (800df0c <pbuf_free+0x10c>)
 800dede:	f009 fc95 	bl	801780c <iprintf>
        }
      }
      count++;
 800dee2:	7ffb      	ldrb	r3, [r7, #31]
 800dee4:	3301      	adds	r3, #1
 800dee6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	607b      	str	r3, [r7, #4]
 800deec:	e001      	b.n	800def2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d199      	bne.n	800de2c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800def8:	7ffb      	ldrb	r3, [r7, #31]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3720      	adds	r7, #32
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	08019ff0 	.word	0x08019ff0
 800df08:	0801a154 	.word	0x0801a154
 800df0c:	0801a050 	.word	0x0801a050
 800df10:	0801a180 	.word	0x0801a180
 800df14:	0801a198 	.word	0x0801a198
 800df18:	0801a1bc 	.word	0x0801a1bc

0800df1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df28:	e005      	b.n	800df36 <pbuf_clen+0x1a>
    ++len;
 800df2a:	89fb      	ldrh	r3, [r7, #14]
 800df2c:	3301      	adds	r3, #1
 800df2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1f6      	bne.n	800df2a <pbuf_clen+0xe>
  }
  return len;
 800df3c:	89fb      	ldrh	r3, [r7, #14]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
	...

0800df4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d016      	beq.n	800df88 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df5a:	f009 fbd7 	bl	801770c <sys_arch_protect>
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7b9b      	ldrb	r3, [r3, #14]
 800df64:	3301      	adds	r3, #1
 800df66:	b2da      	uxtb	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	739a      	strb	r2, [r3, #14]
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f009 fbdb 	bl	8017728 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	7b9b      	ldrb	r3, [r3, #14]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <pbuf_ref+0x3c>
 800df7a:	4b05      	ldr	r3, [pc, #20]	; (800df90 <pbuf_ref+0x44>)
 800df7c:	f240 3242 	movw	r2, #834	; 0x342
 800df80:	4904      	ldr	r1, [pc, #16]	; (800df94 <pbuf_ref+0x48>)
 800df82:	4805      	ldr	r0, [pc, #20]	; (800df98 <pbuf_ref+0x4c>)
 800df84:	f009 fc42 	bl	801780c <iprintf>
  }
}
 800df88:	bf00      	nop
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	08019ff0 	.word	0x08019ff0
 800df94:	0801a1d0 	.word	0x0801a1d0
 800df98:	0801a050 	.word	0x0801a050

0800df9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <pbuf_cat+0x16>
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d107      	bne.n	800dfc2 <pbuf_cat+0x26>
 800dfb2:	4b20      	ldr	r3, [pc, #128]	; (800e034 <pbuf_cat+0x98>)
 800dfb4:	f240 3259 	movw	r2, #857	; 0x359
 800dfb8:	491f      	ldr	r1, [pc, #124]	; (800e038 <pbuf_cat+0x9c>)
 800dfba:	4820      	ldr	r0, [pc, #128]	; (800e03c <pbuf_cat+0xa0>)
 800dfbc:	f009 fc26 	bl	801780c <iprintf>
 800dfc0:	e034      	b.n	800e02c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	e00a      	b.n	800dfde <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	891a      	ldrh	r2, [r3, #8]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	891b      	ldrh	r3, [r3, #8]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60fb      	str	r3, [r7, #12]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1f0      	bne.n	800dfc8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	891a      	ldrh	r2, [r3, #8]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	895b      	ldrh	r3, [r3, #10]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d006      	beq.n	800e000 <pbuf_cat+0x64>
 800dff2:	4b10      	ldr	r3, [pc, #64]	; (800e034 <pbuf_cat+0x98>)
 800dff4:	f240 3262 	movw	r2, #866	; 0x362
 800dff8:	4911      	ldr	r1, [pc, #68]	; (800e040 <pbuf_cat+0xa4>)
 800dffa:	4810      	ldr	r0, [pc, #64]	; (800e03c <pbuf_cat+0xa0>)
 800dffc:	f009 fc06 	bl	801780c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d006      	beq.n	800e016 <pbuf_cat+0x7a>
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <pbuf_cat+0x98>)
 800e00a:	f240 3263 	movw	r2, #867	; 0x363
 800e00e:	490d      	ldr	r1, [pc, #52]	; (800e044 <pbuf_cat+0xa8>)
 800e010:	480a      	ldr	r0, [pc, #40]	; (800e03c <pbuf_cat+0xa0>)
 800e012:	f009 fbfb 	bl	801780c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	891a      	ldrh	r2, [r3, #8]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	891b      	ldrh	r3, [r3, #8]
 800e01e:	4413      	add	r3, r2
 800e020:	b29a      	uxth	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	08019ff0 	.word	0x08019ff0
 800e038:	0801a1e4 	.word	0x0801a1e4
 800e03c:	0801a050 	.word	0x0801a050
 800e040:	0801a21c 	.word	0x0801a21c
 800e044:	0801a24c 	.word	0x0801a24c

0800e048 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e052:	2300      	movs	r3, #0
 800e054:	617b      	str	r3, [r7, #20]
 800e056:	2300      	movs	r3, #0
 800e058:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d008      	beq.n	800e072 <pbuf_copy+0x2a>
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d005      	beq.n	800e072 <pbuf_copy+0x2a>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	891a      	ldrh	r2, [r3, #8]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	891b      	ldrh	r3, [r3, #8]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d209      	bcs.n	800e086 <pbuf_copy+0x3e>
 800e072:	4b57      	ldr	r3, [pc, #348]	; (800e1d0 <pbuf_copy+0x188>)
 800e074:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e078:	4956      	ldr	r1, [pc, #344]	; (800e1d4 <pbuf_copy+0x18c>)
 800e07a:	4857      	ldr	r0, [pc, #348]	; (800e1d8 <pbuf_copy+0x190>)
 800e07c:	f009 fbc6 	bl	801780c <iprintf>
 800e080:	f06f 030f 	mvn.w	r3, #15
 800e084:	e09f      	b.n	800e1c6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	895b      	ldrh	r3, [r3, #10]
 800e08a:	461a      	mov	r2, r3
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	1ad2      	subs	r2, r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	895b      	ldrh	r3, [r3, #10]
 800e094:	4619      	mov	r1, r3
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	1acb      	subs	r3, r1, r3
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d306      	bcc.n	800e0ac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	895b      	ldrh	r3, [r3, #10]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	60fb      	str	r3, [r7, #12]
 800e0aa:	e005      	b.n	800e0b8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	895b      	ldrh	r3, [r3, #10]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	18d0      	adds	r0, r2, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	f009 fb6e 	bl	80177ac <memcpy>
    offset_to += len;
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e0d8:	693a      	ldr	r2, [r7, #16]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	4413      	add	r3, r2
 800e0de:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	895b      	ldrh	r3, [r3, #10]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d906      	bls.n	800e0fa <pbuf_copy+0xb2>
 800e0ec:	4b38      	ldr	r3, [pc, #224]	; (800e1d0 <pbuf_copy+0x188>)
 800e0ee:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e0f2:	493a      	ldr	r1, [pc, #232]	; (800e1dc <pbuf_copy+0x194>)
 800e0f4:	4838      	ldr	r0, [pc, #224]	; (800e1d8 <pbuf_copy+0x190>)
 800e0f6:	f009 fb89 	bl	801780c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	895b      	ldrh	r3, [r3, #10]
 800e0fe:	461a      	mov	r2, r3
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	4293      	cmp	r3, r2
 800e104:	d906      	bls.n	800e114 <pbuf_copy+0xcc>
 800e106:	4b32      	ldr	r3, [pc, #200]	; (800e1d0 <pbuf_copy+0x188>)
 800e108:	f240 32da 	movw	r2, #986	; 0x3da
 800e10c:	4934      	ldr	r1, [pc, #208]	; (800e1e0 <pbuf_copy+0x198>)
 800e10e:	4832      	ldr	r0, [pc, #200]	; (800e1d8 <pbuf_copy+0x190>)
 800e110:	f009 fb7c 	bl	801780c <iprintf>
    if (offset_from >= p_from->len) {
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	895b      	ldrh	r3, [r3, #10]
 800e118:	461a      	mov	r2, r3
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d304      	bcc.n	800e12a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	895b      	ldrh	r3, [r3, #10]
 800e12e:	461a      	mov	r2, r3
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	4293      	cmp	r3, r2
 800e134:	d114      	bne.n	800e160 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e136:	2300      	movs	r3, #0
 800e138:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10c      	bne.n	800e160 <pbuf_copy+0x118>
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d009      	beq.n	800e160 <pbuf_copy+0x118>
 800e14c:	4b20      	ldr	r3, [pc, #128]	; (800e1d0 <pbuf_copy+0x188>)
 800e14e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e152:	4924      	ldr	r1, [pc, #144]	; (800e1e4 <pbuf_copy+0x19c>)
 800e154:	4820      	ldr	r0, [pc, #128]	; (800e1d8 <pbuf_copy+0x190>)
 800e156:	f009 fb59 	bl	801780c <iprintf>
 800e15a:	f06f 030f 	mvn.w	r3, #15
 800e15e:	e032      	b.n	800e1c6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d013      	beq.n	800e18e <pbuf_copy+0x146>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	895a      	ldrh	r2, [r3, #10]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	891b      	ldrh	r3, [r3, #8]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d10d      	bne.n	800e18e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d009      	beq.n	800e18e <pbuf_copy+0x146>
 800e17a:	4b15      	ldr	r3, [pc, #84]	; (800e1d0 <pbuf_copy+0x188>)
 800e17c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e180:	4919      	ldr	r1, [pc, #100]	; (800e1e8 <pbuf_copy+0x1a0>)
 800e182:	4815      	ldr	r0, [pc, #84]	; (800e1d8 <pbuf_copy+0x190>)
 800e184:	f009 fb42 	bl	801780c <iprintf>
 800e188:	f06f 0305 	mvn.w	r3, #5
 800e18c:	e01b      	b.n	800e1c6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d013      	beq.n	800e1bc <pbuf_copy+0x174>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	895a      	ldrh	r2, [r3, #10]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	891b      	ldrh	r3, [r3, #8]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d10d      	bne.n	800e1bc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d009      	beq.n	800e1bc <pbuf_copy+0x174>
 800e1a8:	4b09      	ldr	r3, [pc, #36]	; (800e1d0 <pbuf_copy+0x188>)
 800e1aa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e1ae:	490e      	ldr	r1, [pc, #56]	; (800e1e8 <pbuf_copy+0x1a0>)
 800e1b0:	4809      	ldr	r0, [pc, #36]	; (800e1d8 <pbuf_copy+0x190>)
 800e1b2:	f009 fb2b 	bl	801780c <iprintf>
 800e1b6:	f06f 0305 	mvn.w	r3, #5
 800e1ba:	e004      	b.n	800e1c6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f47f af61 	bne.w	800e086 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3718      	adds	r7, #24
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	08019ff0 	.word	0x08019ff0
 800e1d4:	0801a298 	.word	0x0801a298
 800e1d8:	0801a050 	.word	0x0801a050
 800e1dc:	0801a2c8 	.word	0x0801a2c8
 800e1e0:	0801a2e0 	.word	0x0801a2e0
 800e1e4:	0801a2fc 	.word	0x0801a2fc
 800e1e8:	0801a30c 	.word	0x0801a30c

0800e1ec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b088      	sub	sp, #32
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	80fb      	strh	r3, [r7, #6]
 800e1fe:	4613      	mov	r3, r2
 800e200:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d108      	bne.n	800e222 <pbuf_copy_partial+0x36>
 800e210:	4b2b      	ldr	r3, [pc, #172]	; (800e2c0 <pbuf_copy_partial+0xd4>)
 800e212:	f240 420a 	movw	r2, #1034	; 0x40a
 800e216:	492b      	ldr	r1, [pc, #172]	; (800e2c4 <pbuf_copy_partial+0xd8>)
 800e218:	482b      	ldr	r0, [pc, #172]	; (800e2c8 <pbuf_copy_partial+0xdc>)
 800e21a:	f009 faf7 	bl	801780c <iprintf>
 800e21e:	2300      	movs	r3, #0
 800e220:	e04a      	b.n	800e2b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d108      	bne.n	800e23a <pbuf_copy_partial+0x4e>
 800e228:	4b25      	ldr	r3, [pc, #148]	; (800e2c0 <pbuf_copy_partial+0xd4>)
 800e22a:	f240 420b 	movw	r2, #1035	; 0x40b
 800e22e:	4927      	ldr	r1, [pc, #156]	; (800e2cc <pbuf_copy_partial+0xe0>)
 800e230:	4825      	ldr	r0, [pc, #148]	; (800e2c8 <pbuf_copy_partial+0xdc>)
 800e232:	f009 faeb 	bl	801780c <iprintf>
 800e236:	2300      	movs	r3, #0
 800e238:	e03e      	b.n	800e2b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	61fb      	str	r3, [r7, #28]
 800e23e:	e034      	b.n	800e2aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e240:	88bb      	ldrh	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <pbuf_copy_partial+0x70>
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	895b      	ldrh	r3, [r3, #10]
 800e24a:	88ba      	ldrh	r2, [r7, #4]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d305      	bcc.n	800e25c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	895b      	ldrh	r3, [r3, #10]
 800e254:	88ba      	ldrh	r2, [r7, #4]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	80bb      	strh	r3, [r7, #4]
 800e25a:	e023      	b.n	800e2a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	895a      	ldrh	r2, [r3, #10]
 800e260:	88bb      	ldrh	r3, [r7, #4]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e266:	8b3a      	ldrh	r2, [r7, #24]
 800e268:	88fb      	ldrh	r3, [r7, #6]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d901      	bls.n	800e272 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e26e:	88fb      	ldrh	r3, [r7, #6]
 800e270:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e272:	8b7b      	ldrh	r3, [r7, #26]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	18d0      	adds	r0, r2, r3
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	88bb      	ldrh	r3, [r7, #4]
 800e27e:	4413      	add	r3, r2
 800e280:	8b3a      	ldrh	r2, [r7, #24]
 800e282:	4619      	mov	r1, r3
 800e284:	f009 fa92 	bl	80177ac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e288:	8afa      	ldrh	r2, [r7, #22]
 800e28a:	8b3b      	ldrh	r3, [r7, #24]
 800e28c:	4413      	add	r3, r2
 800e28e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e290:	8b7a      	ldrh	r2, [r7, #26]
 800e292:	8b3b      	ldrh	r3, [r7, #24]
 800e294:	4413      	add	r3, r2
 800e296:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e298:	88fa      	ldrh	r2, [r7, #6]
 800e29a:	8b3b      	ldrh	r3, [r7, #24]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	61fb      	str	r3, [r7, #28]
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <pbuf_copy_partial+0xca>
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1c4      	bne.n	800e240 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e2b6:	8afb      	ldrh	r3, [r7, #22]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3720      	adds	r7, #32
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	08019ff0 	.word	0x08019ff0
 800e2c4:	0801a338 	.word	0x0801a338
 800e2c8:	0801a050 	.word	0x0801a050
 800e2cc:	0801a358 	.word	0x0801a358

0800e2d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	603a      	str	r2, [r7, #0]
 800e2da:	71fb      	strb	r3, [r7, #7]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	8919      	ldrh	r1, [r3, #8]
 800e2e4:	88ba      	ldrh	r2, [r7, #4]
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff faa1 	bl	800d830 <pbuf_alloc>
 800e2ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <pbuf_clone+0x2a>
    return NULL;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e011      	b.n	800e31e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f7ff fea3 	bl	800e048 <pbuf_copy>
 800e302:	4603      	mov	r3, r0
 800e304:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e306:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d006      	beq.n	800e31c <pbuf_clone+0x4c>
 800e30e:	4b06      	ldr	r3, [pc, #24]	; (800e328 <pbuf_clone+0x58>)
 800e310:	f240 5224 	movw	r2, #1316	; 0x524
 800e314:	4905      	ldr	r1, [pc, #20]	; (800e32c <pbuf_clone+0x5c>)
 800e316:	4806      	ldr	r0, [pc, #24]	; (800e330 <pbuf_clone+0x60>)
 800e318:	f009 fa78 	bl	801780c <iprintf>
  return q;
 800e31c:	68fb      	ldr	r3, [r7, #12]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	08019ff0 	.word	0x08019ff0
 800e32c:	0801a464 	.word	0x0801a464
 800e330:	0801a050 	.word	0x0801a050

0800e334 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e338:	f009 faf6 	bl	8017928 <rand>
 800e33c:	4603      	mov	r3, r0
 800e33e:	b29b      	uxth	r3, r3
 800e340:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e344:	b29b      	uxth	r3, r3
 800e346:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	4b01      	ldr	r3, [pc, #4]	; (800e354 <tcp_init+0x20>)
 800e34e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}
 800e354:	20000010 	.word	0x20000010

0800e358 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7d1b      	ldrb	r3, [r3, #20]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d105      	bne.n	800e374 <tcp_free+0x1c>
 800e368:	4b06      	ldr	r3, [pc, #24]	; (800e384 <tcp_free+0x2c>)
 800e36a:	22d4      	movs	r2, #212	; 0xd4
 800e36c:	4906      	ldr	r1, [pc, #24]	; (800e388 <tcp_free+0x30>)
 800e36e:	4807      	ldr	r0, [pc, #28]	; (800e38c <tcp_free+0x34>)
 800e370:	f009 fa4c 	bl	801780c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	2001      	movs	r0, #1
 800e378:	f7fe fe9a 	bl	800d0b0 <memp_free>
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	0801a4f0 	.word	0x0801a4f0
 800e388:	0801a520 	.word	0x0801a520
 800e38c:	0801a534 	.word	0x0801a534

0800e390 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d105      	bne.n	800e3ac <tcp_free_listen+0x1c>
 800e3a0:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <tcp_free_listen+0x2c>)
 800e3a2:	22df      	movs	r2, #223	; 0xdf
 800e3a4:	4906      	ldr	r1, [pc, #24]	; (800e3c0 <tcp_free_listen+0x30>)
 800e3a6:	4807      	ldr	r0, [pc, #28]	; (800e3c4 <tcp_free_listen+0x34>)
 800e3a8:	f009 fa30 	bl	801780c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	2002      	movs	r0, #2
 800e3b0:	f7fe fe7e 	bl	800d0b0 <memp_free>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	0801a4f0 	.word	0x0801a4f0
 800e3c0:	0801a55c 	.word	0x0801a55c
 800e3c4:	0801a534 	.word	0x0801a534

0800e3c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e3cc:	f001 f8a8 	bl	800f520 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e3d0:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <tcp_tmr+0x28>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <tcp_tmr+0x28>)
 800e3da:	701a      	strb	r2, [r3, #0]
 800e3dc:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <tcp_tmr+0x28>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e3e8:	f000 fd5a 	bl	800eea0 <tcp_slowtmr>
  }
}
 800e3ec:	bf00      	nop
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	20004a01 	.word	0x20004a01

0800e3f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d105      	bne.n	800e410 <tcp_remove_listener+0x1c>
 800e404:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <tcp_remove_listener+0x48>)
 800e406:	22ff      	movs	r2, #255	; 0xff
 800e408:	490d      	ldr	r1, [pc, #52]	; (800e440 <tcp_remove_listener+0x4c>)
 800e40a:	480e      	ldr	r0, [pc, #56]	; (800e444 <tcp_remove_listener+0x50>)
 800e40c:	f009 f9fe 	bl	801780c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	e00a      	b.n	800e42c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d102      	bne.n	800e426 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2200      	movs	r2, #0
 800e424:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1f1      	bne.n	800e416 <tcp_remove_listener+0x22>
    }
  }
}
 800e432:	bf00      	nop
 800e434:	bf00      	nop
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	0801a4f0 	.word	0x0801a4f0
 800e440:	0801a578 	.word	0x0801a578
 800e444:	0801a534 	.word	0x0801a534

0800e448 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <tcp_listen_closed+0x1c>
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <tcp_listen_closed+0x60>)
 800e458:	f240 1211 	movw	r2, #273	; 0x111
 800e45c:	4913      	ldr	r1, [pc, #76]	; (800e4ac <tcp_listen_closed+0x64>)
 800e45e:	4814      	ldr	r0, [pc, #80]	; (800e4b0 <tcp_listen_closed+0x68>)
 800e460:	f009 f9d4 	bl	801780c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7d1b      	ldrb	r3, [r3, #20]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d006      	beq.n	800e47a <tcp_listen_closed+0x32>
 800e46c:	4b0e      	ldr	r3, [pc, #56]	; (800e4a8 <tcp_listen_closed+0x60>)
 800e46e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e472:	4910      	ldr	r1, [pc, #64]	; (800e4b4 <tcp_listen_closed+0x6c>)
 800e474:	480e      	ldr	r0, [pc, #56]	; (800e4b0 <tcp_listen_closed+0x68>)
 800e476:	f009 f9c9 	bl	801780c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e47a:	2301      	movs	r3, #1
 800e47c:	60fb      	str	r3, [r7, #12]
 800e47e:	e00b      	b.n	800e498 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e480:	4a0d      	ldr	r2, [pc, #52]	; (800e4b8 <tcp_listen_closed+0x70>)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7ff ffb1 	bl	800e3f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3301      	adds	r3, #1
 800e496:	60fb      	str	r3, [r7, #12]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d9f0      	bls.n	800e480 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e49e:	bf00      	nop
 800e4a0:	bf00      	nop
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	0801a4f0 	.word	0x0801a4f0
 800e4ac:	0801a5a0 	.word	0x0801a5a0
 800e4b0:	0801a534 	.word	0x0801a534
 800e4b4:	0801a5ac 	.word	0x0801a5ac
 800e4b8:	0801c550 	.word	0x0801c550

0800e4bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e4bc:	b5b0      	push	{r4, r5, r7, lr}
 800e4be:	b088      	sub	sp, #32
 800e4c0:	af04      	add	r7, sp, #16
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d106      	bne.n	800e4dc <tcp_close_shutdown+0x20>
 800e4ce:	4b63      	ldr	r3, [pc, #396]	; (800e65c <tcp_close_shutdown+0x1a0>)
 800e4d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e4d4:	4962      	ldr	r1, [pc, #392]	; (800e660 <tcp_close_shutdown+0x1a4>)
 800e4d6:	4863      	ldr	r0, [pc, #396]	; (800e664 <tcp_close_shutdown+0x1a8>)
 800e4d8:	f009 f998 	bl	801780c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e4dc:	78fb      	ldrb	r3, [r7, #3]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d067      	beq.n	800e5b2 <tcp_close_shutdown+0xf6>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7d1b      	ldrb	r3, [r3, #20]
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d003      	beq.n	800e4f2 <tcp_close_shutdown+0x36>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7d1b      	ldrb	r3, [r3, #20]
 800e4ee:	2b07      	cmp	r3, #7
 800e4f0:	d15f      	bne.n	800e5b2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d105      	bne.n	800e506 <tcp_close_shutdown+0x4a>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4fe:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e502:	4293      	cmp	r3, r2
 800e504:	d055      	beq.n	800e5b2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8b5b      	ldrh	r3, [r3, #26]
 800e50a:	f003 0310 	and.w	r3, r3, #16
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d106      	bne.n	800e520 <tcp_close_shutdown+0x64>
 800e512:	4b52      	ldr	r3, [pc, #328]	; (800e65c <tcp_close_shutdown+0x1a0>)
 800e514:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e518:	4953      	ldr	r1, [pc, #332]	; (800e668 <tcp_close_shutdown+0x1ac>)
 800e51a:	4852      	ldr	r0, [pc, #328]	; (800e664 <tcp_close_shutdown+0x1a8>)
 800e51c:	f009 f976 	bl	801780c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e528:	687d      	ldr	r5, [r7, #4]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3304      	adds	r3, #4
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	8ad2      	ldrh	r2, [r2, #22]
 800e532:	6879      	ldr	r1, [r7, #4]
 800e534:	8b09      	ldrh	r1, [r1, #24]
 800e536:	9102      	str	r1, [sp, #8]
 800e538:	9201      	str	r2, [sp, #4]
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	462b      	mov	r3, r5
 800e53e:	4622      	mov	r2, r4
 800e540:	4601      	mov	r1, r0
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f005 fdbc 	bl	80140c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f001 fb9b 	bl	800fc84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e54e:	4b47      	ldr	r3, [pc, #284]	; (800e66c <tcp_close_shutdown+0x1b0>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	429a      	cmp	r2, r3
 800e556:	d105      	bne.n	800e564 <tcp_close_shutdown+0xa8>
 800e558:	4b44      	ldr	r3, [pc, #272]	; (800e66c <tcp_close_shutdown+0x1b0>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	4a43      	ldr	r2, [pc, #268]	; (800e66c <tcp_close_shutdown+0x1b0>)
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	e013      	b.n	800e58c <tcp_close_shutdown+0xd0>
 800e564:	4b41      	ldr	r3, [pc, #260]	; (800e66c <tcp_close_shutdown+0x1b0>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	60fb      	str	r3, [r7, #12]
 800e56a:	e00c      	b.n	800e586 <tcp_close_shutdown+0xca>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d104      	bne.n	800e580 <tcp_close_shutdown+0xc4>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	60da      	str	r2, [r3, #12]
 800e57e:	e005      	b.n	800e58c <tcp_close_shutdown+0xd0>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1ef      	bne.n	800e56c <tcp_close_shutdown+0xb0>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	60da      	str	r2, [r3, #12]
 800e592:	4b37      	ldr	r3, [pc, #220]	; (800e670 <tcp_close_shutdown+0x1b4>)
 800e594:	2201      	movs	r2, #1
 800e596:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e598:	4b36      	ldr	r3, [pc, #216]	; (800e674 <tcp_close_shutdown+0x1b8>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d102      	bne.n	800e5a8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e5a2:	f004 f831 	bl	8012608 <tcp_trigger_input_pcb_close>
 800e5a6:	e002      	b.n	800e5ae <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff fed5 	bl	800e358 <tcp_free>
      }
      return ERR_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e050      	b.n	800e654 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	7d1b      	ldrb	r3, [r3, #20]
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	d03b      	beq.n	800e632 <tcp_close_shutdown+0x176>
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	dc44      	bgt.n	800e648 <tcp_close_shutdown+0x18c>
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <tcp_close_shutdown+0x10c>
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d02a      	beq.n	800e61c <tcp_close_shutdown+0x160>
 800e5c6:	e03f      	b.n	800e648 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	8adb      	ldrh	r3, [r3, #22]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d021      	beq.n	800e614 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5d0:	4b29      	ldr	r3, [pc, #164]	; (800e678 <tcp_close_shutdown+0x1bc>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d105      	bne.n	800e5e6 <tcp_close_shutdown+0x12a>
 800e5da:	4b27      	ldr	r3, [pc, #156]	; (800e678 <tcp_close_shutdown+0x1bc>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	4a25      	ldr	r2, [pc, #148]	; (800e678 <tcp_close_shutdown+0x1bc>)
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	e013      	b.n	800e60e <tcp_close_shutdown+0x152>
 800e5e6:	4b24      	ldr	r3, [pc, #144]	; (800e678 <tcp_close_shutdown+0x1bc>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	60bb      	str	r3, [r7, #8]
 800e5ec:	e00c      	b.n	800e608 <tcp_close_shutdown+0x14c>
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d104      	bne.n	800e602 <tcp_close_shutdown+0x146>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	60da      	str	r2, [r3, #12]
 800e600:	e005      	b.n	800e60e <tcp_close_shutdown+0x152>
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	60bb      	str	r3, [r7, #8]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1ef      	bne.n	800e5ee <tcp_close_shutdown+0x132>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f7ff fe9f 	bl	800e358 <tcp_free>
      break;
 800e61a:	e01a      	b.n	800e652 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f7ff ff13 	bl	800e448 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	4815      	ldr	r0, [pc, #84]	; (800e67c <tcp_close_shutdown+0x1c0>)
 800e626:	f001 fb7d 	bl	800fd24 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f7ff feb0 	bl	800e390 <tcp_free_listen>
      break;
 800e630:	e00f      	b.n	800e652 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e632:	6879      	ldr	r1, [r7, #4]
 800e634:	480d      	ldr	r0, [pc, #52]	; (800e66c <tcp_close_shutdown+0x1b0>)
 800e636:	f001 fb75 	bl	800fd24 <tcp_pcb_remove>
 800e63a:	4b0d      	ldr	r3, [pc, #52]	; (800e670 <tcp_close_shutdown+0x1b4>)
 800e63c:	2201      	movs	r2, #1
 800e63e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7ff fe89 	bl	800e358 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e646:	e004      	b.n	800e652 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f819 	bl	800e680 <tcp_close_shutdown_fin>
 800e64e:	4603      	mov	r3, r0
 800e650:	e000      	b.n	800e654 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bdb0      	pop	{r4, r5, r7, pc}
 800e65c:	0801a4f0 	.word	0x0801a4f0
 800e660:	0801a5c4 	.word	0x0801a5c4
 800e664:	0801a534 	.word	0x0801a534
 800e668:	0801a5e4 	.word	0x0801a5e4
 800e66c:	200114f8 	.word	0x200114f8
 800e670:	200114f4 	.word	0x200114f4
 800e674:	2001150c 	.word	0x2001150c
 800e678:	20011504 	.word	0x20011504
 800e67c:	20011500 	.word	0x20011500

0800e680 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <tcp_close_shutdown_fin+0x1c>
 800e68e:	4b2e      	ldr	r3, [pc, #184]	; (800e748 <tcp_close_shutdown_fin+0xc8>)
 800e690:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e694:	492d      	ldr	r1, [pc, #180]	; (800e74c <tcp_close_shutdown_fin+0xcc>)
 800e696:	482e      	ldr	r0, [pc, #184]	; (800e750 <tcp_close_shutdown_fin+0xd0>)
 800e698:	f009 f8b8 	bl	801780c <iprintf>

  switch (pcb->state) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7d1b      	ldrb	r3, [r3, #20]
 800e6a0:	2b07      	cmp	r3, #7
 800e6a2:	d020      	beq.n	800e6e6 <tcp_close_shutdown_fin+0x66>
 800e6a4:	2b07      	cmp	r3, #7
 800e6a6:	dc2b      	bgt.n	800e700 <tcp_close_shutdown_fin+0x80>
 800e6a8:	2b03      	cmp	r3, #3
 800e6aa:	d002      	beq.n	800e6b2 <tcp_close_shutdown_fin+0x32>
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d00d      	beq.n	800e6cc <tcp_close_shutdown_fin+0x4c>
 800e6b0:	e026      	b.n	800e700 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f004 fe12 	bl	80132dc <tcp_send_fin>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d11f      	bne.n	800e704 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2205      	movs	r2, #5
 800e6c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6ca:	e01b      	b.n	800e704 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f004 fe05 	bl	80132dc <tcp_send_fin>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d114      	bne.n	800e708 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2205      	movs	r2, #5
 800e6e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6e4:	e010      	b.n	800e708 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f004 fdf8 	bl	80132dc <tcp_send_fin>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d109      	bne.n	800e70c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2209      	movs	r2, #9
 800e6fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6fe:	e005      	b.n	800e70c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	e01c      	b.n	800e73e <tcp_close_shutdown_fin+0xbe>
      break;
 800e704:	bf00      	nop
 800e706:	e002      	b.n	800e70e <tcp_close_shutdown_fin+0x8e>
      break;
 800e708:	bf00      	nop
 800e70a:	e000      	b.n	800e70e <tcp_close_shutdown_fin+0x8e>
      break;
 800e70c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f004 ff1e 	bl	8013558 <tcp_output>
 800e71c:	e00d      	b.n	800e73a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e726:	d108      	bne.n	800e73a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	8b5b      	ldrh	r3, [r3, #26]
 800e72c:	f043 0308 	orr.w	r3, r3, #8
 800e730:	b29a      	uxth	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	e001      	b.n	800e73e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	0801a4f0 	.word	0x0801a4f0
 800e74c:	0801a5a0 	.word	0x0801a5a0
 800e750:	0801a534 	.word	0x0801a534

0800e754 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d109      	bne.n	800e776 <tcp_close+0x22>
 800e762:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <tcp_close+0x4c>)
 800e764:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e768:	490e      	ldr	r1, [pc, #56]	; (800e7a4 <tcp_close+0x50>)
 800e76a:	480f      	ldr	r0, [pc, #60]	; (800e7a8 <tcp_close+0x54>)
 800e76c:	f009 f84e 	bl	801780c <iprintf>
 800e770:	f06f 030f 	mvn.w	r3, #15
 800e774:	e00f      	b.n	800e796 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	7d1b      	ldrb	r3, [r3, #20]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d006      	beq.n	800e78c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	8b5b      	ldrh	r3, [r3, #26]
 800e782:	f043 0310 	orr.w	r3, r3, #16
 800e786:	b29a      	uxth	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e78c:	2101      	movs	r1, #1
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff fe94 	bl	800e4bc <tcp_close_shutdown>
 800e794:	4603      	mov	r3, r0
}
 800e796:	4618      	mov	r0, r3
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	0801a4f0 	.word	0x0801a4f0
 800e7a4:	0801a600 	.word	0x0801a600
 800e7a8:	0801a534 	.word	0x0801a534

0800e7ac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d109      	bne.n	800e7d2 <tcp_shutdown+0x26>
 800e7be:	4b26      	ldr	r3, [pc, #152]	; (800e858 <tcp_shutdown+0xac>)
 800e7c0:	f240 2207 	movw	r2, #519	; 0x207
 800e7c4:	4925      	ldr	r1, [pc, #148]	; (800e85c <tcp_shutdown+0xb0>)
 800e7c6:	4826      	ldr	r0, [pc, #152]	; (800e860 <tcp_shutdown+0xb4>)
 800e7c8:	f009 f820 	bl	801780c <iprintf>
 800e7cc:	f06f 030f 	mvn.w	r3, #15
 800e7d0:	e03d      	b.n	800e84e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	7d1b      	ldrb	r3, [r3, #20]
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d102      	bne.n	800e7e0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e7da:	f06f 030a 	mvn.w	r3, #10
 800e7de:	e036      	b.n	800e84e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d01b      	beq.n	800e81e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ea:	f043 0310 	orr.w	r3, r3, #16
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d005      	beq.n	800e806 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e7fa:	2101      	movs	r1, #1
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f7ff fe5d 	bl	800e4bc <tcp_close_shutdown>
 800e802:	4603      	mov	r3, r0
 800e804:	e023      	b.n	800e84e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d007      	beq.n	800e81e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e812:	4618      	mov	r0, r3
 800e814:	f7ff faf4 	bl	800de00 <pbuf_free>
      pcb->refused_data = NULL;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2200      	movs	r2, #0
 800e81c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d013      	beq.n	800e84c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	7d1b      	ldrb	r3, [r3, #20]
 800e828:	2b04      	cmp	r3, #4
 800e82a:	dc02      	bgt.n	800e832 <tcp_shutdown+0x86>
 800e82c:	2b03      	cmp	r3, #3
 800e82e:	da02      	bge.n	800e836 <tcp_shutdown+0x8a>
 800e830:	e009      	b.n	800e846 <tcp_shutdown+0x9a>
 800e832:	2b07      	cmp	r3, #7
 800e834:	d107      	bne.n	800e846 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	4619      	mov	r1, r3
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7ff fe3d 	bl	800e4bc <tcp_close_shutdown>
 800e842:	4603      	mov	r3, r0
 800e844:	e003      	b.n	800e84e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e846:	f06f 030a 	mvn.w	r3, #10
 800e84a:	e000      	b.n	800e84e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	0801a4f0 	.word	0x0801a4f0
 800e85c:	0801a618 	.word	0x0801a618
 800e860:	0801a534 	.word	0x0801a534

0800e864 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b08e      	sub	sp, #56	; 0x38
 800e868:	af04      	add	r7, sp, #16
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d107      	bne.n	800e884 <tcp_abandon+0x20>
 800e874:	4b52      	ldr	r3, [pc, #328]	; (800e9c0 <tcp_abandon+0x15c>)
 800e876:	f240 223d 	movw	r2, #573	; 0x23d
 800e87a:	4952      	ldr	r1, [pc, #328]	; (800e9c4 <tcp_abandon+0x160>)
 800e87c:	4852      	ldr	r0, [pc, #328]	; (800e9c8 <tcp_abandon+0x164>)
 800e87e:	f008 ffc5 	bl	801780c <iprintf>
 800e882:	e099      	b.n	800e9b8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7d1b      	ldrb	r3, [r3, #20]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d106      	bne.n	800e89a <tcp_abandon+0x36>
 800e88c:	4b4c      	ldr	r3, [pc, #304]	; (800e9c0 <tcp_abandon+0x15c>)
 800e88e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e892:	494e      	ldr	r1, [pc, #312]	; (800e9cc <tcp_abandon+0x168>)
 800e894:	484c      	ldr	r0, [pc, #304]	; (800e9c8 <tcp_abandon+0x164>)
 800e896:	f008 ffb9 	bl	801780c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	7d1b      	ldrb	r3, [r3, #20]
 800e89e:	2b0a      	cmp	r3, #10
 800e8a0:	d107      	bne.n	800e8b2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e8a2:	6879      	ldr	r1, [r7, #4]
 800e8a4:	484a      	ldr	r0, [pc, #296]	; (800e9d0 <tcp_abandon+0x16c>)
 800e8a6:	f001 fa3d 	bl	800fd24 <tcp_pcb_remove>
    tcp_free(pcb);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff fd54 	bl	800e358 <tcp_free>
 800e8b0:	e082      	b.n	800e9b8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8be:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8cc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	7d1b      	ldrb	r3, [r3, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d126      	bne.n	800e92a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	8adb      	ldrh	r3, [r3, #22]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d02e      	beq.n	800e942 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8e4:	4b3b      	ldr	r3, [pc, #236]	; (800e9d4 <tcp_abandon+0x170>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d105      	bne.n	800e8fa <tcp_abandon+0x96>
 800e8ee:	4b39      	ldr	r3, [pc, #228]	; (800e9d4 <tcp_abandon+0x170>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	4a37      	ldr	r2, [pc, #220]	; (800e9d4 <tcp_abandon+0x170>)
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	e013      	b.n	800e922 <tcp_abandon+0xbe>
 800e8fa:	4b36      	ldr	r3, [pc, #216]	; (800e9d4 <tcp_abandon+0x170>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	61fb      	str	r3, [r7, #28]
 800e900:	e00c      	b.n	800e91c <tcp_abandon+0xb8>
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d104      	bne.n	800e916 <tcp_abandon+0xb2>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68da      	ldr	r2, [r3, #12]
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	60da      	str	r2, [r3, #12]
 800e914:	e005      	b.n	800e922 <tcp_abandon+0xbe>
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	61fb      	str	r3, [r7, #28]
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1ef      	bne.n	800e902 <tcp_abandon+0x9e>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	60da      	str	r2, [r3, #12]
 800e928:	e00b      	b.n	800e942 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8adb      	ldrh	r3, [r3, #22]
 800e932:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	4828      	ldr	r0, [pc, #160]	; (800e9d8 <tcp_abandon+0x174>)
 800e938:	f001 f9f4 	bl	800fd24 <tcp_pcb_remove>
 800e93c:	4b27      	ldr	r3, [pc, #156]	; (800e9dc <tcp_abandon+0x178>)
 800e93e:	2201      	movs	r2, #1
 800e940:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e946:	2b00      	cmp	r3, #0
 800e948:	d004      	beq.n	800e954 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94e:	4618      	mov	r0, r3
 800e950:	f000 fec8 	bl	800f6e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d004      	beq.n	800e966 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e960:	4618      	mov	r0, r3
 800e962:	f000 febf 	bl	800f6e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d004      	beq.n	800e978 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e972:	4618      	mov	r0, r3
 800e974:	f000 feb6 	bl	800f6e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00e      	beq.n	800e99c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e97e:	6879      	ldr	r1, [r7, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	3304      	adds	r3, #4
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	8b12      	ldrh	r2, [r2, #24]
 800e988:	9202      	str	r2, [sp, #8]
 800e98a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e98c:	9201      	str	r2, [sp, #4]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	460b      	mov	r3, r1
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	69b9      	ldr	r1, [r7, #24]
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f005 fb92 	bl	80140c0 <tcp_rst>
    }
    last_state = pcb->state;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7d1b      	ldrb	r3, [r3, #20]
 800e9a0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff fcd8 	bl	800e358 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d004      	beq.n	800e9b8 <tcp_abandon+0x154>
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	f06f 010c 	mvn.w	r1, #12
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	4798      	blx	r3
  }
}
 800e9b8:	3728      	adds	r7, #40	; 0x28
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	0801a4f0 	.word	0x0801a4f0
 800e9c4:	0801a634 	.word	0x0801a634
 800e9c8:	0801a534 	.word	0x0801a534
 800e9cc:	0801a650 	.word	0x0801a650
 800e9d0:	20011508 	.word	0x20011508
 800e9d4:	20011504 	.word	0x20011504
 800e9d8:	200114f8 	.word	0x200114f8
 800e9dc:	200114f4 	.word	0x200114f4

0800e9e0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff ff3a 	bl	800e864 <tcp_abandon>
}
 800e9f0:	bf00      	nop
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b088      	sub	sp, #32
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	4613      	mov	r3, r2
 800ea04:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ea06:	2304      	movs	r3, #4
 800ea08:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ea10:	4b3e      	ldr	r3, [pc, #248]	; (800eb0c <tcp_bind+0x114>)
 800ea12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d109      	bne.n	800ea2e <tcp_bind+0x36>
 800ea1a:	4b3d      	ldr	r3, [pc, #244]	; (800eb10 <tcp_bind+0x118>)
 800ea1c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ea20:	493c      	ldr	r1, [pc, #240]	; (800eb14 <tcp_bind+0x11c>)
 800ea22:	483d      	ldr	r0, [pc, #244]	; (800eb18 <tcp_bind+0x120>)
 800ea24:	f008 fef2 	bl	801780c <iprintf>
 800ea28:	f06f 030f 	mvn.w	r3, #15
 800ea2c:	e06a      	b.n	800eb04 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	7d1b      	ldrb	r3, [r3, #20]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d009      	beq.n	800ea4a <tcp_bind+0x52>
 800ea36:	4b36      	ldr	r3, [pc, #216]	; (800eb10 <tcp_bind+0x118>)
 800ea38:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ea3c:	4937      	ldr	r1, [pc, #220]	; (800eb1c <tcp_bind+0x124>)
 800ea3e:	4836      	ldr	r0, [pc, #216]	; (800eb18 <tcp_bind+0x120>)
 800ea40:	f008 fee4 	bl	801780c <iprintf>
 800ea44:	f06f 0305 	mvn.w	r3, #5
 800ea48:	e05c      	b.n	800eb04 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ea4a:	88fb      	ldrh	r3, [r7, #6]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d109      	bne.n	800ea64 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ea50:	f000 f9e0 	bl	800ee14 <tcp_new_port>
 800ea54:	4603      	mov	r3, r0
 800ea56:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea58:	88fb      	ldrh	r3, [r7, #6]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d135      	bne.n	800eaca <tcp_bind+0xd2>
      return ERR_BUF;
 800ea5e:	f06f 0301 	mvn.w	r3, #1
 800ea62:	e04f      	b.n	800eb04 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ea64:	2300      	movs	r3, #0
 800ea66:	61fb      	str	r3, [r7, #28]
 800ea68:	e02b      	b.n	800eac2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea6a:	4a2d      	ldr	r2, [pc, #180]	; (800eb20 <tcp_bind+0x128>)
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	e01e      	b.n	800eab6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	8adb      	ldrh	r3, [r3, #22]
 800ea7c:	88fa      	ldrh	r2, [r7, #6]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d116      	bne.n	800eab0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea82:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d010      	beq.n	800eaaa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00c      	beq.n	800eaaa <tcp_bind+0xb2>
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d009      	beq.n	800eaaa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d005      	beq.n	800eaaa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d102      	bne.n	800eab0 <tcp_bind+0xb8>
              return ERR_USE;
 800eaaa:	f06f 0307 	mvn.w	r3, #7
 800eaae:	e029      	b.n	800eb04 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	61bb      	str	r3, [r7, #24]
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1dd      	bne.n	800ea78 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	3301      	adds	r3, #1
 800eac0:	61fb      	str	r3, [r7, #28]
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	dbcf      	blt.n	800ea6a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00c      	beq.n	800eaea <tcp_bind+0xf2>
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d008      	beq.n	800eaea <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d002      	beq.n	800eae4 <tcp_bind+0xec>
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	e000      	b.n	800eae6 <tcp_bind+0xee>
 800eae4:	2300      	movs	r3, #0
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	88fa      	ldrh	r2, [r7, #6]
 800eaee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800eaf0:	4b0c      	ldr	r3, [pc, #48]	; (800eb24 <tcp_bind+0x12c>)
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	60da      	str	r2, [r3, #12]
 800eaf8:	4a0a      	ldr	r2, [pc, #40]	; (800eb24 <tcp_bind+0x12c>)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6013      	str	r3, [r2, #0]
 800eafe:	f005 fca1 	bl	8014444 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3720      	adds	r7, #32
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	0801c578 	.word	0x0801c578
 800eb10:	0801a4f0 	.word	0x0801a4f0
 800eb14:	0801a684 	.word	0x0801a684
 800eb18:	0801a534 	.word	0x0801a534
 800eb1c:	0801a69c 	.word	0x0801a69c
 800eb20:	0801c550 	.word	0x0801c550
 800eb24:	20011504 	.word	0x20011504

0800eb28 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	4613      	mov	r3, r2
 800eb34:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d106      	bne.n	800eb4a <tcp_accept_null+0x22>
 800eb3c:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <tcp_accept_null+0x34>)
 800eb3e:	f240 320f 	movw	r2, #783	; 0x30f
 800eb42:	4907      	ldr	r1, [pc, #28]	; (800eb60 <tcp_accept_null+0x38>)
 800eb44:	4807      	ldr	r0, [pc, #28]	; (800eb64 <tcp_accept_null+0x3c>)
 800eb46:	f008 fe61 	bl	801780c <iprintf>

  tcp_abort(pcb);
 800eb4a:	68b8      	ldr	r0, [r7, #8]
 800eb4c:	f7ff ff48 	bl	800e9e0 <tcp_abort>

  return ERR_ABRT;
 800eb50:	f06f 030c 	mvn.w	r3, #12
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	0801a4f0 	.word	0x0801a4f0
 800eb60:	0801a6c4 	.word	0x0801a6c4
 800eb64:	0801a534 	.word	0x0801a534

0800eb68 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	460b      	mov	r3, r1
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800eb76:	2300      	movs	r3, #0
 800eb78:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <tcp_listen_with_backlog_and_err+0x2c>
 800eb80:	4b47      	ldr	r3, [pc, #284]	; (800eca0 <tcp_listen_with_backlog_and_err+0x138>)
 800eb82:	f240 3259 	movw	r2, #857	; 0x359
 800eb86:	4947      	ldr	r1, [pc, #284]	; (800eca4 <tcp_listen_with_backlog_and_err+0x13c>)
 800eb88:	4847      	ldr	r0, [pc, #284]	; (800eca8 <tcp_listen_with_backlog_and_err+0x140>)
 800eb8a:	f008 fe3f 	bl	801780c <iprintf>
 800eb8e:	23f0      	movs	r3, #240	; 0xf0
 800eb90:	76fb      	strb	r3, [r7, #27]
 800eb92:	e079      	b.n	800ec88 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	7d1b      	ldrb	r3, [r3, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d009      	beq.n	800ebb0 <tcp_listen_with_backlog_and_err+0x48>
 800eb9c:	4b40      	ldr	r3, [pc, #256]	; (800eca0 <tcp_listen_with_backlog_and_err+0x138>)
 800eb9e:	f240 325a 	movw	r2, #858	; 0x35a
 800eba2:	4942      	ldr	r1, [pc, #264]	; (800ecac <tcp_listen_with_backlog_and_err+0x144>)
 800eba4:	4840      	ldr	r0, [pc, #256]	; (800eca8 <tcp_listen_with_backlog_and_err+0x140>)
 800eba6:	f008 fe31 	bl	801780c <iprintf>
 800ebaa:	23f1      	movs	r3, #241	; 0xf1
 800ebac:	76fb      	strb	r3, [r7, #27]
 800ebae:	e06b      	b.n	800ec88 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d104      	bne.n	800ebc2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ebbc:	23f7      	movs	r3, #247	; 0xf7
 800ebbe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebc0:	e062      	b.n	800ec88 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ebc2:	2002      	movs	r0, #2
 800ebc4:	f7fe fa22 	bl	800d00c <memp_malloc>
 800ebc8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d102      	bne.n	800ebd6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ebd0:	23ff      	movs	r3, #255	; 0xff
 800ebd2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebd4:	e058      	b.n	800ec88 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	691a      	ldr	r2, [r3, #16]
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	8ada      	ldrh	r2, [r3, #22]
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	7d5a      	ldrb	r2, [r3, #21]
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	7a5a      	ldrb	r2, [r3, #9]
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	7ada      	ldrb	r2, [r3, #11]
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	7a9a      	ldrb	r2, [r3, #10]
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	8adb      	ldrh	r3, [r3, #22]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d021      	beq.n	800ec66 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec22:	4b23      	ldr	r3, [pc, #140]	; (800ecb0 <tcp_listen_with_backlog_and_err+0x148>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d105      	bne.n	800ec38 <tcp_listen_with_backlog_and_err+0xd0>
 800ec2c:	4b20      	ldr	r3, [pc, #128]	; (800ecb0 <tcp_listen_with_backlog_and_err+0x148>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	4a1f      	ldr	r2, [pc, #124]	; (800ecb0 <tcp_listen_with_backlog_and_err+0x148>)
 800ec34:	6013      	str	r3, [r2, #0]
 800ec36:	e013      	b.n	800ec60 <tcp_listen_with_backlog_and_err+0xf8>
 800ec38:	4b1d      	ldr	r3, [pc, #116]	; (800ecb0 <tcp_listen_with_backlog_and_err+0x148>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	617b      	str	r3, [r7, #20]
 800ec3e:	e00c      	b.n	800ec5a <tcp_listen_with_backlog_and_err+0xf2>
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d104      	bne.n	800ec54 <tcp_listen_with_backlog_and_err+0xec>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	68da      	ldr	r2, [r3, #12]
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	60da      	str	r2, [r3, #12]
 800ec52:	e005      	b.n	800ec60 <tcp_listen_with_backlog_and_err+0xf8>
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	617b      	str	r3, [r7, #20]
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1ef      	bne.n	800ec40 <tcp_listen_with_backlog_and_err+0xd8>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7ff fb76 	bl	800e358 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	4a11      	ldr	r2, [pc, #68]	; (800ecb4 <tcp_listen_with_backlog_and_err+0x14c>)
 800ec70:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ec72:	4b11      	ldr	r3, [pc, #68]	; (800ecb8 <tcp_listen_with_backlog_and_err+0x150>)
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	60da      	str	r2, [r3, #12]
 800ec7a:	4a0f      	ldr	r2, [pc, #60]	; (800ecb8 <tcp_listen_with_backlog_and_err+0x150>)
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	6013      	str	r3, [r2, #0]
 800ec80:	f005 fbe0 	bl	8014444 <tcp_timer_needed>
  res = ERR_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d002      	beq.n	800ec94 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	7efa      	ldrb	r2, [r7, #27]
 800ec92:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ec94:	69fb      	ldr	r3, [r7, #28]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3720      	adds	r7, #32
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	0801a4f0 	.word	0x0801a4f0
 800eca4:	0801a6e4 	.word	0x0801a6e4
 800eca8:	0801a534 	.word	0x0801a534
 800ecac:	0801a714 	.word	0x0801a714
 800ecb0:	20011504 	.word	0x20011504
 800ecb4:	0800eb29 	.word	0x0800eb29
 800ecb8:	20011500 	.word	0x20011500

0800ecbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d106      	bne.n	800ecd8 <tcp_update_rcv_ann_wnd+0x1c>
 800ecca:	4b25      	ldr	r3, [pc, #148]	; (800ed60 <tcp_update_rcv_ann_wnd+0xa4>)
 800eccc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ecd0:	4924      	ldr	r1, [pc, #144]	; (800ed64 <tcp_update_rcv_ann_wnd+0xa8>)
 800ecd2:	4825      	ldr	r0, [pc, #148]	; (800ed68 <tcp_update_rcv_ann_wnd+0xac>)
 800ecd4:	f008 fd9a 	bl	801780c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ece0:	4413      	add	r3, r2
 800ece2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ecec:	f640 3168 	movw	r1, #2920	; 0xb68
 800ecf0:	428a      	cmp	r2, r1
 800ecf2:	bf28      	it	cs
 800ecf4:	460a      	movcs	r2, r1
 800ecf6:	b292      	uxth	r2, r2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	db08      	blt.n	800ed14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	e020      	b.n	800ed56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	dd03      	ble.n	800ed2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed28:	e014      	b.n	800ed54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed3c:	d306      	bcc.n	800ed4c <tcp_update_rcv_ann_wnd+0x90>
 800ed3e:	4b08      	ldr	r3, [pc, #32]	; (800ed60 <tcp_update_rcv_ann_wnd+0xa4>)
 800ed40:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ed44:	4909      	ldr	r1, [pc, #36]	; (800ed6c <tcp_update_rcv_ann_wnd+0xb0>)
 800ed46:	4808      	ldr	r0, [pc, #32]	; (800ed68 <tcp_update_rcv_ann_wnd+0xac>)
 800ed48:	f008 fd60 	bl	801780c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ed54:	2300      	movs	r3, #0
  }
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	0801a4f0 	.word	0x0801a4f0
 800ed64:	0801a74c 	.word	0x0801a74c
 800ed68:	0801a534 	.word	0x0801a534
 800ed6c:	0801a770 	.word	0x0801a770

0800ed70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d107      	bne.n	800ed92 <tcp_recved+0x22>
 800ed82:	4b20      	ldr	r3, [pc, #128]	; (800ee04 <tcp_recved+0x94>)
 800ed84:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ed88:	491f      	ldr	r1, [pc, #124]	; (800ee08 <tcp_recved+0x98>)
 800ed8a:	4820      	ldr	r0, [pc, #128]	; (800ee0c <tcp_recved+0x9c>)
 800ed8c:	f008 fd3e 	bl	801780c <iprintf>
 800ed90:	e034      	b.n	800edfc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	7d1b      	ldrb	r3, [r3, #20]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d106      	bne.n	800eda8 <tcp_recved+0x38>
 800ed9a:	4b1a      	ldr	r3, [pc, #104]	; (800ee04 <tcp_recved+0x94>)
 800ed9c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eda0:	491b      	ldr	r1, [pc, #108]	; (800ee10 <tcp_recved+0xa0>)
 800eda2:	481a      	ldr	r0, [pc, #104]	; (800ee0c <tcp_recved+0x9c>)
 800eda4:	f008 fd32 	bl	801780c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800edac:	887b      	ldrh	r3, [r7, #2]
 800edae:	4413      	add	r3, r2
 800edb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800edb2:	89fb      	ldrh	r3, [r7, #14]
 800edb4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800edb8:	4293      	cmp	r3, r2
 800edba:	d804      	bhi.n	800edc6 <tcp_recved+0x56>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edc0:	89fa      	ldrh	r2, [r7, #14]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d204      	bcs.n	800edd0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800edcc:	851a      	strh	r2, [r3, #40]	; 0x28
 800edce:	e002      	b.n	800edd6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	89fa      	ldrh	r2, [r7, #14]
 800edd4:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7ff ff70 	bl	800ecbc <tcp_update_rcv_ann_wnd>
 800eddc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d909      	bls.n	800edfc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	8b5b      	ldrh	r3, [r3, #26]
 800edec:	f043 0302 	orr.w	r3, r3, #2
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f004 fbae 	bl	8013558 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	0801a4f0 	.word	0x0801a4f0
 800ee08:	0801a78c 	.word	0x0801a78c
 800ee0c:	0801a534 	.word	0x0801a534
 800ee10:	0801a7a4 	.word	0x0801a7a4

0800ee14 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ee1e:	4b1e      	ldr	r3, [pc, #120]	; (800ee98 <tcp_new_port+0x84>)
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	3301      	adds	r3, #1
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	4b1c      	ldr	r3, [pc, #112]	; (800ee98 <tcp_new_port+0x84>)
 800ee28:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ee2a:	4b1b      	ldr	r3, [pc, #108]	; (800ee98 <tcp_new_port+0x84>)
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d103      	bne.n	800ee3e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ee36:	4b18      	ldr	r3, [pc, #96]	; (800ee98 <tcp_new_port+0x84>)
 800ee38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ee3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee3e:	2300      	movs	r3, #0
 800ee40:	71fb      	strb	r3, [r7, #7]
 800ee42:	e01e      	b.n	800ee82 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	4a15      	ldr	r2, [pc, #84]	; (800ee9c <tcp_new_port+0x88>)
 800ee48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	603b      	str	r3, [r7, #0]
 800ee50:	e011      	b.n	800ee76 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	8ada      	ldrh	r2, [r3, #22]
 800ee56:	4b10      	ldr	r3, [pc, #64]	; (800ee98 <tcp_new_port+0x84>)
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d108      	bne.n	800ee70 <tcp_new_port+0x5c>
        n++;
 800ee5e:	88bb      	ldrh	r3, [r7, #4]
 800ee60:	3301      	adds	r3, #1
 800ee62:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ee64:	88bb      	ldrh	r3, [r7, #4]
 800ee66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee6a:	d3d8      	bcc.n	800ee1e <tcp_new_port+0xa>
          return 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	e00d      	b.n	800ee8c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	603b      	str	r3, [r7, #0]
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1ea      	bne.n	800ee52 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	71fb      	strb	r3, [r7, #7]
 800ee82:	79fb      	ldrb	r3, [r7, #7]
 800ee84:	2b03      	cmp	r3, #3
 800ee86:	d9dd      	bls.n	800ee44 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ee88:	4b03      	ldr	r3, [pc, #12]	; (800ee98 <tcp_new_port+0x84>)
 800ee8a:	881b      	ldrh	r3, [r3, #0]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	20000010 	.word	0x20000010
 800ee9c:	0801c550 	.word	0x0801c550

0800eea0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eea0:	b5b0      	push	{r4, r5, r7, lr}
 800eea2:	b090      	sub	sp, #64	; 0x40
 800eea4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800eeac:	4b94      	ldr	r3, [pc, #592]	; (800f100 <tcp_slowtmr+0x260>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	4a93      	ldr	r2, [pc, #588]	; (800f100 <tcp_slowtmr+0x260>)
 800eeb4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eeb6:	4b93      	ldr	r3, [pc, #588]	; (800f104 <tcp_slowtmr+0x264>)
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	3301      	adds	r3, #1
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	4b91      	ldr	r3, [pc, #580]	; (800f104 <tcp_slowtmr+0x264>)
 800eec0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eec2:	2300      	movs	r3, #0
 800eec4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eec6:	4b90      	ldr	r3, [pc, #576]	; (800f108 <tcp_slowtmr+0x268>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eecc:	e29d      	b.n	800f40a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed0:	7d1b      	ldrb	r3, [r3, #20]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d106      	bne.n	800eee4 <tcp_slowtmr+0x44>
 800eed6:	4b8d      	ldr	r3, [pc, #564]	; (800f10c <tcp_slowtmr+0x26c>)
 800eed8:	f240 42be 	movw	r2, #1214	; 0x4be
 800eedc:	498c      	ldr	r1, [pc, #560]	; (800f110 <tcp_slowtmr+0x270>)
 800eede:	488d      	ldr	r0, [pc, #564]	; (800f114 <tcp_slowtmr+0x274>)
 800eee0:	f008 fc94 	bl	801780c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d106      	bne.n	800eefa <tcp_slowtmr+0x5a>
 800eeec:	4b87      	ldr	r3, [pc, #540]	; (800f10c <tcp_slowtmr+0x26c>)
 800eeee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eef2:	4989      	ldr	r1, [pc, #548]	; (800f118 <tcp_slowtmr+0x278>)
 800eef4:	4887      	ldr	r0, [pc, #540]	; (800f114 <tcp_slowtmr+0x274>)
 800eef6:	f008 fc89 	bl	801780c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	7d1b      	ldrb	r3, [r3, #20]
 800eefe:	2b0a      	cmp	r3, #10
 800ef00:	d106      	bne.n	800ef10 <tcp_slowtmr+0x70>
 800ef02:	4b82      	ldr	r3, [pc, #520]	; (800f10c <tcp_slowtmr+0x26c>)
 800ef04:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ef08:	4984      	ldr	r1, [pc, #528]	; (800f11c <tcp_slowtmr+0x27c>)
 800ef0a:	4882      	ldr	r0, [pc, #520]	; (800f114 <tcp_slowtmr+0x274>)
 800ef0c:	f008 fc7e 	bl	801780c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	7f9a      	ldrb	r2, [r3, #30]
 800ef14:	4b7b      	ldr	r3, [pc, #492]	; (800f104 <tcp_slowtmr+0x264>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d105      	bne.n	800ef28 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ef26:	e270      	b.n	800f40a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ef28:	4b76      	ldr	r3, [pc, #472]	; (800f104 <tcp_slowtmr+0x264>)
 800ef2a:	781a      	ldrb	r2, [r3, #0]
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	7d1b      	ldrb	r3, [r3, #20]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d10a      	bne.n	800ef5a <tcp_slowtmr+0xba>
 800ef44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef4a:	2b05      	cmp	r3, #5
 800ef4c:	d905      	bls.n	800ef5a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ef4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef52:	3301      	adds	r3, #1
 800ef54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef58:	e11e      	b.n	800f198 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef60:	2b0b      	cmp	r3, #11
 800ef62:	d905      	bls.n	800ef70 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef68:	3301      	adds	r3, #1
 800ef6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef6e:	e113      	b.n	800f198 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d075      	beq.n	800f066 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d006      	beq.n	800ef90 <tcp_slowtmr+0xf0>
 800ef82:	4b62      	ldr	r3, [pc, #392]	; (800f10c <tcp_slowtmr+0x26c>)
 800ef84:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef88:	4965      	ldr	r1, [pc, #404]	; (800f120 <tcp_slowtmr+0x280>)
 800ef8a:	4862      	ldr	r0, [pc, #392]	; (800f114 <tcp_slowtmr+0x274>)
 800ef8c:	f008 fc3e 	bl	801780c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d106      	bne.n	800efa6 <tcp_slowtmr+0x106>
 800ef98:	4b5c      	ldr	r3, [pc, #368]	; (800f10c <tcp_slowtmr+0x26c>)
 800ef9a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef9e:	4961      	ldr	r1, [pc, #388]	; (800f124 <tcp_slowtmr+0x284>)
 800efa0:	485c      	ldr	r0, [pc, #368]	; (800f114 <tcp_slowtmr+0x274>)
 800efa2:	f008 fc33 	bl	801780c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efac:	2b0b      	cmp	r3, #11
 800efae:	d905      	bls.n	800efbc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800efb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efb4:	3301      	adds	r3, #1
 800efb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efba:	e0ed      	b.n	800f198 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efc2:	3b01      	subs	r3, #1
 800efc4:	4a58      	ldr	r2, [pc, #352]	; (800f128 <tcp_slowtmr+0x288>)
 800efc6:	5cd3      	ldrb	r3, [r2, r3]
 800efc8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efd0:	7c7a      	ldrb	r2, [r7, #17]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d907      	bls.n	800efe6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efdc:	3301      	adds	r3, #1
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800efe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efec:	7c7a      	ldrb	r2, [r7, #17]
 800efee:	429a      	cmp	r2, r3
 800eff0:	f200 80d2 	bhi.w	800f198 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eff4:	2301      	movs	r3, #1
 800eff6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800effe:	2b00      	cmp	r3, #0
 800f000:	d108      	bne.n	800f014 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f004:	f005 f950 	bl	80142a8 <tcp_zero_window_probe>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d014      	beq.n	800f038 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f00e:	2300      	movs	r3, #0
 800f010:	623b      	str	r3, [r7, #32]
 800f012:	e011      	b.n	800f038 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f01a:	4619      	mov	r1, r3
 800f01c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f01e:	f004 f815 	bl	801304c <tcp_split_unsent_seg>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d107      	bne.n	800f038 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f02a:	f004 fa95 	bl	8013558 <tcp_output>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d101      	bne.n	800f038 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f034:	2300      	movs	r3, #0
 800f036:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f038:	6a3b      	ldr	r3, [r7, #32]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f000 80ac 	beq.w	800f198 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f042:	2200      	movs	r2, #0
 800f044:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f04e:	2b06      	cmp	r3, #6
 800f050:	f200 80a2 	bhi.w	800f198 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f05a:	3301      	adds	r3, #1
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f060:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f064:	e098      	b.n	800f198 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	db0f      	blt.n	800f090 <tcp_slowtmr+0x1f0>
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f076:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d008      	beq.n	800f090 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f084:	b29b      	uxth	r3, r3
 800f086:	3301      	adds	r3, #1
 800f088:	b29b      	uxth	r3, r3
 800f08a:	b21a      	sxth	r2, r3
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f098:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f09c:	429a      	cmp	r2, r3
 800f09e:	db7b      	blt.n	800f198 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f0a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0a2:	f004 fd4b 	bl	8013b3c <tcp_rexmit_rto_prepare>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d007      	beq.n	800f0bc <tcp_slowtmr+0x21c>
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d171      	bne.n	800f198 <tcp_slowtmr+0x2f8>
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d06d      	beq.n	800f198 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	7d1b      	ldrb	r3, [r3, #20]
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d03a      	beq.n	800f13a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0ca:	2b0c      	cmp	r3, #12
 800f0cc:	bf28      	it	cs
 800f0ce:	230c      	movcs	r3, #12
 800f0d0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0d8:	10db      	asrs	r3, r3, #3
 800f0da:	b21b      	sxth	r3, r3
 800f0dc:	461a      	mov	r2, r3
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0e4:	4413      	add	r3, r2
 800f0e6:	7efa      	ldrb	r2, [r7, #27]
 800f0e8:	4910      	ldr	r1, [pc, #64]	; (800f12c <tcp_slowtmr+0x28c>)
 800f0ea:	5c8a      	ldrb	r2, [r1, r2]
 800f0ec:	4093      	lsls	r3, r2
 800f0ee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	dc1a      	bgt.n	800f130 <tcp_slowtmr+0x290>
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	b21a      	sxth	r2, r3
 800f0fe:	e019      	b.n	800f134 <tcp_slowtmr+0x294>
 800f100:	200114fc 	.word	0x200114fc
 800f104:	20004a02 	.word	0x20004a02
 800f108:	200114f8 	.word	0x200114f8
 800f10c:	0801a4f0 	.word	0x0801a4f0
 800f110:	0801a834 	.word	0x0801a834
 800f114:	0801a534 	.word	0x0801a534
 800f118:	0801a860 	.word	0x0801a860
 800f11c:	0801a88c 	.word	0x0801a88c
 800f120:	0801a8bc 	.word	0x0801a8bc
 800f124:	0801a8f0 	.word	0x0801a8f0
 800f128:	0801c548 	.word	0x0801c548
 800f12c:	0801c538 	.word	0x0801c538
 800f130:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	2200      	movs	r2, #0
 800f13e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f14c:	4293      	cmp	r3, r2
 800f14e:	bf28      	it	cs
 800f150:	4613      	movcs	r3, r2
 800f152:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f154:	8a7b      	ldrh	r3, [r7, #18]
 800f156:	085b      	lsrs	r3, r3, #1
 800f158:	b29a      	uxth	r2, r3
 800f15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	429a      	cmp	r2, r3
 800f170:	d206      	bcs.n	800f180 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f176:	005b      	lsls	r3, r3, #1
 800f178:	b29a      	uxth	r2, r3
 800f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	2200      	movs	r2, #0
 800f18e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f194:	f004 fd42 	bl	8013c1c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	7d1b      	ldrb	r3, [r3, #20]
 800f19c:	2b06      	cmp	r3, #6
 800f19e:	d111      	bne.n	800f1c4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	8b5b      	ldrh	r3, [r3, #26]
 800f1a4:	f003 0310 	and.w	r3, r3, #16
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00b      	beq.n	800f1c4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1ac:	4b9c      	ldr	r3, [pc, #624]	; (800f420 <tcp_slowtmr+0x580>)
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b2:	6a1b      	ldr	r3, [r3, #32]
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	2b28      	cmp	r3, #40	; 0x28
 800f1b8:	d904      	bls.n	800f1c4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1be:	3301      	adds	r3, #1
 800f1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	7a5b      	ldrb	r3, [r3, #9]
 800f1c8:	f003 0308 	and.w	r3, r3, #8
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d04a      	beq.n	800f266 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1d4:	2b04      	cmp	r3, #4
 800f1d6:	d003      	beq.n	800f1e0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f1dc:	2b07      	cmp	r3, #7
 800f1de:	d142      	bne.n	800f266 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1e0:	4b8f      	ldr	r3, [pc, #572]	; (800f420 <tcp_slowtmr+0x580>)
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	6a1b      	ldr	r3, [r3, #32]
 800f1e8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1f0:	4b8c      	ldr	r3, [pc, #560]	; (800f424 <tcp_slowtmr+0x584>)
 800f1f2:	440b      	add	r3, r1
 800f1f4:	498c      	ldr	r1, [pc, #560]	; (800f428 <tcp_slowtmr+0x588>)
 800f1f6:	fba1 1303 	umull	r1, r3, r1, r3
 800f1fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d90a      	bls.n	800f216 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f204:	3301      	adds	r3, #1
 800f206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f20a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f20e:	3301      	adds	r3, #1
 800f210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f214:	e027      	b.n	800f266 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f216:	4b82      	ldr	r3, [pc, #520]	; (800f420 <tcp_slowtmr+0x580>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f228:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f22c:	4618      	mov	r0, r3
 800f22e:	4b7f      	ldr	r3, [pc, #508]	; (800f42c <tcp_slowtmr+0x58c>)
 800f230:	fb03 f300 	mul.w	r3, r3, r0
 800f234:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f236:	497c      	ldr	r1, [pc, #496]	; (800f428 <tcp_slowtmr+0x588>)
 800f238:	fba1 1303 	umull	r1, r3, r1, r3
 800f23c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f23e:	429a      	cmp	r2, r3
 800f240:	d911      	bls.n	800f266 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f244:	f004 fff0 	bl	8014228 <tcp_keepalive>
 800f248:	4603      	mov	r3, r0
 800f24a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f24e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f252:	2b00      	cmp	r3, #0
 800f254:	d107      	bne.n	800f266 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f25c:	3301      	adds	r3, #1
 800f25e:	b2da      	uxtb	r2, r3
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d011      	beq.n	800f292 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f26e:	4b6c      	ldr	r3, [pc, #432]	; (800f420 <tcp_slowtmr+0x580>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	1ad2      	subs	r2, r2, r3
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f27e:	4619      	mov	r1, r3
 800f280:	460b      	mov	r3, r1
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	440b      	add	r3, r1
 800f286:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f288:	429a      	cmp	r2, r3
 800f28a:	d302      	bcc.n	800f292 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f28c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f28e:	f000 fead 	bl	800ffec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	7d1b      	ldrb	r3, [r3, #20]
 800f296:	2b03      	cmp	r3, #3
 800f298:	d10b      	bne.n	800f2b2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f29a:	4b61      	ldr	r3, [pc, #388]	; (800f420 <tcp_slowtmr+0x580>)
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	6a1b      	ldr	r3, [r3, #32]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	2b28      	cmp	r3, #40	; 0x28
 800f2a6:	d904      	bls.n	800f2b2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	7d1b      	ldrb	r3, [r3, #20]
 800f2b6:	2b09      	cmp	r3, #9
 800f2b8:	d10b      	bne.n	800f2d2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2ba:	4b59      	ldr	r3, [pc, #356]	; (800f420 <tcp_slowtmr+0x580>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	2bf0      	cmp	r3, #240	; 0xf0
 800f2c6:	d904      	bls.n	800f2d2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d060      	beq.n	800f39c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f2e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2e4:	f000 fcce 	bl	800fc84 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d010      	beq.n	800f310 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2ee:	4b50      	ldr	r3, [pc, #320]	; (800f430 <tcp_slowtmr+0x590>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d106      	bne.n	800f306 <tcp_slowtmr+0x466>
 800f2f8:	4b4e      	ldr	r3, [pc, #312]	; (800f434 <tcp_slowtmr+0x594>)
 800f2fa:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2fe:	494e      	ldr	r1, [pc, #312]	; (800f438 <tcp_slowtmr+0x598>)
 800f300:	484e      	ldr	r0, [pc, #312]	; (800f43c <tcp_slowtmr+0x59c>)
 800f302:	f008 fa83 	bl	801780c <iprintf>
        prev->next = pcb->next;
 800f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f308:	68da      	ldr	r2, [r3, #12]
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	60da      	str	r2, [r3, #12]
 800f30e:	e00f      	b.n	800f330 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f310:	4b47      	ldr	r3, [pc, #284]	; (800f430 <tcp_slowtmr+0x590>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f316:	429a      	cmp	r2, r3
 800f318:	d006      	beq.n	800f328 <tcp_slowtmr+0x488>
 800f31a:	4b46      	ldr	r3, [pc, #280]	; (800f434 <tcp_slowtmr+0x594>)
 800f31c:	f240 5271 	movw	r2, #1393	; 0x571
 800f320:	4947      	ldr	r1, [pc, #284]	; (800f440 <tcp_slowtmr+0x5a0>)
 800f322:	4846      	ldr	r0, [pc, #280]	; (800f43c <tcp_slowtmr+0x59c>)
 800f324:	f008 fa72 	bl	801780c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	68db      	ldr	r3, [r3, #12]
 800f32c:	4a40      	ldr	r2, [pc, #256]	; (800f430 <tcp_slowtmr+0x590>)
 800f32e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f334:	2b00      	cmp	r3, #0
 800f336:	d013      	beq.n	800f360 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f340:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	3304      	adds	r3, #4
 800f346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f348:	8ad2      	ldrh	r2, [r2, #22]
 800f34a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f34c:	8b09      	ldrh	r1, [r1, #24]
 800f34e:	9102      	str	r1, [sp, #8]
 800f350:	9201      	str	r2, [sp, #4]
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	462b      	mov	r3, r5
 800f356:	4622      	mov	r2, r4
 800f358:	4601      	mov	r1, r0
 800f35a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f35c:	f004 feb0 	bl	80140c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	691b      	ldr	r3, [r3, #16]
 800f364:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f368:	7d1b      	ldrb	r3, [r3, #20]
 800f36a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f376:	6838      	ldr	r0, [r7, #0]
 800f378:	f7fe ffee 	bl	800e358 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f37c:	4b31      	ldr	r3, [pc, #196]	; (800f444 <tcp_slowtmr+0x5a4>)
 800f37e:	2200      	movs	r2, #0
 800f380:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d004      	beq.n	800f392 <tcp_slowtmr+0x4f2>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f06f 010c 	mvn.w	r1, #12
 800f38e:	68b8      	ldr	r0, [r7, #8]
 800f390:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f392:	4b2c      	ldr	r3, [pc, #176]	; (800f444 <tcp_slowtmr+0x5a4>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d037      	beq.n	800f40a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f39a:	e592      	b.n	800eec2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	7f1b      	ldrb	r3, [r3, #28]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	7f1a      	ldrb	r2, [r3, #28]
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	7f5b      	ldrb	r3, [r3, #29]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d325      	bcc.n	800f40a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f3c4:	4b1f      	ldr	r3, [pc, #124]	; (800f444 <tcp_slowtmr+0x5a4>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00b      	beq.n	800f3ec <tcp_slowtmr+0x54c>
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3dc:	6912      	ldr	r2, [r2, #16]
 800f3de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	4798      	blx	r3
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f3ea:	e002      	b.n	800f3f2 <tcp_slowtmr+0x552>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f3f2:	4b14      	ldr	r3, [pc, #80]	; (800f444 <tcp_slowtmr+0x5a4>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d000      	beq.n	800f3fc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f3fa:	e562      	b.n	800eec2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f400:	2b00      	cmp	r3, #0
 800f402:	d102      	bne.n	800f40a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f406:	f004 f8a7 	bl	8013558 <tcp_output>
  while (pcb != NULL) {
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f47f ad5e 	bne.w	800eece <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f412:	2300      	movs	r3, #0
 800f414:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f416:	4b0c      	ldr	r3, [pc, #48]	; (800f448 <tcp_slowtmr+0x5a8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f41c:	e069      	b.n	800f4f2 <tcp_slowtmr+0x652>
 800f41e:	bf00      	nop
 800f420:	200114fc 	.word	0x200114fc
 800f424:	000a4cb8 	.word	0x000a4cb8
 800f428:	10624dd3 	.word	0x10624dd3
 800f42c:	000124f8 	.word	0x000124f8
 800f430:	200114f8 	.word	0x200114f8
 800f434:	0801a4f0 	.word	0x0801a4f0
 800f438:	0801a928 	.word	0x0801a928
 800f43c:	0801a534 	.word	0x0801a534
 800f440:	0801a954 	.word	0x0801a954
 800f444:	200114f4 	.word	0x200114f4
 800f448:	20011508 	.word	0x20011508
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	7d1b      	ldrb	r3, [r3, #20]
 800f450:	2b0a      	cmp	r3, #10
 800f452:	d006      	beq.n	800f462 <tcp_slowtmr+0x5c2>
 800f454:	4b2b      	ldr	r3, [pc, #172]	; (800f504 <tcp_slowtmr+0x664>)
 800f456:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f45a:	492b      	ldr	r1, [pc, #172]	; (800f508 <tcp_slowtmr+0x668>)
 800f45c:	482b      	ldr	r0, [pc, #172]	; (800f50c <tcp_slowtmr+0x66c>)
 800f45e:	f008 f9d5 	bl	801780c <iprintf>
    pcb_remove = 0;
 800f462:	2300      	movs	r3, #0
 800f464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f468:	4b29      	ldr	r3, [pc, #164]	; (800f510 <tcp_slowtmr+0x670>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46e:	6a1b      	ldr	r3, [r3, #32]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	2bf0      	cmp	r3, #240	; 0xf0
 800f474:	d904      	bls.n	800f480 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f47a:	3301      	adds	r3, #1
 800f47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f484:	2b00      	cmp	r3, #0
 800f486:	d02f      	beq.n	800f4e8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f48a:	f000 fbfb 	bl	800fc84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f490:	2b00      	cmp	r3, #0
 800f492:	d010      	beq.n	800f4b6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f494:	4b1f      	ldr	r3, [pc, #124]	; (800f514 <tcp_slowtmr+0x674>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d106      	bne.n	800f4ac <tcp_slowtmr+0x60c>
 800f49e:	4b19      	ldr	r3, [pc, #100]	; (800f504 <tcp_slowtmr+0x664>)
 800f4a0:	f240 52af 	movw	r2, #1455	; 0x5af
 800f4a4:	491c      	ldr	r1, [pc, #112]	; (800f518 <tcp_slowtmr+0x678>)
 800f4a6:	4819      	ldr	r0, [pc, #100]	; (800f50c <tcp_slowtmr+0x66c>)
 800f4a8:	f008 f9b0 	bl	801780c <iprintf>
        prev->next = pcb->next;
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ae:	68da      	ldr	r2, [r3, #12]
 800f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b2:	60da      	str	r2, [r3, #12]
 800f4b4:	e00f      	b.n	800f4d6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f4b6:	4b17      	ldr	r3, [pc, #92]	; (800f514 <tcp_slowtmr+0x674>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d006      	beq.n	800f4ce <tcp_slowtmr+0x62e>
 800f4c0:	4b10      	ldr	r3, [pc, #64]	; (800f504 <tcp_slowtmr+0x664>)
 800f4c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f4c6:	4915      	ldr	r1, [pc, #84]	; (800f51c <tcp_slowtmr+0x67c>)
 800f4c8:	4810      	ldr	r0, [pc, #64]	; (800f50c <tcp_slowtmr+0x66c>)
 800f4ca:	f008 f99f 	bl	801780c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	4a10      	ldr	r2, [pc, #64]	; (800f514 <tcp_slowtmr+0x674>)
 800f4d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f4e0:	69f8      	ldr	r0, [r7, #28]
 800f4e2:	f7fe ff39 	bl	800e358 <tcp_free>
 800f4e6:	e004      	b.n	800f4f2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1a9      	bne.n	800f44c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4f8:	bf00      	nop
 800f4fa:	bf00      	nop
 800f4fc:	3730      	adds	r7, #48	; 0x30
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bdb0      	pop	{r4, r5, r7, pc}
 800f502:	bf00      	nop
 800f504:	0801a4f0 	.word	0x0801a4f0
 800f508:	0801a980 	.word	0x0801a980
 800f50c:	0801a534 	.word	0x0801a534
 800f510:	200114fc 	.word	0x200114fc
 800f514:	20011508 	.word	0x20011508
 800f518:	0801a9b0 	.word	0x0801a9b0
 800f51c:	0801a9d8 	.word	0x0801a9d8

0800f520 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f526:	4b2d      	ldr	r3, [pc, #180]	; (800f5dc <tcp_fasttmr+0xbc>)
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	3301      	adds	r3, #1
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	4b2b      	ldr	r3, [pc, #172]	; (800f5dc <tcp_fasttmr+0xbc>)
 800f530:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f532:	4b2b      	ldr	r3, [pc, #172]	; (800f5e0 <tcp_fasttmr+0xc0>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f538:	e048      	b.n	800f5cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	7f9a      	ldrb	r2, [r3, #30]
 800f53e:	4b27      	ldr	r3, [pc, #156]	; (800f5dc <tcp_fasttmr+0xbc>)
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	429a      	cmp	r2, r3
 800f544:	d03f      	beq.n	800f5c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f546:	4b25      	ldr	r3, [pc, #148]	; (800f5dc <tcp_fasttmr+0xbc>)
 800f548:	781a      	ldrb	r2, [r3, #0]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	8b5b      	ldrh	r3, [r3, #26]
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	d010      	beq.n	800f57c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	8b5b      	ldrh	r3, [r3, #26]
 800f55e:	f043 0302 	orr.w	r3, r3, #2
 800f562:	b29a      	uxth	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f003 fff5 	bl	8013558 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	8b5b      	ldrh	r3, [r3, #26]
 800f572:	f023 0303 	bic.w	r3, r3, #3
 800f576:	b29a      	uxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	8b5b      	ldrh	r3, [r3, #26]
 800f580:	f003 0308 	and.w	r3, r3, #8
 800f584:	2b00      	cmp	r3, #0
 800f586:	d009      	beq.n	800f59c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	8b5b      	ldrh	r3, [r3, #26]
 800f58c:	f023 0308 	bic.w	r3, r3, #8
 800f590:	b29a      	uxth	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff f872 	bl	800e680 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f5aa:	4b0e      	ldr	r3, [pc, #56]	; (800f5e4 <tcp_fasttmr+0xc4>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 f819 	bl	800f5e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f5b6:	4b0b      	ldr	r3, [pc, #44]	; (800f5e4 <tcp_fasttmr+0xc4>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d000      	beq.n	800f5c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f5be:	e7b8      	b.n	800f532 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	607b      	str	r3, [r7, #4]
 800f5c4:	e002      	b.n	800f5cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d1b3      	bne.n	800f53a <tcp_fasttmr+0x1a>
    }
  }
}
 800f5d2:	bf00      	nop
 800f5d4:	bf00      	nop
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	20004a02 	.word	0x20004a02
 800f5e0:	200114f8 	.word	0x200114f8
 800f5e4:	200114f4 	.word	0x200114f4

0800f5e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d109      	bne.n	800f60a <tcp_process_refused_data+0x22>
 800f5f6:	4b38      	ldr	r3, [pc, #224]	; (800f6d8 <tcp_process_refused_data+0xf0>)
 800f5f8:	f240 6209 	movw	r2, #1545	; 0x609
 800f5fc:	4937      	ldr	r1, [pc, #220]	; (800f6dc <tcp_process_refused_data+0xf4>)
 800f5fe:	4838      	ldr	r0, [pc, #224]	; (800f6e0 <tcp_process_refused_data+0xf8>)
 800f600:	f008 f904 	bl	801780c <iprintf>
 800f604:	f06f 030f 	mvn.w	r3, #15
 800f608:	e061      	b.n	800f6ce <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f60e:	7b5b      	ldrb	r3, [r3, #13]
 800f610:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f616:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00b      	beq.n	800f640 <tcp_process_refused_data+0x58>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6918      	ldr	r0, [r3, #16]
 800f632:	2300      	movs	r3, #0
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	6879      	ldr	r1, [r7, #4]
 800f638:	47a0      	blx	r4
 800f63a:	4603      	mov	r3, r0
 800f63c:	73fb      	strb	r3, [r7, #15]
 800f63e:	e007      	b.n	800f650 <tcp_process_refused_data+0x68>
 800f640:	2300      	movs	r3, #0
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	6879      	ldr	r1, [r7, #4]
 800f646:	2000      	movs	r0, #0
 800f648:	f000 f8a6 	bl	800f798 <tcp_recv_null>
 800f64c:	4603      	mov	r3, r0
 800f64e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d12b      	bne.n	800f6b0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f658:	7bbb      	ldrb	r3, [r7, #14]
 800f65a:	f003 0320 	and.w	r3, r3, #32
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d034      	beq.n	800f6cc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f666:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d005      	beq.n	800f67a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f672:	3301      	adds	r3, #1
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00b      	beq.n	800f69c <tcp_process_refused_data+0xb4>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6918      	ldr	r0, [r3, #16]
 800f68e:	2300      	movs	r3, #0
 800f690:	2200      	movs	r2, #0
 800f692:	6879      	ldr	r1, [r7, #4]
 800f694:	47a0      	blx	r4
 800f696:	4603      	mov	r3, r0
 800f698:	73fb      	strb	r3, [r7, #15]
 800f69a:	e001      	b.n	800f6a0 <tcp_process_refused_data+0xb8>
 800f69c:	2300      	movs	r3, #0
 800f69e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6a4:	f113 0f0d 	cmn.w	r3, #13
 800f6a8:	d110      	bne.n	800f6cc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800f6aa:	f06f 030c 	mvn.w	r3, #12
 800f6ae:	e00e      	b.n	800f6ce <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800f6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6b4:	f113 0f0d 	cmn.w	r3, #13
 800f6b8:	d102      	bne.n	800f6c0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f6ba:	f06f 030c 	mvn.w	r3, #12
 800f6be:	e006      	b.n	800f6ce <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f6c6:	f06f 0304 	mvn.w	r3, #4
 800f6ca:	e000      	b.n	800f6ce <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800f6cc:	2300      	movs	r3, #0
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd90      	pop	{r4, r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	0801a4f0 	.word	0x0801a4f0
 800f6dc:	0801aa00 	.word	0x0801aa00
 800f6e0:	0801a534 	.word	0x0801a534

0800f6e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f6ec:	e007      	b.n	800f6fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 f80a 	bl	800f70e <tcp_seg_free>
    seg = next;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1f4      	bne.n	800f6ee <tcp_segs_free+0xa>
  }
}
 800f704:	bf00      	nop
 800f706:	bf00      	nop
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b082      	sub	sp, #8
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00c      	beq.n	800f736 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d004      	beq.n	800f72e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fe fb69 	bl	800de00 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	2003      	movs	r0, #3
 800f732:	f7fd fcbd 	bl	800d0b0 <memp_free>
  }
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
	...

0800f740 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d106      	bne.n	800f75c <tcp_seg_copy+0x1c>
 800f74e:	4b0f      	ldr	r3, [pc, #60]	; (800f78c <tcp_seg_copy+0x4c>)
 800f750:	f240 6282 	movw	r2, #1666	; 0x682
 800f754:	490e      	ldr	r1, [pc, #56]	; (800f790 <tcp_seg_copy+0x50>)
 800f756:	480f      	ldr	r0, [pc, #60]	; (800f794 <tcp_seg_copy+0x54>)
 800f758:	f008 f858 	bl	801780c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f75c:	2003      	movs	r0, #3
 800f75e:	f7fd fc55 	bl	800d00c <memp_malloc>
 800f762:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <tcp_seg_copy+0x2e>
    return NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	e00a      	b.n	800f784 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f76e:	2210      	movs	r2, #16
 800f770:	6879      	ldr	r1, [r7, #4]
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f008 f81a 	bl	80177ac <memcpy>
  pbuf_ref(cseg->p);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fe fbe5 	bl	800df4c <pbuf_ref>
  return cseg;
 800f782:	68fb      	ldr	r3, [r7, #12]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3710      	adds	r7, #16
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	0801a4f0 	.word	0x0801a4f0
 800f790:	0801aa44 	.word	0x0801aa44
 800f794:	0801a534 	.word	0x0801a534

0800f798 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	607a      	str	r2, [r7, #4]
 800f7a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d109      	bne.n	800f7c0 <tcp_recv_null+0x28>
 800f7ac:	4b12      	ldr	r3, [pc, #72]	; (800f7f8 <tcp_recv_null+0x60>)
 800f7ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f7b2:	4912      	ldr	r1, [pc, #72]	; (800f7fc <tcp_recv_null+0x64>)
 800f7b4:	4812      	ldr	r0, [pc, #72]	; (800f800 <tcp_recv_null+0x68>)
 800f7b6:	f008 f829 	bl	801780c <iprintf>
 800f7ba:	f06f 030f 	mvn.w	r3, #15
 800f7be:	e016      	b.n	800f7ee <tcp_recv_null+0x56>

  if (p != NULL) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d009      	beq.n	800f7da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	891b      	ldrh	r3, [r3, #8]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	68b8      	ldr	r0, [r7, #8]
 800f7ce:	f7ff facf 	bl	800ed70 <tcp_recved>
    pbuf_free(p);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7fe fb14 	bl	800de00 <pbuf_free>
 800f7d8:	e008      	b.n	800f7ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f7da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d104      	bne.n	800f7ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f7e2:	68b8      	ldr	r0, [r7, #8]
 800f7e4:	f7fe ffb6 	bl	800e754 <tcp_close>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	e000      	b.n	800f7ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	0801a4f0 	.word	0x0801a4f0
 800f7fc:	0801aa60 	.word	0x0801aa60
 800f800:	0801a534 	.word	0x0801a534

0800f804 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f80e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f812:	2b00      	cmp	r3, #0
 800f814:	db01      	blt.n	800f81a <tcp_kill_prio+0x16>
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	e000      	b.n	800f81c <tcp_kill_prio+0x18>
 800f81a:	237f      	movs	r3, #127	; 0x7f
 800f81c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f81e:	7afb      	ldrb	r3, [r7, #11]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d034      	beq.n	800f88e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	3b01      	subs	r3, #1
 800f828:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f82a:	2300      	movs	r3, #0
 800f82c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f82e:	2300      	movs	r3, #0
 800f830:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f832:	4b19      	ldr	r3, [pc, #100]	; (800f898 <tcp_kill_prio+0x94>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	617b      	str	r3, [r7, #20]
 800f838:	e01f      	b.n	800f87a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	7d5b      	ldrb	r3, [r3, #21]
 800f83e:	7afa      	ldrb	r2, [r7, #11]
 800f840:	429a      	cmp	r2, r3
 800f842:	d80c      	bhi.n	800f85e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f848:	7afa      	ldrb	r2, [r7, #11]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d112      	bne.n	800f874 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f84e:	4b13      	ldr	r3, [pc, #76]	; (800f89c <tcp_kill_prio+0x98>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d80a      	bhi.n	800f874 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f85e:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <tcp_kill_prio+0x98>)
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	6a1b      	ldr	r3, [r3, #32]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	7d5b      	ldrb	r3, [r3, #21]
 800f872:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	617b      	str	r3, [r7, #20]
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d1dc      	bne.n	800f83a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d004      	beq.n	800f890 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f886:	6938      	ldr	r0, [r7, #16]
 800f888:	f7ff f8aa 	bl	800e9e0 <tcp_abort>
 800f88c:	e000      	b.n	800f890 <tcp_kill_prio+0x8c>
    return;
 800f88e:	bf00      	nop
  }
}
 800f890:	3718      	adds	r7, #24
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	200114f8 	.word	0x200114f8
 800f89c:	200114fc 	.word	0x200114fc

0800f8a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b086      	sub	sp, #24
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f8aa:	79fb      	ldrb	r3, [r7, #7]
 800f8ac:	2b08      	cmp	r3, #8
 800f8ae:	d009      	beq.n	800f8c4 <tcp_kill_state+0x24>
 800f8b0:	79fb      	ldrb	r3, [r7, #7]
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d006      	beq.n	800f8c4 <tcp_kill_state+0x24>
 800f8b6:	4b1a      	ldr	r3, [pc, #104]	; (800f920 <tcp_kill_state+0x80>)
 800f8b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f8bc:	4919      	ldr	r1, [pc, #100]	; (800f924 <tcp_kill_state+0x84>)
 800f8be:	481a      	ldr	r0, [pc, #104]	; (800f928 <tcp_kill_state+0x88>)
 800f8c0:	f007 ffa4 	bl	801780c <iprintf>

  inactivity = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8cc:	4b17      	ldr	r3, [pc, #92]	; (800f92c <tcp_kill_state+0x8c>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	617b      	str	r3, [r7, #20]
 800f8d2:	e017      	b.n	800f904 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	7d1b      	ldrb	r3, [r3, #20]
 800f8d8:	79fa      	ldrb	r2, [r7, #7]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d10f      	bne.n	800f8fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8de:	4b14      	ldr	r3, [pc, #80]	; (800f930 <tcp_kill_state+0x90>)
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d807      	bhi.n	800f8fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f8ee:	4b10      	ldr	r3, [pc, #64]	; (800f930 <tcp_kill_state+0x90>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	617b      	str	r3, [r7, #20]
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e4      	bne.n	800f8d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d003      	beq.n	800f918 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f910:	2100      	movs	r1, #0
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f7fe ffa6 	bl	800e864 <tcp_abandon>
  }
}
 800f918:	bf00      	nop
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	0801a4f0 	.word	0x0801a4f0
 800f924:	0801aa7c 	.word	0x0801aa7c
 800f928:	0801a534 	.word	0x0801a534
 800f92c:	200114f8 	.word	0x200114f8
 800f930:	200114fc 	.word	0x200114fc

0800f934 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f93e:	2300      	movs	r3, #0
 800f940:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f942:	4b12      	ldr	r3, [pc, #72]	; (800f98c <tcp_kill_timewait+0x58>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	e012      	b.n	800f970 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f94a:	4b11      	ldr	r3, [pc, #68]	; (800f990 <tcp_kill_timewait+0x5c>)
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	429a      	cmp	r2, r3
 800f958:	d807      	bhi.n	800f96a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f95a:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <tcp_kill_timewait+0x5c>)
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	1ad3      	subs	r3, r2, r3
 800f964:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e9      	bne.n	800f94a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d002      	beq.n	800f982 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f97c:	68b8      	ldr	r0, [r7, #8]
 800f97e:	f7ff f82f 	bl	800e9e0 <tcp_abort>
  }
}
 800f982:	bf00      	nop
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20011508 	.word	0x20011508
 800f990:	200114fc 	.word	0x200114fc

0800f994 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f99a:	4b10      	ldr	r3, [pc, #64]	; (800f9dc <tcp_handle_closepend+0x48>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f9a0:	e014      	b.n	800f9cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	8b5b      	ldrh	r3, [r3, #26]
 800f9ac:	f003 0308 	and.w	r3, r3, #8
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d009      	beq.n	800f9c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	8b5b      	ldrh	r3, [r3, #26]
 800f9b8:	f023 0308 	bic.w	r3, r3, #8
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fe fe5c 	bl	800e680 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1e7      	bne.n	800f9a2 <tcp_handle_closepend+0xe>
  }
}
 800f9d2:	bf00      	nop
 800f9d4:	bf00      	nop
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	200114f8 	.word	0x200114f8

0800f9e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9ea:	2001      	movs	r0, #1
 800f9ec:	f7fd fb0e 	bl	800d00c <memp_malloc>
 800f9f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d126      	bne.n	800fa46 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f9f8:	f7ff ffcc 	bl	800f994 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9fc:	f7ff ff9a 	bl	800f934 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa00:	2001      	movs	r0, #1
 800fa02:	f7fd fb03 	bl	800d00c <memp_malloc>
 800fa06:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d11b      	bne.n	800fa46 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fa0e:	2009      	movs	r0, #9
 800fa10:	f7ff ff46 	bl	800f8a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa14:	2001      	movs	r0, #1
 800fa16:	f7fd faf9 	bl	800d00c <memp_malloc>
 800fa1a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d111      	bne.n	800fa46 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fa22:	2008      	movs	r0, #8
 800fa24:	f7ff ff3c 	bl	800f8a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa28:	2001      	movs	r0, #1
 800fa2a:	f7fd faef 	bl	800d00c <memp_malloc>
 800fa2e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d107      	bne.n	800fa46 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff fee3 	bl	800f804 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa3e:	2001      	movs	r0, #1
 800fa40:	f7fd fae4 	bl	800d00c <memp_malloc>
 800fa44:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d03f      	beq.n	800facc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa4c:	229c      	movs	r2, #156	; 0x9c
 800fa4e:	2100      	movs	r1, #0
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	f007 fed3 	bl	80177fc <memset>
    pcb->prio = prio;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	79fa      	ldrb	r2, [r7, #7]
 800fa5a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800fa62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800fa6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	22ff      	movs	r2, #255	; 0xff
 800fa7a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa82:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2206      	movs	r2, #6
 800fa88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2206      	movs	r2, #6
 800fa90:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa98:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800faa2:	4b0d      	ldr	r3, [pc, #52]	; (800fad8 <tcp_alloc+0xf8>)
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800faaa:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <tcp_alloc+0xfc>)
 800faac:	781a      	ldrb	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800fab8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	4a08      	ldr	r2, [pc, #32]	; (800fae0 <tcp_alloc+0x100>)
 800fac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	4a07      	ldr	r2, [pc, #28]	; (800fae4 <tcp_alloc+0x104>)
 800fac8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800facc:	68fb      	ldr	r3, [r7, #12]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	200114fc 	.word	0x200114fc
 800fadc:	20004a02 	.word	0x20004a02
 800fae0:	0800f799 	.word	0x0800f799
 800fae4:	006ddd00 	.word	0x006ddd00

0800fae8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800faf2:	2040      	movs	r0, #64	; 0x40
 800faf4:	f7ff ff74 	bl	800f9e0 <tcp_alloc>
 800faf8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fafa:	68fb      	ldr	r3, [r7, #12]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d002      	beq.n	800fb1a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	611a      	str	r2, [r3, #16]
  }
}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
	...

0800fb28 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00e      	beq.n	800fb56 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	7d1b      	ldrb	r3, [r3, #20]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d106      	bne.n	800fb4e <tcp_recv+0x26>
 800fb40:	4b07      	ldr	r3, [pc, #28]	; (800fb60 <tcp_recv+0x38>)
 800fb42:	f240 72df 	movw	r2, #2015	; 0x7df
 800fb46:	4907      	ldr	r1, [pc, #28]	; (800fb64 <tcp_recv+0x3c>)
 800fb48:	4807      	ldr	r0, [pc, #28]	; (800fb68 <tcp_recv+0x40>)
 800fb4a:	f007 fe5f 	bl	801780c <iprintf>
    pcb->recv = recv;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	683a      	ldr	r2, [r7, #0]
 800fb52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fb56:	bf00      	nop
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	0801a4f0 	.word	0x0801a4f0
 800fb64:	0801aa8c 	.word	0x0801aa8c
 800fb68:	0801a534 	.word	0x0801a534

0800fb6c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00e      	beq.n	800fb9a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d106      	bne.n	800fb92 <tcp_sent+0x26>
 800fb84:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <tcp_sent+0x38>)
 800fb86:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fb8a:	4907      	ldr	r1, [pc, #28]	; (800fba8 <tcp_sent+0x3c>)
 800fb8c:	4807      	ldr	r0, [pc, #28]	; (800fbac <tcp_sent+0x40>)
 800fb8e:	f007 fe3d 	bl	801780c <iprintf>
    pcb->sent = sent;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	683a      	ldr	r2, [r7, #0]
 800fb96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	0801a4f0 	.word	0x0801a4f0
 800fba8:	0801aab4 	.word	0x0801aab4
 800fbac:	0801a534 	.word	0x0801a534

0800fbb0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00e      	beq.n	800fbde <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	7d1b      	ldrb	r3, [r3, #20]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d106      	bne.n	800fbd6 <tcp_err+0x26>
 800fbc8:	4b07      	ldr	r3, [pc, #28]	; (800fbe8 <tcp_err+0x38>)
 800fbca:	f640 020d 	movw	r2, #2061	; 0x80d
 800fbce:	4907      	ldr	r1, [pc, #28]	; (800fbec <tcp_err+0x3c>)
 800fbd0:	4807      	ldr	r0, [pc, #28]	; (800fbf0 <tcp_err+0x40>)
 800fbd2:	f007 fe1b 	bl	801780c <iprintf>
    pcb->errf = err;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fbde:	bf00      	nop
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	0801a4f0 	.word	0x0801a4f0
 800fbec:	0801aadc 	.word	0x0801aadc
 800fbf0:	0801a534 	.word	0x0801a534

0800fbf4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d008      	beq.n	800fc16 <tcp_accept+0x22>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	7d1b      	ldrb	r3, [r3, #20]
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d104      	bne.n	800fc16 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	619a      	str	r2, [r3, #24]
  }
}
 800fc16:	bf00      	nop
 800fc18:	3714      	adds	r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr
	...

0800fc24 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d107      	bne.n	800fc48 <tcp_poll+0x24>
 800fc38:	4b0e      	ldr	r3, [pc, #56]	; (800fc74 <tcp_poll+0x50>)
 800fc3a:	f640 023d 	movw	r2, #2109	; 0x83d
 800fc3e:	490e      	ldr	r1, [pc, #56]	; (800fc78 <tcp_poll+0x54>)
 800fc40:	480e      	ldr	r0, [pc, #56]	; (800fc7c <tcp_poll+0x58>)
 800fc42:	f007 fde3 	bl	801780c <iprintf>
 800fc46:	e011      	b.n	800fc6c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	7d1b      	ldrb	r3, [r3, #20]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d106      	bne.n	800fc5e <tcp_poll+0x3a>
 800fc50:	4b08      	ldr	r3, [pc, #32]	; (800fc74 <tcp_poll+0x50>)
 800fc52:	f640 023e 	movw	r2, #2110	; 0x83e
 800fc56:	490a      	ldr	r1, [pc, #40]	; (800fc80 <tcp_poll+0x5c>)
 800fc58:	4808      	ldr	r0, [pc, #32]	; (800fc7c <tcp_poll+0x58>)
 800fc5a:	f007 fdd7 	bl	801780c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	79fa      	ldrb	r2, [r7, #7]
 800fc6a:	775a      	strb	r2, [r3, #29]
}
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	0801a4f0 	.word	0x0801a4f0
 800fc78:	0801ab04 	.word	0x0801ab04
 800fc7c:	0801a534 	.word	0x0801a534
 800fc80:	0801ab1c 	.word	0x0801ab1c

0800fc84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d107      	bne.n	800fca2 <tcp_pcb_purge+0x1e>
 800fc92:	4b21      	ldr	r3, [pc, #132]	; (800fd18 <tcp_pcb_purge+0x94>)
 800fc94:	f640 0251 	movw	r2, #2129	; 0x851
 800fc98:	4920      	ldr	r1, [pc, #128]	; (800fd1c <tcp_pcb_purge+0x98>)
 800fc9a:	4821      	ldr	r0, [pc, #132]	; (800fd20 <tcp_pcb_purge+0x9c>)
 800fc9c:	f007 fdb6 	bl	801780c <iprintf>
 800fca0:	e037      	b.n	800fd12 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	7d1b      	ldrb	r3, [r3, #20]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d033      	beq.n	800fd12 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fcae:	2b0a      	cmp	r3, #10
 800fcb0:	d02f      	beq.n	800fd12 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d02b      	beq.n	800fd12 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d007      	beq.n	800fcd2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fe f89a 	bl	800de00 <pbuf_free>
      pcb->refused_data = NULL;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f986 	bl	800ffec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fce6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fcf9 	bl	800f6e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7ff fcf4 	bl	800f6e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	0801a4f0 	.word	0x0801a4f0
 800fd1c:	0801ab3c 	.word	0x0801ab3c
 800fd20:	0801a534 	.word	0x0801a534

0800fd24 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d106      	bne.n	800fd42 <tcp_pcb_remove+0x1e>
 800fd34:	4b3e      	ldr	r3, [pc, #248]	; (800fe30 <tcp_pcb_remove+0x10c>)
 800fd36:	f640 0283 	movw	r2, #2179	; 0x883
 800fd3a:	493e      	ldr	r1, [pc, #248]	; (800fe34 <tcp_pcb_remove+0x110>)
 800fd3c:	483e      	ldr	r0, [pc, #248]	; (800fe38 <tcp_pcb_remove+0x114>)
 800fd3e:	f007 fd65 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d106      	bne.n	800fd56 <tcp_pcb_remove+0x32>
 800fd48:	4b39      	ldr	r3, [pc, #228]	; (800fe30 <tcp_pcb_remove+0x10c>)
 800fd4a:	f640 0284 	movw	r2, #2180	; 0x884
 800fd4e:	493b      	ldr	r1, [pc, #236]	; (800fe3c <tcp_pcb_remove+0x118>)
 800fd50:	4839      	ldr	r0, [pc, #228]	; (800fe38 <tcp_pcb_remove+0x114>)
 800fd52:	f007 fd5b 	bl	801780c <iprintf>

  TCP_RMV(pcblist, pcb);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d105      	bne.n	800fd6c <tcp_pcb_remove+0x48>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68da      	ldr	r2, [r3, #12]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	601a      	str	r2, [r3, #0]
 800fd6a:	e013      	b.n	800fd94 <tcp_pcb_remove+0x70>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	60fb      	str	r3, [r7, #12]
 800fd72:	e00c      	b.n	800fd8e <tcp_pcb_remove+0x6a>
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	683a      	ldr	r2, [r7, #0]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d104      	bne.n	800fd88 <tcp_pcb_remove+0x64>
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	68da      	ldr	r2, [r3, #12]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	60da      	str	r2, [r3, #12]
 800fd86:	e005      	b.n	800fd94 <tcp_pcb_remove+0x70>
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	60fb      	str	r3, [r7, #12]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1ef      	bne.n	800fd74 <tcp_pcb_remove+0x50>
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	2200      	movs	r2, #0
 800fd98:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd9a:	6838      	ldr	r0, [r7, #0]
 800fd9c:	f7ff ff72 	bl	800fc84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	7d1b      	ldrb	r3, [r3, #20]
 800fda4:	2b0a      	cmp	r3, #10
 800fda6:	d013      	beq.n	800fdd0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d00f      	beq.n	800fdd0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	8b5b      	ldrh	r3, [r3, #26]
 800fdb4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d009      	beq.n	800fdd0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	8b5b      	ldrh	r3, [r3, #26]
 800fdc0:	f043 0302 	orr.w	r3, r3, #2
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdca:	6838      	ldr	r0, [r7, #0]
 800fdcc:	f003 fbc4 	bl	8013558 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	7d1b      	ldrb	r3, [r3, #20]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d020      	beq.n	800fe1a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d006      	beq.n	800fdee <tcp_pcb_remove+0xca>
 800fde0:	4b13      	ldr	r3, [pc, #76]	; (800fe30 <tcp_pcb_remove+0x10c>)
 800fde2:	f640 0293 	movw	r2, #2195	; 0x893
 800fde6:	4916      	ldr	r1, [pc, #88]	; (800fe40 <tcp_pcb_remove+0x11c>)
 800fde8:	4813      	ldr	r0, [pc, #76]	; (800fe38 <tcp_pcb_remove+0x114>)
 800fdea:	f007 fd0f 	bl	801780c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d006      	beq.n	800fe04 <tcp_pcb_remove+0xe0>
 800fdf6:	4b0e      	ldr	r3, [pc, #56]	; (800fe30 <tcp_pcb_remove+0x10c>)
 800fdf8:	f640 0294 	movw	r2, #2196	; 0x894
 800fdfc:	4911      	ldr	r1, [pc, #68]	; (800fe44 <tcp_pcb_remove+0x120>)
 800fdfe:	480e      	ldr	r0, [pc, #56]	; (800fe38 <tcp_pcb_remove+0x114>)
 800fe00:	f007 fd04 	bl	801780c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d006      	beq.n	800fe1a <tcp_pcb_remove+0xf6>
 800fe0c:	4b08      	ldr	r3, [pc, #32]	; (800fe30 <tcp_pcb_remove+0x10c>)
 800fe0e:	f640 0296 	movw	r2, #2198	; 0x896
 800fe12:	490d      	ldr	r1, [pc, #52]	; (800fe48 <tcp_pcb_remove+0x124>)
 800fe14:	4808      	ldr	r0, [pc, #32]	; (800fe38 <tcp_pcb_remove+0x114>)
 800fe16:	f007 fcf9 	bl	801780c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	2200      	movs	r2, #0
 800fe24:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fe26:	bf00      	nop
 800fe28:	3710      	adds	r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	0801a4f0 	.word	0x0801a4f0
 800fe34:	0801ab58 	.word	0x0801ab58
 800fe38:	0801a534 	.word	0x0801a534
 800fe3c:	0801ab74 	.word	0x0801ab74
 800fe40:	0801ab94 	.word	0x0801ab94
 800fe44:	0801abac 	.word	0x0801abac
 800fe48:	0801abc8 	.word	0x0801abc8

0800fe4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d106      	bne.n	800fe68 <tcp_next_iss+0x1c>
 800fe5a:	4b0a      	ldr	r3, [pc, #40]	; (800fe84 <tcp_next_iss+0x38>)
 800fe5c:	f640 02af 	movw	r2, #2223	; 0x8af
 800fe60:	4909      	ldr	r1, [pc, #36]	; (800fe88 <tcp_next_iss+0x3c>)
 800fe62:	480a      	ldr	r0, [pc, #40]	; (800fe8c <tcp_next_iss+0x40>)
 800fe64:	f007 fcd2 	bl	801780c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe68:	4b09      	ldr	r3, [pc, #36]	; (800fe90 <tcp_next_iss+0x44>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <tcp_next_iss+0x48>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4413      	add	r3, r2
 800fe72:	4a07      	ldr	r2, [pc, #28]	; (800fe90 <tcp_next_iss+0x44>)
 800fe74:	6013      	str	r3, [r2, #0]
  return iss;
 800fe76:	4b06      	ldr	r3, [pc, #24]	; (800fe90 <tcp_next_iss+0x44>)
 800fe78:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	0801a4f0 	.word	0x0801a4f0
 800fe88:	0801abe0 	.word	0x0801abe0
 800fe8c:	0801a534 	.word	0x0801a534
 800fe90:	20000014 	.word	0x20000014
 800fe94:	200114fc 	.word	0x200114fc

0800fe98 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	607a      	str	r2, [r7, #4]
 800fea4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d106      	bne.n	800feba <tcp_eff_send_mss_netif+0x22>
 800feac:	4b14      	ldr	r3, [pc, #80]	; (800ff00 <tcp_eff_send_mss_netif+0x68>)
 800feae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800feb2:	4914      	ldr	r1, [pc, #80]	; (800ff04 <tcp_eff_send_mss_netif+0x6c>)
 800feb4:	4814      	ldr	r0, [pc, #80]	; (800ff08 <tcp_eff_send_mss_netif+0x70>)
 800feb6:	f007 fca9 	bl	801780c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d101      	bne.n	800fec4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fec0:	89fb      	ldrh	r3, [r7, #14]
 800fec2:	e019      	b.n	800fef8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fec8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800feca:	8afb      	ldrh	r3, [r7, #22]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d012      	beq.n	800fef6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fed0:	2328      	movs	r3, #40	; 0x28
 800fed2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fed4:	8afa      	ldrh	r2, [r7, #22]
 800fed6:	8abb      	ldrh	r3, [r7, #20]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d904      	bls.n	800fee6 <tcp_eff_send_mss_netif+0x4e>
 800fedc:	8afa      	ldrh	r2, [r7, #22]
 800fede:	8abb      	ldrh	r3, [r7, #20]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	e000      	b.n	800fee8 <tcp_eff_send_mss_netif+0x50>
 800fee6:	2300      	movs	r3, #0
 800fee8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800feea:	8a7a      	ldrh	r2, [r7, #18]
 800feec:	89fb      	ldrh	r3, [r7, #14]
 800feee:	4293      	cmp	r3, r2
 800fef0:	bf28      	it	cs
 800fef2:	4613      	movcs	r3, r2
 800fef4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fef6:	89fb      	ldrh	r3, [r7, #14]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3718      	adds	r7, #24
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	0801a4f0 	.word	0x0801a4f0
 800ff04:	0801abfc 	.word	0x0801abfc
 800ff08:	0801a534 	.word	0x0801a534

0800ff0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d119      	bne.n	800ff54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ff20:	4b10      	ldr	r3, [pc, #64]	; (800ff64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ff22:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ff26:	4910      	ldr	r1, [pc, #64]	; (800ff68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ff28:	4810      	ldr	r0, [pc, #64]	; (800ff6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ff2a:	f007 fc6f 	bl	801780c <iprintf>

  while (pcb != NULL) {
 800ff2e:	e011      	b.n	800ff54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d108      	bne.n	800ff4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f7fe fd4c 	bl	800e9e0 <tcp_abort>
      pcb = next;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	60fb      	str	r3, [r7, #12]
 800ff4c:	e002      	b.n	800ff54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d1ea      	bne.n	800ff30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ff5a:	bf00      	nop
 800ff5c:	bf00      	nop
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	0801a4f0 	.word	0x0801a4f0
 800ff68:	0801ac24 	.word	0x0801ac24
 800ff6c:	0801a534 	.word	0x0801a534

0800ff70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d02a      	beq.n	800ffd6 <tcp_netif_ip_addr_changed+0x66>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d026      	beq.n	800ffd6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff88:	4b15      	ldr	r3, [pc, #84]	; (800ffe0 <tcp_netif_ip_addr_changed+0x70>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff ffbc 	bl	800ff0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff94:	4b13      	ldr	r3, [pc, #76]	; (800ffe4 <tcp_netif_ip_addr_changed+0x74>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff ffb6 	bl	800ff0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d017      	beq.n	800ffd6 <tcp_netif_ip_addr_changed+0x66>
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d013      	beq.n	800ffd6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffae:	4b0e      	ldr	r3, [pc, #56]	; (800ffe8 <tcp_netif_ip_addr_changed+0x78>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	e00c      	b.n	800ffd0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d103      	bne.n	800ffca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	60fb      	str	r3, [r7, #12]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1ef      	bne.n	800ffb6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ffd6:	bf00      	nop
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	200114f8 	.word	0x200114f8
 800ffe4:	20011504 	.word	0x20011504
 800ffe8:	20011500 	.word	0x20011500

0800ffec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d007      	beq.n	801000c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010000:	4618      	mov	r0, r3
 8010002:	f7ff fb6f 	bl	800f6e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b08d      	sub	sp, #52	; 0x34
 8010018:	af04      	add	r7, sp, #16
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d105      	bne.n	8010030 <tcp_input+0x1c>
 8010024:	4b9b      	ldr	r3, [pc, #620]	; (8010294 <tcp_input+0x280>)
 8010026:	2283      	movs	r2, #131	; 0x83
 8010028:	499b      	ldr	r1, [pc, #620]	; (8010298 <tcp_input+0x284>)
 801002a:	489c      	ldr	r0, [pc, #624]	; (801029c <tcp_input+0x288>)
 801002c:	f007 fbee 	bl	801780c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	4a9a      	ldr	r2, [pc, #616]	; (80102a0 <tcp_input+0x28c>)
 8010036:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	895b      	ldrh	r3, [r3, #10]
 801003c:	2b13      	cmp	r3, #19
 801003e:	f240 83c5 	bls.w	80107cc <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010042:	4b98      	ldr	r3, [pc, #608]	; (80102a4 <tcp_input+0x290>)
 8010044:	695b      	ldr	r3, [r3, #20]
 8010046:	4a97      	ldr	r2, [pc, #604]	; (80102a4 <tcp_input+0x290>)
 8010048:	6812      	ldr	r2, [r2, #0]
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f006 f9e3 	bl	8016418 <ip4_addr_isbroadcast_u32>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	f040 83bb 	bne.w	80107d0 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801005a:	4b92      	ldr	r3, [pc, #584]	; (80102a4 <tcp_input+0x290>)
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010062:	2be0      	cmp	r3, #224	; 0xe0
 8010064:	f000 83b4 	beq.w	80107d0 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010068:	4b8d      	ldr	r3, [pc, #564]	; (80102a0 <tcp_input+0x28c>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	899b      	ldrh	r3, [r3, #12]
 801006e:	b29b      	uxth	r3, r3
 8010070:	4618      	mov	r0, r3
 8010072:	f7fc fb15 	bl	800c6a0 <lwip_htons>
 8010076:	4603      	mov	r3, r0
 8010078:	0b1b      	lsrs	r3, r3, #12
 801007a:	b29b      	uxth	r3, r3
 801007c:	b2db      	uxtb	r3, r3
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010082:	7cbb      	ldrb	r3, [r7, #18]
 8010084:	2b13      	cmp	r3, #19
 8010086:	f240 83a5 	bls.w	80107d4 <tcp_input+0x7c0>
 801008a:	7cbb      	ldrb	r3, [r7, #18]
 801008c:	b29a      	uxth	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	891b      	ldrh	r3, [r3, #8]
 8010092:	429a      	cmp	r2, r3
 8010094:	f200 839e 	bhi.w	80107d4 <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010098:	7cbb      	ldrb	r3, [r7, #18]
 801009a:	b29b      	uxth	r3, r3
 801009c:	3b14      	subs	r3, #20
 801009e:	b29a      	uxth	r2, r3
 80100a0:	4b81      	ldr	r3, [pc, #516]	; (80102a8 <tcp_input+0x294>)
 80100a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80100a4:	4b81      	ldr	r3, [pc, #516]	; (80102ac <tcp_input+0x298>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	895a      	ldrh	r2, [r3, #10]
 80100ae:	7cbb      	ldrb	r3, [r7, #18]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d309      	bcc.n	80100ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80100b6:	4b7c      	ldr	r3, [pc, #496]	; (80102a8 <tcp_input+0x294>)
 80100b8:	881a      	ldrh	r2, [r3, #0]
 80100ba:	4b7d      	ldr	r3, [pc, #500]	; (80102b0 <tcp_input+0x29c>)
 80100bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80100be:	7cbb      	ldrb	r3, [r7, #18]
 80100c0:	4619      	mov	r1, r3
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7fd fe16 	bl	800dcf4 <pbuf_remove_header>
 80100c8:	e04e      	b.n	8010168 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d105      	bne.n	80100de <tcp_input+0xca>
 80100d2:	4b70      	ldr	r3, [pc, #448]	; (8010294 <tcp_input+0x280>)
 80100d4:	22c2      	movs	r2, #194	; 0xc2
 80100d6:	4977      	ldr	r1, [pc, #476]	; (80102b4 <tcp_input+0x2a0>)
 80100d8:	4870      	ldr	r0, [pc, #448]	; (801029c <tcp_input+0x288>)
 80100da:	f007 fb97 	bl	801780c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80100de:	2114      	movs	r1, #20
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7fd fe07 	bl	800dcf4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	895a      	ldrh	r2, [r3, #10]
 80100ea:	4b71      	ldr	r3, [pc, #452]	; (80102b0 <tcp_input+0x29c>)
 80100ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80100ee:	4b6e      	ldr	r3, [pc, #440]	; (80102a8 <tcp_input+0x294>)
 80100f0:	881a      	ldrh	r2, [r3, #0]
 80100f2:	4b6f      	ldr	r3, [pc, #444]	; (80102b0 <tcp_input+0x29c>)
 80100f4:	881b      	ldrh	r3, [r3, #0]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80100fa:	4b6d      	ldr	r3, [pc, #436]	; (80102b0 <tcp_input+0x29c>)
 80100fc:	881b      	ldrh	r3, [r3, #0]
 80100fe:	4619      	mov	r1, r3
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f7fd fdf7 	bl	800dcf4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	895b      	ldrh	r3, [r3, #10]
 801010c:	8a3a      	ldrh	r2, [r7, #16]
 801010e:	429a      	cmp	r2, r3
 8010110:	f200 8362 	bhi.w	80107d8 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	4a64      	ldr	r2, [pc, #400]	; (80102ac <tcp_input+0x298>)
 801011c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	8a3a      	ldrh	r2, [r7, #16]
 8010124:	4611      	mov	r1, r2
 8010126:	4618      	mov	r0, r3
 8010128:	f7fd fde4 	bl	800dcf4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	891a      	ldrh	r2, [r3, #8]
 8010130:	8a3b      	ldrh	r3, [r7, #16]
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	b29a      	uxth	r2, r3
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	895b      	ldrh	r3, [r3, #10]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d005      	beq.n	801014e <tcp_input+0x13a>
 8010142:	4b54      	ldr	r3, [pc, #336]	; (8010294 <tcp_input+0x280>)
 8010144:	22df      	movs	r2, #223	; 0xdf
 8010146:	495c      	ldr	r1, [pc, #368]	; (80102b8 <tcp_input+0x2a4>)
 8010148:	4854      	ldr	r0, [pc, #336]	; (801029c <tcp_input+0x288>)
 801014a:	f007 fb5f 	bl	801780c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	891a      	ldrh	r2, [r3, #8]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	891b      	ldrh	r3, [r3, #8]
 8010158:	429a      	cmp	r2, r3
 801015a:	d005      	beq.n	8010168 <tcp_input+0x154>
 801015c:	4b4d      	ldr	r3, [pc, #308]	; (8010294 <tcp_input+0x280>)
 801015e:	22e0      	movs	r2, #224	; 0xe0
 8010160:	4956      	ldr	r1, [pc, #344]	; (80102bc <tcp_input+0x2a8>)
 8010162:	484e      	ldr	r0, [pc, #312]	; (801029c <tcp_input+0x288>)
 8010164:	f007 fb52 	bl	801780c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010168:	4b4d      	ldr	r3, [pc, #308]	; (80102a0 <tcp_input+0x28c>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	881b      	ldrh	r3, [r3, #0]
 801016e:	b29b      	uxth	r3, r3
 8010170:	4a4b      	ldr	r2, [pc, #300]	; (80102a0 <tcp_input+0x28c>)
 8010172:	6814      	ldr	r4, [r2, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f7fc fa93 	bl	800c6a0 <lwip_htons>
 801017a:	4603      	mov	r3, r0
 801017c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801017e:	4b48      	ldr	r3, [pc, #288]	; (80102a0 <tcp_input+0x28c>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	885b      	ldrh	r3, [r3, #2]
 8010184:	b29b      	uxth	r3, r3
 8010186:	4a46      	ldr	r2, [pc, #280]	; (80102a0 <tcp_input+0x28c>)
 8010188:	6814      	ldr	r4, [r2, #0]
 801018a:	4618      	mov	r0, r3
 801018c:	f7fc fa88 	bl	800c6a0 <lwip_htons>
 8010190:	4603      	mov	r3, r0
 8010192:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010194:	4b42      	ldr	r3, [pc, #264]	; (80102a0 <tcp_input+0x28c>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	4a41      	ldr	r2, [pc, #260]	; (80102a0 <tcp_input+0x28c>)
 801019c:	6814      	ldr	r4, [r2, #0]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fc fa93 	bl	800c6ca <lwip_htonl>
 80101a4:	4603      	mov	r3, r0
 80101a6:	6063      	str	r3, [r4, #4]
 80101a8:	6863      	ldr	r3, [r4, #4]
 80101aa:	4a45      	ldr	r2, [pc, #276]	; (80102c0 <tcp_input+0x2ac>)
 80101ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80101ae:	4b3c      	ldr	r3, [pc, #240]	; (80102a0 <tcp_input+0x28c>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	4a3a      	ldr	r2, [pc, #232]	; (80102a0 <tcp_input+0x28c>)
 80101b6:	6814      	ldr	r4, [r2, #0]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fc fa86 	bl	800c6ca <lwip_htonl>
 80101be:	4603      	mov	r3, r0
 80101c0:	60a3      	str	r3, [r4, #8]
 80101c2:	68a3      	ldr	r3, [r4, #8]
 80101c4:	4a3f      	ldr	r2, [pc, #252]	; (80102c4 <tcp_input+0x2b0>)
 80101c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80101c8:	4b35      	ldr	r3, [pc, #212]	; (80102a0 <tcp_input+0x28c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	89db      	ldrh	r3, [r3, #14]
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	4a33      	ldr	r2, [pc, #204]	; (80102a0 <tcp_input+0x28c>)
 80101d2:	6814      	ldr	r4, [r2, #0]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fc fa63 	bl	800c6a0 <lwip_htons>
 80101da:	4603      	mov	r3, r0
 80101dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80101de:	4b30      	ldr	r3, [pc, #192]	; (80102a0 <tcp_input+0x28c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	899b      	ldrh	r3, [r3, #12]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fc fa5a 	bl	800c6a0 <lwip_htons>
 80101ec:	4603      	mov	r3, r0
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	4b34      	ldr	r3, [pc, #208]	; (80102c8 <tcp_input+0x2b4>)
 80101f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	891a      	ldrh	r2, [r3, #8]
 80101fe:	4b33      	ldr	r3, [pc, #204]	; (80102cc <tcp_input+0x2b8>)
 8010200:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010202:	4b31      	ldr	r3, [pc, #196]	; (80102c8 <tcp_input+0x2b4>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	f003 0303 	and.w	r3, r3, #3
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00c      	beq.n	8010228 <tcp_input+0x214>
    tcplen++;
 801020e:	4b2f      	ldr	r3, [pc, #188]	; (80102cc <tcp_input+0x2b8>)
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	3301      	adds	r3, #1
 8010214:	b29a      	uxth	r2, r3
 8010216:	4b2d      	ldr	r3, [pc, #180]	; (80102cc <tcp_input+0x2b8>)
 8010218:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	891a      	ldrh	r2, [r3, #8]
 801021e:	4b2b      	ldr	r3, [pc, #172]	; (80102cc <tcp_input+0x2b8>)
 8010220:	881b      	ldrh	r3, [r3, #0]
 8010222:	429a      	cmp	r2, r3
 8010224:	f200 82da 	bhi.w	80107dc <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010228:	2300      	movs	r3, #0
 801022a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801022c:	4b28      	ldr	r3, [pc, #160]	; (80102d0 <tcp_input+0x2bc>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	61fb      	str	r3, [r7, #28]
 8010232:	e09d      	b.n	8010370 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	7d1b      	ldrb	r3, [r3, #20]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d105      	bne.n	8010248 <tcp_input+0x234>
 801023c:	4b15      	ldr	r3, [pc, #84]	; (8010294 <tcp_input+0x280>)
 801023e:	22fb      	movs	r2, #251	; 0xfb
 8010240:	4924      	ldr	r1, [pc, #144]	; (80102d4 <tcp_input+0x2c0>)
 8010242:	4816      	ldr	r0, [pc, #88]	; (801029c <tcp_input+0x288>)
 8010244:	f007 fae2 	bl	801780c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	7d1b      	ldrb	r3, [r3, #20]
 801024c:	2b0a      	cmp	r3, #10
 801024e:	d105      	bne.n	801025c <tcp_input+0x248>
 8010250:	4b10      	ldr	r3, [pc, #64]	; (8010294 <tcp_input+0x280>)
 8010252:	22fc      	movs	r2, #252	; 0xfc
 8010254:	4920      	ldr	r1, [pc, #128]	; (80102d8 <tcp_input+0x2c4>)
 8010256:	4811      	ldr	r0, [pc, #68]	; (801029c <tcp_input+0x288>)
 8010258:	f007 fad8 	bl	801780c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	7d1b      	ldrb	r3, [r3, #20]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d105      	bne.n	8010270 <tcp_input+0x25c>
 8010264:	4b0b      	ldr	r3, [pc, #44]	; (8010294 <tcp_input+0x280>)
 8010266:	22fd      	movs	r2, #253	; 0xfd
 8010268:	491c      	ldr	r1, [pc, #112]	; (80102dc <tcp_input+0x2c8>)
 801026a:	480c      	ldr	r0, [pc, #48]	; (801029c <tcp_input+0x288>)
 801026c:	f007 face 	bl	801780c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	7a1b      	ldrb	r3, [r3, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d033      	beq.n	80102e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	7a1a      	ldrb	r2, [r3, #8]
 801027c:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <tcp_input+0x290>)
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010284:	3301      	adds	r3, #1
 8010286:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010288:	429a      	cmp	r2, r3
 801028a:	d029      	beq.n	80102e0 <tcp_input+0x2cc>
      prev = pcb;
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	61bb      	str	r3, [r7, #24]
      continue;
 8010290:	e06b      	b.n	801036a <tcp_input+0x356>
 8010292:	bf00      	nop
 8010294:	0801ac58 	.word	0x0801ac58
 8010298:	0801ac8c 	.word	0x0801ac8c
 801029c:	0801aca4 	.word	0x0801aca4
 80102a0:	20004a14 	.word	0x20004a14
 80102a4:	200081e4 	.word	0x200081e4
 80102a8:	20004a18 	.word	0x20004a18
 80102ac:	20004a1c 	.word	0x20004a1c
 80102b0:	20004a1a 	.word	0x20004a1a
 80102b4:	0801accc 	.word	0x0801accc
 80102b8:	0801acdc 	.word	0x0801acdc
 80102bc:	0801ace8 	.word	0x0801ace8
 80102c0:	20004a24 	.word	0x20004a24
 80102c4:	20004a28 	.word	0x20004a28
 80102c8:	20004a30 	.word	0x20004a30
 80102cc:	20004a2e 	.word	0x20004a2e
 80102d0:	200114f8 	.word	0x200114f8
 80102d4:	0801ad08 	.word	0x0801ad08
 80102d8:	0801ad30 	.word	0x0801ad30
 80102dc:	0801ad5c 	.word	0x0801ad5c
    }

    if (pcb->remote_port == tcphdr->src &&
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	8b1a      	ldrh	r2, [r3, #24]
 80102e4:	4b94      	ldr	r3, [pc, #592]	; (8010538 <tcp_input+0x524>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	881b      	ldrh	r3, [r3, #0]
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d13a      	bne.n	8010366 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	8ada      	ldrh	r2, [r3, #22]
 80102f4:	4b90      	ldr	r3, [pc, #576]	; (8010538 <tcp_input+0x524>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	885b      	ldrh	r3, [r3, #2]
 80102fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d132      	bne.n	8010366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	685a      	ldr	r2, [r3, #4]
 8010304:	4b8d      	ldr	r3, [pc, #564]	; (801053c <tcp_input+0x528>)
 8010306:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010308:	429a      	cmp	r2, r3
 801030a:	d12c      	bne.n	8010366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	4b8a      	ldr	r3, [pc, #552]	; (801053c <tcp_input+0x528>)
 8010312:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010314:	429a      	cmp	r2, r3
 8010316:	d126      	bne.n	8010366 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	69fa      	ldr	r2, [r7, #28]
 801031e:	429a      	cmp	r2, r3
 8010320:	d106      	bne.n	8010330 <tcp_input+0x31c>
 8010322:	4b87      	ldr	r3, [pc, #540]	; (8010540 <tcp_input+0x52c>)
 8010324:	f240 120d 	movw	r2, #269	; 0x10d
 8010328:	4986      	ldr	r1, [pc, #536]	; (8010544 <tcp_input+0x530>)
 801032a:	4887      	ldr	r0, [pc, #540]	; (8010548 <tcp_input+0x534>)
 801032c:	f007 fa6e 	bl	801780c <iprintf>
      if (prev != NULL) {
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00a      	beq.n	801034c <tcp_input+0x338>
        prev->next = pcb->next;
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	68da      	ldr	r2, [r3, #12]
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801033e:	4b83      	ldr	r3, [pc, #524]	; (801054c <tcp_input+0x538>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010346:	4a81      	ldr	r2, [pc, #516]	; (801054c <tcp_input+0x538>)
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	69fa      	ldr	r2, [r7, #28]
 8010352:	429a      	cmp	r2, r3
 8010354:	d111      	bne.n	801037a <tcp_input+0x366>
 8010356:	4b7a      	ldr	r3, [pc, #488]	; (8010540 <tcp_input+0x52c>)
 8010358:	f240 1215 	movw	r2, #277	; 0x115
 801035c:	497c      	ldr	r1, [pc, #496]	; (8010550 <tcp_input+0x53c>)
 801035e:	487a      	ldr	r0, [pc, #488]	; (8010548 <tcp_input+0x534>)
 8010360:	f007 fa54 	bl	801780c <iprintf>
      break;
 8010364:	e009      	b.n	801037a <tcp_input+0x366>
    }
    prev = pcb;
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	61fb      	str	r3, [r7, #28]
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f47f af5e 	bne.w	8010234 <tcp_input+0x220>
 8010378:	e000      	b.n	801037c <tcp_input+0x368>
      break;
 801037a:	bf00      	nop
  }

  if (pcb == NULL) {
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	2b00      	cmp	r3, #0
 8010380:	f040 8095 	bne.w	80104ae <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010384:	4b73      	ldr	r3, [pc, #460]	; (8010554 <tcp_input+0x540>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	61fb      	str	r3, [r7, #28]
 801038a:	e03f      	b.n	801040c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	7d1b      	ldrb	r3, [r3, #20]
 8010390:	2b0a      	cmp	r3, #10
 8010392:	d006      	beq.n	80103a2 <tcp_input+0x38e>
 8010394:	4b6a      	ldr	r3, [pc, #424]	; (8010540 <tcp_input+0x52c>)
 8010396:	f240 121f 	movw	r2, #287	; 0x11f
 801039a:	496f      	ldr	r1, [pc, #444]	; (8010558 <tcp_input+0x544>)
 801039c:	486a      	ldr	r0, [pc, #424]	; (8010548 <tcp_input+0x534>)
 801039e:	f007 fa35 	bl	801780c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	7a1b      	ldrb	r3, [r3, #8]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d009      	beq.n	80103be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	7a1a      	ldrb	r2, [r3, #8]
 80103ae:	4b63      	ldr	r3, [pc, #396]	; (801053c <tcp_input+0x528>)
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103b6:	3301      	adds	r3, #1
 80103b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d122      	bne.n	8010404 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	8b1a      	ldrh	r2, [r3, #24]
 80103c2:	4b5d      	ldr	r3, [pc, #372]	; (8010538 <tcp_input+0x524>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	881b      	ldrh	r3, [r3, #0]
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d11b      	bne.n	8010406 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	8ada      	ldrh	r2, [r3, #22]
 80103d2:	4b59      	ldr	r3, [pc, #356]	; (8010538 <tcp_input+0x524>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	885b      	ldrh	r3, [r3, #2]
 80103d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80103da:	429a      	cmp	r2, r3
 80103dc:	d113      	bne.n	8010406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	685a      	ldr	r2, [r3, #4]
 80103e2:	4b56      	ldr	r3, [pc, #344]	; (801053c <tcp_input+0x528>)
 80103e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d10d      	bne.n	8010406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	4b53      	ldr	r3, [pc, #332]	; (801053c <tcp_input+0x528>)
 80103f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d107      	bne.n	8010406 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80103f6:	69f8      	ldr	r0, [r7, #28]
 80103f8:	f000 fb56 	bl	8010aa8 <tcp_timewait_input>
        }
        pbuf_free(p);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7fd fcff 	bl	800de00 <pbuf_free>
        return;
 8010402:	e1f1      	b.n	80107e8 <tcp_input+0x7d4>
        continue;
 8010404:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	61fb      	str	r3, [r7, #28]
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1bc      	bne.n	801038c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010412:	2300      	movs	r3, #0
 8010414:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010416:	4b51      	ldr	r3, [pc, #324]	; (801055c <tcp_input+0x548>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	617b      	str	r3, [r7, #20]
 801041c:	e02a      	b.n	8010474 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	7a1b      	ldrb	r3, [r3, #8]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00c      	beq.n	8010440 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	7a1a      	ldrb	r2, [r3, #8]
 801042a:	4b44      	ldr	r3, [pc, #272]	; (801053c <tcp_input+0x528>)
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010432:	3301      	adds	r3, #1
 8010434:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010436:	429a      	cmp	r2, r3
 8010438:	d002      	beq.n	8010440 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	61bb      	str	r3, [r7, #24]
        continue;
 801043e:	e016      	b.n	801046e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	8ada      	ldrh	r2, [r3, #22]
 8010444:	4b3c      	ldr	r3, [pc, #240]	; (8010538 <tcp_input+0x524>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	885b      	ldrh	r3, [r3, #2]
 801044a:	b29b      	uxth	r3, r3
 801044c:	429a      	cmp	r2, r3
 801044e:	d10c      	bne.n	801046a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	4b39      	ldr	r3, [pc, #228]	; (801053c <tcp_input+0x528>)
 8010456:	695b      	ldr	r3, [r3, #20]
 8010458:	429a      	cmp	r2, r3
 801045a:	d00f      	beq.n	801047c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00d      	beq.n	801047e <tcp_input+0x46a>
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d009      	beq.n	801047e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	68db      	ldr	r3, [r3, #12]
 8010472:	617b      	str	r3, [r7, #20]
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1d1      	bne.n	801041e <tcp_input+0x40a>
 801047a:	e000      	b.n	801047e <tcp_input+0x46a>
            break;
 801047c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d014      	beq.n	80104ae <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00a      	beq.n	80104a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	68da      	ldr	r2, [r3, #12]
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010492:	4b32      	ldr	r3, [pc, #200]	; (801055c <tcp_input+0x548>)
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801049a:	4a30      	ldr	r2, [pc, #192]	; (801055c <tcp_input+0x548>)
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80104a0:	6978      	ldr	r0, [r7, #20]
 80104a2:	f000 fa03 	bl	80108ac <tcp_listen_input>
      }
      pbuf_free(p);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f7fd fcaa 	bl	800de00 <pbuf_free>
      return;
 80104ac:	e19c      	b.n	80107e8 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f000 8161 	beq.w	8010778 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80104b6:	4b2a      	ldr	r3, [pc, #168]	; (8010560 <tcp_input+0x54c>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	891a      	ldrh	r2, [r3, #8]
 80104c0:	4b27      	ldr	r3, [pc, #156]	; (8010560 <tcp_input+0x54c>)
 80104c2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80104c4:	4a26      	ldr	r2, [pc, #152]	; (8010560 <tcp_input+0x54c>)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80104ca:	4b1b      	ldr	r3, [pc, #108]	; (8010538 <tcp_input+0x524>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a24      	ldr	r2, [pc, #144]	; (8010560 <tcp_input+0x54c>)
 80104d0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80104d2:	4b24      	ldr	r3, [pc, #144]	; (8010564 <tcp_input+0x550>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80104d8:	4b23      	ldr	r3, [pc, #140]	; (8010568 <tcp_input+0x554>)
 80104da:	2200      	movs	r2, #0
 80104dc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80104de:	4b23      	ldr	r3, [pc, #140]	; (801056c <tcp_input+0x558>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80104e4:	4b22      	ldr	r3, [pc, #136]	; (8010570 <tcp_input+0x55c>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	f003 0308 	and.w	r3, r3, #8
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d006      	beq.n	80104fe <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	7b5b      	ldrb	r3, [r3, #13]
 80104f4:	f043 0301 	orr.w	r3, r3, #1
 80104f8:	b2da      	uxtb	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010502:	2b00      	cmp	r3, #0
 8010504:	d038      	beq.n	8010578 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010506:	69f8      	ldr	r0, [r7, #28]
 8010508:	f7ff f86e 	bl	800f5e8 <tcp_process_refused_data>
 801050c:	4603      	mov	r3, r0
 801050e:	f113 0f0d 	cmn.w	r3, #13
 8010512:	d007      	beq.n	8010524 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010518:	2b00      	cmp	r3, #0
 801051a:	d02d      	beq.n	8010578 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801051c:	4b15      	ldr	r3, [pc, #84]	; (8010574 <tcp_input+0x560>)
 801051e:	881b      	ldrh	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d029      	beq.n	8010578 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010528:	2b00      	cmp	r3, #0
 801052a:	f040 8105 	bne.w	8010738 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801052e:	69f8      	ldr	r0, [r7, #28]
 8010530:	f003 fe18 	bl	8014164 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010534:	e100      	b.n	8010738 <tcp_input+0x724>
 8010536:	bf00      	nop
 8010538:	20004a14 	.word	0x20004a14
 801053c:	200081e4 	.word	0x200081e4
 8010540:	0801ac58 	.word	0x0801ac58
 8010544:	0801ad84 	.word	0x0801ad84
 8010548:	0801aca4 	.word	0x0801aca4
 801054c:	200114f8 	.word	0x200114f8
 8010550:	0801adb0 	.word	0x0801adb0
 8010554:	20011508 	.word	0x20011508
 8010558:	0801addc 	.word	0x0801addc
 801055c:	20011500 	.word	0x20011500
 8010560:	20004a04 	.word	0x20004a04
 8010564:	20004a34 	.word	0x20004a34
 8010568:	20004a31 	.word	0x20004a31
 801056c:	20004a2c 	.word	0x20004a2c
 8010570:	20004a30 	.word	0x20004a30
 8010574:	20004a2e 	.word	0x20004a2e
      }
    }
    tcp_input_pcb = pcb;
 8010578:	4a9d      	ldr	r2, [pc, #628]	; (80107f0 <tcp_input+0x7dc>)
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801057e:	69f8      	ldr	r0, [r7, #28]
 8010580:	f000 fb0c 	bl	8010b9c <tcp_process>
 8010584:	4603      	mov	r3, r0
 8010586:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801058c:	f113 0f0d 	cmn.w	r3, #13
 8010590:	f000 80d4 	beq.w	801073c <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 8010594:	4b97      	ldr	r3, [pc, #604]	; (80107f4 <tcp_input+0x7e0>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	f003 0308 	and.w	r3, r3, #8
 801059c:	2b00      	cmp	r3, #0
 801059e:	d015      	beq.n	80105cc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d008      	beq.n	80105bc <tcp_input+0x5a8>
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b0:	69fa      	ldr	r2, [r7, #28]
 80105b2:	6912      	ldr	r2, [r2, #16]
 80105b4:	f06f 010d 	mvn.w	r1, #13
 80105b8:	4610      	mov	r0, r2
 80105ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105bc:	69f9      	ldr	r1, [r7, #28]
 80105be:	488e      	ldr	r0, [pc, #568]	; (80107f8 <tcp_input+0x7e4>)
 80105c0:	f7ff fbb0 	bl	800fd24 <tcp_pcb_remove>
        tcp_free(pcb);
 80105c4:	69f8      	ldr	r0, [r7, #28]
 80105c6:	f7fd fec7 	bl	800e358 <tcp_free>
 80105ca:	e0c2      	b.n	8010752 <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 80105cc:	2300      	movs	r3, #0
 80105ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80105d0:	4b8a      	ldr	r3, [pc, #552]	; (80107fc <tcp_input+0x7e8>)
 80105d2:	881b      	ldrh	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d01d      	beq.n	8010614 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80105d8:	4b88      	ldr	r3, [pc, #544]	; (80107fc <tcp_input+0x7e8>)
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00a      	beq.n	80105fe <tcp_input+0x5ea>
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ee:	69fa      	ldr	r2, [r7, #28]
 80105f0:	6910      	ldr	r0, [r2, #16]
 80105f2:	89fa      	ldrh	r2, [r7, #14]
 80105f4:	69f9      	ldr	r1, [r7, #28]
 80105f6:	4798      	blx	r3
 80105f8:	4603      	mov	r3, r0
 80105fa:	74fb      	strb	r3, [r7, #19]
 80105fc:	e001      	b.n	8010602 <tcp_input+0x5ee>
 80105fe:	2300      	movs	r3, #0
 8010600:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010602:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010606:	f113 0f0d 	cmn.w	r3, #13
 801060a:	f000 8099 	beq.w	8010740 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 801060e:	4b7b      	ldr	r3, [pc, #492]	; (80107fc <tcp_input+0x7e8>)
 8010610:	2200      	movs	r2, #0
 8010612:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010614:	69f8      	ldr	r0, [r7, #28]
 8010616:	f000 f909 	bl	801082c <tcp_input_delayed_close>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 8091 	bne.w	8010744 <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010622:	4b77      	ldr	r3, [pc, #476]	; (8010800 <tcp_input+0x7ec>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d041      	beq.n	80106ae <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801062e:	2b00      	cmp	r3, #0
 8010630:	d006      	beq.n	8010640 <tcp_input+0x62c>
 8010632:	4b74      	ldr	r3, [pc, #464]	; (8010804 <tcp_input+0x7f0>)
 8010634:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010638:	4973      	ldr	r1, [pc, #460]	; (8010808 <tcp_input+0x7f4>)
 801063a:	4874      	ldr	r0, [pc, #464]	; (801080c <tcp_input+0x7f8>)
 801063c:	f007 f8e6 	bl	801780c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	8b5b      	ldrh	r3, [r3, #26]
 8010644:	f003 0310 	and.w	r3, r3, #16
 8010648:	2b00      	cmp	r3, #0
 801064a:	d008      	beq.n	801065e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801064c:	4b6c      	ldr	r3, [pc, #432]	; (8010800 <tcp_input+0x7ec>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4618      	mov	r0, r3
 8010652:	f7fd fbd5 	bl	800de00 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010656:	69f8      	ldr	r0, [r7, #28]
 8010658:	f7fe f9c2 	bl	800e9e0 <tcp_abort>
            goto aborted;
 801065c:	e079      	b.n	8010752 <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00c      	beq.n	8010682 <tcp_input+0x66e>
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	6918      	ldr	r0, [r3, #16]
 8010672:	4b63      	ldr	r3, [pc, #396]	; (8010800 <tcp_input+0x7ec>)
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	2300      	movs	r3, #0
 8010678:	69f9      	ldr	r1, [r7, #28]
 801067a:	47a0      	blx	r4
 801067c:	4603      	mov	r3, r0
 801067e:	74fb      	strb	r3, [r7, #19]
 8010680:	e008      	b.n	8010694 <tcp_input+0x680>
 8010682:	4b5f      	ldr	r3, [pc, #380]	; (8010800 <tcp_input+0x7ec>)
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	2300      	movs	r3, #0
 8010688:	69f9      	ldr	r1, [r7, #28]
 801068a:	2000      	movs	r0, #0
 801068c:	f7ff f884 	bl	800f798 <tcp_recv_null>
 8010690:	4603      	mov	r3, r0
 8010692:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010694:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010698:	f113 0f0d 	cmn.w	r3, #13
 801069c:	d054      	beq.n	8010748 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801069e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d003      	beq.n	80106ae <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80106a6:	4b56      	ldr	r3, [pc, #344]	; (8010800 <tcp_input+0x7ec>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80106ae:	4b51      	ldr	r3, [pc, #324]	; (80107f4 <tcp_input+0x7e0>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 0320 	and.w	r3, r3, #32
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d031      	beq.n	801071e <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d009      	beq.n	80106d6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106c6:	7b5a      	ldrb	r2, [r3, #13]
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106cc:	f042 0220 	orr.w	r2, r2, #32
 80106d0:	b2d2      	uxtb	r2, r2
 80106d2:	735a      	strb	r2, [r3, #13]
 80106d4:	e023      	b.n	801071e <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106da:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80106de:	4293      	cmp	r3, r2
 80106e0:	d005      	beq.n	80106ee <tcp_input+0x6da>
              pcb->rcv_wnd++;
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106e6:	3301      	adds	r3, #1
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d00b      	beq.n	8010710 <tcp_input+0x6fc>
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	6918      	ldr	r0, [r3, #16]
 8010702:	2300      	movs	r3, #0
 8010704:	2200      	movs	r2, #0
 8010706:	69f9      	ldr	r1, [r7, #28]
 8010708:	47a0      	blx	r4
 801070a:	4603      	mov	r3, r0
 801070c:	74fb      	strb	r3, [r7, #19]
 801070e:	e001      	b.n	8010714 <tcp_input+0x700>
 8010710:	2300      	movs	r3, #0
 8010712:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010714:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010718:	f113 0f0d 	cmn.w	r3, #13
 801071c:	d016      	beq.n	801074c <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801071e:	4b34      	ldr	r3, [pc, #208]	; (80107f0 <tcp_input+0x7dc>)
 8010720:	2200      	movs	r2, #0
 8010722:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010724:	69f8      	ldr	r0, [r7, #28]
 8010726:	f000 f881 	bl	801082c <tcp_input_delayed_close>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10f      	bne.n	8010750 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010730:	69f8      	ldr	r0, [r7, #28]
 8010732:	f002 ff11 	bl	8013558 <tcp_output>
 8010736:	e00c      	b.n	8010752 <tcp_input+0x73e>
        goto aborted;
 8010738:	bf00      	nop
 801073a:	e00a      	b.n	8010752 <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801073c:	bf00      	nop
 801073e:	e008      	b.n	8010752 <tcp_input+0x73e>
              goto aborted;
 8010740:	bf00      	nop
 8010742:	e006      	b.n	8010752 <tcp_input+0x73e>
          goto aborted;
 8010744:	bf00      	nop
 8010746:	e004      	b.n	8010752 <tcp_input+0x73e>
            goto aborted;
 8010748:	bf00      	nop
 801074a:	e002      	b.n	8010752 <tcp_input+0x73e>
              goto aborted;
 801074c:	bf00      	nop
 801074e:	e000      	b.n	8010752 <tcp_input+0x73e>
          goto aborted;
 8010750:	bf00      	nop
    tcp_input_pcb = NULL;
 8010752:	4b27      	ldr	r3, [pc, #156]	; (80107f0 <tcp_input+0x7dc>)
 8010754:	2200      	movs	r2, #0
 8010756:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010758:	4b29      	ldr	r3, [pc, #164]	; (8010800 <tcp_input+0x7ec>)
 801075a:	2200      	movs	r2, #0
 801075c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801075e:	4b2c      	ldr	r3, [pc, #176]	; (8010810 <tcp_input+0x7fc>)
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d03f      	beq.n	80107e6 <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 8010766:	4b2a      	ldr	r3, [pc, #168]	; (8010810 <tcp_input+0x7fc>)
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	4618      	mov	r0, r3
 801076c:	f7fd fb48 	bl	800de00 <pbuf_free>
      inseg.p = NULL;
 8010770:	4b27      	ldr	r3, [pc, #156]	; (8010810 <tcp_input+0x7fc>)
 8010772:	2200      	movs	r2, #0
 8010774:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010776:	e036      	b.n	80107e6 <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010778:	4b26      	ldr	r3, [pc, #152]	; (8010814 <tcp_input+0x800>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	899b      	ldrh	r3, [r3, #12]
 801077e:	b29b      	uxth	r3, r3
 8010780:	4618      	mov	r0, r3
 8010782:	f7fb ff8d 	bl	800c6a0 <lwip_htons>
 8010786:	4603      	mov	r3, r0
 8010788:	b2db      	uxtb	r3, r3
 801078a:	f003 0304 	and.w	r3, r3, #4
 801078e:	2b00      	cmp	r3, #0
 8010790:	d118      	bne.n	80107c4 <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010792:	4b21      	ldr	r3, [pc, #132]	; (8010818 <tcp_input+0x804>)
 8010794:	6819      	ldr	r1, [r3, #0]
 8010796:	4b21      	ldr	r3, [pc, #132]	; (801081c <tcp_input+0x808>)
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	461a      	mov	r2, r3
 801079c:	4b20      	ldr	r3, [pc, #128]	; (8010820 <tcp_input+0x80c>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107a2:	4b1c      	ldr	r3, [pc, #112]	; (8010814 <tcp_input+0x800>)
 80107a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107a6:	885b      	ldrh	r3, [r3, #2]
 80107a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107aa:	4a1a      	ldr	r2, [pc, #104]	; (8010814 <tcp_input+0x800>)
 80107ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107ae:	8812      	ldrh	r2, [r2, #0]
 80107b0:	b292      	uxth	r2, r2
 80107b2:	9202      	str	r2, [sp, #8]
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	4b1b      	ldr	r3, [pc, #108]	; (8010824 <tcp_input+0x810>)
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	4b1b      	ldr	r3, [pc, #108]	; (8010828 <tcp_input+0x814>)
 80107bc:	4602      	mov	r2, r0
 80107be:	2000      	movs	r0, #0
 80107c0:	f003 fc7e 	bl	80140c0 <tcp_rst>
    pbuf_free(p);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7fd fb1b 	bl	800de00 <pbuf_free>
  return;
 80107ca:	e00c      	b.n	80107e6 <tcp_input+0x7d2>
    goto dropped;
 80107cc:	bf00      	nop
 80107ce:	e006      	b.n	80107de <tcp_input+0x7ca>
    goto dropped;
 80107d0:	bf00      	nop
 80107d2:	e004      	b.n	80107de <tcp_input+0x7ca>
    goto dropped;
 80107d4:	bf00      	nop
 80107d6:	e002      	b.n	80107de <tcp_input+0x7ca>
      goto dropped;
 80107d8:	bf00      	nop
 80107da:	e000      	b.n	80107de <tcp_input+0x7ca>
      goto dropped;
 80107dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7fd fb0e 	bl	800de00 <pbuf_free>
 80107e4:	e000      	b.n	80107e8 <tcp_input+0x7d4>
  return;
 80107e6:	bf00      	nop
}
 80107e8:	3724      	adds	r7, #36	; 0x24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd90      	pop	{r4, r7, pc}
 80107ee:	bf00      	nop
 80107f0:	2001150c 	.word	0x2001150c
 80107f4:	20004a31 	.word	0x20004a31
 80107f8:	200114f8 	.word	0x200114f8
 80107fc:	20004a2c 	.word	0x20004a2c
 8010800:	20004a34 	.word	0x20004a34
 8010804:	0801ac58 	.word	0x0801ac58
 8010808:	0801ae0c 	.word	0x0801ae0c
 801080c:	0801aca4 	.word	0x0801aca4
 8010810:	20004a04 	.word	0x20004a04
 8010814:	20004a14 	.word	0x20004a14
 8010818:	20004a28 	.word	0x20004a28
 801081c:	20004a2e 	.word	0x20004a2e
 8010820:	20004a24 	.word	0x20004a24
 8010824:	200081f4 	.word	0x200081f4
 8010828:	200081f8 	.word	0x200081f8

0801082c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d106      	bne.n	8010848 <tcp_input_delayed_close+0x1c>
 801083a:	4b17      	ldr	r3, [pc, #92]	; (8010898 <tcp_input_delayed_close+0x6c>)
 801083c:	f240 225a 	movw	r2, #602	; 0x25a
 8010840:	4916      	ldr	r1, [pc, #88]	; (801089c <tcp_input_delayed_close+0x70>)
 8010842:	4817      	ldr	r0, [pc, #92]	; (80108a0 <tcp_input_delayed_close+0x74>)
 8010844:	f006 ffe2 	bl	801780c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010848:	4b16      	ldr	r3, [pc, #88]	; (80108a4 <tcp_input_delayed_close+0x78>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f003 0310 	and.w	r3, r3, #16
 8010850:	2b00      	cmp	r3, #0
 8010852:	d01c      	beq.n	801088e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	8b5b      	ldrh	r3, [r3, #26]
 8010858:	f003 0310 	and.w	r3, r3, #16
 801085c:	2b00      	cmp	r3, #0
 801085e:	d10d      	bne.n	801087c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010866:	2b00      	cmp	r3, #0
 8010868:	d008      	beq.n	801087c <tcp_input_delayed_close+0x50>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	6912      	ldr	r2, [r2, #16]
 8010874:	f06f 010e 	mvn.w	r1, #14
 8010878:	4610      	mov	r0, r2
 801087a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	480a      	ldr	r0, [pc, #40]	; (80108a8 <tcp_input_delayed_close+0x7c>)
 8010880:	f7ff fa50 	bl	800fd24 <tcp_pcb_remove>
    tcp_free(pcb);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7fd fd67 	bl	800e358 <tcp_free>
    return 1;
 801088a:	2301      	movs	r3, #1
 801088c:	e000      	b.n	8010890 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0801ac58 	.word	0x0801ac58
 801089c:	0801ae28 	.word	0x0801ae28
 80108a0:	0801aca4 	.word	0x0801aca4
 80108a4:	20004a31 	.word	0x20004a31
 80108a8:	200114f8 	.word	0x200114f8

080108ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80108ac:	b590      	push	{r4, r7, lr}
 80108ae:	b08b      	sub	sp, #44	; 0x2c
 80108b0:	af04      	add	r7, sp, #16
 80108b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80108b4:	4b6f      	ldr	r3, [pc, #444]	; (8010a74 <tcp_listen_input+0x1c8>)
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	f003 0304 	and.w	r3, r3, #4
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f040 80d2 	bne.w	8010a66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <tcp_listen_input+0x2a>
 80108c8:	4b6b      	ldr	r3, [pc, #428]	; (8010a78 <tcp_listen_input+0x1cc>)
 80108ca:	f240 2281 	movw	r2, #641	; 0x281
 80108ce:	496b      	ldr	r1, [pc, #428]	; (8010a7c <tcp_listen_input+0x1d0>)
 80108d0:	486b      	ldr	r0, [pc, #428]	; (8010a80 <tcp_listen_input+0x1d4>)
 80108d2:	f006 ff9b 	bl	801780c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80108d6:	4b67      	ldr	r3, [pc, #412]	; (8010a74 <tcp_listen_input+0x1c8>)
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	f003 0310 	and.w	r3, r3, #16
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d019      	beq.n	8010916 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108e2:	4b68      	ldr	r3, [pc, #416]	; (8010a84 <tcp_listen_input+0x1d8>)
 80108e4:	6819      	ldr	r1, [r3, #0]
 80108e6:	4b68      	ldr	r3, [pc, #416]	; (8010a88 <tcp_listen_input+0x1dc>)
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	461a      	mov	r2, r3
 80108ec:	4b67      	ldr	r3, [pc, #412]	; (8010a8c <tcp_listen_input+0x1e0>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108f2:	4b67      	ldr	r3, [pc, #412]	; (8010a90 <tcp_listen_input+0x1e4>)
 80108f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108f6:	885b      	ldrh	r3, [r3, #2]
 80108f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108fa:	4a65      	ldr	r2, [pc, #404]	; (8010a90 <tcp_listen_input+0x1e4>)
 80108fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108fe:	8812      	ldrh	r2, [r2, #0]
 8010900:	b292      	uxth	r2, r2
 8010902:	9202      	str	r2, [sp, #8]
 8010904:	9301      	str	r3, [sp, #4]
 8010906:	4b63      	ldr	r3, [pc, #396]	; (8010a94 <tcp_listen_input+0x1e8>)
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	4b63      	ldr	r3, [pc, #396]	; (8010a98 <tcp_listen_input+0x1ec>)
 801090c:	4602      	mov	r2, r0
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f003 fbd6 	bl	80140c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010914:	e0a9      	b.n	8010a6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010916:	4b57      	ldr	r3, [pc, #348]	; (8010a74 <tcp_listen_input+0x1c8>)
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	f003 0302 	and.w	r3, r3, #2
 801091e:	2b00      	cmp	r3, #0
 8010920:	f000 80a3 	beq.w	8010a6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	7d5b      	ldrb	r3, [r3, #21]
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff f859 	bl	800f9e0 <tcp_alloc>
 801092e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d111      	bne.n	801095a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	699b      	ldr	r3, [r3, #24]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00a      	beq.n	8010954 <tcp_listen_input+0xa8>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	699b      	ldr	r3, [r3, #24]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	6910      	ldr	r0, [r2, #16]
 8010946:	f04f 32ff 	mov.w	r2, #4294967295
 801094a:	2100      	movs	r1, #0
 801094c:	4798      	blx	r3
 801094e:	4603      	mov	r3, r0
 8010950:	73bb      	strb	r3, [r7, #14]
      return;
 8010952:	e08b      	b.n	8010a6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010954:	23f0      	movs	r3, #240	; 0xf0
 8010956:	73bb      	strb	r3, [r7, #14]
      return;
 8010958:	e088      	b.n	8010a6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801095a:	4b50      	ldr	r3, [pc, #320]	; (8010a9c <tcp_listen_input+0x1f0>)
 801095c:	695a      	ldr	r2, [r3, #20]
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010962:	4b4e      	ldr	r3, [pc, #312]	; (8010a9c <tcp_listen_input+0x1f0>)
 8010964:	691a      	ldr	r2, [r3, #16]
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	8ada      	ldrh	r2, [r3, #22]
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010972:	4b47      	ldr	r3, [pc, #284]	; (8010a90 <tcp_listen_input+0x1e4>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	b29a      	uxth	r2, r3
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	2203      	movs	r2, #3
 8010982:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010984:	4b41      	ldr	r3, [pc, #260]	; (8010a8c <tcp_listen_input+0x1e0>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	1c5a      	adds	r2, r3, #1
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010996:	6978      	ldr	r0, [r7, #20]
 8010998:	f7ff fa58 	bl	800fe4c <tcp_next_iss>
 801099c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	693a      	ldr	r2, [r7, #16]
 80109ae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	693a      	ldr	r2, [r7, #16]
 80109b4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80109b6:	4b35      	ldr	r3, [pc, #212]	; (8010a8c <tcp_listen_input+0x1e0>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	1e5a      	subs	r2, r3, #1
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	691a      	ldr	r2, [r3, #16]
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	7a5b      	ldrb	r3, [r3, #9]
 80109d2:	f003 030c 	and.w	r3, r3, #12
 80109d6:	b2da      	uxtb	r2, r3
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	7a1a      	ldrb	r2, [r3, #8]
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80109e4:	4b2e      	ldr	r3, [pc, #184]	; (8010aa0 <tcp_listen_input+0x1f4>)
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	60da      	str	r2, [r3, #12]
 80109ec:	4a2c      	ldr	r2, [pc, #176]	; (8010aa0 <tcp_listen_input+0x1f4>)
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	6013      	str	r3, [r2, #0]
 80109f2:	f003 fd27 	bl	8014444 <tcp_timer_needed>
 80109f6:	4b2b      	ldr	r3, [pc, #172]	; (8010aa4 <tcp_listen_input+0x1f8>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80109fc:	6978      	ldr	r0, [r7, #20]
 80109fe:	f001 fd8d 	bl	801251c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010a02:	4b23      	ldr	r3, [pc, #140]	; (8010a90 <tcp_listen_input+0x1e4>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	89db      	ldrh	r3, [r3, #14]
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	3304      	adds	r3, #4
 8010a24:	4618      	mov	r0, r3
 8010a26:	f005 fa61 	bl	8015eec <ip4_route>
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	3304      	adds	r3, #4
 8010a30:	461a      	mov	r2, r3
 8010a32:	4620      	mov	r0, r4
 8010a34:	f7ff fa30 	bl	800fe98 <tcp_eff_send_mss_netif>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010a40:	2112      	movs	r1, #18
 8010a42:	6978      	ldr	r0, [r7, #20]
 8010a44:	f002 fc9a 	bl	801337c <tcp_enqueue_flags>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d004      	beq.n	8010a5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010a54:	2100      	movs	r1, #0
 8010a56:	6978      	ldr	r0, [r7, #20]
 8010a58:	f7fd ff04 	bl	800e864 <tcp_abandon>
      return;
 8010a5c:	e006      	b.n	8010a6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010a5e:	6978      	ldr	r0, [r7, #20]
 8010a60:	f002 fd7a 	bl	8013558 <tcp_output>
  return;
 8010a64:	e001      	b.n	8010a6a <tcp_listen_input+0x1be>
    return;
 8010a66:	bf00      	nop
 8010a68:	e000      	b.n	8010a6c <tcp_listen_input+0x1c0>
  return;
 8010a6a:	bf00      	nop
}
 8010a6c:	371c      	adds	r7, #28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd90      	pop	{r4, r7, pc}
 8010a72:	bf00      	nop
 8010a74:	20004a30 	.word	0x20004a30
 8010a78:	0801ac58 	.word	0x0801ac58
 8010a7c:	0801ae50 	.word	0x0801ae50
 8010a80:	0801aca4 	.word	0x0801aca4
 8010a84:	20004a28 	.word	0x20004a28
 8010a88:	20004a2e 	.word	0x20004a2e
 8010a8c:	20004a24 	.word	0x20004a24
 8010a90:	20004a14 	.word	0x20004a14
 8010a94:	200081f4 	.word	0x200081f4
 8010a98:	200081f8 	.word	0x200081f8
 8010a9c:	200081e4 	.word	0x200081e4
 8010aa0:	200114f8 	.word	0x200114f8
 8010aa4:	200114f4 	.word	0x200114f4

08010aa8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af04      	add	r7, sp, #16
 8010aae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010ab0:	4b2f      	ldr	r3, [pc, #188]	; (8010b70 <tcp_timewait_input+0xc8>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f003 0304 	and.w	r3, r3, #4
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d153      	bne.n	8010b64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d106      	bne.n	8010ad0 <tcp_timewait_input+0x28>
 8010ac2:	4b2c      	ldr	r3, [pc, #176]	; (8010b74 <tcp_timewait_input+0xcc>)
 8010ac4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010ac8:	492b      	ldr	r1, [pc, #172]	; (8010b78 <tcp_timewait_input+0xd0>)
 8010aca:	482c      	ldr	r0, [pc, #176]	; (8010b7c <tcp_timewait_input+0xd4>)
 8010acc:	f006 fe9e 	bl	801780c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010ad0:	4b27      	ldr	r3, [pc, #156]	; (8010b70 <tcp_timewait_input+0xc8>)
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	f003 0302 	and.w	r3, r3, #2
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d02a      	beq.n	8010b32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010adc:	4b28      	ldr	r3, [pc, #160]	; (8010b80 <tcp_timewait_input+0xd8>)
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae4:	1ad3      	subs	r3, r2, r3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	db2d      	blt.n	8010b46 <tcp_timewait_input+0x9e>
 8010aea:	4b25      	ldr	r3, [pc, #148]	; (8010b80 <tcp_timewait_input+0xd8>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010af6:	440b      	add	r3, r1
 8010af8:	1ad3      	subs	r3, r2, r3
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	dc23      	bgt.n	8010b46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010afe:	4b21      	ldr	r3, [pc, #132]	; (8010b84 <tcp_timewait_input+0xdc>)
 8010b00:	6819      	ldr	r1, [r3, #0]
 8010b02:	4b21      	ldr	r3, [pc, #132]	; (8010b88 <tcp_timewait_input+0xe0>)
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	461a      	mov	r2, r3
 8010b08:	4b1d      	ldr	r3, [pc, #116]	; (8010b80 <tcp_timewait_input+0xd8>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b0e:	4b1f      	ldr	r3, [pc, #124]	; (8010b8c <tcp_timewait_input+0xe4>)
 8010b10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b12:	885b      	ldrh	r3, [r3, #2]
 8010b14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b16:	4a1d      	ldr	r2, [pc, #116]	; (8010b8c <tcp_timewait_input+0xe4>)
 8010b18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b1a:	8812      	ldrh	r2, [r2, #0]
 8010b1c:	b292      	uxth	r2, r2
 8010b1e:	9202      	str	r2, [sp, #8]
 8010b20:	9301      	str	r3, [sp, #4]
 8010b22:	4b1b      	ldr	r3, [pc, #108]	; (8010b90 <tcp_timewait_input+0xe8>)
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	4b1b      	ldr	r3, [pc, #108]	; (8010b94 <tcp_timewait_input+0xec>)
 8010b28:	4602      	mov	r2, r0
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f003 fac8 	bl	80140c0 <tcp_rst>
      return;
 8010b30:	e01b      	b.n	8010b6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010b32:	4b0f      	ldr	r3, [pc, #60]	; (8010b70 <tcp_timewait_input+0xc8>)
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	f003 0301 	and.w	r3, r3, #1
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d003      	beq.n	8010b46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010b3e:	4b16      	ldr	r3, [pc, #88]	; (8010b98 <tcp_timewait_input+0xf0>)
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010b46:	4b10      	ldr	r3, [pc, #64]	; (8010b88 <tcp_timewait_input+0xe0>)
 8010b48:	881b      	ldrh	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d00c      	beq.n	8010b68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	8b5b      	ldrh	r3, [r3, #26]
 8010b52:	f043 0302 	orr.w	r3, r3, #2
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f002 fcfb 	bl	8013558 <tcp_output>
  }
  return;
 8010b62:	e001      	b.n	8010b68 <tcp_timewait_input+0xc0>
    return;
 8010b64:	bf00      	nop
 8010b66:	e000      	b.n	8010b6a <tcp_timewait_input+0xc2>
  return;
 8010b68:	bf00      	nop
}
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	20004a30 	.word	0x20004a30
 8010b74:	0801ac58 	.word	0x0801ac58
 8010b78:	0801ae70 	.word	0x0801ae70
 8010b7c:	0801aca4 	.word	0x0801aca4
 8010b80:	20004a24 	.word	0x20004a24
 8010b84:	20004a28 	.word	0x20004a28
 8010b88:	20004a2e 	.word	0x20004a2e
 8010b8c:	20004a14 	.word	0x20004a14
 8010b90:	200081f4 	.word	0x200081f4
 8010b94:	200081f8 	.word	0x200081f8
 8010b98:	200114fc 	.word	0x200114fc

08010b9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b9c:	b590      	push	{r4, r7, lr}
 8010b9e:	b08d      	sub	sp, #52	; 0x34
 8010ba0:	af04      	add	r7, sp, #16
 8010ba2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d106      	bne.n	8010bc0 <tcp_process+0x24>
 8010bb2:	4ba5      	ldr	r3, [pc, #660]	; (8010e48 <tcp_process+0x2ac>)
 8010bb4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010bb8:	49a4      	ldr	r1, [pc, #656]	; (8010e4c <tcp_process+0x2b0>)
 8010bba:	48a5      	ldr	r0, [pc, #660]	; (8010e50 <tcp_process+0x2b4>)
 8010bbc:	f006 fe26 	bl	801780c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010bc0:	4ba4      	ldr	r3, [pc, #656]	; (8010e54 <tcp_process+0x2b8>)
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f003 0304 	and.w	r3, r3, #4
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d04e      	beq.n	8010c6a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	7d1b      	ldrb	r3, [r3, #20]
 8010bd0:	2b02      	cmp	r3, #2
 8010bd2:	d108      	bne.n	8010be6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bd8:	4b9f      	ldr	r3, [pc, #636]	; (8010e58 <tcp_process+0x2bc>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d123      	bne.n	8010c28 <tcp_process+0x8c>
        acceptable = 1;
 8010be0:	2301      	movs	r3, #1
 8010be2:	76fb      	strb	r3, [r7, #27]
 8010be4:	e020      	b.n	8010c28 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bea:	4b9c      	ldr	r3, [pc, #624]	; (8010e5c <tcp_process+0x2c0>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d102      	bne.n	8010bf8 <tcp_process+0x5c>
        acceptable = 1;
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	76fb      	strb	r3, [r7, #27]
 8010bf6:	e017      	b.n	8010c28 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bf8:	4b98      	ldr	r3, [pc, #608]	; (8010e5c <tcp_process+0x2c0>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c00:	1ad3      	subs	r3, r2, r3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	db10      	blt.n	8010c28 <tcp_process+0x8c>
 8010c06:	4b95      	ldr	r3, [pc, #596]	; (8010e5c <tcp_process+0x2c0>)
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c0e:	6879      	ldr	r1, [r7, #4]
 8010c10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c12:	440b      	add	r3, r1
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	dc06      	bgt.n	8010c28 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8b5b      	ldrh	r3, [r3, #26]
 8010c1e:	f043 0302 	orr.w	r3, r3, #2
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010c28:	7efb      	ldrb	r3, [r7, #27]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d01b      	beq.n	8010c66 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	7d1b      	ldrb	r3, [r3, #20]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <tcp_process+0xa8>
 8010c36:	4b84      	ldr	r3, [pc, #528]	; (8010e48 <tcp_process+0x2ac>)
 8010c38:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010c3c:	4988      	ldr	r1, [pc, #544]	; (8010e60 <tcp_process+0x2c4>)
 8010c3e:	4884      	ldr	r0, [pc, #528]	; (8010e50 <tcp_process+0x2b4>)
 8010c40:	f006 fde4 	bl	801780c <iprintf>
      recv_flags |= TF_RESET;
 8010c44:	4b87      	ldr	r3, [pc, #540]	; (8010e64 <tcp_process+0x2c8>)
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	f043 0308 	orr.w	r3, r3, #8
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	4b85      	ldr	r3, [pc, #532]	; (8010e64 <tcp_process+0x2c8>)
 8010c50:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8b5b      	ldrh	r3, [r3, #26]
 8010c56:	f023 0301 	bic.w	r3, r3, #1
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c60:	f06f 030d 	mvn.w	r3, #13
 8010c64:	e37a      	b.n	801135c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	e378      	b.n	801135c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c6a:	4b7a      	ldr	r3, [pc, #488]	; (8010e54 <tcp_process+0x2b8>)
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	f003 0302 	and.w	r3, r3, #2
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d010      	beq.n	8010c98 <tcp_process+0xfc>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	7d1b      	ldrb	r3, [r3, #20]
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d00c      	beq.n	8010c98 <tcp_process+0xfc>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	7d1b      	ldrb	r3, [r3, #20]
 8010c82:	2b03      	cmp	r3, #3
 8010c84:	d008      	beq.n	8010c98 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	8b5b      	ldrh	r3, [r3, #26]
 8010c8a:	f043 0302 	orr.w	r3, r3, #2
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c94:	2300      	movs	r3, #0
 8010c96:	e361      	b.n	801135c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	8b5b      	ldrh	r3, [r3, #26]
 8010c9c:	f003 0310 	and.w	r3, r3, #16
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d103      	bne.n	8010cac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010ca4:	4b70      	ldr	r3, [pc, #448]	; (8010e68 <tcp_process+0x2cc>)
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f001 fc2d 	bl	801251c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	7d1b      	ldrb	r3, [r3, #20]
 8010cc6:	3b02      	subs	r3, #2
 8010cc8:	2b07      	cmp	r3, #7
 8010cca:	f200 8337 	bhi.w	801133c <tcp_process+0x7a0>
 8010cce:	a201      	add	r2, pc, #4	; (adr r2, 8010cd4 <tcp_process+0x138>)
 8010cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd4:	08010cf5 	.word	0x08010cf5
 8010cd8:	08010f25 	.word	0x08010f25
 8010cdc:	0801109d 	.word	0x0801109d
 8010ce0:	080110c7 	.word	0x080110c7
 8010ce4:	080111eb 	.word	0x080111eb
 8010ce8:	0801109d 	.word	0x0801109d
 8010cec:	08011277 	.word	0x08011277
 8010cf0:	08011307 	.word	0x08011307
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010cf4:	4b57      	ldr	r3, [pc, #348]	; (8010e54 <tcp_process+0x2b8>)
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	f003 0310 	and.w	r3, r3, #16
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	f000 80e4 	beq.w	8010eca <tcp_process+0x32e>
 8010d02:	4b54      	ldr	r3, [pc, #336]	; (8010e54 <tcp_process+0x2b8>)
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	f003 0302 	and.w	r3, r3, #2
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	f000 80dd 	beq.w	8010eca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d14:	1c5a      	adds	r2, r3, #1
 8010d16:	4b50      	ldr	r3, [pc, #320]	; (8010e58 <tcp_process+0x2bc>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	f040 80d5 	bne.w	8010eca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010d20:	4b4e      	ldr	r3, [pc, #312]	; (8010e5c <tcp_process+0x2c0>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	1c5a      	adds	r2, r3, #1
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010d32:	4b49      	ldr	r3, [pc, #292]	; (8010e58 <tcp_process+0x2bc>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010d3a:	4b4c      	ldr	r3, [pc, #304]	; (8010e6c <tcp_process+0x2d0>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	89db      	ldrh	r3, [r3, #14]
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010d54:	4b41      	ldr	r3, [pc, #260]	; (8010e5c <tcp_process+0x2c0>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	1e5a      	subs	r2, r3, #1
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2204      	movs	r2, #4
 8010d62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3304      	adds	r3, #4
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f005 f8bd 	bl	8015eec <ip4_route>
 8010d72:	4601      	mov	r1, r0
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	3304      	adds	r3, #4
 8010d78:	461a      	mov	r2, r3
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f7ff f88c 	bl	800fe98 <tcp_eff_send_mss_netif>
 8010d80:	4603      	mov	r3, r0
 8010d82:	461a      	mov	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d8c:	009a      	lsls	r2, r3, #2
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d92:	005b      	lsls	r3, r3, #1
 8010d94:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	bf38      	it	cc
 8010d9c:	460b      	movcc	r3, r1
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d204      	bcs.n	8010dac <tcp_process+0x210>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	e00d      	b.n	8010dc8 <tcp_process+0x22c>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	f241 121c 	movw	r2, #4380	; 0x111c
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d904      	bls.n	8010dc4 <tcp_process+0x228>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	e001      	b.n	8010dc8 <tcp_process+0x22c>
 8010dc4:	f241 131c 	movw	r3, #4380	; 0x111c
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d106      	bne.n	8010de6 <tcp_process+0x24a>
 8010dd8:	4b1b      	ldr	r3, [pc, #108]	; (8010e48 <tcp_process+0x2ac>)
 8010dda:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010dde:	4924      	ldr	r1, [pc, #144]	; (8010e70 <tcp_process+0x2d4>)
 8010de0:	481b      	ldr	r0, [pc, #108]	; (8010e50 <tcp_process+0x2b4>)
 8010de2:	f006 fd13 	bl	801780c <iprintf>
        --pcb->snd_queuelen;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dec:	3b01      	subs	r3, #1
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dfa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d111      	bne.n	8010e26 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d106      	bne.n	8010e1c <tcp_process+0x280>
 8010e0e:	4b0e      	ldr	r3, [pc, #56]	; (8010e48 <tcp_process+0x2ac>)
 8010e10:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010e14:	4917      	ldr	r1, [pc, #92]	; (8010e74 <tcp_process+0x2d8>)
 8010e16:	480e      	ldr	r0, [pc, #56]	; (8010e50 <tcp_process+0x2b4>)
 8010e18:	f006 fcf8 	bl	801780c <iprintf>
          pcb->unsent = rseg->next;
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e24:	e003      	b.n	8010e2e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010e2e:	69f8      	ldr	r0, [r7, #28]
 8010e30:	f7fe fc6d 	bl	800f70e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d11d      	bne.n	8010e78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e42:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e44:	e01f      	b.n	8010e86 <tcp_process+0x2ea>
 8010e46:	bf00      	nop
 8010e48:	0801ac58 	.word	0x0801ac58
 8010e4c:	0801ae90 	.word	0x0801ae90
 8010e50:	0801aca4 	.word	0x0801aca4
 8010e54:	20004a30 	.word	0x20004a30
 8010e58:	20004a28 	.word	0x20004a28
 8010e5c:	20004a24 	.word	0x20004a24
 8010e60:	0801aeac 	.word	0x0801aeac
 8010e64:	20004a31 	.word	0x20004a31
 8010e68:	200114fc 	.word	0x200114fc
 8010e6c:	20004a14 	.word	0x20004a14
 8010e70:	0801aecc 	.word	0x0801aecc
 8010e74:	0801aee4 	.word	0x0801aee4
        } else {
          pcb->rtime = 0;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2200      	movs	r2, #0
 8010e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00a      	beq.n	8010ea6 <tcp_process+0x30a>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	6910      	ldr	r0, [r2, #16]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	4798      	blx	r3
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	76bb      	strb	r3, [r7, #26]
 8010ea4:	e001      	b.n	8010eaa <tcp_process+0x30e>
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010eaa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010eae:	f113 0f0d 	cmn.w	r3, #13
 8010eb2:	d102      	bne.n	8010eba <tcp_process+0x31e>
          return ERR_ABRT;
 8010eb4:	f06f 030c 	mvn.w	r3, #12
 8010eb8:	e250      	b.n	801135c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	8b5b      	ldrh	r3, [r3, #26]
 8010ebe:	f043 0302 	orr.w	r3, r3, #2
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010ec8:	e23a      	b.n	8011340 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010eca:	4b9d      	ldr	r3, [pc, #628]	; (8011140 <tcp_process+0x5a4>)
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	f003 0310 	and.w	r3, r3, #16
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f000 8234 	beq.w	8011340 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ed8:	4b9a      	ldr	r3, [pc, #616]	; (8011144 <tcp_process+0x5a8>)
 8010eda:	6819      	ldr	r1, [r3, #0]
 8010edc:	4b9a      	ldr	r3, [pc, #616]	; (8011148 <tcp_process+0x5ac>)
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4b9a      	ldr	r3, [pc, #616]	; (801114c <tcp_process+0x5b0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ee8:	4b99      	ldr	r3, [pc, #612]	; (8011150 <tcp_process+0x5b4>)
 8010eea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010eec:	885b      	ldrh	r3, [r3, #2]
 8010eee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ef0:	4a97      	ldr	r2, [pc, #604]	; (8011150 <tcp_process+0x5b4>)
 8010ef2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ef4:	8812      	ldrh	r2, [r2, #0]
 8010ef6:	b292      	uxth	r2, r2
 8010ef8:	9202      	str	r2, [sp, #8]
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	4b95      	ldr	r3, [pc, #596]	; (8011154 <tcp_process+0x5b8>)
 8010efe:	9300      	str	r3, [sp, #0]
 8010f00:	4b95      	ldr	r3, [pc, #596]	; (8011158 <tcp_process+0x5bc>)
 8010f02:	4602      	mov	r2, r0
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f003 f8db 	bl	80140c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f10:	2b05      	cmp	r3, #5
 8010f12:	f200 8215 	bhi.w	8011340 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f002 fea5 	bl	8013c6c <tcp_rexmit_rto>
      break;
 8010f22:	e20d      	b.n	8011340 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010f24:	4b86      	ldr	r3, [pc, #536]	; (8011140 <tcp_process+0x5a4>)
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	f003 0310 	and.w	r3, r3, #16
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 80a1 	beq.w	8011074 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f32:	4b84      	ldr	r3, [pc, #528]	; (8011144 <tcp_process+0x5a8>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	db7e      	blt.n	8011040 <tcp_process+0x4a4>
 8010f42:	4b80      	ldr	r3, [pc, #512]	; (8011144 <tcp_process+0x5a8>)
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	dc77      	bgt.n	8011040 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2204      	movs	r2, #4
 8010f54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d102      	bne.n	8010f64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010f5e:	23fa      	movs	r3, #250	; 0xfa
 8010f60:	76bb      	strb	r3, [r7, #26]
 8010f62:	e01d      	b.n	8010fa0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f68:	699b      	ldr	r3, [r3, #24]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d106      	bne.n	8010f7c <tcp_process+0x3e0>
 8010f6e:	4b7b      	ldr	r3, [pc, #492]	; (801115c <tcp_process+0x5c0>)
 8010f70:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f74:	497a      	ldr	r1, [pc, #488]	; (8011160 <tcp_process+0x5c4>)
 8010f76:	487b      	ldr	r0, [pc, #492]	; (8011164 <tcp_process+0x5c8>)
 8010f78:	f006 fc48 	bl	801780c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f80:	699b      	ldr	r3, [r3, #24]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00a      	beq.n	8010f9c <tcp_process+0x400>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f8a:	699b      	ldr	r3, [r3, #24]
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	6910      	ldr	r0, [r2, #16]
 8010f90:	2200      	movs	r2, #0
 8010f92:	6879      	ldr	r1, [r7, #4]
 8010f94:	4798      	blx	r3
 8010f96:	4603      	mov	r3, r0
 8010f98:	76bb      	strb	r3, [r7, #26]
 8010f9a:	e001      	b.n	8010fa0 <tcp_process+0x404>
 8010f9c:	23f0      	movs	r3, #240	; 0xf0
 8010f9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010fa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00a      	beq.n	8010fbe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010fa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fac:	f113 0f0d 	cmn.w	r3, #13
 8010fb0:	d002      	beq.n	8010fb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f7fd fd14 	bl	800e9e0 <tcp_abort>
            }
            return ERR_ABRT;
 8010fb8:	f06f 030c 	mvn.w	r3, #12
 8010fbc:	e1ce      	b.n	801135c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 fae0 	bl	8011584 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010fc4:	4b68      	ldr	r3, [pc, #416]	; (8011168 <tcp_process+0x5cc>)
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d005      	beq.n	8010fd8 <tcp_process+0x43c>
            recv_acked--;
 8010fcc:	4b66      	ldr	r3, [pc, #408]	; (8011168 <tcp_process+0x5cc>)
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	3b01      	subs	r3, #1
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	4b64      	ldr	r3, [pc, #400]	; (8011168 <tcp_process+0x5cc>)
 8010fd6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fdc:	009a      	lsls	r2, r3, #2
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	f241 111c 	movw	r1, #4380	; 0x111c
 8010fe8:	428b      	cmp	r3, r1
 8010fea:	bf38      	it	cc
 8010fec:	460b      	movcc	r3, r1
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d204      	bcs.n	8010ffc <tcp_process+0x460>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	e00d      	b.n	8011018 <tcp_process+0x47c>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011000:	005b      	lsls	r3, r3, #1
 8011002:	f241 121c 	movw	r2, #4380	; 0x111c
 8011006:	4293      	cmp	r3, r2
 8011008:	d904      	bls.n	8011014 <tcp_process+0x478>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	b29b      	uxth	r3, r3
 8011012:	e001      	b.n	8011018 <tcp_process+0x47c>
 8011014:	f241 131c 	movw	r3, #4380	; 0x111c
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801101e:	4b53      	ldr	r3, [pc, #332]	; (801116c <tcp_process+0x5d0>)
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	f003 0320 	and.w	r3, r3, #32
 8011026:	2b00      	cmp	r3, #0
 8011028:	d037      	beq.n	801109a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	8b5b      	ldrh	r3, [r3, #26]
 801102e:	f043 0302 	orr.w	r3, r3, #2
 8011032:	b29a      	uxth	r2, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2207      	movs	r2, #7
 801103c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801103e:	e02c      	b.n	801109a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011040:	4b40      	ldr	r3, [pc, #256]	; (8011144 <tcp_process+0x5a8>)
 8011042:	6819      	ldr	r1, [r3, #0]
 8011044:	4b40      	ldr	r3, [pc, #256]	; (8011148 <tcp_process+0x5ac>)
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	461a      	mov	r2, r3
 801104a:	4b40      	ldr	r3, [pc, #256]	; (801114c <tcp_process+0x5b0>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011050:	4b3f      	ldr	r3, [pc, #252]	; (8011150 <tcp_process+0x5b4>)
 8011052:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011054:	885b      	ldrh	r3, [r3, #2]
 8011056:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011058:	4a3d      	ldr	r2, [pc, #244]	; (8011150 <tcp_process+0x5b4>)
 801105a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801105c:	8812      	ldrh	r2, [r2, #0]
 801105e:	b292      	uxth	r2, r2
 8011060:	9202      	str	r2, [sp, #8]
 8011062:	9301      	str	r3, [sp, #4]
 8011064:	4b3b      	ldr	r3, [pc, #236]	; (8011154 <tcp_process+0x5b8>)
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	4b3b      	ldr	r3, [pc, #236]	; (8011158 <tcp_process+0x5bc>)
 801106a:	4602      	mov	r2, r0
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f003 f827 	bl	80140c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011072:	e167      	b.n	8011344 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011074:	4b32      	ldr	r3, [pc, #200]	; (8011140 <tcp_process+0x5a4>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	f003 0302 	and.w	r3, r3, #2
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 8161 	beq.w	8011344 <tcp_process+0x7a8>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011086:	1e5a      	subs	r2, r3, #1
 8011088:	4b30      	ldr	r3, [pc, #192]	; (801114c <tcp_process+0x5b0>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	429a      	cmp	r2, r3
 801108e:	f040 8159 	bne.w	8011344 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f002 fe0c 	bl	8013cb0 <tcp_rexmit>
      break;
 8011098:	e154      	b.n	8011344 <tcp_process+0x7a8>
 801109a:	e153      	b.n	8011344 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fa71 	bl	8011584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80110a2:	4b32      	ldr	r3, [pc, #200]	; (801116c <tcp_process+0x5d0>)
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	f003 0320 	and.w	r3, r3, #32
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	f000 814c 	beq.w	8011348 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	8b5b      	ldrh	r3, [r3, #26]
 80110b4:	f043 0302 	orr.w	r3, r3, #2
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2207      	movs	r2, #7
 80110c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110c4:	e140      	b.n	8011348 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 fa5c 	bl	8011584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110cc:	4b27      	ldr	r3, [pc, #156]	; (801116c <tcp_process+0x5d0>)
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	f003 0320 	and.w	r3, r3, #32
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d071      	beq.n	80111bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110d8:	4b19      	ldr	r3, [pc, #100]	; (8011140 <tcp_process+0x5a4>)
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	f003 0310 	and.w	r3, r3, #16
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d060      	beq.n	80111a6 <tcp_process+0x60a>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110e8:	4b16      	ldr	r3, [pc, #88]	; (8011144 <tcp_process+0x5a8>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d15a      	bne.n	80111a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d156      	bne.n	80111a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	8b5b      	ldrh	r3, [r3, #26]
 80110fc:	f043 0302 	orr.w	r3, r3, #2
 8011100:	b29a      	uxth	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7fe fdbc 	bl	800fc84 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801110c:	4b18      	ldr	r3, [pc, #96]	; (8011170 <tcp_process+0x5d4>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	429a      	cmp	r2, r3
 8011114:	d105      	bne.n	8011122 <tcp_process+0x586>
 8011116:	4b16      	ldr	r3, [pc, #88]	; (8011170 <tcp_process+0x5d4>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	4a14      	ldr	r2, [pc, #80]	; (8011170 <tcp_process+0x5d4>)
 801111e:	6013      	str	r3, [r2, #0]
 8011120:	e02e      	b.n	8011180 <tcp_process+0x5e4>
 8011122:	4b13      	ldr	r3, [pc, #76]	; (8011170 <tcp_process+0x5d4>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	617b      	str	r3, [r7, #20]
 8011128:	e027      	b.n	801117a <tcp_process+0x5de>
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	687a      	ldr	r2, [r7, #4]
 8011130:	429a      	cmp	r2, r3
 8011132:	d11f      	bne.n	8011174 <tcp_process+0x5d8>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68da      	ldr	r2, [r3, #12]
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	60da      	str	r2, [r3, #12]
 801113c:	e020      	b.n	8011180 <tcp_process+0x5e4>
 801113e:	bf00      	nop
 8011140:	20004a30 	.word	0x20004a30
 8011144:	20004a28 	.word	0x20004a28
 8011148:	20004a2e 	.word	0x20004a2e
 801114c:	20004a24 	.word	0x20004a24
 8011150:	20004a14 	.word	0x20004a14
 8011154:	200081f4 	.word	0x200081f4
 8011158:	200081f8 	.word	0x200081f8
 801115c:	0801ac58 	.word	0x0801ac58
 8011160:	0801aef8 	.word	0x0801aef8
 8011164:	0801aca4 	.word	0x0801aca4
 8011168:	20004a2c 	.word	0x20004a2c
 801116c:	20004a31 	.word	0x20004a31
 8011170:	200114f8 	.word	0x200114f8
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	617b      	str	r3, [r7, #20]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1d4      	bne.n	801112a <tcp_process+0x58e>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	60da      	str	r2, [r3, #12]
 8011186:	4b77      	ldr	r3, [pc, #476]	; (8011364 <tcp_process+0x7c8>)
 8011188:	2201      	movs	r2, #1
 801118a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	220a      	movs	r2, #10
 8011190:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011192:	4b75      	ldr	r3, [pc, #468]	; (8011368 <tcp_process+0x7cc>)
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	60da      	str	r2, [r3, #12]
 801119a:	4a73      	ldr	r2, [pc, #460]	; (8011368 <tcp_process+0x7cc>)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6013      	str	r3, [r2, #0]
 80111a0:	f003 f950 	bl	8014444 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80111a4:	e0d2      	b.n	801134c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	8b5b      	ldrh	r3, [r3, #26]
 80111aa:	f043 0302 	orr.w	r3, r3, #2
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2208      	movs	r2, #8
 80111b8:	751a      	strb	r2, [r3, #20]
      break;
 80111ba:	e0c7      	b.n	801134c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111bc:	4b6b      	ldr	r3, [pc, #428]	; (801136c <tcp_process+0x7d0>)
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	f003 0310 	and.w	r3, r3, #16
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f000 80c1 	beq.w	801134c <tcp_process+0x7b0>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111ce:	4b68      	ldr	r3, [pc, #416]	; (8011370 <tcp_process+0x7d4>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	f040 80ba 	bne.w	801134c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f040 80b5 	bne.w	801134c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2206      	movs	r2, #6
 80111e6:	751a      	strb	r2, [r3, #20]
      break;
 80111e8:	e0b0      	b.n	801134c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 f9ca 	bl	8011584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80111f0:	4b60      	ldr	r3, [pc, #384]	; (8011374 <tcp_process+0x7d8>)
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	f003 0320 	and.w	r3, r3, #32
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f000 80a9 	beq.w	8011350 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	8b5b      	ldrh	r3, [r3, #26]
 8011202:	f043 0302 	orr.w	r3, r3, #2
 8011206:	b29a      	uxth	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7fe fd39 	bl	800fc84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011212:	4b59      	ldr	r3, [pc, #356]	; (8011378 <tcp_process+0x7dc>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	429a      	cmp	r2, r3
 801121a:	d105      	bne.n	8011228 <tcp_process+0x68c>
 801121c:	4b56      	ldr	r3, [pc, #344]	; (8011378 <tcp_process+0x7dc>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	4a55      	ldr	r2, [pc, #340]	; (8011378 <tcp_process+0x7dc>)
 8011224:	6013      	str	r3, [r2, #0]
 8011226:	e013      	b.n	8011250 <tcp_process+0x6b4>
 8011228:	4b53      	ldr	r3, [pc, #332]	; (8011378 <tcp_process+0x7dc>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	613b      	str	r3, [r7, #16]
 801122e:	e00c      	b.n	801124a <tcp_process+0x6ae>
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	429a      	cmp	r2, r3
 8011238:	d104      	bne.n	8011244 <tcp_process+0x6a8>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	68da      	ldr	r2, [r3, #12]
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	60da      	str	r2, [r3, #12]
 8011242:	e005      	b.n	8011250 <tcp_process+0x6b4>
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	613b      	str	r3, [r7, #16]
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1ef      	bne.n	8011230 <tcp_process+0x694>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	60da      	str	r2, [r3, #12]
 8011256:	4b43      	ldr	r3, [pc, #268]	; (8011364 <tcp_process+0x7c8>)
 8011258:	2201      	movs	r2, #1
 801125a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	220a      	movs	r2, #10
 8011260:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011262:	4b41      	ldr	r3, [pc, #260]	; (8011368 <tcp_process+0x7cc>)
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	4a3f      	ldr	r2, [pc, #252]	; (8011368 <tcp_process+0x7cc>)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6013      	str	r3, [r2, #0]
 8011270:	f003 f8e8 	bl	8014444 <tcp_timer_needed>
      }
      break;
 8011274:	e06c      	b.n	8011350 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 f984 	bl	8011584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801127c:	4b3b      	ldr	r3, [pc, #236]	; (801136c <tcp_process+0x7d0>)
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	f003 0310 	and.w	r3, r3, #16
 8011284:	2b00      	cmp	r3, #0
 8011286:	d065      	beq.n	8011354 <tcp_process+0x7b8>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801128c:	4b38      	ldr	r3, [pc, #224]	; (8011370 <tcp_process+0x7d4>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	429a      	cmp	r2, r3
 8011292:	d15f      	bne.n	8011354 <tcp_process+0x7b8>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011298:	2b00      	cmp	r3, #0
 801129a:	d15b      	bne.n	8011354 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7fe fcf1 	bl	800fc84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80112a2:	4b35      	ldr	r3, [pc, #212]	; (8011378 <tcp_process+0x7dc>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d105      	bne.n	80112b8 <tcp_process+0x71c>
 80112ac:	4b32      	ldr	r3, [pc, #200]	; (8011378 <tcp_process+0x7dc>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	4a31      	ldr	r2, [pc, #196]	; (8011378 <tcp_process+0x7dc>)
 80112b4:	6013      	str	r3, [r2, #0]
 80112b6:	e013      	b.n	80112e0 <tcp_process+0x744>
 80112b8:	4b2f      	ldr	r3, [pc, #188]	; (8011378 <tcp_process+0x7dc>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	60fb      	str	r3, [r7, #12]
 80112be:	e00c      	b.n	80112da <tcp_process+0x73e>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d104      	bne.n	80112d4 <tcp_process+0x738>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	68da      	ldr	r2, [r3, #12]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	60da      	str	r2, [r3, #12]
 80112d2:	e005      	b.n	80112e0 <tcp_process+0x744>
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	60fb      	str	r3, [r7, #12]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d1ef      	bne.n	80112c0 <tcp_process+0x724>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	60da      	str	r2, [r3, #12]
 80112e6:	4b1f      	ldr	r3, [pc, #124]	; (8011364 <tcp_process+0x7c8>)
 80112e8:	2201      	movs	r2, #1
 80112ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	220a      	movs	r2, #10
 80112f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80112f2:	4b1d      	ldr	r3, [pc, #116]	; (8011368 <tcp_process+0x7cc>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	60da      	str	r2, [r3, #12]
 80112fa:	4a1b      	ldr	r2, [pc, #108]	; (8011368 <tcp_process+0x7cc>)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6013      	str	r3, [r2, #0]
 8011300:	f003 f8a0 	bl	8014444 <tcp_timer_needed>
      }
      break;
 8011304:	e026      	b.n	8011354 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 f93c 	bl	8011584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801130c:	4b17      	ldr	r3, [pc, #92]	; (801136c <tcp_process+0x7d0>)
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	f003 0310 	and.w	r3, r3, #16
 8011314:	2b00      	cmp	r3, #0
 8011316:	d01f      	beq.n	8011358 <tcp_process+0x7bc>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801131c:	4b14      	ldr	r3, [pc, #80]	; (8011370 <tcp_process+0x7d4>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	429a      	cmp	r2, r3
 8011322:	d119      	bne.n	8011358 <tcp_process+0x7bc>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011328:	2b00      	cmp	r3, #0
 801132a:	d115      	bne.n	8011358 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801132c:	4b11      	ldr	r3, [pc, #68]	; (8011374 <tcp_process+0x7d8>)
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	f043 0310 	orr.w	r3, r3, #16
 8011334:	b2da      	uxtb	r2, r3
 8011336:	4b0f      	ldr	r3, [pc, #60]	; (8011374 <tcp_process+0x7d8>)
 8011338:	701a      	strb	r2, [r3, #0]
      }
      break;
 801133a:	e00d      	b.n	8011358 <tcp_process+0x7bc>
    default:
      break;
 801133c:	bf00      	nop
 801133e:	e00c      	b.n	801135a <tcp_process+0x7be>
      break;
 8011340:	bf00      	nop
 8011342:	e00a      	b.n	801135a <tcp_process+0x7be>
      break;
 8011344:	bf00      	nop
 8011346:	e008      	b.n	801135a <tcp_process+0x7be>
      break;
 8011348:	bf00      	nop
 801134a:	e006      	b.n	801135a <tcp_process+0x7be>
      break;
 801134c:	bf00      	nop
 801134e:	e004      	b.n	801135a <tcp_process+0x7be>
      break;
 8011350:	bf00      	nop
 8011352:	e002      	b.n	801135a <tcp_process+0x7be>
      break;
 8011354:	bf00      	nop
 8011356:	e000      	b.n	801135a <tcp_process+0x7be>
      break;
 8011358:	bf00      	nop
  }
  return ERR_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3724      	adds	r7, #36	; 0x24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd90      	pop	{r4, r7, pc}
 8011364:	200114f4 	.word	0x200114f4
 8011368:	20011508 	.word	0x20011508
 801136c:	20004a30 	.word	0x20004a30
 8011370:	20004a28 	.word	0x20004a28
 8011374:	20004a31 	.word	0x20004a31
 8011378:	200114f8 	.word	0x200114f8

0801137c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801137c:	b590      	push	{r4, r7, lr}
 801137e:	b085      	sub	sp, #20
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d106      	bne.n	801139a <tcp_oos_insert_segment+0x1e>
 801138c:	4b3b      	ldr	r3, [pc, #236]	; (801147c <tcp_oos_insert_segment+0x100>)
 801138e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011392:	493b      	ldr	r1, [pc, #236]	; (8011480 <tcp_oos_insert_segment+0x104>)
 8011394:	483b      	ldr	r0, [pc, #236]	; (8011484 <tcp_oos_insert_segment+0x108>)
 8011396:	f006 fa39 	bl	801780c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fb f97c 	bl	800c6a0 <lwip_htons>
 80113a8:	4603      	mov	r3, r0
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	f003 0301 	and.w	r3, r3, #1
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d028      	beq.n	8011406 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80113b4:	6838      	ldr	r0, [r7, #0]
 80113b6:	f7fe f995 	bl	800f6e4 <tcp_segs_free>
    next = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	603b      	str	r3, [r7, #0]
 80113be:	e056      	b.n	801146e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	899b      	ldrh	r3, [r3, #12]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fb f969 	bl	800c6a0 <lwip_htons>
 80113ce:	4603      	mov	r3, r0
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	f003 0301 	and.w	r3, r3, #1
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00d      	beq.n	80113f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	899b      	ldrh	r3, [r3, #12]
 80113e0:	b29c      	uxth	r4, r3
 80113e2:	2001      	movs	r0, #1
 80113e4:	f7fb f95c 	bl	800c6a0 <lwip_htons>
 80113e8:	4603      	mov	r3, r0
 80113ea:	461a      	mov	r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	4322      	orrs	r2, r4
 80113f2:	b292      	uxth	r2, r2
 80113f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	f7fe f984 	bl	800f70e <tcp_seg_free>
    while (next &&
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00e      	beq.n	801142a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	891b      	ldrh	r3, [r3, #8]
 8011410:	461a      	mov	r2, r3
 8011412:	4b1d      	ldr	r3, [pc, #116]	; (8011488 <tcp_oos_insert_segment+0x10c>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	441a      	add	r2, r3
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	6839      	ldr	r1, [r7, #0]
 8011420:	8909      	ldrh	r1, [r1, #8]
 8011422:	440b      	add	r3, r1
 8011424:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011426:	2b00      	cmp	r3, #0
 8011428:	daca      	bge.n	80113c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d01e      	beq.n	801146e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	891b      	ldrh	r3, [r3, #8]
 8011434:	461a      	mov	r2, r3
 8011436:	4b14      	ldr	r3, [pc, #80]	; (8011488 <tcp_oos_insert_segment+0x10c>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	441a      	add	r2, r3
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011444:	2b00      	cmp	r3, #0
 8011446:	dd12      	ble.n	801146e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	b29a      	uxth	r2, r3
 8011450:	4b0d      	ldr	r3, [pc, #52]	; (8011488 <tcp_oos_insert_segment+0x10c>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	b29b      	uxth	r3, r3
 8011456:	1ad3      	subs	r3, r2, r3
 8011458:	b29a      	uxth	r2, r3
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	891b      	ldrh	r3, [r3, #8]
 8011466:	4619      	mov	r1, r3
 8011468:	4610      	mov	r0, r2
 801146a:	f7fc fb43 	bl	800daf4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	683a      	ldr	r2, [r7, #0]
 8011472:	601a      	str	r2, [r3, #0]
}
 8011474:	bf00      	nop
 8011476:	3714      	adds	r7, #20
 8011478:	46bd      	mov	sp, r7
 801147a:	bd90      	pop	{r4, r7, pc}
 801147c:	0801ac58 	.word	0x0801ac58
 8011480:	0801af18 	.word	0x0801af18
 8011484:	0801aca4 	.word	0x0801aca4
 8011488:	20004a24 	.word	0x20004a24

0801148c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801148c:	b5b0      	push	{r4, r5, r7, lr}
 801148e:	b086      	sub	sp, #24
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	607a      	str	r2, [r7, #4]
 8011498:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801149a:	e03e      	b.n	801151a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fc fd36 	bl	800df1c <pbuf_clen>
 80114b0:	4603      	mov	r3, r0
 80114b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114ba:	8a7a      	ldrh	r2, [r7, #18]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d906      	bls.n	80114ce <tcp_free_acked_segments+0x42>
 80114c0:	4b2a      	ldr	r3, [pc, #168]	; (801156c <tcp_free_acked_segments+0xe0>)
 80114c2:	f240 4257 	movw	r2, #1111	; 0x457
 80114c6:	492a      	ldr	r1, [pc, #168]	; (8011570 <tcp_free_acked_segments+0xe4>)
 80114c8:	482a      	ldr	r0, [pc, #168]	; (8011574 <tcp_free_acked_segments+0xe8>)
 80114ca:	f006 f99f 	bl	801780c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80114d4:	8a7b      	ldrh	r3, [r7, #18]
 80114d6:	1ad3      	subs	r3, r2, r3
 80114d8:	b29a      	uxth	r2, r3
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	891a      	ldrh	r2, [r3, #8]
 80114e4:	4b24      	ldr	r3, [pc, #144]	; (8011578 <tcp_free_acked_segments+0xec>)
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	4413      	add	r3, r2
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	4b22      	ldr	r3, [pc, #136]	; (8011578 <tcp_free_acked_segments+0xec>)
 80114ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80114f0:	6978      	ldr	r0, [r7, #20]
 80114f2:	f7fe f90c 	bl	800f70e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00c      	beq.n	801151a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d109      	bne.n	801151a <tcp_free_acked_segments+0x8e>
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d106      	bne.n	801151a <tcp_free_acked_segments+0x8e>
 801150c:	4b17      	ldr	r3, [pc, #92]	; (801156c <tcp_free_acked_segments+0xe0>)
 801150e:	f240 4261 	movw	r2, #1121	; 0x461
 8011512:	491a      	ldr	r1, [pc, #104]	; (801157c <tcp_free_acked_segments+0xf0>)
 8011514:	4817      	ldr	r0, [pc, #92]	; (8011574 <tcp_free_acked_segments+0xe8>)
 8011516:	f006 f979 	bl	801780c <iprintf>
  while (seg_list != NULL &&
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d020      	beq.n	8011562 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	4618      	mov	r0, r3
 8011528:	f7fb f8cf 	bl	800c6ca <lwip_htonl>
 801152c:	4604      	mov	r4, r0
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	891b      	ldrh	r3, [r3, #8]
 8011532:	461d      	mov	r5, r3
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	b29b      	uxth	r3, r3
 801153c:	4618      	mov	r0, r3
 801153e:	f7fb f8af 	bl	800c6a0 <lwip_htons>
 8011542:	4603      	mov	r3, r0
 8011544:	b2db      	uxtb	r3, r3
 8011546:	f003 0303 	and.w	r3, r3, #3
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <tcp_free_acked_segments+0xc6>
 801154e:	2301      	movs	r3, #1
 8011550:	e000      	b.n	8011554 <tcp_free_acked_segments+0xc8>
 8011552:	2300      	movs	r3, #0
 8011554:	442b      	add	r3, r5
 8011556:	18e2      	adds	r2, r4, r3
 8011558:	4b09      	ldr	r3, [pc, #36]	; (8011580 <tcp_free_acked_segments+0xf4>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801155e:	2b00      	cmp	r3, #0
 8011560:	dd9c      	ble.n	801149c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011562:	68bb      	ldr	r3, [r7, #8]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bdb0      	pop	{r4, r5, r7, pc}
 801156c:	0801ac58 	.word	0x0801ac58
 8011570:	0801af40 	.word	0x0801af40
 8011574:	0801aca4 	.word	0x0801aca4
 8011578:	20004a2c 	.word	0x20004a2c
 801157c:	0801af68 	.word	0x0801af68
 8011580:	20004a28 	.word	0x20004a28

08011584 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011584:	b5b0      	push	{r4, r5, r7, lr}
 8011586:	b094      	sub	sp, #80	; 0x50
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801158c:	2300      	movs	r3, #0
 801158e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d106      	bne.n	80115a4 <tcp_receive+0x20>
 8011596:	4ba6      	ldr	r3, [pc, #664]	; (8011830 <tcp_receive+0x2ac>)
 8011598:	f240 427b 	movw	r2, #1147	; 0x47b
 801159c:	49a5      	ldr	r1, [pc, #660]	; (8011834 <tcp_receive+0x2b0>)
 801159e:	48a6      	ldr	r0, [pc, #664]	; (8011838 <tcp_receive+0x2b4>)
 80115a0:	f006 f934 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	7d1b      	ldrb	r3, [r3, #20]
 80115a8:	2b03      	cmp	r3, #3
 80115aa:	d806      	bhi.n	80115ba <tcp_receive+0x36>
 80115ac:	4ba0      	ldr	r3, [pc, #640]	; (8011830 <tcp_receive+0x2ac>)
 80115ae:	f240 427c 	movw	r2, #1148	; 0x47c
 80115b2:	49a2      	ldr	r1, [pc, #648]	; (801183c <tcp_receive+0x2b8>)
 80115b4:	48a0      	ldr	r0, [pc, #640]	; (8011838 <tcp_receive+0x2b4>)
 80115b6:	f006 f929 	bl	801780c <iprintf>

  if (flags & TCP_ACK) {
 80115ba:	4ba1      	ldr	r3, [pc, #644]	; (8011840 <tcp_receive+0x2bc>)
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	f003 0310 	and.w	r3, r3, #16
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f000 8263 	beq.w	8011a8e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115ce:	461a      	mov	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115d4:	4413      	add	r3, r2
 80115d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115dc:	4b99      	ldr	r3, [pc, #612]	; (8011844 <tcp_receive+0x2c0>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	db1b      	blt.n	801161e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115ea:	4b96      	ldr	r3, [pc, #600]	; (8011844 <tcp_receive+0x2c0>)
 80115ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d106      	bne.n	8011600 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115f6:	4b94      	ldr	r3, [pc, #592]	; (8011848 <tcp_receive+0x2c4>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	db0e      	blt.n	801161e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011604:	4b90      	ldr	r3, [pc, #576]	; (8011848 <tcp_receive+0x2c4>)
 8011606:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011608:	429a      	cmp	r2, r3
 801160a:	d125      	bne.n	8011658 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801160c:	4b8f      	ldr	r3, [pc, #572]	; (801184c <tcp_receive+0x2c8>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	89db      	ldrh	r3, [r3, #14]
 8011612:	b29a      	uxth	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801161a:	429a      	cmp	r2, r3
 801161c:	d91c      	bls.n	8011658 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801161e:	4b8b      	ldr	r3, [pc, #556]	; (801184c <tcp_receive+0x2c8>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	89db      	ldrh	r3, [r3, #14]
 8011624:	b29a      	uxth	r2, r3
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011638:	429a      	cmp	r2, r3
 801163a:	d205      	bcs.n	8011648 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011648:	4b7e      	ldr	r3, [pc, #504]	; (8011844 <tcp_receive+0x2c0>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011650:	4b7d      	ldr	r3, [pc, #500]	; (8011848 <tcp_receive+0x2c4>)
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011658:	4b7b      	ldr	r3, [pc, #492]	; (8011848 <tcp_receive+0x2c4>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	dc58      	bgt.n	8011718 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011666:	4b7a      	ldr	r3, [pc, #488]	; (8011850 <tcp_receive+0x2cc>)
 8011668:	881b      	ldrh	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d14b      	bne.n	8011706 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011678:	4413      	add	r3, r2
 801167a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801167c:	429a      	cmp	r2, r3
 801167e:	d142      	bne.n	8011706 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011686:	2b00      	cmp	r3, #0
 8011688:	db3d      	blt.n	8011706 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801168e:	4b6e      	ldr	r3, [pc, #440]	; (8011848 <tcp_receive+0x2c4>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	429a      	cmp	r2, r3
 8011694:	d137      	bne.n	8011706 <tcp_receive+0x182>
              found_dupack = 1;
 8011696:	2301      	movs	r3, #1
 8011698:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116a0:	2bff      	cmp	r3, #255	; 0xff
 80116a2:	d007      	beq.n	80116b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116aa:	3301      	adds	r3, #1
 80116ac:	b2da      	uxtb	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116ba:	2b03      	cmp	r3, #3
 80116bc:	d91b      	bls.n	80116f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116c8:	4413      	add	r3, r2
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d30a      	bcc.n	80116ec <tcp_receive+0x168>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116e0:	4413      	add	r3, r2
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80116ea:	e004      	b.n	80116f6 <tcp_receive+0x172>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d902      	bls.n	8011706 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f002 fb41 	bl	8013d88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011708:	2b00      	cmp	r3, #0
 801170a:	f040 8160 	bne.w	80119ce <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2200      	movs	r2, #0
 8011712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011716:	e15a      	b.n	80119ce <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011718:	4b4b      	ldr	r3, [pc, #300]	; (8011848 <tcp_receive+0x2c4>)
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	3b01      	subs	r3, #1
 8011724:	2b00      	cmp	r3, #0
 8011726:	f2c0 814d 	blt.w	80119c4 <tcp_receive+0x440>
 801172a:	4b47      	ldr	r3, [pc, #284]	; (8011848 <tcp_receive+0x2c4>)
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	f300 8145 	bgt.w	80119c4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	8b5b      	ldrh	r3, [r3, #26]
 801173e:	f003 0304 	and.w	r3, r3, #4
 8011742:	2b00      	cmp	r3, #0
 8011744:	d010      	beq.n	8011768 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	8b5b      	ldrh	r3, [r3, #26]
 801174a:	f023 0304 	bic.w	r3, r3, #4
 801174e:	b29a      	uxth	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2200      	movs	r2, #0
 8011764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011776:	10db      	asrs	r3, r3, #3
 8011778:	b21b      	sxth	r3, r3
 801177a:	b29a      	uxth	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011782:	b29b      	uxth	r3, r3
 8011784:	4413      	add	r3, r2
 8011786:	b29b      	uxth	r3, r3
 8011788:	b21a      	sxth	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011790:	4b2d      	ldr	r3, [pc, #180]	; (8011848 <tcp_receive+0x2c4>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	b29a      	uxth	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801179a:	b29b      	uxth	r3, r3
 801179c:	1ad3      	subs	r3, r2, r3
 801179e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80117a8:	4b27      	ldr	r3, [pc, #156]	; (8011848 <tcp_receive+0x2c4>)
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	7d1b      	ldrb	r3, [r3, #20]
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	f240 8096 	bls.w	80118e6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d244      	bcs.n	8011854 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8b5b      	ldrh	r3, [r3, #26]
 80117ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d001      	beq.n	80117da <tcp_receive+0x256>
 80117d6:	2301      	movs	r3, #1
 80117d8:	e000      	b.n	80117dc <tcp_receive+0x258>
 80117da:	2302      	movs	r3, #2
 80117dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80117e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117ea:	fb12 f303 	smulbb	r3, r2, r3
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80117f2:	4293      	cmp	r3, r2
 80117f4:	bf28      	it	cs
 80117f6:	4613      	movcs	r3, r2
 80117f8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011800:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011802:	4413      	add	r3, r2
 8011804:	b29a      	uxth	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801180c:	429a      	cmp	r2, r3
 801180e:	d309      	bcc.n	8011824 <tcp_receive+0x2a0>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011818:	4413      	add	r3, r2
 801181a:	b29a      	uxth	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011822:	e060      	b.n	80118e6 <tcp_receive+0x362>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801182a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801182e:	e05a      	b.n	80118e6 <tcp_receive+0x362>
 8011830:	0801ac58 	.word	0x0801ac58
 8011834:	0801af88 	.word	0x0801af88
 8011838:	0801aca4 	.word	0x0801aca4
 801183c:	0801afa4 	.word	0x0801afa4
 8011840:	20004a30 	.word	0x20004a30
 8011844:	20004a24 	.word	0x20004a24
 8011848:	20004a28 	.word	0x20004a28
 801184c:	20004a14 	.word	0x20004a14
 8011850:	20004a2e 	.word	0x20004a2e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801185a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801185c:	4413      	add	r3, r2
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011866:	429a      	cmp	r2, r3
 8011868:	d309      	bcc.n	801187e <tcp_receive+0x2fa>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011870:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011872:	4413      	add	r3, r2
 8011874:	b29a      	uxth	r2, r3
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801187c:	e004      	b.n	8011888 <tcp_receive+0x304>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011894:	429a      	cmp	r2, r3
 8011896:	d326      	bcc.n	80118e6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b8:	4413      	add	r3, r2
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d30a      	bcc.n	80118dc <tcp_receive+0x358>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118d0:	4413      	add	r3, r2
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118da:	e004      	b.n	80118e6 <tcp_receive+0x362>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ee:	4a98      	ldr	r2, [pc, #608]	; (8011b50 <tcp_receive+0x5cc>)
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f7ff fdcb 	bl	801148c <tcp_free_acked_segments>
 80118f6:	4602      	mov	r2, r0
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011904:	4a93      	ldr	r2, [pc, #588]	; (8011b54 <tcp_receive+0x5d0>)
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff fdc0 	bl	801148c <tcp_free_acked_segments>
 801190c:	4602      	mov	r2, r0
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011916:	2b00      	cmp	r3, #0
 8011918:	d104      	bne.n	8011924 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011920:	861a      	strh	r2, [r3, #48]	; 0x30
 8011922:	e002      	b.n	801192a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d103      	bne.n	8011940 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011946:	4b84      	ldr	r3, [pc, #528]	; (8011b58 <tcp_receive+0x5d4>)
 8011948:	881b      	ldrh	r3, [r3, #0]
 801194a:	4413      	add	r3, r2
 801194c:	b29a      	uxth	r2, r3
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	8b5b      	ldrh	r3, [r3, #26]
 8011958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801195c:	2b00      	cmp	r3, #0
 801195e:	d035      	beq.n	80119cc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011964:	2b00      	cmp	r3, #0
 8011966:	d118      	bne.n	801199a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00c      	beq.n	801198a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	f7fa fea4 	bl	800c6ca <lwip_htonl>
 8011982:	4603      	mov	r3, r0
 8011984:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011986:	2b00      	cmp	r3, #0
 8011988:	dc20      	bgt.n	80119cc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	8b5b      	ldrh	r3, [r3, #26]
 801198e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011992:	b29a      	uxth	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011998:	e018      	b.n	80119cc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fa fe8f 	bl	800c6ca <lwip_htonl>
 80119ac:	4603      	mov	r3, r0
 80119ae:	1ae3      	subs	r3, r4, r3
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dc0b      	bgt.n	80119cc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	8b5b      	ldrh	r3, [r3, #26]
 80119b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119bc:	b29a      	uxth	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119c2:	e003      	b.n	80119cc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f002 fbcd 	bl	8014164 <tcp_send_empty_ack>
 80119ca:	e000      	b.n	80119ce <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119cc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d05b      	beq.n	8011a8e <tcp_receive+0x50a>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119da:	4b60      	ldr	r3, [pc, #384]	; (8011b5c <tcp_receive+0x5d8>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	da54      	bge.n	8011a8e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80119e4:	4b5e      	ldr	r3, [pc, #376]	; (8011b60 <tcp_receive+0x5dc>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80119f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a02:	10db      	asrs	r3, r3, #3
 8011a04:	b21b      	sxth	r3, r3
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	1ad3      	subs	r3, r2, r3
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	b21a      	sxth	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011a26:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da05      	bge.n	8011a3a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011a2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a32:	425b      	negs	r3, r3
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011a3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a44:	109b      	asrs	r3, r3, #2
 8011a46:	b21b      	sxth	r3, r3
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a5e:	4413      	add	r3, r2
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	b21a      	sxth	r2, r3
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a6e:	10db      	asrs	r3, r3, #3
 8011a70:	b21b      	sxth	r3, r3
 8011a72:	b29a      	uxth	r2, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	4413      	add	r3, r2
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	b21a      	sxth	r2, r3
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a8e:	4b35      	ldr	r3, [pc, #212]	; (8011b64 <tcp_receive+0x5e0>)
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f000 84e1 	beq.w	801245a <tcp_receive+0xed6>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	7d1b      	ldrb	r3, [r3, #20]
 8011a9c:	2b06      	cmp	r3, #6
 8011a9e:	f200 84dc 	bhi.w	801245a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011aa6:	4b30      	ldr	r3, [pc, #192]	; (8011b68 <tcp_receive+0x5e4>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	3b01      	subs	r3, #1
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f2c0 808e 	blt.w	8011bd0 <tcp_receive+0x64c>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ab8:	4b2a      	ldr	r3, [pc, #168]	; (8011b64 <tcp_receive+0x5e0>)
 8011aba:	881b      	ldrh	r3, [r3, #0]
 8011abc:	4619      	mov	r1, r3
 8011abe:	4b2a      	ldr	r3, [pc, #168]	; (8011b68 <tcp_receive+0x5e4>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	440b      	add	r3, r1
 8011ac4:	1ad3      	subs	r3, r2, r3
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f300 8081 	bgt.w	8011bd0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011ace:	4b27      	ldr	r3, [pc, #156]	; (8011b6c <tcp_receive+0x5e8>)
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ad8:	4b23      	ldr	r3, [pc, #140]	; (8011b68 <tcp_receive+0x5e4>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011ae0:	4b22      	ldr	r3, [pc, #136]	; (8011b6c <tcp_receive+0x5e8>)
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d106      	bne.n	8011af6 <tcp_receive+0x572>
 8011ae8:	4b21      	ldr	r3, [pc, #132]	; (8011b70 <tcp_receive+0x5ec>)
 8011aea:	f240 5294 	movw	r2, #1428	; 0x594
 8011aee:	4921      	ldr	r1, [pc, #132]	; (8011b74 <tcp_receive+0x5f0>)
 8011af0:	4821      	ldr	r0, [pc, #132]	; (8011b78 <tcp_receive+0x5f4>)
 8011af2:	f005 fe8b 	bl	801780c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d906      	bls.n	8011b0e <tcp_receive+0x58a>
 8011b00:	4b1b      	ldr	r3, [pc, #108]	; (8011b70 <tcp_receive+0x5ec>)
 8011b02:	f240 5295 	movw	r2, #1429	; 0x595
 8011b06:	491d      	ldr	r1, [pc, #116]	; (8011b7c <tcp_receive+0x5f8>)
 8011b08:	481b      	ldr	r0, [pc, #108]	; (8011b78 <tcp_receive+0x5f4>)
 8011b0a:	f005 fe7f 	bl	801780c <iprintf>
      off = (u16_t)off32;
 8011b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011b14:	4b15      	ldr	r3, [pc, #84]	; (8011b6c <tcp_receive+0x5e8>)
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	891b      	ldrh	r3, [r3, #8]
 8011b1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d906      	bls.n	8011b30 <tcp_receive+0x5ac>
 8011b22:	4b13      	ldr	r3, [pc, #76]	; (8011b70 <tcp_receive+0x5ec>)
 8011b24:	f240 5297 	movw	r2, #1431	; 0x597
 8011b28:	4915      	ldr	r1, [pc, #84]	; (8011b80 <tcp_receive+0x5fc>)
 8011b2a:	4813      	ldr	r0, [pc, #76]	; (8011b78 <tcp_receive+0x5f4>)
 8011b2c:	f005 fe6e 	bl	801780c <iprintf>
      inseg.len -= off;
 8011b30:	4b0e      	ldr	r3, [pc, #56]	; (8011b6c <tcp_receive+0x5e8>)
 8011b32:	891a      	ldrh	r2, [r3, #8]
 8011b34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b38:	1ad3      	subs	r3, r2, r3
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	4b0b      	ldr	r3, [pc, #44]	; (8011b6c <tcp_receive+0x5e8>)
 8011b3e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011b40:	4b0a      	ldr	r3, [pc, #40]	; (8011b6c <tcp_receive+0x5e8>)
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	891a      	ldrh	r2, [r3, #8]
 8011b46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b4a:	1ad3      	subs	r3, r2, r3
 8011b4c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011b4e:	e029      	b.n	8011ba4 <tcp_receive+0x620>
 8011b50:	0801afc0 	.word	0x0801afc0
 8011b54:	0801afc8 	.word	0x0801afc8
 8011b58:	20004a2c 	.word	0x20004a2c
 8011b5c:	20004a28 	.word	0x20004a28
 8011b60:	200114fc 	.word	0x200114fc
 8011b64:	20004a2e 	.word	0x20004a2e
 8011b68:	20004a24 	.word	0x20004a24
 8011b6c:	20004a04 	.word	0x20004a04
 8011b70:	0801ac58 	.word	0x0801ac58
 8011b74:	0801afd0 	.word	0x0801afd0
 8011b78:	0801aca4 	.word	0x0801aca4
 8011b7c:	0801afe0 	.word	0x0801afe0
 8011b80:	0801aff0 	.word	0x0801aff0
        off -= p->len;
 8011b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b86:	895b      	ldrh	r3, [r3, #10]
 8011b88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ba6:	895b      	ldrh	r3, [r3, #10]
 8011ba8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d8e9      	bhi.n	8011b84 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011bb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011bb8:	f7fc f89c 	bl	800dcf4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc0:	4a91      	ldr	r2, [pc, #580]	; (8011e08 <tcp_receive+0x884>)
 8011bc2:	6013      	str	r3, [r2, #0]
 8011bc4:	4b91      	ldr	r3, [pc, #580]	; (8011e0c <tcp_receive+0x888>)
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	4a8f      	ldr	r2, [pc, #572]	; (8011e08 <tcp_receive+0x884>)
 8011bca:	6812      	ldr	r2, [r2, #0]
 8011bcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bce:	e00d      	b.n	8011bec <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011bd0:	4b8d      	ldr	r3, [pc, #564]	; (8011e08 <tcp_receive+0x884>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	da06      	bge.n	8011bec <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	8b5b      	ldrh	r3, [r3, #26]
 8011be2:	f043 0302 	orr.w	r3, r3, #2
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011bec:	4b86      	ldr	r3, [pc, #536]	; (8011e08 <tcp_receive+0x884>)
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf4:	1ad3      	subs	r3, r2, r3
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f2c0 842a 	blt.w	8012450 <tcp_receive+0xecc>
 8011bfc:	4b82      	ldr	r3, [pc, #520]	; (8011e08 <tcp_receive+0x884>)
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c04:	6879      	ldr	r1, [r7, #4]
 8011c06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c08:	440b      	add	r3, r1
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f300 841e 	bgt.w	8012450 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c18:	4b7b      	ldr	r3, [pc, #492]	; (8011e08 <tcp_receive+0x884>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	f040 829a 	bne.w	8012156 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011c22:	4b7a      	ldr	r3, [pc, #488]	; (8011e0c <tcp_receive+0x888>)
 8011c24:	891c      	ldrh	r4, [r3, #8]
 8011c26:	4b79      	ldr	r3, [pc, #484]	; (8011e0c <tcp_receive+0x888>)
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	899b      	ldrh	r3, [r3, #12]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fa fd36 	bl	800c6a0 <lwip_htons>
 8011c34:	4603      	mov	r3, r0
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	f003 0303 	and.w	r3, r3, #3
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d001      	beq.n	8011c44 <tcp_receive+0x6c0>
 8011c40:	2301      	movs	r3, #1
 8011c42:	e000      	b.n	8011c46 <tcp_receive+0x6c2>
 8011c44:	2300      	movs	r3, #0
 8011c46:	4423      	add	r3, r4
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	4b71      	ldr	r3, [pc, #452]	; (8011e10 <tcp_receive+0x88c>)
 8011c4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c52:	4b6f      	ldr	r3, [pc, #444]	; (8011e10 <tcp_receive+0x88c>)
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d275      	bcs.n	8011d46 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c5a:	4b6c      	ldr	r3, [pc, #432]	; (8011e0c <tcp_receive+0x888>)
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	899b      	ldrh	r3, [r3, #12]
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fa fd1c 	bl	800c6a0 <lwip_htons>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	f003 0301 	and.w	r3, r3, #1
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d01f      	beq.n	8011cb4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c74:	4b65      	ldr	r3, [pc, #404]	; (8011e0c <tcp_receive+0x888>)
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	899b      	ldrh	r3, [r3, #12]
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	b21b      	sxth	r3, r3
 8011c7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c82:	b21c      	sxth	r4, r3
 8011c84:	4b61      	ldr	r3, [pc, #388]	; (8011e0c <tcp_receive+0x888>)
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	899b      	ldrh	r3, [r3, #12]
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7fa fd07 	bl	800c6a0 <lwip_htons>
 8011c92:	4603      	mov	r3, r0
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fa fcfe 	bl	800c6a0 <lwip_htons>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	b21b      	sxth	r3, r3
 8011ca8:	4323      	orrs	r3, r4
 8011caa:	b21a      	sxth	r2, r3
 8011cac:	4b57      	ldr	r3, [pc, #348]	; (8011e0c <tcp_receive+0x888>)
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	b292      	uxth	r2, r2
 8011cb2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011cb8:	4b54      	ldr	r3, [pc, #336]	; (8011e0c <tcp_receive+0x888>)
 8011cba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011cbc:	4b53      	ldr	r3, [pc, #332]	; (8011e0c <tcp_receive+0x888>)
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	899b      	ldrh	r3, [r3, #12]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fa fceb 	bl	800c6a0 <lwip_htons>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	f003 0302 	and.w	r3, r3, #2
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d005      	beq.n	8011ce2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011cd6:	4b4d      	ldr	r3, [pc, #308]	; (8011e0c <tcp_receive+0x888>)
 8011cd8:	891b      	ldrh	r3, [r3, #8]
 8011cda:	3b01      	subs	r3, #1
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	4b4b      	ldr	r3, [pc, #300]	; (8011e0c <tcp_receive+0x888>)
 8011ce0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011ce2:	4b4a      	ldr	r3, [pc, #296]	; (8011e0c <tcp_receive+0x888>)
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	4a49      	ldr	r2, [pc, #292]	; (8011e0c <tcp_receive+0x888>)
 8011ce8:	8912      	ldrh	r2, [r2, #8]
 8011cea:	4611      	mov	r1, r2
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fb ff01 	bl	800daf4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011cf2:	4b46      	ldr	r3, [pc, #280]	; (8011e0c <tcp_receive+0x888>)
 8011cf4:	891c      	ldrh	r4, [r3, #8]
 8011cf6:	4b45      	ldr	r3, [pc, #276]	; (8011e0c <tcp_receive+0x888>)
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	899b      	ldrh	r3, [r3, #12]
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fa fcce 	bl	800c6a0 <lwip_htons>
 8011d04:	4603      	mov	r3, r0
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	f003 0303 	and.w	r3, r3, #3
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d001      	beq.n	8011d14 <tcp_receive+0x790>
 8011d10:	2301      	movs	r3, #1
 8011d12:	e000      	b.n	8011d16 <tcp_receive+0x792>
 8011d14:	2300      	movs	r3, #0
 8011d16:	4423      	add	r3, r4
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	4b3d      	ldr	r3, [pc, #244]	; (8011e10 <tcp_receive+0x88c>)
 8011d1c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d1e:	4b3c      	ldr	r3, [pc, #240]	; (8011e10 <tcp_receive+0x88c>)
 8011d20:	881b      	ldrh	r3, [r3, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	4b38      	ldr	r3, [pc, #224]	; (8011e08 <tcp_receive+0x884>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	441a      	add	r2, r3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d2e:	6879      	ldr	r1, [r7, #4]
 8011d30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d32:	440b      	add	r3, r1
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d006      	beq.n	8011d46 <tcp_receive+0x7c2>
 8011d38:	4b36      	ldr	r3, [pc, #216]	; (8011e14 <tcp_receive+0x890>)
 8011d3a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011d3e:	4936      	ldr	r1, [pc, #216]	; (8011e18 <tcp_receive+0x894>)
 8011d40:	4836      	ldr	r0, [pc, #216]	; (8011e1c <tcp_receive+0x898>)
 8011d42:	f005 fd63 	bl	801780c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f000 80e7 	beq.w	8011f1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d50:	4b2e      	ldr	r3, [pc, #184]	; (8011e0c <tcp_receive+0x888>)
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	899b      	ldrh	r3, [r3, #12]
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fa fca1 	bl	800c6a0 <lwip_htons>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	f003 0301 	and.w	r3, r3, #1
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d010      	beq.n	8011d8c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d6a:	e00a      	b.n	8011d82 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d70:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f7fd fcc6 	bl	800f70e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1f0      	bne.n	8011d6c <tcp_receive+0x7e8>
 8011d8a:	e0c8      	b.n	8011f1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d90:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d92:	e052      	b.n	8011e3a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	899b      	ldrh	r3, [r3, #12]
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fa fc7f 	bl	800c6a0 <lwip_htons>
 8011da2:	4603      	mov	r3, r0
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	f003 0301 	and.w	r3, r3, #1
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d03d      	beq.n	8011e2a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011dae:	4b17      	ldr	r3, [pc, #92]	; (8011e0c <tcp_receive+0x888>)
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	899b      	ldrh	r3, [r3, #12]
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fa fc72 	bl	800c6a0 <lwip_htons>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d130      	bne.n	8011e2a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011dc8:	4b10      	ldr	r3, [pc, #64]	; (8011e0c <tcp_receive+0x888>)
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	899b      	ldrh	r3, [r3, #12]
 8011dce:	b29c      	uxth	r4, r3
 8011dd0:	2001      	movs	r0, #1
 8011dd2:	f7fa fc65 	bl	800c6a0 <lwip_htons>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	461a      	mov	r2, r3
 8011dda:	4b0c      	ldr	r3, [pc, #48]	; (8011e0c <tcp_receive+0x888>)
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	4322      	orrs	r2, r4
 8011de0:	b292      	uxth	r2, r2
 8011de2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011de4:	4b09      	ldr	r3, [pc, #36]	; (8011e0c <tcp_receive+0x888>)
 8011de6:	891c      	ldrh	r4, [r3, #8]
 8011de8:	4b08      	ldr	r3, [pc, #32]	; (8011e0c <tcp_receive+0x888>)
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	899b      	ldrh	r3, [r3, #12]
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fa fc55 	bl	800c6a0 <lwip_htons>
 8011df6:	4603      	mov	r3, r0
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	f003 0303 	and.w	r3, r3, #3
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00e      	beq.n	8011e20 <tcp_receive+0x89c>
 8011e02:	2301      	movs	r3, #1
 8011e04:	e00d      	b.n	8011e22 <tcp_receive+0x89e>
 8011e06:	bf00      	nop
 8011e08:	20004a24 	.word	0x20004a24
 8011e0c:	20004a04 	.word	0x20004a04
 8011e10:	20004a2e 	.word	0x20004a2e
 8011e14:	0801ac58 	.word	0x0801ac58
 8011e18:	0801b000 	.word	0x0801b000
 8011e1c:	0801aca4 	.word	0x0801aca4
 8011e20:	2300      	movs	r3, #0
 8011e22:	4423      	add	r3, r4
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	4b98      	ldr	r3, [pc, #608]	; (8012088 <tcp_receive+0xb04>)
 8011e28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011e34:	6938      	ldr	r0, [r7, #16]
 8011e36:	f7fd fc6a 	bl	800f70e <tcp_seg_free>
            while (next &&
 8011e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00e      	beq.n	8011e5e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011e40:	4b91      	ldr	r3, [pc, #580]	; (8012088 <tcp_receive+0xb04>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	461a      	mov	r2, r3
 8011e46:	4b91      	ldr	r3, [pc, #580]	; (801208c <tcp_receive+0xb08>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	441a      	add	r2, r3
 8011e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e54:	8909      	ldrh	r1, [r1, #8]
 8011e56:	440b      	add	r3, r1
 8011e58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	da9a      	bge.n	8011d94 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d059      	beq.n	8011f18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011e64:	4b88      	ldr	r3, [pc, #544]	; (8012088 <tcp_receive+0xb04>)
 8011e66:	881b      	ldrh	r3, [r3, #0]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	4b88      	ldr	r3, [pc, #544]	; (801208c <tcp_receive+0xb08>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	441a      	add	r2, r3
 8011e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	dd4d      	ble.n	8011f18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	4b81      	ldr	r3, [pc, #516]	; (801208c <tcp_receive+0xb08>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	1ad3      	subs	r3, r2, r3
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	4b80      	ldr	r3, [pc, #512]	; (8012090 <tcp_receive+0xb0c>)
 8011e90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e92:	4b7f      	ldr	r3, [pc, #508]	; (8012090 <tcp_receive+0xb0c>)
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	899b      	ldrh	r3, [r3, #12]
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fa fc00 	bl	800c6a0 <lwip_htons>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	f003 0302 	and.w	r3, r3, #2
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d005      	beq.n	8011eb8 <tcp_receive+0x934>
                inseg.len -= 1;
 8011eac:	4b78      	ldr	r3, [pc, #480]	; (8012090 <tcp_receive+0xb0c>)
 8011eae:	891b      	ldrh	r3, [r3, #8]
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	4b76      	ldr	r3, [pc, #472]	; (8012090 <tcp_receive+0xb0c>)
 8011eb6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011eb8:	4b75      	ldr	r3, [pc, #468]	; (8012090 <tcp_receive+0xb0c>)
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	4a74      	ldr	r2, [pc, #464]	; (8012090 <tcp_receive+0xb0c>)
 8011ebe:	8912      	ldrh	r2, [r2, #8]
 8011ec0:	4611      	mov	r1, r2
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fb fe16 	bl	800daf4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011ec8:	4b71      	ldr	r3, [pc, #452]	; (8012090 <tcp_receive+0xb0c>)
 8011eca:	891c      	ldrh	r4, [r3, #8]
 8011ecc:	4b70      	ldr	r3, [pc, #448]	; (8012090 <tcp_receive+0xb0c>)
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	899b      	ldrh	r3, [r3, #12]
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fa fbe3 	bl	800c6a0 <lwip_htons>
 8011eda:	4603      	mov	r3, r0
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	f003 0303 	and.w	r3, r3, #3
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d001      	beq.n	8011eea <tcp_receive+0x966>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e000      	b.n	8011eec <tcp_receive+0x968>
 8011eea:	2300      	movs	r3, #0
 8011eec:	4423      	add	r3, r4
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	4b65      	ldr	r3, [pc, #404]	; (8012088 <tcp_receive+0xb04>)
 8011ef2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011ef4:	4b64      	ldr	r3, [pc, #400]	; (8012088 <tcp_receive+0xb04>)
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	461a      	mov	r2, r3
 8011efa:	4b64      	ldr	r3, [pc, #400]	; (801208c <tcp_receive+0xb08>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	441a      	add	r2, r3
 8011f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d006      	beq.n	8011f18 <tcp_receive+0x994>
 8011f0a:	4b62      	ldr	r3, [pc, #392]	; (8012094 <tcp_receive+0xb10>)
 8011f0c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011f10:	4961      	ldr	r1, [pc, #388]	; (8012098 <tcp_receive+0xb14>)
 8011f12:	4862      	ldr	r0, [pc, #392]	; (801209c <tcp_receive+0xb18>)
 8011f14:	f005 fc7a 	bl	801780c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f1c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011f1e:	4b5a      	ldr	r3, [pc, #360]	; (8012088 <tcp_receive+0xb04>)
 8011f20:	881b      	ldrh	r3, [r3, #0]
 8011f22:	461a      	mov	r2, r3
 8011f24:	4b59      	ldr	r3, [pc, #356]	; (801208c <tcp_receive+0xb08>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	441a      	add	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f32:	4b55      	ldr	r3, [pc, #340]	; (8012088 <tcp_receive+0xb04>)
 8011f34:	881b      	ldrh	r3, [r3, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d206      	bcs.n	8011f48 <tcp_receive+0x9c4>
 8011f3a:	4b56      	ldr	r3, [pc, #344]	; (8012094 <tcp_receive+0xb10>)
 8011f3c:	f240 6207 	movw	r2, #1543	; 0x607
 8011f40:	4957      	ldr	r1, [pc, #348]	; (80120a0 <tcp_receive+0xb1c>)
 8011f42:	4856      	ldr	r0, [pc, #344]	; (801209c <tcp_receive+0xb18>)
 8011f44:	f005 fc62 	bl	801780c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f4c:	4b4e      	ldr	r3, [pc, #312]	; (8012088 <tcp_receive+0xb04>)
 8011f4e:	881b      	ldrh	r3, [r3, #0]
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7fc feaf 	bl	800ecbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011f5e:	4b4c      	ldr	r3, [pc, #304]	; (8012090 <tcp_receive+0xb0c>)
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	891b      	ldrh	r3, [r3, #8]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d006      	beq.n	8011f76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f68:	4b49      	ldr	r3, [pc, #292]	; (8012090 <tcp_receive+0xb0c>)
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	4a4d      	ldr	r2, [pc, #308]	; (80120a4 <tcp_receive+0xb20>)
 8011f6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f70:	4b47      	ldr	r3, [pc, #284]	; (8012090 <tcp_receive+0xb0c>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f76:	4b46      	ldr	r3, [pc, #280]	; (8012090 <tcp_receive+0xb0c>)
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	899b      	ldrh	r3, [r3, #12]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fa fb8e 	bl	800c6a0 <lwip_htons>
 8011f84:	4603      	mov	r3, r0
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	f003 0301 	and.w	r3, r3, #1
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f000 80b8 	beq.w	8012102 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f92:	4b45      	ldr	r3, [pc, #276]	; (80120a8 <tcp_receive+0xb24>)
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	f043 0320 	orr.w	r3, r3, #32
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	4b42      	ldr	r3, [pc, #264]	; (80120a8 <tcp_receive+0xb24>)
 8011f9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011fa0:	e0af      	b.n	8012102 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fa6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	4a36      	ldr	r2, [pc, #216]	; (801208c <tcp_receive+0xb08>)
 8011fb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	891b      	ldrh	r3, [r3, #8]
 8011fb8:	461c      	mov	r4, r3
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	899b      	ldrh	r3, [r3, #12]
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fa fb6c 	bl	800c6a0 <lwip_htons>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	f003 0303 	and.w	r3, r3, #3
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d001      	beq.n	8011fd8 <tcp_receive+0xa54>
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e000      	b.n	8011fda <tcp_receive+0xa56>
 8011fd8:	2300      	movs	r3, #0
 8011fda:	191a      	adds	r2, r3, r4
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe0:	441a      	add	r2, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fea:	461c      	mov	r4, r3
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	891b      	ldrh	r3, [r3, #8]
 8011ff0:	461d      	mov	r5, r3
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	899b      	ldrh	r3, [r3, #12]
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fa fb50 	bl	800c6a0 <lwip_htons>
 8012000:	4603      	mov	r3, r0
 8012002:	b2db      	uxtb	r3, r3
 8012004:	f003 0303 	and.w	r3, r3, #3
 8012008:	2b00      	cmp	r3, #0
 801200a:	d001      	beq.n	8012010 <tcp_receive+0xa8c>
 801200c:	2301      	movs	r3, #1
 801200e:	e000      	b.n	8012012 <tcp_receive+0xa8e>
 8012010:	2300      	movs	r3, #0
 8012012:	442b      	add	r3, r5
 8012014:	429c      	cmp	r4, r3
 8012016:	d206      	bcs.n	8012026 <tcp_receive+0xaa2>
 8012018:	4b1e      	ldr	r3, [pc, #120]	; (8012094 <tcp_receive+0xb10>)
 801201a:	f240 622b 	movw	r2, #1579	; 0x62b
 801201e:	4923      	ldr	r1, [pc, #140]	; (80120ac <tcp_receive+0xb28>)
 8012020:	481e      	ldr	r0, [pc, #120]	; (801209c <tcp_receive+0xb18>)
 8012022:	f005 fbf3 	bl	801780c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	891b      	ldrh	r3, [r3, #8]
 801202a:	461c      	mov	r4, r3
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	899b      	ldrh	r3, [r3, #12]
 8012032:	b29b      	uxth	r3, r3
 8012034:	4618      	mov	r0, r3
 8012036:	f7fa fb33 	bl	800c6a0 <lwip_htons>
 801203a:	4603      	mov	r3, r0
 801203c:	b2db      	uxtb	r3, r3
 801203e:	f003 0303 	and.w	r3, r3, #3
 8012042:	2b00      	cmp	r3, #0
 8012044:	d001      	beq.n	801204a <tcp_receive+0xac6>
 8012046:	2301      	movs	r3, #1
 8012048:	e000      	b.n	801204c <tcp_receive+0xac8>
 801204a:	2300      	movs	r3, #0
 801204c:	1919      	adds	r1, r3, r4
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012052:	b28b      	uxth	r3, r1
 8012054:	1ad3      	subs	r3, r2, r3
 8012056:	b29a      	uxth	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7fc fe2d 	bl	800ecbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	891b      	ldrh	r3, [r3, #8]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d028      	beq.n	80120be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801206c:	4b0d      	ldr	r3, [pc, #52]	; (80120a4 <tcp_receive+0xb20>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d01d      	beq.n	80120b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012074:	4b0b      	ldr	r3, [pc, #44]	; (80120a4 <tcp_receive+0xb20>)
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	4619      	mov	r1, r3
 801207e:	4610      	mov	r0, r2
 8012080:	f7fb ff8c 	bl	800df9c <pbuf_cat>
 8012084:	e018      	b.n	80120b8 <tcp_receive+0xb34>
 8012086:	bf00      	nop
 8012088:	20004a2e 	.word	0x20004a2e
 801208c:	20004a24 	.word	0x20004a24
 8012090:	20004a04 	.word	0x20004a04
 8012094:	0801ac58 	.word	0x0801ac58
 8012098:	0801b038 	.word	0x0801b038
 801209c:	0801aca4 	.word	0x0801aca4
 80120a0:	0801b074 	.word	0x0801b074
 80120a4:	20004a34 	.word	0x20004a34
 80120a8:	20004a31 	.word	0x20004a31
 80120ac:	0801b094 	.word	0x0801b094
            } else {
              recv_data = cseg->p;
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	4a70      	ldr	r2, [pc, #448]	; (8012278 <tcp_receive+0xcf4>)
 80120b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	2200      	movs	r2, #0
 80120bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	899b      	ldrh	r3, [r3, #12]
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fa faea 	bl	800c6a0 <lwip_htons>
 80120cc:	4603      	mov	r3, r0
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	f003 0301 	and.w	r3, r3, #1
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d00d      	beq.n	80120f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80120d8:	4b68      	ldr	r3, [pc, #416]	; (801227c <tcp_receive+0xcf8>)
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	f043 0320 	orr.w	r3, r3, #32
 80120e0:	b2da      	uxtb	r2, r3
 80120e2:	4b66      	ldr	r3, [pc, #408]	; (801227c <tcp_receive+0xcf8>)
 80120e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	7d1b      	ldrb	r3, [r3, #20]
 80120ea:	2b04      	cmp	r3, #4
 80120ec:	d102      	bne.n	80120f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2207      	movs	r2, #7
 80120f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80120fc:	68b8      	ldr	r0, [r7, #8]
 80120fe:	f7fd fb06 	bl	800f70e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012106:	2b00      	cmp	r3, #0
 8012108:	d008      	beq.n	801211c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	685a      	ldr	r2, [r3, #4]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012116:	429a      	cmp	r2, r3
 8012118:	f43f af43 	beq.w	8011fa2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	8b5b      	ldrh	r3, [r3, #26]
 8012120:	f003 0301 	and.w	r3, r3, #1
 8012124:	2b00      	cmp	r3, #0
 8012126:	d00e      	beq.n	8012146 <tcp_receive+0xbc2>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	8b5b      	ldrh	r3, [r3, #26]
 801212c:	f023 0301 	bic.w	r3, r3, #1
 8012130:	b29a      	uxth	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	835a      	strh	r2, [r3, #26]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	8b5b      	ldrh	r3, [r3, #26]
 801213a:	f043 0302 	orr.w	r3, r3, #2
 801213e:	b29a      	uxth	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012144:	e188      	b.n	8012458 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	8b5b      	ldrh	r3, [r3, #26]
 801214a:	f043 0301 	orr.w	r3, r3, #1
 801214e:	b29a      	uxth	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012154:	e180      	b.n	8012458 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801215a:	2b00      	cmp	r3, #0
 801215c:	d106      	bne.n	801216c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801215e:	4848      	ldr	r0, [pc, #288]	; (8012280 <tcp_receive+0xcfc>)
 8012160:	f7fd faee 	bl	800f740 <tcp_seg_copy>
 8012164:	4602      	mov	r2, r0
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	675a      	str	r2, [r3, #116]	; 0x74
 801216a:	e16d      	b.n	8012448 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801216c:	2300      	movs	r3, #0
 801216e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012174:	63bb      	str	r3, [r7, #56]	; 0x38
 8012176:	e157      	b.n	8012428 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	685a      	ldr	r2, [r3, #4]
 801217e:	4b41      	ldr	r3, [pc, #260]	; (8012284 <tcp_receive+0xd00>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	429a      	cmp	r2, r3
 8012184:	d11d      	bne.n	80121c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012186:	4b3e      	ldr	r3, [pc, #248]	; (8012280 <tcp_receive+0xcfc>)
 8012188:	891a      	ldrh	r2, [r3, #8]
 801218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218c:	891b      	ldrh	r3, [r3, #8]
 801218e:	429a      	cmp	r2, r3
 8012190:	f240 814f 	bls.w	8012432 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012194:	483a      	ldr	r0, [pc, #232]	; (8012280 <tcp_receive+0xcfc>)
 8012196:	f7fd fad3 	bl	800f740 <tcp_seg_copy>
 801219a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	f000 8149 	beq.w	8012436 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80121a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d003      	beq.n	80121b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80121aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ac:	697a      	ldr	r2, [r7, #20]
 80121ae:	601a      	str	r2, [r3, #0]
 80121b0:	e002      	b.n	80121b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	697a      	ldr	r2, [r7, #20]
 80121b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80121b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121ba:	6978      	ldr	r0, [r7, #20]
 80121bc:	f7ff f8de 	bl	801137c <tcp_oos_insert_segment>
                }
                break;
 80121c0:	e139      	b.n	8012436 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80121c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d117      	bne.n	80121f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80121c8:	4b2e      	ldr	r3, [pc, #184]	; (8012284 <tcp_receive+0xd00>)
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	da57      	bge.n	8012288 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121d8:	4829      	ldr	r0, [pc, #164]	; (8012280 <tcp_receive+0xcfc>)
 80121da:	f7fd fab1 	bl	800f740 <tcp_seg_copy>
 80121de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f000 8129 	beq.w	801243a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	69ba      	ldr	r2, [r7, #24]
 80121ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80121ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121f0:	69b8      	ldr	r0, [r7, #24]
 80121f2:	f7ff f8c3 	bl	801137c <tcp_oos_insert_segment>
                  }
                  break;
 80121f6:	e120      	b.n	801243a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80121f8:	4b22      	ldr	r3, [pc, #136]	; (8012284 <tcp_receive+0xd00>)
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	1ad3      	subs	r3, r2, r3
 8012204:	3b01      	subs	r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	db3e      	blt.n	8012288 <tcp_receive+0xd04>
 801220a:	4b1e      	ldr	r3, [pc, #120]	; (8012284 <tcp_receive+0xd00>)
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	1ad3      	subs	r3, r2, r3
 8012216:	3301      	adds	r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	dc35      	bgt.n	8012288 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801221c:	4818      	ldr	r0, [pc, #96]	; (8012280 <tcp_receive+0xcfc>)
 801221e:	f7fd fa8f 	bl	800f740 <tcp_seg_copy>
 8012222:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 8109 	beq.w	801243e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012234:	8912      	ldrh	r2, [r2, #8]
 8012236:	441a      	add	r2, r3
 8012238:	4b12      	ldr	r3, [pc, #72]	; (8012284 <tcp_receive+0xd00>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	dd12      	ble.n	8012268 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012242:	4b10      	ldr	r3, [pc, #64]	; (8012284 <tcp_receive+0xd00>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	b29a      	uxth	r2, r3
 8012248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	b29b      	uxth	r3, r3
 8012250:	1ad3      	subs	r3, r2, r3
 8012252:	b29a      	uxth	r2, r3
 8012254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012256:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225a:	685a      	ldr	r2, [r3, #4]
 801225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225e:	891b      	ldrh	r3, [r3, #8]
 8012260:	4619      	mov	r1, r3
 8012262:	4610      	mov	r0, r2
 8012264:	f7fb fc46 	bl	800daf4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226a:	69fa      	ldr	r2, [r7, #28]
 801226c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801226e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012270:	69f8      	ldr	r0, [r7, #28]
 8012272:	f7ff f883 	bl	801137c <tcp_oos_insert_segment>
                  }
                  break;
 8012276:	e0e2      	b.n	801243e <tcp_receive+0xeba>
 8012278:	20004a34 	.word	0x20004a34
 801227c:	20004a31 	.word	0x20004a31
 8012280:	20004a04 	.word	0x20004a04
 8012284:	20004a24 	.word	0x20004a24
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	f040 80c6 	bne.w	8012422 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012296:	4b80      	ldr	r3, [pc, #512]	; (8012498 <tcp_receive+0xf14>)
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f340 80bd 	ble.w	8012422 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80122a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122aa:	68db      	ldr	r3, [r3, #12]
 80122ac:	899b      	ldrh	r3, [r3, #12]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fa f9f5 	bl	800c6a0 <lwip_htons>
 80122b6:	4603      	mov	r3, r0
 80122b8:	b2db      	uxtb	r3, r3
 80122ba:	f003 0301 	and.w	r3, r3, #1
 80122be:	2b00      	cmp	r3, #0
 80122c0:	f040 80bf 	bne.w	8012442 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80122c4:	4875      	ldr	r0, [pc, #468]	; (801249c <tcp_receive+0xf18>)
 80122c6:	f7fd fa3b 	bl	800f740 <tcp_seg_copy>
 80122ca:	4602      	mov	r2, r0
 80122cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80122d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 80b6 	beq.w	8012446 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80122da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122e2:	8912      	ldrh	r2, [r2, #8]
 80122e4:	441a      	add	r2, r3
 80122e6:	4b6c      	ldr	r3, [pc, #432]	; (8012498 <tcp_receive+0xf14>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	dd12      	ble.n	8012316 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80122f0:	4b69      	ldr	r3, [pc, #420]	; (8012498 <tcp_receive+0xf14>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	b29a      	uxth	r2, r3
 8012302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012304:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012308:	685a      	ldr	r2, [r3, #4]
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	891b      	ldrh	r3, [r3, #8]
 801230e:	4619      	mov	r1, r3
 8012310:	4610      	mov	r0, r2
 8012312:	f7fb fbef 	bl	800daf4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012316:	4b62      	ldr	r3, [pc, #392]	; (80124a0 <tcp_receive+0xf1c>)
 8012318:	881b      	ldrh	r3, [r3, #0]
 801231a:	461a      	mov	r2, r3
 801231c:	4b5e      	ldr	r3, [pc, #376]	; (8012498 <tcp_receive+0xf14>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	441a      	add	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012326:	6879      	ldr	r1, [r7, #4]
 8012328:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801232a:	440b      	add	r3, r1
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	2b00      	cmp	r3, #0
 8012330:	f340 8089 	ble.w	8012446 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	899b      	ldrh	r3, [r3, #12]
 801233c:	b29b      	uxth	r3, r3
 801233e:	4618      	mov	r0, r3
 8012340:	f7fa f9ae 	bl	800c6a0 <lwip_htons>
 8012344:	4603      	mov	r3, r0
 8012346:	b2db      	uxtb	r3, r3
 8012348:	f003 0301 	and.w	r3, r3, #1
 801234c:	2b00      	cmp	r3, #0
 801234e:	d022      	beq.n	8012396 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	899b      	ldrh	r3, [r3, #12]
 8012358:	b29b      	uxth	r3, r3
 801235a:	b21b      	sxth	r3, r3
 801235c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012360:	b21c      	sxth	r4, r3
 8012362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	899b      	ldrh	r3, [r3, #12]
 801236a:	b29b      	uxth	r3, r3
 801236c:	4618      	mov	r0, r3
 801236e:	f7fa f997 	bl	800c6a0 <lwip_htons>
 8012372:	4603      	mov	r3, r0
 8012374:	b2db      	uxtb	r3, r3
 8012376:	b29b      	uxth	r3, r3
 8012378:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801237c:	b29b      	uxth	r3, r3
 801237e:	4618      	mov	r0, r3
 8012380:	f7fa f98e 	bl	800c6a0 <lwip_htons>
 8012384:	4603      	mov	r3, r0
 8012386:	b21b      	sxth	r3, r3
 8012388:	4323      	orrs	r3, r4
 801238a:	b21a      	sxth	r2, r3
 801238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	b292      	uxth	r2, r2
 8012394:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239a:	b29a      	uxth	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123a0:	4413      	add	r3, r2
 80123a2:	b299      	uxth	r1, r3
 80123a4:	4b3c      	ldr	r3, [pc, #240]	; (8012498 <tcp_receive+0xf14>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	1a8a      	subs	r2, r1, r2
 80123b0:	b292      	uxth	r2, r2
 80123b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80123b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	685a      	ldr	r2, [r3, #4]
 80123ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	891b      	ldrh	r3, [r3, #8]
 80123c0:	4619      	mov	r1, r3
 80123c2:	4610      	mov	r0, r2
 80123c4:	f7fb fb96 	bl	800daf4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	891c      	ldrh	r4, [r3, #8]
 80123ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	899b      	ldrh	r3, [r3, #12]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fa f961 	bl	800c6a0 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 0303 	and.w	r3, r3, #3
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d001      	beq.n	80123ee <tcp_receive+0xe6a>
 80123ea:	2301      	movs	r3, #1
 80123ec:	e000      	b.n	80123f0 <tcp_receive+0xe6c>
 80123ee:	2300      	movs	r3, #0
 80123f0:	4423      	add	r3, r4
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	4b2a      	ldr	r3, [pc, #168]	; (80124a0 <tcp_receive+0xf1c>)
 80123f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80123f8:	4b29      	ldr	r3, [pc, #164]	; (80124a0 <tcp_receive+0xf1c>)
 80123fa:	881b      	ldrh	r3, [r3, #0]
 80123fc:	461a      	mov	r2, r3
 80123fe:	4b26      	ldr	r3, [pc, #152]	; (8012498 <tcp_receive+0xf14>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	441a      	add	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801240c:	440b      	add	r3, r1
 801240e:	429a      	cmp	r2, r3
 8012410:	d019      	beq.n	8012446 <tcp_receive+0xec2>
 8012412:	4b24      	ldr	r3, [pc, #144]	; (80124a4 <tcp_receive+0xf20>)
 8012414:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012418:	4923      	ldr	r1, [pc, #140]	; (80124a8 <tcp_receive+0xf24>)
 801241a:	4824      	ldr	r0, [pc, #144]	; (80124ac <tcp_receive+0xf28>)
 801241c:	f005 f9f6 	bl	801780c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012420:	e011      	b.n	8012446 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	63bb      	str	r3, [r7, #56]	; 0x38
 8012428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242a:	2b00      	cmp	r3, #0
 801242c:	f47f aea4 	bne.w	8012178 <tcp_receive+0xbf4>
 8012430:	e00a      	b.n	8012448 <tcp_receive+0xec4>
                break;
 8012432:	bf00      	nop
 8012434:	e008      	b.n	8012448 <tcp_receive+0xec4>
                break;
 8012436:	bf00      	nop
 8012438:	e006      	b.n	8012448 <tcp_receive+0xec4>
                  break;
 801243a:	bf00      	nop
 801243c:	e004      	b.n	8012448 <tcp_receive+0xec4>
                  break;
 801243e:	bf00      	nop
 8012440:	e002      	b.n	8012448 <tcp_receive+0xec4>
                  break;
 8012442:	bf00      	nop
 8012444:	e000      	b.n	8012448 <tcp_receive+0xec4>
                break;
 8012446:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f001 fe8b 	bl	8014164 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801244e:	e003      	b.n	8012458 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f001 fe87 	bl	8014164 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012456:	e01a      	b.n	801248e <tcp_receive+0xf0a>
 8012458:	e019      	b.n	801248e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801245a:	4b0f      	ldr	r3, [pc, #60]	; (8012498 <tcp_receive+0xf14>)
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	2b00      	cmp	r3, #0
 8012466:	db0a      	blt.n	801247e <tcp_receive+0xefa>
 8012468:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <tcp_receive+0xf14>)
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012470:	6879      	ldr	r1, [r7, #4]
 8012472:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012474:	440b      	add	r3, r1
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	3301      	adds	r3, #1
 801247a:	2b00      	cmp	r3, #0
 801247c:	dd07      	ble.n	801248e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	8b5b      	ldrh	r3, [r3, #26]
 8012482:	f043 0302 	orr.w	r3, r3, #2
 8012486:	b29a      	uxth	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801248c:	e7ff      	b.n	801248e <tcp_receive+0xf0a>
 801248e:	bf00      	nop
 8012490:	3750      	adds	r7, #80	; 0x50
 8012492:	46bd      	mov	sp, r7
 8012494:	bdb0      	pop	{r4, r5, r7, pc}
 8012496:	bf00      	nop
 8012498:	20004a24 	.word	0x20004a24
 801249c:	20004a04 	.word	0x20004a04
 80124a0:	20004a2e 	.word	0x20004a2e
 80124a4:	0801ac58 	.word	0x0801ac58
 80124a8:	0801b000 	.word	0x0801b000
 80124ac:	0801aca4 	.word	0x0801aca4

080124b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80124b6:	4b15      	ldr	r3, [pc, #84]	; (801250c <tcp_get_next_optbyte+0x5c>)
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	1c5a      	adds	r2, r3, #1
 80124bc:	b291      	uxth	r1, r2
 80124be:	4a13      	ldr	r2, [pc, #76]	; (801250c <tcp_get_next_optbyte+0x5c>)
 80124c0:	8011      	strh	r1, [r2, #0]
 80124c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80124c4:	4b12      	ldr	r3, [pc, #72]	; (8012510 <tcp_get_next_optbyte+0x60>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d004      	beq.n	80124d6 <tcp_get_next_optbyte+0x26>
 80124cc:	4b11      	ldr	r3, [pc, #68]	; (8012514 <tcp_get_next_optbyte+0x64>)
 80124ce:	881b      	ldrh	r3, [r3, #0]
 80124d0:	88fa      	ldrh	r2, [r7, #6]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d208      	bcs.n	80124e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80124d6:	4b10      	ldr	r3, [pc, #64]	; (8012518 <tcp_get_next_optbyte+0x68>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	3314      	adds	r3, #20
 80124dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80124de:	88fb      	ldrh	r3, [r7, #6]
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	4413      	add	r3, r2
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	e00b      	b.n	8012500 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80124e8:	88fb      	ldrh	r3, [r7, #6]
 80124ea:	b2da      	uxtb	r2, r3
 80124ec:	4b09      	ldr	r3, [pc, #36]	; (8012514 <tcp_get_next_optbyte+0x64>)
 80124ee:	881b      	ldrh	r3, [r3, #0]
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	1ad3      	subs	r3, r2, r3
 80124f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80124f6:	4b06      	ldr	r3, [pc, #24]	; (8012510 <tcp_get_next_optbyte+0x60>)
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	797b      	ldrb	r3, [r7, #5]
 80124fc:	4413      	add	r3, r2
 80124fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012500:	4618      	mov	r0, r3
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	20004a20 	.word	0x20004a20
 8012510:	20004a1c 	.word	0x20004a1c
 8012514:	20004a1a 	.word	0x20004a1a
 8012518:	20004a14 	.word	0x20004a14

0801251c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d106      	bne.n	8012538 <tcp_parseopt+0x1c>
 801252a:	4b32      	ldr	r3, [pc, #200]	; (80125f4 <tcp_parseopt+0xd8>)
 801252c:	f240 727d 	movw	r2, #1917	; 0x77d
 8012530:	4931      	ldr	r1, [pc, #196]	; (80125f8 <tcp_parseopt+0xdc>)
 8012532:	4832      	ldr	r0, [pc, #200]	; (80125fc <tcp_parseopt+0xe0>)
 8012534:	f005 f96a 	bl	801780c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012538:	4b31      	ldr	r3, [pc, #196]	; (8012600 <tcp_parseopt+0xe4>)
 801253a:	881b      	ldrh	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d056      	beq.n	80125ee <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012540:	4b30      	ldr	r3, [pc, #192]	; (8012604 <tcp_parseopt+0xe8>)
 8012542:	2200      	movs	r2, #0
 8012544:	801a      	strh	r2, [r3, #0]
 8012546:	e046      	b.n	80125d6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012548:	f7ff ffb2 	bl	80124b0 <tcp_get_next_optbyte>
 801254c:	4603      	mov	r3, r0
 801254e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012550:	7bfb      	ldrb	r3, [r7, #15]
 8012552:	2b02      	cmp	r3, #2
 8012554:	d006      	beq.n	8012564 <tcp_parseopt+0x48>
 8012556:	2b02      	cmp	r3, #2
 8012558:	dc2c      	bgt.n	80125b4 <tcp_parseopt+0x98>
 801255a:	2b00      	cmp	r3, #0
 801255c:	d042      	beq.n	80125e4 <tcp_parseopt+0xc8>
 801255e:	2b01      	cmp	r3, #1
 8012560:	d128      	bne.n	80125b4 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012562:	e038      	b.n	80125d6 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012564:	f7ff ffa4 	bl	80124b0 <tcp_get_next_optbyte>
 8012568:	4603      	mov	r3, r0
 801256a:	2b04      	cmp	r3, #4
 801256c:	d13c      	bne.n	80125e8 <tcp_parseopt+0xcc>
 801256e:	4b25      	ldr	r3, [pc, #148]	; (8012604 <tcp_parseopt+0xe8>)
 8012570:	881b      	ldrh	r3, [r3, #0]
 8012572:	3301      	adds	r3, #1
 8012574:	4a22      	ldr	r2, [pc, #136]	; (8012600 <tcp_parseopt+0xe4>)
 8012576:	8812      	ldrh	r2, [r2, #0]
 8012578:	4293      	cmp	r3, r2
 801257a:	da35      	bge.n	80125e8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801257c:	f7ff ff98 	bl	80124b0 <tcp_get_next_optbyte>
 8012580:	4603      	mov	r3, r0
 8012582:	b29b      	uxth	r3, r3
 8012584:	021b      	lsls	r3, r3, #8
 8012586:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012588:	f7ff ff92 	bl	80124b0 <tcp_get_next_optbyte>
 801258c:	4603      	mov	r3, r0
 801258e:	b29a      	uxth	r2, r3
 8012590:	89bb      	ldrh	r3, [r7, #12]
 8012592:	4313      	orrs	r3, r2
 8012594:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012596:	89bb      	ldrh	r3, [r7, #12]
 8012598:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801259c:	4293      	cmp	r3, r2
 801259e:	d804      	bhi.n	80125aa <tcp_parseopt+0x8e>
 80125a0:	89bb      	ldrh	r3, [r7, #12]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d001      	beq.n	80125aa <tcp_parseopt+0x8e>
 80125a6:	89ba      	ldrh	r2, [r7, #12]
 80125a8:	e001      	b.n	80125ae <tcp_parseopt+0x92>
 80125aa:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80125b2:	e010      	b.n	80125d6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80125b4:	f7ff ff7c 	bl	80124b0 <tcp_get_next_optbyte>
 80125b8:	4603      	mov	r3, r0
 80125ba:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80125bc:	7afb      	ldrb	r3, [r7, #11]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d914      	bls.n	80125ec <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80125c2:	7afb      	ldrb	r3, [r7, #11]
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	4b0f      	ldr	r3, [pc, #60]	; (8012604 <tcp_parseopt+0xe8>)
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	4413      	add	r3, r2
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	3b02      	subs	r3, #2
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	4b0c      	ldr	r3, [pc, #48]	; (8012604 <tcp_parseopt+0xe8>)
 80125d4:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80125d6:	4b0b      	ldr	r3, [pc, #44]	; (8012604 <tcp_parseopt+0xe8>)
 80125d8:	881a      	ldrh	r2, [r3, #0]
 80125da:	4b09      	ldr	r3, [pc, #36]	; (8012600 <tcp_parseopt+0xe4>)
 80125dc:	881b      	ldrh	r3, [r3, #0]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d3b2      	bcc.n	8012548 <tcp_parseopt+0x2c>
 80125e2:	e004      	b.n	80125ee <tcp_parseopt+0xd2>
          return;
 80125e4:	bf00      	nop
 80125e6:	e002      	b.n	80125ee <tcp_parseopt+0xd2>
            return;
 80125e8:	bf00      	nop
 80125ea:	e000      	b.n	80125ee <tcp_parseopt+0xd2>
            return;
 80125ec:	bf00      	nop
      }
    }
  }
}
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0801ac58 	.word	0x0801ac58
 80125f8:	0801b0bc 	.word	0x0801b0bc
 80125fc:	0801aca4 	.word	0x0801aca4
 8012600:	20004a18 	.word	0x20004a18
 8012604:	20004a20 	.word	0x20004a20

08012608 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012608:	b480      	push	{r7}
 801260a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801260c:	4b05      	ldr	r3, [pc, #20]	; (8012624 <tcp_trigger_input_pcb_close+0x1c>)
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	f043 0310 	orr.w	r3, r3, #16
 8012614:	b2da      	uxtb	r2, r3
 8012616:	4b03      	ldr	r3, [pc, #12]	; (8012624 <tcp_trigger_input_pcb_close+0x1c>)
 8012618:	701a      	strb	r2, [r3, #0]
}
 801261a:	bf00      	nop
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr
 8012624:	20004a31 	.word	0x20004a31

08012628 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00a      	beq.n	8012650 <tcp_route+0x28>
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	7a1b      	ldrb	r3, [r3, #8]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d006      	beq.n	8012650 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	7a1b      	ldrb	r3, [r3, #8]
 8012646:	4618      	mov	r0, r3
 8012648:	f7fb f848 	bl	800d6dc <netif_get_by_index>
 801264c:	4603      	mov	r3, r0
 801264e:	e003      	b.n	8012658 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f003 fc4b 	bl	8015eec <ip4_route>
 8012656:	4603      	mov	r3, r0
  }
}
 8012658:	4618      	mov	r0, r3
 801265a:	3710      	adds	r7, #16
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012660:	b590      	push	{r4, r7, lr}
 8012662:	b087      	sub	sp, #28
 8012664:	af00      	add	r7, sp, #0
 8012666:	60f8      	str	r0, [r7, #12]
 8012668:	60b9      	str	r1, [r7, #8]
 801266a:	603b      	str	r3, [r7, #0]
 801266c:	4613      	mov	r3, r2
 801266e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d105      	bne.n	8012682 <tcp_create_segment+0x22>
 8012676:	4b44      	ldr	r3, [pc, #272]	; (8012788 <tcp_create_segment+0x128>)
 8012678:	22a3      	movs	r2, #163	; 0xa3
 801267a:	4944      	ldr	r1, [pc, #272]	; (801278c <tcp_create_segment+0x12c>)
 801267c:	4844      	ldr	r0, [pc, #272]	; (8012790 <tcp_create_segment+0x130>)
 801267e:	f005 f8c5 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d105      	bne.n	8012694 <tcp_create_segment+0x34>
 8012688:	4b3f      	ldr	r3, [pc, #252]	; (8012788 <tcp_create_segment+0x128>)
 801268a:	22a4      	movs	r2, #164	; 0xa4
 801268c:	4941      	ldr	r1, [pc, #260]	; (8012794 <tcp_create_segment+0x134>)
 801268e:	4840      	ldr	r0, [pc, #256]	; (8012790 <tcp_create_segment+0x130>)
 8012690:	f005 f8bc 	bl	801780c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	b2db      	uxtb	r3, r3
 801269c:	f003 0304 	and.w	r3, r3, #4
 80126a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80126a2:	2003      	movs	r0, #3
 80126a4:	f7fa fcb2 	bl	800d00c <memp_malloc>
 80126a8:	6138      	str	r0, [r7, #16]
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d104      	bne.n	80126ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80126b0:	68b8      	ldr	r0, [r7, #8]
 80126b2:	f7fb fba5 	bl	800de00 <pbuf_free>
    return NULL;
 80126b6:	2300      	movs	r3, #0
 80126b8:	e061      	b.n	801277e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80126c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	2200      	movs	r2, #0
 80126c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	68ba      	ldr	r2, [r7, #8]
 80126cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	891a      	ldrh	r2, [r3, #8]
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d205      	bcs.n	80126e6 <tcp_create_segment+0x86>
 80126da:	4b2b      	ldr	r3, [pc, #172]	; (8012788 <tcp_create_segment+0x128>)
 80126dc:	22b0      	movs	r2, #176	; 0xb0
 80126de:	492e      	ldr	r1, [pc, #184]	; (8012798 <tcp_create_segment+0x138>)
 80126e0:	482b      	ldr	r0, [pc, #172]	; (8012790 <tcp_create_segment+0x130>)
 80126e2:	f005 f893 	bl	801780c <iprintf>
  seg->len = p->tot_len - optlen;
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	891a      	ldrh	r2, [r3, #8]
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	1ad3      	subs	r3, r2, r3
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80126f6:	2114      	movs	r1, #20
 80126f8:	68b8      	ldr	r0, [r7, #8]
 80126fa:	f7fb faeb 	bl	800dcd4 <pbuf_add_header>
 80126fe:	4603      	mov	r3, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d004      	beq.n	801270e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012704:	6938      	ldr	r0, [r7, #16]
 8012706:	f7fd f802 	bl	800f70e <tcp_seg_free>
    return NULL;
 801270a:	2300      	movs	r3, #0
 801270c:	e037      	b.n	801277e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	685a      	ldr	r2, [r3, #4]
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	8ada      	ldrh	r2, [r3, #22]
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	68dc      	ldr	r4, [r3, #12]
 8012720:	4610      	mov	r0, r2
 8012722:	f7f9 ffbd 	bl	800c6a0 <lwip_htons>
 8012726:	4603      	mov	r3, r0
 8012728:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	8b1a      	ldrh	r2, [r3, #24]
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	68dc      	ldr	r4, [r3, #12]
 8012732:	4610      	mov	r0, r2
 8012734:	f7f9 ffb4 	bl	800c6a0 <lwip_htons>
 8012738:	4603      	mov	r3, r0
 801273a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	68dc      	ldr	r4, [r3, #12]
 8012740:	6838      	ldr	r0, [r7, #0]
 8012742:	f7f9 ffc2 	bl	800c6ca <lwip_htonl>
 8012746:	4603      	mov	r3, r0
 8012748:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801274a:	7dfb      	ldrb	r3, [r7, #23]
 801274c:	089b      	lsrs	r3, r3, #2
 801274e:	b2db      	uxtb	r3, r3
 8012750:	b29b      	uxth	r3, r3
 8012752:	3305      	adds	r3, #5
 8012754:	b29b      	uxth	r3, r3
 8012756:	031b      	lsls	r3, r3, #12
 8012758:	b29a      	uxth	r2, r3
 801275a:	79fb      	ldrb	r3, [r7, #7]
 801275c:	b29b      	uxth	r3, r3
 801275e:	4313      	orrs	r3, r2
 8012760:	b29a      	uxth	r2, r3
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	68dc      	ldr	r4, [r3, #12]
 8012766:	4610      	mov	r0, r2
 8012768:	f7f9 ff9a 	bl	800c6a0 <lwip_htons>
 801276c:	4603      	mov	r3, r0
 801276e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	2200      	movs	r2, #0
 8012776:	749a      	strb	r2, [r3, #18]
 8012778:	2200      	movs	r2, #0
 801277a:	74da      	strb	r2, [r3, #19]
  return seg;
 801277c:	693b      	ldr	r3, [r7, #16]
}
 801277e:	4618      	mov	r0, r3
 8012780:	371c      	adds	r7, #28
 8012782:	46bd      	mov	sp, r7
 8012784:	bd90      	pop	{r4, r7, pc}
 8012786:	bf00      	nop
 8012788:	0801b0d8 	.word	0x0801b0d8
 801278c:	0801b10c 	.word	0x0801b10c
 8012790:	0801b12c 	.word	0x0801b12c
 8012794:	0801b154 	.word	0x0801b154
 8012798:	0801b178 	.word	0x0801b178

0801279c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	607b      	str	r3, [r7, #4]
 80127a4:	4603      	mov	r3, r0
 80127a6:	73fb      	strb	r3, [r7, #15]
 80127a8:	460b      	mov	r3, r1
 80127aa:	81bb      	strh	r3, [r7, #12]
 80127ac:	4613      	mov	r3, r2
 80127ae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80127b0:	89bb      	ldrh	r3, [r7, #12]
 80127b2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d105      	bne.n	80127c6 <tcp_pbuf_prealloc+0x2a>
 80127ba:	4b30      	ldr	r3, [pc, #192]	; (801287c <tcp_pbuf_prealloc+0xe0>)
 80127bc:	22e8      	movs	r2, #232	; 0xe8
 80127be:	4930      	ldr	r1, [pc, #192]	; (8012880 <tcp_pbuf_prealloc+0xe4>)
 80127c0:	4830      	ldr	r0, [pc, #192]	; (8012884 <tcp_pbuf_prealloc+0xe8>)
 80127c2:	f005 f823 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80127c6:	6a3b      	ldr	r3, [r7, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d105      	bne.n	80127d8 <tcp_pbuf_prealloc+0x3c>
 80127cc:	4b2b      	ldr	r3, [pc, #172]	; (801287c <tcp_pbuf_prealloc+0xe0>)
 80127ce:	22e9      	movs	r2, #233	; 0xe9
 80127d0:	492d      	ldr	r1, [pc, #180]	; (8012888 <tcp_pbuf_prealloc+0xec>)
 80127d2:	482c      	ldr	r0, [pc, #176]	; (8012884 <tcp_pbuf_prealloc+0xe8>)
 80127d4:	f005 f81a 	bl	801780c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80127d8:	89ba      	ldrh	r2, [r7, #12]
 80127da:	897b      	ldrh	r3, [r7, #10]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d221      	bcs.n	8012824 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80127e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80127e4:	f003 0302 	and.w	r3, r3, #2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d111      	bne.n	8012810 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80127ec:	6a3b      	ldr	r3, [r7, #32]
 80127ee:	8b5b      	ldrh	r3, [r3, #26]
 80127f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d115      	bne.n	8012824 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80127f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d007      	beq.n	8012810 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012800:	6a3b      	ldr	r3, [r7, #32]
 8012802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012804:	2b00      	cmp	r3, #0
 8012806:	d103      	bne.n	8012810 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012808:	6a3b      	ldr	r3, [r7, #32]
 801280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801280c:	2b00      	cmp	r3, #0
 801280e:	d009      	beq.n	8012824 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012810:	89bb      	ldrh	r3, [r7, #12]
 8012812:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8012816:	f023 0203 	bic.w	r2, r3, #3
 801281a:	897b      	ldrh	r3, [r7, #10]
 801281c:	4293      	cmp	r3, r2
 801281e:	bf28      	it	cs
 8012820:	4613      	movcs	r3, r2
 8012822:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012824:	8af9      	ldrh	r1, [r7, #22]
 8012826:	7bfb      	ldrb	r3, [r7, #15]
 8012828:	f44f 7220 	mov.w	r2, #640	; 0x280
 801282c:	4618      	mov	r0, r3
 801282e:	f7fa ffff 	bl	800d830 <pbuf_alloc>
 8012832:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d101      	bne.n	801283e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801283a:	2300      	movs	r3, #0
 801283c:	e019      	b.n	8012872 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d006      	beq.n	8012854 <tcp_pbuf_prealloc+0xb8>
 8012846:	4b0d      	ldr	r3, [pc, #52]	; (801287c <tcp_pbuf_prealloc+0xe0>)
 8012848:	f240 120b 	movw	r2, #267	; 0x10b
 801284c:	490f      	ldr	r1, [pc, #60]	; (801288c <tcp_pbuf_prealloc+0xf0>)
 801284e:	480d      	ldr	r0, [pc, #52]	; (8012884 <tcp_pbuf_prealloc+0xe8>)
 8012850:	f004 ffdc 	bl	801780c <iprintf>
  *oversize = p->len - length;
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	895a      	ldrh	r2, [r3, #10]
 8012858:	89bb      	ldrh	r3, [r7, #12]
 801285a:	1ad3      	subs	r3, r2, r3
 801285c:	b29a      	uxth	r2, r3
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	89ba      	ldrh	r2, [r7, #12]
 8012866:	811a      	strh	r2, [r3, #8]
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	891a      	ldrh	r2, [r3, #8]
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	815a      	strh	r2, [r3, #10]
  return p;
 8012870:	693b      	ldr	r3, [r7, #16]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3718      	adds	r7, #24
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	0801b0d8 	.word	0x0801b0d8
 8012880:	0801b190 	.word	0x0801b190
 8012884:	0801b12c 	.word	0x0801b12c
 8012888:	0801b1b4 	.word	0x0801b1b4
 801288c:	0801b1d4 	.word	0x0801b1d4

08012890 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	460b      	mov	r3, r1
 801289a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_write_checks+0x20>
 80128a2:	4b33      	ldr	r3, [pc, #204]	; (8012970 <tcp_write_checks+0xe0>)
 80128a4:	f240 1233 	movw	r2, #307	; 0x133
 80128a8:	4932      	ldr	r1, [pc, #200]	; (8012974 <tcp_write_checks+0xe4>)
 80128aa:	4833      	ldr	r0, [pc, #204]	; (8012978 <tcp_write_checks+0xe8>)
 80128ac:	f004 ffae 	bl	801780c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7d1b      	ldrb	r3, [r3, #20]
 80128b4:	2b04      	cmp	r3, #4
 80128b6:	d00e      	beq.n	80128d6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80128bc:	2b07      	cmp	r3, #7
 80128be:	d00a      	beq.n	80128d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80128c4:	2b02      	cmp	r3, #2
 80128c6:	d006      	beq.n	80128d6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80128cc:	2b03      	cmp	r3, #3
 80128ce:	d002      	beq.n	80128d6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80128d0:	f06f 030a 	mvn.w	r3, #10
 80128d4:	e048      	b.n	8012968 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80128d6:	887b      	ldrh	r3, [r7, #2]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d101      	bne.n	80128e0 <tcp_write_checks+0x50>
    return ERR_OK;
 80128dc:	2300      	movs	r3, #0
 80128de:	e043      	b.n	8012968 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128e6:	887a      	ldrh	r2, [r7, #2]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d909      	bls.n	8012900 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	8b5b      	ldrh	r3, [r3, #26]
 80128f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128fa:	f04f 33ff 	mov.w	r3, #4294967295
 80128fe:	e033      	b.n	8012968 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012906:	2b0f      	cmp	r3, #15
 8012908:	d909      	bls.n	801291e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	8b5b      	ldrh	r3, [r3, #26]
 801290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012912:	b29a      	uxth	r2, r3
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012918:	f04f 33ff 	mov.w	r3, #4294967295
 801291c:	e024      	b.n	8012968 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012924:	2b00      	cmp	r3, #0
 8012926:	d00f      	beq.n	8012948 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801292c:	2b00      	cmp	r3, #0
 801292e:	d11a      	bne.n	8012966 <tcp_write_checks+0xd6>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012934:	2b00      	cmp	r3, #0
 8012936:	d116      	bne.n	8012966 <tcp_write_checks+0xd6>
 8012938:	4b0d      	ldr	r3, [pc, #52]	; (8012970 <tcp_write_checks+0xe0>)
 801293a:	f240 1255 	movw	r2, #341	; 0x155
 801293e:	490f      	ldr	r1, [pc, #60]	; (801297c <tcp_write_checks+0xec>)
 8012940:	480d      	ldr	r0, [pc, #52]	; (8012978 <tcp_write_checks+0xe8>)
 8012942:	f004 ff63 	bl	801780c <iprintf>
 8012946:	e00e      	b.n	8012966 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801294c:	2b00      	cmp	r3, #0
 801294e:	d103      	bne.n	8012958 <tcp_write_checks+0xc8>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012954:	2b00      	cmp	r3, #0
 8012956:	d006      	beq.n	8012966 <tcp_write_checks+0xd6>
 8012958:	4b05      	ldr	r3, [pc, #20]	; (8012970 <tcp_write_checks+0xe0>)
 801295a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801295e:	4908      	ldr	r1, [pc, #32]	; (8012980 <tcp_write_checks+0xf0>)
 8012960:	4805      	ldr	r0, [pc, #20]	; (8012978 <tcp_write_checks+0xe8>)
 8012962:	f004 ff53 	bl	801780c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012966:	2300      	movs	r3, #0
}
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	0801b0d8 	.word	0x0801b0d8
 8012974:	0801b1e8 	.word	0x0801b1e8
 8012978:	0801b12c 	.word	0x0801b12c
 801297c:	0801b208 	.word	0x0801b208
 8012980:	0801b244 	.word	0x0801b244

08012984 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012984:	b590      	push	{r4, r7, lr}
 8012986:	b09b      	sub	sp, #108	; 0x6c
 8012988:	af04      	add	r7, sp, #16
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	4611      	mov	r1, r2
 8012990:	461a      	mov	r2, r3
 8012992:	460b      	mov	r3, r1
 8012994:	80fb      	strh	r3, [r7, #6]
 8012996:	4613      	mov	r3, r2
 8012998:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801299a:	2300      	movs	r3, #0
 801299c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	653b      	str	r3, [r7, #80]	; 0x50
 80129a2:	2300      	movs	r3, #0
 80129a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129a6:	2300      	movs	r3, #0
 80129a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80129aa:	2300      	movs	r3, #0
 80129ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80129ae:	2300      	movs	r3, #0
 80129b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80129b4:	2300      	movs	r3, #0
 80129b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80129ba:	2300      	movs	r3, #0
 80129bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80129be:	2300      	movs	r3, #0
 80129c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80129c2:	2300      	movs	r3, #0
 80129c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d109      	bne.n	80129e0 <tcp_write+0x5c>
 80129cc:	4ba4      	ldr	r3, [pc, #656]	; (8012c60 <tcp_write+0x2dc>)
 80129ce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80129d2:	49a4      	ldr	r1, [pc, #656]	; (8012c64 <tcp_write+0x2e0>)
 80129d4:	48a4      	ldr	r0, [pc, #656]	; (8012c68 <tcp_write+0x2e4>)
 80129d6:	f004 ff19 	bl	801780c <iprintf>
 80129da:	f06f 030f 	mvn.w	r3, #15
 80129de:	e32a      	b.n	8013036 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80129e6:	085b      	lsrs	r3, r3, #1
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129ee:	4293      	cmp	r3, r2
 80129f0:	bf28      	it	cs
 80129f2:	4613      	movcs	r3, r2
 80129f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80129f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d102      	bne.n	8012a02 <tcp_write+0x7e>
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a00:	e000      	b.n	8012a04 <tcp_write+0x80>
 8012a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a04:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d109      	bne.n	8012a20 <tcp_write+0x9c>
 8012a0c:	4b94      	ldr	r3, [pc, #592]	; (8012c60 <tcp_write+0x2dc>)
 8012a0e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012a12:	4996      	ldr	r1, [pc, #600]	; (8012c6c <tcp_write+0x2e8>)
 8012a14:	4894      	ldr	r0, [pc, #592]	; (8012c68 <tcp_write+0x2e4>)
 8012a16:	f004 fef9 	bl	801780c <iprintf>
 8012a1a:	f06f 030f 	mvn.w	r3, #15
 8012a1e:	e30a      	b.n	8013036 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012a20:	88fb      	ldrh	r3, [r7, #6]
 8012a22:	4619      	mov	r1, r3
 8012a24:	68f8      	ldr	r0, [r7, #12]
 8012a26:	f7ff ff33 	bl	8012890 <tcp_write_checks>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012a30:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d002      	beq.n	8012a3e <tcp_write+0xba>
    return err;
 8012a38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a3c:	e2fb      	b.n	8013036 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a48:	2300      	movs	r3, #0
 8012a4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f000 80f6 	beq.w	8012c44 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8012a5e:	e002      	b.n	8012a66 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d1f8      	bne.n	8012a60 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a70:	7a9b      	ldrb	r3, [r3, #10]
 8012a72:	009b      	lsls	r3, r3, #2
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	f003 0304 	and.w	r3, r3, #4
 8012a7a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012a7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a80:	891b      	ldrh	r3, [r3, #8]
 8012a82:	4619      	mov	r1, r3
 8012a84:	8c3b      	ldrh	r3, [r7, #32]
 8012a86:	440b      	add	r3, r1
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	da06      	bge.n	8012a9a <tcp_write+0x116>
 8012a8c:	4b74      	ldr	r3, [pc, #464]	; (8012c60 <tcp_write+0x2dc>)
 8012a8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a92:	4977      	ldr	r1, [pc, #476]	; (8012c70 <tcp_write+0x2ec>)
 8012a94:	4874      	ldr	r0, [pc, #464]	; (8012c68 <tcp_write+0x2e4>)
 8012a96:	f004 feb9 	bl	801780c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a9c:	891a      	ldrh	r2, [r3, #8]
 8012a9e:	8c3b      	ldrh	r3, [r7, #32]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012aa6:	1ad3      	subs	r3, r2, r3
 8012aa8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012ab0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012ab2:	8a7b      	ldrh	r3, [r7, #18]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d026      	beq.n	8012b06 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012ab8:	8a7b      	ldrh	r3, [r7, #18]
 8012aba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d206      	bcs.n	8012ace <tcp_write+0x14a>
 8012ac0:	4b67      	ldr	r3, [pc, #412]	; (8012c60 <tcp_write+0x2dc>)
 8012ac2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012ac6:	496b      	ldr	r1, [pc, #428]	; (8012c74 <tcp_write+0x2f0>)
 8012ac8:	4867      	ldr	r0, [pc, #412]	; (8012c68 <tcp_write+0x2e4>)
 8012aca:	f004 fe9f 	bl	801780c <iprintf>
      seg = last_unsent;
 8012ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012ad2:	8a7b      	ldrh	r3, [r7, #18]
 8012ad4:	88fa      	ldrh	r2, [r7, #6]
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	bf28      	it	cs
 8012ada:	4613      	movcs	r3, r2
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	bf28      	it	cs
 8012ae4:	4613      	movcs	r3, r2
 8012ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012ae8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012aee:	4413      	add	r3, r2
 8012af0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012af4:	8a7a      	ldrh	r2, [r7, #18]
 8012af6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012af8:	1ad3      	subs	r3, r2, r3
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012afe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b02:	1ad3      	subs	r3, r2, r3
 8012b04:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012b06:	8a7b      	ldrh	r3, [r7, #18]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00b      	beq.n	8012b24 <tcp_write+0x1a0>
 8012b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b10:	88fb      	ldrh	r3, [r7, #6]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d006      	beq.n	8012b24 <tcp_write+0x1a0>
 8012b16:	4b52      	ldr	r3, [pc, #328]	; (8012c60 <tcp_write+0x2dc>)
 8012b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b1c:	4956      	ldr	r1, [pc, #344]	; (8012c78 <tcp_write+0x2f4>)
 8012b1e:	4852      	ldr	r0, [pc, #328]	; (8012c68 <tcp_write+0x2e4>)
 8012b20:	f004 fe74 	bl	801780c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012b24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b28:	88fb      	ldrh	r3, [r7, #6]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	f080 8167 	bcs.w	8012dfe <tcp_write+0x47a>
 8012b30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	f000 8163 	beq.w	8012dfe <tcp_write+0x47a>
 8012b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b3a:	891b      	ldrh	r3, [r3, #8]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 815e 	beq.w	8012dfe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012b42:	88fa      	ldrh	r2, [r7, #6]
 8012b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b48:	1ad2      	subs	r2, r2, r3
 8012b4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	bfa8      	it	ge
 8012b50:	4613      	movge	r3, r2
 8012b52:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b56:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012b58:	797b      	ldrb	r3, [r7, #5]
 8012b5a:	f003 0301 	and.w	r3, r3, #1
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d027      	beq.n	8012bb2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012b62:	f107 0012 	add.w	r0, r7, #18
 8012b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b68:	8bf9      	ldrh	r1, [r7, #30]
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	9302      	str	r3, [sp, #8]
 8012b6e:	797b      	ldrb	r3, [r7, #5]
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	4603      	mov	r3, r0
 8012b78:	2000      	movs	r0, #0
 8012b7a:	f7ff fe0f 	bl	801279c <tcp_pbuf_prealloc>
 8012b7e:	6578      	str	r0, [r7, #84]	; 0x54
 8012b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	f000 8225 	beq.w	8012fd2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b8a:	6858      	ldr	r0, [r3, #4]
 8012b8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b90:	68ba      	ldr	r2, [r7, #8]
 8012b92:	4413      	add	r3, r2
 8012b94:	8bfa      	ldrh	r2, [r7, #30]
 8012b96:	4619      	mov	r1, r3
 8012b98:	f004 fe08 	bl	80177ac <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012b9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b9e:	f7fb f9bd 	bl	800df1c <pbuf_clen>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012baa:	4413      	add	r3, r2
 8012bac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012bb0:	e041      	b.n	8012c36 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8012bb8:	e002      	b.n	8012bc0 <tcp_write+0x23c>
 8012bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8012bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d1f8      	bne.n	8012bba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bca:	7b1b      	ldrb	r3, [r3, #12]
 8012bcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d115      	bne.n	8012c00 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bda:	8952      	ldrh	r2, [r2, #10]
 8012bdc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bde:	68ba      	ldr	r2, [r7, #8]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d10d      	bne.n	8012c00 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d006      	beq.n	8012bfa <tcp_write+0x276>
 8012bec:	4b1c      	ldr	r3, [pc, #112]	; (8012c60 <tcp_write+0x2dc>)
 8012bee:	f240 2231 	movw	r2, #561	; 0x231
 8012bf2:	4922      	ldr	r1, [pc, #136]	; (8012c7c <tcp_write+0x2f8>)
 8012bf4:	481c      	ldr	r0, [pc, #112]	; (8012c68 <tcp_write+0x2e4>)
 8012bf6:	f004 fe09 	bl	801780c <iprintf>
          extendlen = seglen;
 8012bfa:	8bfb      	ldrh	r3, [r7, #30]
 8012bfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012bfe:	e01a      	b.n	8012c36 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012c00:	8bfb      	ldrh	r3, [r7, #30]
 8012c02:	2201      	movs	r2, #1
 8012c04:	4619      	mov	r1, r3
 8012c06:	2000      	movs	r0, #0
 8012c08:	f7fa fe12 	bl	800d830 <pbuf_alloc>
 8012c0c:	6578      	str	r0, [r7, #84]	; 0x54
 8012c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	f000 81e0 	beq.w	8012fd6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012c16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c1a:	68ba      	ldr	r2, [r7, #8]
 8012c1c:	441a      	add	r2, r3
 8012c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c20:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012c22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c24:	f7fb f97a 	bl	800df1c <pbuf_clen>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c30:	4413      	add	r3, r2
 8012c32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012c36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c3a:	8bfb      	ldrh	r3, [r7, #30]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012c42:	e0dc      	b.n	8012dfe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f000 80d7 	beq.w	8012dfe <tcp_write+0x47a>
 8012c50:	4b03      	ldr	r3, [pc, #12]	; (8012c60 <tcp_write+0x2dc>)
 8012c52:	f240 224a 	movw	r2, #586	; 0x24a
 8012c56:	490a      	ldr	r1, [pc, #40]	; (8012c80 <tcp_write+0x2fc>)
 8012c58:	4803      	ldr	r0, [pc, #12]	; (8012c68 <tcp_write+0x2e4>)
 8012c5a:	f004 fdd7 	bl	801780c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012c5e:	e0ce      	b.n	8012dfe <tcp_write+0x47a>
 8012c60:	0801b0d8 	.word	0x0801b0d8
 8012c64:	0801b278 	.word	0x0801b278
 8012c68:	0801b12c 	.word	0x0801b12c
 8012c6c:	0801b290 	.word	0x0801b290
 8012c70:	0801b2c4 	.word	0x0801b2c4
 8012c74:	0801b2dc 	.word	0x0801b2dc
 8012c78:	0801b2fc 	.word	0x0801b2fc
 8012c7c:	0801b31c 	.word	0x0801b31c
 8012c80:	0801b348 	.word	0x0801b348
    struct pbuf *p;
    u16_t left = len - pos;
 8012c84:	88fa      	ldrh	r2, [r7, #6]
 8012c86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012c8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c96:	1ad3      	subs	r3, r2, r3
 8012c98:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012c9a:	8b7a      	ldrh	r2, [r7, #26]
 8012c9c:	8bbb      	ldrh	r3, [r7, #28]
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	bf28      	it	cs
 8012ca2:	4613      	movcs	r3, r2
 8012ca4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012ca6:	797b      	ldrb	r3, [r7, #5]
 8012ca8:	f003 0301 	and.w	r3, r3, #1
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d036      	beq.n	8012d1e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	8b3b      	ldrh	r3, [r7, #24]
 8012cb8:	4413      	add	r3, r2
 8012cba:	b299      	uxth	r1, r3
 8012cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	bf0c      	ite	eq
 8012cc2:	2301      	moveq	r3, #1
 8012cc4:	2300      	movne	r3, #0
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	f107 0012 	add.w	r0, r7, #18
 8012ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cce:	9302      	str	r3, [sp, #8]
 8012cd0:	797b      	ldrb	r3, [r7, #5]
 8012cd2:	9301      	str	r3, [sp, #4]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2036      	movs	r0, #54	; 0x36
 8012cdc:	f7ff fd5e 	bl	801279c <tcp_pbuf_prealloc>
 8012ce0:	6338      	str	r0, [r7, #48]	; 0x30
 8012ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	f000 8178 	beq.w	8012fda <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cec:	895b      	ldrh	r3, [r3, #10]
 8012cee:	8b3a      	ldrh	r2, [r7, #24]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d906      	bls.n	8012d02 <tcp_write+0x37e>
 8012cf4:	4b8c      	ldr	r3, [pc, #560]	; (8012f28 <tcp_write+0x5a4>)
 8012cf6:	f240 2266 	movw	r2, #614	; 0x266
 8012cfa:	498c      	ldr	r1, [pc, #560]	; (8012f2c <tcp_write+0x5a8>)
 8012cfc:	488c      	ldr	r0, [pc, #560]	; (8012f30 <tcp_write+0x5ac>)
 8012cfe:	f004 fd85 	bl	801780c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d04:	685a      	ldr	r2, [r3, #4]
 8012d06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d0a:	18d0      	adds	r0, r2, r3
 8012d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d10:	68ba      	ldr	r2, [r7, #8]
 8012d12:	4413      	add	r3, r2
 8012d14:	8b3a      	ldrh	r2, [r7, #24]
 8012d16:	4619      	mov	r1, r3
 8012d18:	f004 fd48 	bl	80177ac <memcpy>
 8012d1c:	e02f      	b.n	8012d7e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012d1e:	8a7b      	ldrh	r3, [r7, #18]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <tcp_write+0x3ae>
 8012d24:	4b80      	ldr	r3, [pc, #512]	; (8012f28 <tcp_write+0x5a4>)
 8012d26:	f240 2271 	movw	r2, #625	; 0x271
 8012d2a:	4982      	ldr	r1, [pc, #520]	; (8012f34 <tcp_write+0x5b0>)
 8012d2c:	4880      	ldr	r0, [pc, #512]	; (8012f30 <tcp_write+0x5ac>)
 8012d2e:	f004 fd6d 	bl	801780c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012d32:	8b3b      	ldrh	r3, [r7, #24]
 8012d34:	2201      	movs	r2, #1
 8012d36:	4619      	mov	r1, r3
 8012d38:	2036      	movs	r0, #54	; 0x36
 8012d3a:	f7fa fd79 	bl	800d830 <pbuf_alloc>
 8012d3e:	6178      	str	r0, [r7, #20]
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	f000 814b 	beq.w	8012fde <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012d48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d4c:	68ba      	ldr	r2, [r7, #8]
 8012d4e:	441a      	add	r2, r3
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d5e:	4619      	mov	r1, r3
 8012d60:	2036      	movs	r0, #54	; 0x36
 8012d62:	f7fa fd65 	bl	800d830 <pbuf_alloc>
 8012d66:	6338      	str	r0, [r7, #48]	; 0x30
 8012d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d103      	bne.n	8012d76 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d6e:	6978      	ldr	r0, [r7, #20]
 8012d70:	f7fb f846 	bl	800de00 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012d74:	e136      	b.n	8012fe4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012d76:	6979      	ldr	r1, [r7, #20]
 8012d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d7a:	f7fb f90f 	bl	800df9c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d80:	f7fb f8cc 	bl	800df1c <pbuf_clen>
 8012d84:	4603      	mov	r3, r0
 8012d86:	461a      	mov	r2, r3
 8012d88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d8c:	4413      	add	r3, r2
 8012d8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012d92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d96:	2b10      	cmp	r3, #16
 8012d98:	d903      	bls.n	8012da2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d9c:	f7fb f830 	bl	800de00 <pbuf_free>
      goto memerr;
 8012da0:	e120      	b.n	8012fe4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012da6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012daa:	441a      	add	r2, r3
 8012dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	4613      	mov	r3, r2
 8012db4:	2200      	movs	r2, #0
 8012db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012db8:	68f8      	ldr	r0, [r7, #12]
 8012dba:	f7ff fc51 	bl	8012660 <tcp_create_segment>
 8012dbe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f000 810d 	beq.w	8012fe2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d102      	bne.n	8012dd4 <tcp_write+0x450>
      queue = seg;
 8012dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8012dd2:	e00c      	b.n	8012dee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <tcp_write+0x464>
 8012dda:	4b53      	ldr	r3, [pc, #332]	; (8012f28 <tcp_write+0x5a4>)
 8012ddc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012de0:	4955      	ldr	r1, [pc, #340]	; (8012f38 <tcp_write+0x5b4>)
 8012de2:	4853      	ldr	r0, [pc, #332]	; (8012f30 <tcp_write+0x5ac>)
 8012de4:	f004 fd12 	bl	801780c <iprintf>
      prev_seg->next = seg;
 8012de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012df2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012df6:	8b3b      	ldrh	r3, [r7, #24]
 8012df8:	4413      	add	r3, r2
 8012dfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012dfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e02:	88fb      	ldrh	r3, [r7, #6]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	f4ff af3d 	bcc.w	8012c84 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012e0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d02c      	beq.n	8012e6a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e16:	e01e      	b.n	8012e56 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1a:	891a      	ldrh	r2, [r3, #8]
 8012e1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e1e:	4413      	add	r3, r2
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e24:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d110      	bne.n	8012e50 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e34:	8952      	ldrh	r2, [r2, #10]
 8012e36:	4413      	add	r3, r2
 8012e38:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e3a:	68b9      	ldr	r1, [r7, #8]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f004 fcb5 	bl	80177ac <memcpy>
        p->len += oversize_used;
 8012e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e44:	895a      	ldrh	r2, [r3, #10]
 8012e46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e48:	4413      	add	r3, r2
 8012e4a:	b29a      	uxth	r2, r3
 8012e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d1dd      	bne.n	8012e18 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e5e:	891a      	ldrh	r2, [r3, #8]
 8012e60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e62:	4413      	add	r3, r2
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e68:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e6a:	8a7a      	ldrh	r2, [r7, #18]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d018      	beq.n	8012eaa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <tcp_write+0x508>
 8012e7e:	4b2a      	ldr	r3, [pc, #168]	; (8012f28 <tcp_write+0x5a4>)
 8012e80:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012e84:	492d      	ldr	r1, [pc, #180]	; (8012f3c <tcp_write+0x5b8>)
 8012e86:	482a      	ldr	r0, [pc, #168]	; (8012f30 <tcp_write+0x5ac>)
 8012e88:	f004 fcc0 	bl	801780c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fb f882 	bl	800df9c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e9a:	891a      	ldrh	r2, [r3, #8]
 8012e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e9e:	891b      	ldrh	r3, [r3, #8]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea6:	811a      	strh	r2, [r3, #8]
 8012ea8:	e037      	b.n	8012f1a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012eaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d034      	beq.n	8012f1a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d003      	beq.n	8012ebe <tcp_write+0x53a>
 8012eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d106      	bne.n	8012ecc <tcp_write+0x548>
 8012ebe:	4b1a      	ldr	r3, [pc, #104]	; (8012f28 <tcp_write+0x5a4>)
 8012ec0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012ec4:	491e      	ldr	r1, [pc, #120]	; (8012f40 <tcp_write+0x5bc>)
 8012ec6:	481a      	ldr	r0, [pc, #104]	; (8012f30 <tcp_write+0x5ac>)
 8012ec8:	f004 fca0 	bl	801780c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ed2:	e009      	b.n	8012ee8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed6:	891a      	ldrh	r2, [r3, #8]
 8012ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eda:	4413      	add	r3, r2
 8012edc:	b29a      	uxth	r2, r3
 8012ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1f1      	bne.n	8012ed4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef2:	891a      	ldrh	r2, [r3, #8]
 8012ef4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ef6:	4413      	add	r3, r2
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f00:	895a      	ldrh	r2, [r3, #10]
 8012f02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f04:	4413      	add	r3, r2
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f0e:	891a      	ldrh	r2, [r3, #8]
 8012f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f12:	4413      	add	r3, r2
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f18:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d111      	bne.n	8012f44 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f24:	66da      	str	r2, [r3, #108]	; 0x6c
 8012f26:	e010      	b.n	8012f4a <tcp_write+0x5c6>
 8012f28:	0801b0d8 	.word	0x0801b0d8
 8012f2c:	0801b378 	.word	0x0801b378
 8012f30:	0801b12c 	.word	0x0801b12c
 8012f34:	0801b3b8 	.word	0x0801b3b8
 8012f38:	0801b3c8 	.word	0x0801b3c8
 8012f3c:	0801b3dc 	.word	0x0801b3dc
 8012f40:	0801b414 	.word	0x0801b414
  } else {
    last_unsent->next = queue;
 8012f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f48:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f4e:	88fb      	ldrh	r3, [r7, #6]
 8012f50:	441a      	add	r2, r3
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012f5c:	88fb      	ldrh	r3, [r7, #6]
 8012f5e:	1ad3      	subs	r3, r2, r3
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d00e      	beq.n	8012f9a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d10a      	bne.n	8012f9a <tcp_write+0x616>
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d106      	bne.n	8012f9a <tcp_write+0x616>
 8012f8c:	4b2c      	ldr	r3, [pc, #176]	; (8013040 <tcp_write+0x6bc>)
 8012f8e:	f240 3212 	movw	r2, #786	; 0x312
 8012f92:	492c      	ldr	r1, [pc, #176]	; (8013044 <tcp_write+0x6c0>)
 8012f94:	482c      	ldr	r0, [pc, #176]	; (8013048 <tcp_write+0x6c4>)
 8012f96:	f004 fc39 	bl	801780c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d016      	beq.n	8012fce <tcp_write+0x64a>
 8012fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d012      	beq.n	8012fce <tcp_write+0x64a>
 8012fa8:	797b      	ldrb	r3, [r7, #5]
 8012faa:	f003 0302 	and.w	r3, r3, #2
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d10d      	bne.n	8012fce <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	899b      	ldrh	r3, [r3, #12]
 8012fb8:	b29c      	uxth	r4, r3
 8012fba:	2008      	movs	r0, #8
 8012fbc:	f7f9 fb70 	bl	800c6a0 <lwip_htons>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	4322      	orrs	r2, r4
 8012fca:	b292      	uxth	r2, r2
 8012fcc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	e031      	b.n	8013036 <tcp_write+0x6b2>
          goto memerr;
 8012fd2:	bf00      	nop
 8012fd4:	e006      	b.n	8012fe4 <tcp_write+0x660>
            goto memerr;
 8012fd6:	bf00      	nop
 8012fd8:	e004      	b.n	8012fe4 <tcp_write+0x660>
        goto memerr;
 8012fda:	bf00      	nop
 8012fdc:	e002      	b.n	8012fe4 <tcp_write+0x660>
        goto memerr;
 8012fde:	bf00      	nop
 8012fe0:	e000      	b.n	8012fe4 <tcp_write+0x660>
      goto memerr;
 8012fe2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	8b5b      	ldrh	r3, [r3, #26]
 8012fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fec:	b29a      	uxth	r2, r3
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012ff8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012ffa:	f7fa ff01 	bl	800de00 <pbuf_free>
  }
  if (queue != NULL) {
 8012ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <tcp_write+0x686>
    tcp_segs_free(queue);
 8013004:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013006:	f7fc fb6d 	bl	800f6e4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00e      	beq.n	8013032 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013018:	2b00      	cmp	r3, #0
 801301a:	d10a      	bne.n	8013032 <tcp_write+0x6ae>
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013020:	2b00      	cmp	r3, #0
 8013022:	d106      	bne.n	8013032 <tcp_write+0x6ae>
 8013024:	4b06      	ldr	r3, [pc, #24]	; (8013040 <tcp_write+0x6bc>)
 8013026:	f240 3227 	movw	r2, #807	; 0x327
 801302a:	4906      	ldr	r1, [pc, #24]	; (8013044 <tcp_write+0x6c0>)
 801302c:	4806      	ldr	r0, [pc, #24]	; (8013048 <tcp_write+0x6c4>)
 801302e:	f004 fbed 	bl	801780c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013036:	4618      	mov	r0, r3
 8013038:	375c      	adds	r7, #92	; 0x5c
 801303a:	46bd      	mov	sp, r7
 801303c:	bd90      	pop	{r4, r7, pc}
 801303e:	bf00      	nop
 8013040:	0801b0d8 	.word	0x0801b0d8
 8013044:	0801b44c 	.word	0x0801b44c
 8013048:	0801b12c 	.word	0x0801b12c

0801304c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801304c:	b590      	push	{r4, r7, lr}
 801304e:	b08b      	sub	sp, #44	; 0x2c
 8013050:	af02      	add	r7, sp, #8
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	460b      	mov	r3, r1
 8013056:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013058:	2300      	movs	r3, #0
 801305a:	61fb      	str	r3, [r7, #28]
 801305c:	2300      	movs	r3, #0
 801305e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013060:	2300      	movs	r3, #0
 8013062:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d106      	bne.n	8013078 <tcp_split_unsent_seg+0x2c>
 801306a:	4b95      	ldr	r3, [pc, #596]	; (80132c0 <tcp_split_unsent_seg+0x274>)
 801306c:	f240 324b 	movw	r2, #843	; 0x34b
 8013070:	4994      	ldr	r1, [pc, #592]	; (80132c4 <tcp_split_unsent_seg+0x278>)
 8013072:	4895      	ldr	r0, [pc, #596]	; (80132c8 <tcp_split_unsent_seg+0x27c>)
 8013074:	f004 fbca 	bl	801780c <iprintf>

  useg = pcb->unsent;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801307c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d102      	bne.n	801308a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013084:	f04f 33ff 	mov.w	r3, #4294967295
 8013088:	e116      	b.n	80132b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801308a:	887b      	ldrh	r3, [r7, #2]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d109      	bne.n	80130a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013090:	4b8b      	ldr	r3, [pc, #556]	; (80132c0 <tcp_split_unsent_seg+0x274>)
 8013092:	f240 3253 	movw	r2, #851	; 0x353
 8013096:	498d      	ldr	r1, [pc, #564]	; (80132cc <tcp_split_unsent_seg+0x280>)
 8013098:	488b      	ldr	r0, [pc, #556]	; (80132c8 <tcp_split_unsent_seg+0x27c>)
 801309a:	f004 fbb7 	bl	801780c <iprintf>
    return ERR_VAL;
 801309e:	f06f 0305 	mvn.w	r3, #5
 80130a2:	e109      	b.n	80132b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	891b      	ldrh	r3, [r3, #8]
 80130a8:	887a      	ldrh	r2, [r7, #2]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d301      	bcc.n	80130b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e102      	b.n	80132b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130b6:	887a      	ldrh	r2, [r7, #2]
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d906      	bls.n	80130ca <tcp_split_unsent_seg+0x7e>
 80130bc:	4b80      	ldr	r3, [pc, #512]	; (80132c0 <tcp_split_unsent_seg+0x274>)
 80130be:	f240 325b 	movw	r2, #859	; 0x35b
 80130c2:	4983      	ldr	r1, [pc, #524]	; (80132d0 <tcp_split_unsent_seg+0x284>)
 80130c4:	4880      	ldr	r0, [pc, #512]	; (80132c8 <tcp_split_unsent_seg+0x27c>)
 80130c6:	f004 fba1 	bl	801780c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	891b      	ldrh	r3, [r3, #8]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d106      	bne.n	80130e0 <tcp_split_unsent_seg+0x94>
 80130d2:	4b7b      	ldr	r3, [pc, #492]	; (80132c0 <tcp_split_unsent_seg+0x274>)
 80130d4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80130d8:	497e      	ldr	r1, [pc, #504]	; (80132d4 <tcp_split_unsent_seg+0x288>)
 80130da:	487b      	ldr	r0, [pc, #492]	; (80132c8 <tcp_split_unsent_seg+0x27c>)
 80130dc:	f004 fb96 	bl	801780c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	7a9b      	ldrb	r3, [r3, #10]
 80130e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80130e6:	7bfb      	ldrb	r3, [r7, #15]
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	f003 0304 	and.w	r3, r3, #4
 80130f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	891a      	ldrh	r2, [r3, #8]
 80130f6:	887b      	ldrh	r3, [r7, #2]
 80130f8:	1ad3      	subs	r3, r2, r3
 80130fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80130fc:	7bbb      	ldrb	r3, [r7, #14]
 80130fe:	b29a      	uxth	r2, r3
 8013100:	89bb      	ldrh	r3, [r7, #12]
 8013102:	4413      	add	r3, r2
 8013104:	b29b      	uxth	r3, r3
 8013106:	f44f 7220 	mov.w	r2, #640	; 0x280
 801310a:	4619      	mov	r1, r3
 801310c:	2036      	movs	r0, #54	; 0x36
 801310e:	f7fa fb8f 	bl	800d830 <pbuf_alloc>
 8013112:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	2b00      	cmp	r3, #0
 8013118:	f000 80b7 	beq.w	801328a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	891a      	ldrh	r2, [r3, #8]
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	891b      	ldrh	r3, [r3, #8]
 8013126:	1ad3      	subs	r3, r2, r3
 8013128:	b29a      	uxth	r2, r3
 801312a:	887b      	ldrh	r3, [r7, #2]
 801312c:	4413      	add	r3, r2
 801312e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	6858      	ldr	r0, [r3, #4]
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	685a      	ldr	r2, [r3, #4]
 8013138:	7bbb      	ldrb	r3, [r7, #14]
 801313a:	18d1      	adds	r1, r2, r3
 801313c:	897b      	ldrh	r3, [r7, #10]
 801313e:	89ba      	ldrh	r2, [r7, #12]
 8013140:	f7fb f854 	bl	800e1ec <pbuf_copy_partial>
 8013144:	4603      	mov	r3, r0
 8013146:	461a      	mov	r2, r3
 8013148:	89bb      	ldrh	r3, [r7, #12]
 801314a:	4293      	cmp	r3, r2
 801314c:	f040 809f 	bne.w	801328e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	899b      	ldrh	r3, [r3, #12]
 8013156:	b29b      	uxth	r3, r3
 8013158:	4618      	mov	r0, r3
 801315a:	f7f9 faa1 	bl	800c6a0 <lwip_htons>
 801315e:	4603      	mov	r3, r0
 8013160:	b2db      	uxtb	r3, r3
 8013162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013166:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013168:	2300      	movs	r3, #0
 801316a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801316c:	7efb      	ldrb	r3, [r7, #27]
 801316e:	f003 0308 	and.w	r3, r3, #8
 8013172:	2b00      	cmp	r3, #0
 8013174:	d007      	beq.n	8013186 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013176:	7efb      	ldrb	r3, [r7, #27]
 8013178:	f023 0308 	bic.w	r3, r3, #8
 801317c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801317e:	7ebb      	ldrb	r3, [r7, #26]
 8013180:	f043 0308 	orr.w	r3, r3, #8
 8013184:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013186:	7efb      	ldrb	r3, [r7, #27]
 8013188:	f003 0301 	and.w	r3, r3, #1
 801318c:	2b00      	cmp	r3, #0
 801318e:	d007      	beq.n	80131a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013190:	7efb      	ldrb	r3, [r7, #27]
 8013192:	f023 0301 	bic.w	r3, r3, #1
 8013196:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013198:	7ebb      	ldrb	r3, [r7, #26]
 801319a:	f043 0301 	orr.w	r3, r3, #1
 801319e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f9 fa8f 	bl	800c6ca <lwip_htonl>
 80131ac:	4602      	mov	r2, r0
 80131ae:	887b      	ldrh	r3, [r7, #2]
 80131b0:	18d1      	adds	r1, r2, r3
 80131b2:	7eba      	ldrb	r2, [r7, #26]
 80131b4:	7bfb      	ldrb	r3, [r7, #15]
 80131b6:	9300      	str	r3, [sp, #0]
 80131b8:	460b      	mov	r3, r1
 80131ba:	6939      	ldr	r1, [r7, #16]
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff fa4f 	bl	8012660 <tcp_create_segment>
 80131c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d063      	beq.n	8013292 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7fa fea4 	bl	800df1c <pbuf_clen>
 80131d4:	4603      	mov	r3, r0
 80131d6:	461a      	mov	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131de:	1a9b      	subs	r3, r3, r2
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	6858      	ldr	r0, [r3, #4]
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	891a      	ldrh	r2, [r3, #8]
 80131f2:	89bb      	ldrh	r3, [r7, #12]
 80131f4:	1ad3      	subs	r3, r2, r3
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4619      	mov	r1, r3
 80131fa:	f7fa fc7b 	bl	800daf4 <pbuf_realloc>
  useg->len -= remainder;
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	891a      	ldrh	r2, [r3, #8]
 8013202:	89bb      	ldrh	r3, [r7, #12]
 8013204:	1ad3      	subs	r3, r2, r3
 8013206:	b29a      	uxth	r2, r3
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	899b      	ldrh	r3, [r3, #12]
 8013212:	b29c      	uxth	r4, r3
 8013214:	7efb      	ldrb	r3, [r7, #27]
 8013216:	b29b      	uxth	r3, r3
 8013218:	4618      	mov	r0, r3
 801321a:	f7f9 fa41 	bl	800c6a0 <lwip_htons>
 801321e:	4603      	mov	r3, r0
 8013220:	461a      	mov	r2, r3
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	4322      	orrs	r2, r4
 8013228:	b292      	uxth	r2, r2
 801322a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	4618      	mov	r0, r3
 8013232:	f7fa fe73 	bl	800df1c <pbuf_clen>
 8013236:	4603      	mov	r3, r0
 8013238:	461a      	mov	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013240:	4413      	add	r3, r2
 8013242:	b29a      	uxth	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801324a:	69fb      	ldr	r3, [r7, #28]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	4618      	mov	r0, r3
 8013250:	f7fa fe64 	bl	800df1c <pbuf_clen>
 8013254:	4603      	mov	r3, r0
 8013256:	461a      	mov	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801325e:	4413      	add	r3, r2
 8013260:	b29a      	uxth	r2, r3
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	69fa      	ldr	r2, [r7, #28]
 8013274:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d103      	bne.n	8013286 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2200      	movs	r2, #0
 8013282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013286:	2300      	movs	r3, #0
 8013288:	e016      	b.n	80132b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801328a:	bf00      	nop
 801328c:	e002      	b.n	8013294 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801328e:	bf00      	nop
 8013290:	e000      	b.n	8013294 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013292:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d006      	beq.n	80132a8 <tcp_split_unsent_seg+0x25c>
 801329a:	4b09      	ldr	r3, [pc, #36]	; (80132c0 <tcp_split_unsent_seg+0x274>)
 801329c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80132a0:	490d      	ldr	r1, [pc, #52]	; (80132d8 <tcp_split_unsent_seg+0x28c>)
 80132a2:	4809      	ldr	r0, [pc, #36]	; (80132c8 <tcp_split_unsent_seg+0x27c>)
 80132a4:	f004 fab2 	bl	801780c <iprintf>
  if (p != NULL) {
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d002      	beq.n	80132b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80132ae:	6938      	ldr	r0, [r7, #16]
 80132b0:	f7fa fda6 	bl	800de00 <pbuf_free>
  }

  return ERR_MEM;
 80132b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3724      	adds	r7, #36	; 0x24
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd90      	pop	{r4, r7, pc}
 80132c0:	0801b0d8 	.word	0x0801b0d8
 80132c4:	0801b46c 	.word	0x0801b46c
 80132c8:	0801b12c 	.word	0x0801b12c
 80132cc:	0801b490 	.word	0x0801b490
 80132d0:	0801b4b4 	.word	0x0801b4b4
 80132d4:	0801b4c4 	.word	0x0801b4c4
 80132d8:	0801b4d4 	.word	0x0801b4d4

080132dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80132dc:	b590      	push	{r4, r7, lr}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d106      	bne.n	80132f8 <tcp_send_fin+0x1c>
 80132ea:	4b21      	ldr	r3, [pc, #132]	; (8013370 <tcp_send_fin+0x94>)
 80132ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80132f0:	4920      	ldr	r1, [pc, #128]	; (8013374 <tcp_send_fin+0x98>)
 80132f2:	4821      	ldr	r0, [pc, #132]	; (8013378 <tcp_send_fin+0x9c>)
 80132f4:	f004 fa8a 	bl	801780c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d02e      	beq.n	801335e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013304:	60fb      	str	r3, [r7, #12]
 8013306:	e002      	b.n	801330e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d1f8      	bne.n	8013308 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	899b      	ldrh	r3, [r3, #12]
 801331c:	b29b      	uxth	r3, r3
 801331e:	4618      	mov	r0, r3
 8013320:	f7f9 f9be 	bl	800c6a0 <lwip_htons>
 8013324:	4603      	mov	r3, r0
 8013326:	b2db      	uxtb	r3, r3
 8013328:	f003 0307 	and.w	r3, r3, #7
 801332c:	2b00      	cmp	r3, #0
 801332e:	d116      	bne.n	801335e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	899b      	ldrh	r3, [r3, #12]
 8013336:	b29c      	uxth	r4, r3
 8013338:	2001      	movs	r0, #1
 801333a:	f7f9 f9b1 	bl	800c6a0 <lwip_htons>
 801333e:	4603      	mov	r3, r0
 8013340:	461a      	mov	r2, r3
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	4322      	orrs	r2, r4
 8013348:	b292      	uxth	r2, r2
 801334a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	8b5b      	ldrh	r3, [r3, #26]
 8013350:	f043 0320 	orr.w	r3, r3, #32
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801335a:	2300      	movs	r3, #0
 801335c:	e004      	b.n	8013368 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801335e:	2101      	movs	r1, #1
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 f80b 	bl	801337c <tcp_enqueue_flags>
 8013366:	4603      	mov	r3, r0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3714      	adds	r7, #20
 801336c:	46bd      	mov	sp, r7
 801336e:	bd90      	pop	{r4, r7, pc}
 8013370:	0801b0d8 	.word	0x0801b0d8
 8013374:	0801b4e0 	.word	0x0801b4e0
 8013378:	0801b12c 	.word	0x0801b12c

0801337c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b08a      	sub	sp, #40	; 0x28
 8013380:	af02      	add	r7, sp, #8
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013388:	2300      	movs	r3, #0
 801338a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801338c:	2300      	movs	r3, #0
 801338e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013390:	78fb      	ldrb	r3, [r7, #3]
 8013392:	f003 0303 	and.w	r3, r3, #3
 8013396:	2b00      	cmp	r3, #0
 8013398:	d106      	bne.n	80133a8 <tcp_enqueue_flags+0x2c>
 801339a:	4b67      	ldr	r3, [pc, #412]	; (8013538 <tcp_enqueue_flags+0x1bc>)
 801339c:	f240 4211 	movw	r2, #1041	; 0x411
 80133a0:	4966      	ldr	r1, [pc, #408]	; (801353c <tcp_enqueue_flags+0x1c0>)
 80133a2:	4867      	ldr	r0, [pc, #412]	; (8013540 <tcp_enqueue_flags+0x1c4>)
 80133a4:	f004 fa32 	bl	801780c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d106      	bne.n	80133bc <tcp_enqueue_flags+0x40>
 80133ae:	4b62      	ldr	r3, [pc, #392]	; (8013538 <tcp_enqueue_flags+0x1bc>)
 80133b0:	f240 4213 	movw	r2, #1043	; 0x413
 80133b4:	4963      	ldr	r1, [pc, #396]	; (8013544 <tcp_enqueue_flags+0x1c8>)
 80133b6:	4862      	ldr	r0, [pc, #392]	; (8013540 <tcp_enqueue_flags+0x1c4>)
 80133b8:	f004 fa28 	bl	801780c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80133bc:	78fb      	ldrb	r3, [r7, #3]
 80133be:	f003 0302 	and.w	r3, r3, #2
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80133c6:	2301      	movs	r3, #1
 80133c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133ca:	7ffb      	ldrb	r3, [r7, #31]
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	b2db      	uxtb	r3, r3
 80133d0:	f003 0304 	and.w	r3, r3, #4
 80133d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80133d6:	7dfb      	ldrb	r3, [r7, #23]
 80133d8:	b29b      	uxth	r3, r3
 80133da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133de:	4619      	mov	r1, r3
 80133e0:	2036      	movs	r0, #54	; 0x36
 80133e2:	f7fa fa25 	bl	800d830 <pbuf_alloc>
 80133e6:	6138      	str	r0, [r7, #16]
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d109      	bne.n	8013402 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	8b5b      	ldrh	r3, [r3, #26]
 80133f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013400:	e095      	b.n	801352e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	895a      	ldrh	r2, [r3, #10]
 8013406:	7dfb      	ldrb	r3, [r7, #23]
 8013408:	b29b      	uxth	r3, r3
 801340a:	429a      	cmp	r2, r3
 801340c:	d206      	bcs.n	801341c <tcp_enqueue_flags+0xa0>
 801340e:	4b4a      	ldr	r3, [pc, #296]	; (8013538 <tcp_enqueue_flags+0x1bc>)
 8013410:	f240 4239 	movw	r2, #1081	; 0x439
 8013414:	494c      	ldr	r1, [pc, #304]	; (8013548 <tcp_enqueue_flags+0x1cc>)
 8013416:	484a      	ldr	r0, [pc, #296]	; (8013540 <tcp_enqueue_flags+0x1c4>)
 8013418:	f004 f9f8 	bl	801780c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013420:	78fa      	ldrb	r2, [r7, #3]
 8013422:	7ffb      	ldrb	r3, [r7, #31]
 8013424:	9300      	str	r3, [sp, #0]
 8013426:	460b      	mov	r3, r1
 8013428:	6939      	ldr	r1, [r7, #16]
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7ff f918 	bl	8012660 <tcp_create_segment>
 8013430:	60f8      	str	r0, [r7, #12]
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d109      	bne.n	801344c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	8b5b      	ldrh	r3, [r3, #26]
 801343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013440:	b29a      	uxth	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013446:	f04f 33ff 	mov.w	r3, #4294967295
 801344a:	e070      	b.n	801352e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	f003 0303 	and.w	r3, r3, #3
 8013454:	2b00      	cmp	r3, #0
 8013456:	d006      	beq.n	8013466 <tcp_enqueue_flags+0xea>
 8013458:	4b37      	ldr	r3, [pc, #220]	; (8013538 <tcp_enqueue_flags+0x1bc>)
 801345a:	f240 4242 	movw	r2, #1090	; 0x442
 801345e:	493b      	ldr	r1, [pc, #236]	; (801354c <tcp_enqueue_flags+0x1d0>)
 8013460:	4837      	ldr	r0, [pc, #220]	; (8013540 <tcp_enqueue_flags+0x1c4>)
 8013462:	f004 f9d3 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	891b      	ldrh	r3, [r3, #8]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d006      	beq.n	801347c <tcp_enqueue_flags+0x100>
 801346e:	4b32      	ldr	r3, [pc, #200]	; (8013538 <tcp_enqueue_flags+0x1bc>)
 8013470:	f240 4243 	movw	r2, #1091	; 0x443
 8013474:	4936      	ldr	r1, [pc, #216]	; (8013550 <tcp_enqueue_flags+0x1d4>)
 8013476:	4832      	ldr	r0, [pc, #200]	; (8013540 <tcp_enqueue_flags+0x1c4>)
 8013478:	f004 f9c8 	bl	801780c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013480:	2b00      	cmp	r3, #0
 8013482:	d103      	bne.n	801348c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	68fa      	ldr	r2, [r7, #12]
 8013488:	66da      	str	r2, [r3, #108]	; 0x6c
 801348a:	e00d      	b.n	80134a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013490:	61bb      	str	r3, [r7, #24]
 8013492:	e002      	b.n	801349a <tcp_enqueue_flags+0x11e>
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	61bb      	str	r3, [r7, #24]
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d1f8      	bne.n	8013494 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	68fa      	ldr	r2, [r7, #12]
 80134a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80134b0:	78fb      	ldrb	r3, [r7, #3]
 80134b2:	f003 0302 	and.w	r3, r3, #2
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d104      	bne.n	80134c4 <tcp_enqueue_flags+0x148>
 80134ba:	78fb      	ldrb	r3, [r7, #3]
 80134bc:	f003 0301 	and.w	r3, r3, #1
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d004      	beq.n	80134ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80134ce:	78fb      	ldrb	r3, [r7, #3]
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	8b5b      	ldrh	r3, [r3, #26]
 80134dc:	f043 0320 	orr.w	r3, r3, #32
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fa fd16 	bl	800df1c <pbuf_clen>
 80134f0:	4603      	mov	r3, r0
 80134f2:	461a      	mov	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134fa:	4413      	add	r3, r2
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00e      	beq.n	801352c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013512:	2b00      	cmp	r3, #0
 8013514:	d10a      	bne.n	801352c <tcp_enqueue_flags+0x1b0>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801351a:	2b00      	cmp	r3, #0
 801351c:	d106      	bne.n	801352c <tcp_enqueue_flags+0x1b0>
 801351e:	4b06      	ldr	r3, [pc, #24]	; (8013538 <tcp_enqueue_flags+0x1bc>)
 8013520:	f240 4265 	movw	r2, #1125	; 0x465
 8013524:	490b      	ldr	r1, [pc, #44]	; (8013554 <tcp_enqueue_flags+0x1d8>)
 8013526:	4806      	ldr	r0, [pc, #24]	; (8013540 <tcp_enqueue_flags+0x1c4>)
 8013528:	f004 f970 	bl	801780c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	3720      	adds	r7, #32
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	0801b0d8 	.word	0x0801b0d8
 801353c:	0801b4fc 	.word	0x0801b4fc
 8013540:	0801b12c 	.word	0x0801b12c
 8013544:	0801b554 	.word	0x0801b554
 8013548:	0801b574 	.word	0x0801b574
 801354c:	0801b5b0 	.word	0x0801b5b0
 8013550:	0801b5c8 	.word	0x0801b5c8
 8013554:	0801b5f4 	.word	0x0801b5f4

08013558 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013558:	b5b0      	push	{r4, r5, r7, lr}
 801355a:	b08a      	sub	sp, #40	; 0x28
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d106      	bne.n	8013574 <tcp_output+0x1c>
 8013566:	4b9e      	ldr	r3, [pc, #632]	; (80137e0 <tcp_output+0x288>)
 8013568:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801356c:	499d      	ldr	r1, [pc, #628]	; (80137e4 <tcp_output+0x28c>)
 801356e:	489e      	ldr	r0, [pc, #632]	; (80137e8 <tcp_output+0x290>)
 8013570:	f004 f94c 	bl	801780c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	7d1b      	ldrb	r3, [r3, #20]
 8013578:	2b01      	cmp	r3, #1
 801357a:	d106      	bne.n	801358a <tcp_output+0x32>
 801357c:	4b98      	ldr	r3, [pc, #608]	; (80137e0 <tcp_output+0x288>)
 801357e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013582:	499a      	ldr	r1, [pc, #616]	; (80137ec <tcp_output+0x294>)
 8013584:	4898      	ldr	r0, [pc, #608]	; (80137e8 <tcp_output+0x290>)
 8013586:	f004 f941 	bl	801780c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801358a:	4b99      	ldr	r3, [pc, #612]	; (80137f0 <tcp_output+0x298>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	429a      	cmp	r2, r3
 8013592:	d101      	bne.n	8013598 <tcp_output+0x40>
    return ERR_OK;
 8013594:	2300      	movs	r3, #0
 8013596:	e1ce      	b.n	8013936 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135a4:	4293      	cmp	r3, r2
 80135a6:	bf28      	it	cs
 80135a8:	4613      	movcs	r3, r2
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80135b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d10b      	bne.n	80135d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	8b5b      	ldrh	r3, [r3, #26]
 80135be:	f003 0302 	and.w	r3, r3, #2
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f000 81aa 	beq.w	801391c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f000 fdcb 	bl	8014164 <tcp_send_empty_ack>
 80135ce:	4603      	mov	r3, r0
 80135d0:	e1b1      	b.n	8013936 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80135d2:	6879      	ldr	r1, [r7, #4]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	3304      	adds	r3, #4
 80135d8:	461a      	mov	r2, r3
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff f824 	bl	8012628 <tcp_route>
 80135e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d102      	bne.n	80135ee <tcp_output+0x96>
    return ERR_RTE;
 80135e8:	f06f 0303 	mvn.w	r3, #3
 80135ec:	e1a3      	b.n	8013936 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d003      	beq.n	80135fc <tcp_output+0xa4>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d111      	bne.n	8013620 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d002      	beq.n	8013608 <tcp_output+0xb0>
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	3304      	adds	r3, #4
 8013606:	e000      	b.n	801360a <tcp_output+0xb2>
 8013608:	2300      	movs	r3, #0
 801360a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d102      	bne.n	8013618 <tcp_output+0xc0>
      return ERR_RTE;
 8013612:	f06f 0303 	mvn.w	r3, #3
 8013616:	e18e      	b.n	8013936 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	4618      	mov	r0, r3
 8013628:	f7f9 f84f 	bl	800c6ca <lwip_htonl>
 801362c:	4602      	mov	r2, r0
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013636:	8912      	ldrh	r2, [r2, #8]
 8013638:	4413      	add	r3, r2
 801363a:	69ba      	ldr	r2, [r7, #24]
 801363c:	429a      	cmp	r2, r3
 801363e:	d227      	bcs.n	8013690 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013646:	461a      	mov	r2, r3
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	4293      	cmp	r3, r2
 801364c:	d114      	bne.n	8013678 <tcp_output+0x120>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013652:	2b00      	cmp	r3, #0
 8013654:	d110      	bne.n	8013678 <tcp_output+0x120>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801365c:	2b00      	cmp	r3, #0
 801365e:	d10b      	bne.n	8013678 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2200      	movs	r2, #0
 8013664:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2201      	movs	r2, #1
 801366c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	8b5b      	ldrh	r3, [r3, #26]
 801367c:	f003 0302 	and.w	r3, r3, #2
 8013680:	2b00      	cmp	r3, #0
 8013682:	f000 814d 	beq.w	8013920 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f000 fd6c 	bl	8014164 <tcp_send_empty_ack>
 801368c:	4603      	mov	r3, r0
 801368e:	e152      	b.n	8013936 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2200      	movs	r2, #0
 8013694:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801369c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801369e:	6a3b      	ldr	r3, [r7, #32]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f000 811c 	beq.w	80138de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80136a6:	e002      	b.n	80136ae <tcp_output+0x156>
 80136a8:	6a3b      	ldr	r3, [r7, #32]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	623b      	str	r3, [r7, #32]
 80136ae:	6a3b      	ldr	r3, [r7, #32]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d1f8      	bne.n	80136a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80136b6:	e112      	b.n	80138de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80136b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	899b      	ldrh	r3, [r3, #12]
 80136be:	b29b      	uxth	r3, r3
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7f8 ffed 	bl	800c6a0 <lwip_htons>
 80136c6:	4603      	mov	r3, r0
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	f003 0304 	and.w	r3, r3, #4
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d006      	beq.n	80136e0 <tcp_output+0x188>
 80136d2:	4b43      	ldr	r3, [pc, #268]	; (80137e0 <tcp_output+0x288>)
 80136d4:	f240 5236 	movw	r2, #1334	; 0x536
 80136d8:	4946      	ldr	r1, [pc, #280]	; (80137f4 <tcp_output+0x29c>)
 80136da:	4843      	ldr	r0, [pc, #268]	; (80137e8 <tcp_output+0x290>)
 80136dc:	f004 f896 	bl	801780c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d01f      	beq.n	8013728 <tcp_output+0x1d0>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	8b5b      	ldrh	r3, [r3, #26]
 80136ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d119      	bne.n	8013728 <tcp_output+0x1d0>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d00b      	beq.n	8013714 <tcp_output+0x1bc>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d110      	bne.n	8013728 <tcp_output+0x1d0>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801370a:	891a      	ldrh	r2, [r3, #8]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013710:	429a      	cmp	r2, r3
 8013712:	d209      	bcs.n	8013728 <tcp_output+0x1d0>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801371a:	2b00      	cmp	r3, #0
 801371c:	d004      	beq.n	8013728 <tcp_output+0x1d0>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013724:	2b0f      	cmp	r3, #15
 8013726:	d901      	bls.n	801372c <tcp_output+0x1d4>
 8013728:	2301      	movs	r3, #1
 801372a:	e000      	b.n	801372e <tcp_output+0x1d6>
 801372c:	2300      	movs	r3, #0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d106      	bne.n	8013740 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	8b5b      	ldrh	r3, [r3, #26]
 8013736:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801373a:	2b00      	cmp	r3, #0
 801373c:	f000 80e4 	beq.w	8013908 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	7d1b      	ldrb	r3, [r3, #20]
 8013744:	2b02      	cmp	r3, #2
 8013746:	d00d      	beq.n	8013764 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	899b      	ldrh	r3, [r3, #12]
 801374e:	b29c      	uxth	r4, r3
 8013750:	2010      	movs	r0, #16
 8013752:	f7f8 ffa5 	bl	800c6a0 <lwip_htons>
 8013756:	4603      	mov	r3, r0
 8013758:	461a      	mov	r2, r3
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	4322      	orrs	r2, r4
 8013760:	b292      	uxth	r2, r2
 8013762:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013764:	697a      	ldr	r2, [r7, #20]
 8013766:	6879      	ldr	r1, [r7, #4]
 8013768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801376a:	f000 f909 	bl	8013980 <tcp_output_segment>
 801376e:	4603      	mov	r3, r0
 8013770:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d009      	beq.n	801378e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	8b5b      	ldrh	r3, [r3, #26]
 801377e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013782:	b29a      	uxth	r2, r3
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	835a      	strh	r2, [r3, #26]
      return err;
 8013788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801378c:	e0d3      	b.n	8013936 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	7d1b      	ldrb	r3, [r3, #20]
 801379a:	2b02      	cmp	r3, #2
 801379c:	d006      	beq.n	80137ac <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	8b5b      	ldrh	r3, [r3, #26]
 80137a2:	f023 0303 	bic.w	r3, r3, #3
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80137ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7f8 ff89 	bl	800c6ca <lwip_htonl>
 80137b8:	4604      	mov	r4, r0
 80137ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137bc:	891b      	ldrh	r3, [r3, #8]
 80137be:	461d      	mov	r5, r3
 80137c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	899b      	ldrh	r3, [r3, #12]
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f8 ff69 	bl	800c6a0 <lwip_htons>
 80137ce:	4603      	mov	r3, r0
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	f003 0303 	and.w	r3, r3, #3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00e      	beq.n	80137f8 <tcp_output+0x2a0>
 80137da:	2301      	movs	r3, #1
 80137dc:	e00d      	b.n	80137fa <tcp_output+0x2a2>
 80137de:	bf00      	nop
 80137e0:	0801b0d8 	.word	0x0801b0d8
 80137e4:	0801b61c 	.word	0x0801b61c
 80137e8:	0801b12c 	.word	0x0801b12c
 80137ec:	0801b634 	.word	0x0801b634
 80137f0:	2001150c 	.word	0x2001150c
 80137f4:	0801b65c 	.word	0x0801b65c
 80137f8:	2300      	movs	r3, #0
 80137fa:	442b      	add	r3, r5
 80137fc:	4423      	add	r3, r4
 80137fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	1ad3      	subs	r3, r2, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	da02      	bge.n	8013812 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	68ba      	ldr	r2, [r7, #8]
 8013810:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	461c      	mov	r4, r3
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	899b      	ldrh	r3, [r3, #12]
 801381e:	b29b      	uxth	r3, r3
 8013820:	4618      	mov	r0, r3
 8013822:	f7f8 ff3d 	bl	800c6a0 <lwip_htons>
 8013826:	4603      	mov	r3, r0
 8013828:	b2db      	uxtb	r3, r3
 801382a:	f003 0303 	and.w	r3, r3, #3
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <tcp_output+0x2de>
 8013832:	2301      	movs	r3, #1
 8013834:	e000      	b.n	8013838 <tcp_output+0x2e0>
 8013836:	2300      	movs	r3, #0
 8013838:	4423      	add	r3, r4
 801383a:	2b00      	cmp	r3, #0
 801383c:	d049      	beq.n	80138d2 <tcp_output+0x37a>
      seg->next = NULL;
 801383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013848:	2b00      	cmp	r3, #0
 801384a:	d105      	bne.n	8013858 <tcp_output+0x300>
        pcb->unacked = seg;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013850:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013854:	623b      	str	r3, [r7, #32]
 8013856:	e03f      	b.n	80138d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385a:	68db      	ldr	r3, [r3, #12]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	4618      	mov	r0, r3
 8013860:	f7f8 ff33 	bl	800c6ca <lwip_htonl>
 8013864:	4604      	mov	r4, r0
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	4618      	mov	r0, r3
 801386e:	f7f8 ff2c 	bl	800c6ca <lwip_htonl>
 8013872:	4603      	mov	r3, r0
 8013874:	1ae3      	subs	r3, r4, r3
 8013876:	2b00      	cmp	r3, #0
 8013878:	da24      	bge.n	80138c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	3370      	adds	r3, #112	; 0x70
 801387e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013880:	e002      	b.n	8013888 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d011      	beq.n	80138b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	f7f8 ff16 	bl	800c6ca <lwip_htonl>
 801389e:	4604      	mov	r4, r0
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7f8 ff0f 	bl	800c6ca <lwip_htonl>
 80138ac:	4603      	mov	r3, r0
 80138ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	dbe6      	blt.n	8013882 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138c0:	601a      	str	r2, [r3, #0]
 80138c2:	e009      	b.n	80138d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80138c4:	6a3b      	ldr	r3, [r7, #32]
 80138c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80138ca:	6a3b      	ldr	r3, [r7, #32]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	623b      	str	r3, [r7, #32]
 80138d0:	e002      	b.n	80138d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80138d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138d4:	f7fb ff1b 	bl	800f70e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80138de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d012      	beq.n	801390a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80138e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f8 feed 	bl	800c6ca <lwip_htonl>
 80138f0:	4602      	mov	r2, r0
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138f6:	1ad3      	subs	r3, r2, r3
 80138f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138fa:	8912      	ldrh	r2, [r2, #8]
 80138fc:	4413      	add	r3, r2
  while (seg != NULL &&
 80138fe:	69ba      	ldr	r2, [r7, #24]
 8013900:	429a      	cmp	r2, r3
 8013902:	f4bf aed9 	bcs.w	80136b8 <tcp_output+0x160>
 8013906:	e000      	b.n	801390a <tcp_output+0x3b2>
      break;
 8013908:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801390e:	2b00      	cmp	r3, #0
 8013910:	d108      	bne.n	8013924 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2200      	movs	r2, #0
 8013916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801391a:	e004      	b.n	8013926 <tcp_output+0x3ce>
    goto output_done;
 801391c:	bf00      	nop
 801391e:	e002      	b.n	8013926 <tcp_output+0x3ce>
    goto output_done;
 8013920:	bf00      	nop
 8013922:	e000      	b.n	8013926 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013924:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	8b5b      	ldrh	r3, [r3, #26]
 801392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801392e:	b29a      	uxth	r2, r3
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013934:	2300      	movs	r3, #0
}
 8013936:	4618      	mov	r0, r3
 8013938:	3728      	adds	r7, #40	; 0x28
 801393a:	46bd      	mov	sp, r7
 801393c:	bdb0      	pop	{r4, r5, r7, pc}
 801393e:	bf00      	nop

08013940 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d106      	bne.n	801395c <tcp_output_segment_busy+0x1c>
 801394e:	4b09      	ldr	r3, [pc, #36]	; (8013974 <tcp_output_segment_busy+0x34>)
 8013950:	f240 529a 	movw	r2, #1434	; 0x59a
 8013954:	4908      	ldr	r1, [pc, #32]	; (8013978 <tcp_output_segment_busy+0x38>)
 8013956:	4809      	ldr	r0, [pc, #36]	; (801397c <tcp_output_segment_busy+0x3c>)
 8013958:	f003 ff58 	bl	801780c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	7b9b      	ldrb	r3, [r3, #14]
 8013962:	2b01      	cmp	r3, #1
 8013964:	d001      	beq.n	801396a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013966:	2301      	movs	r3, #1
 8013968:	e000      	b.n	801396c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801396a:	2300      	movs	r3, #0
}
 801396c:	4618      	mov	r0, r3
 801396e:	3708      	adds	r7, #8
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	0801b0d8 	.word	0x0801b0d8
 8013978:	0801b674 	.word	0x0801b674
 801397c:	0801b12c 	.word	0x0801b12c

08013980 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013980:	b5b0      	push	{r4, r5, r7, lr}
 8013982:	b08c      	sub	sp, #48	; 0x30
 8013984:	af04      	add	r7, sp, #16
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <tcp_output_segment+0x20>
 8013992:	4b63      	ldr	r3, [pc, #396]	; (8013b20 <tcp_output_segment+0x1a0>)
 8013994:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013998:	4962      	ldr	r1, [pc, #392]	; (8013b24 <tcp_output_segment+0x1a4>)
 801399a:	4863      	ldr	r0, [pc, #396]	; (8013b28 <tcp_output_segment+0x1a8>)
 801399c:	f003 ff36 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d106      	bne.n	80139b4 <tcp_output_segment+0x34>
 80139a6:	4b5e      	ldr	r3, [pc, #376]	; (8013b20 <tcp_output_segment+0x1a0>)
 80139a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80139ac:	495f      	ldr	r1, [pc, #380]	; (8013b2c <tcp_output_segment+0x1ac>)
 80139ae:	485e      	ldr	r0, [pc, #376]	; (8013b28 <tcp_output_segment+0x1a8>)
 80139b0:	f003 ff2c 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d106      	bne.n	80139c8 <tcp_output_segment+0x48>
 80139ba:	4b59      	ldr	r3, [pc, #356]	; (8013b20 <tcp_output_segment+0x1a0>)
 80139bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80139c0:	495b      	ldr	r1, [pc, #364]	; (8013b30 <tcp_output_segment+0x1b0>)
 80139c2:	4859      	ldr	r0, [pc, #356]	; (8013b28 <tcp_output_segment+0x1a8>)
 80139c4:	f003 ff22 	bl	801780c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f7ff ffb9 	bl	8013940 <tcp_output_segment_busy>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d001      	beq.n	80139d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	e09f      	b.n	8013b18 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	68dc      	ldr	r4, [r3, #12]
 80139e0:	4610      	mov	r0, r2
 80139e2:	f7f8 fe72 	bl	800c6ca <lwip_htonl>
 80139e6:	4603      	mov	r3, r0
 80139e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	68dc      	ldr	r4, [r3, #12]
 80139f2:	4610      	mov	r0, r2
 80139f4:	f7f8 fe54 	bl	800c6a0 <lwip_htons>
 80139f8:	4603      	mov	r3, r0
 80139fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013a04:	441a      	add	r2, r3
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	3314      	adds	r3, #20
 8013a10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	7a9b      	ldrb	r3, [r3, #10]
 8013a16:	f003 0301 	and.w	r3, r3, #1
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d015      	beq.n	8013a4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	3304      	adds	r3, #4
 8013a22:	461a      	mov	r2, r3
 8013a24:	6879      	ldr	r1, [r7, #4]
 8013a26:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8013a2a:	f7fc fa35 	bl	800fe98 <tcp_eff_send_mss_netif>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013a32:	8b7b      	ldrh	r3, [r7, #26]
 8013a34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7f8 fe46 	bl	800c6ca <lwip_htonl>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	3304      	adds	r3, #4
 8013a48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	da02      	bge.n	8013a5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	2200      	movs	r2, #0
 8013a58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d10c      	bne.n	8013a7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a62:	4b34      	ldr	r3, [pc, #208]	; (8013b34 <tcp_output_segment+0x1b4>)
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f8 fe2a 	bl	800c6ca <lwip_htonl>
 8013a76:	4602      	mov	r2, r0
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	68da      	ldr	r2, [r3, #12]
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	8959      	ldrh	r1, [r3, #10]
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	8b3a      	ldrh	r2, [r7, #24]
 8013a96:	1a8a      	subs	r2, r1, r2
 8013a98:	b292      	uxth	r2, r2
 8013a9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	8919      	ldrh	r1, [r3, #8]
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	8b3a      	ldrh	r2, [r7, #24]
 8013aa8:	1a8a      	subs	r2, r1, r2
 8013aaa:	b292      	uxth	r2, r2
 8013aac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	68fa      	ldr	r2, [r7, #12]
 8013ab4:	68d2      	ldr	r2, [r2, #12]
 8013ab6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	68db      	ldr	r3, [r3, #12]
 8013abc:	2200      	movs	r2, #0
 8013abe:	741a      	strb	r2, [r3, #16]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	68db      	ldr	r3, [r3, #12]
 8013ac8:	f103 0214 	add.w	r2, r3, #20
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	7a9b      	ldrb	r3, [r3, #10]
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	f003 0304 	and.w	r3, r3, #4
 8013ad6:	4413      	add	r3, r2
 8013ad8:	69fa      	ldr	r2, [r7, #28]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d006      	beq.n	8013aec <tcp_output_segment+0x16c>
 8013ade:	4b10      	ldr	r3, [pc, #64]	; (8013b20 <tcp_output_segment+0x1a0>)
 8013ae0:	f240 621c 	movw	r2, #1564	; 0x61c
 8013ae4:	4914      	ldr	r1, [pc, #80]	; (8013b38 <tcp_output_segment+0x1b8>)
 8013ae6:	4810      	ldr	r0, [pc, #64]	; (8013b28 <tcp_output_segment+0x1a8>)
 8013ae8:	f003 fe90 	bl	801780c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6858      	ldr	r0, [r3, #4]
 8013af0:	68b9      	ldr	r1, [r7, #8]
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	1d1c      	adds	r4, r3, #4
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	7add      	ldrb	r5, [r3, #11]
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	7a9b      	ldrb	r3, [r3, #10]
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	9202      	str	r2, [sp, #8]
 8013b02:	2206      	movs	r2, #6
 8013b04:	9201      	str	r2, [sp, #4]
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	462b      	mov	r3, r5
 8013b0a:	4622      	mov	r2, r4
 8013b0c:	f002 fbac 	bl	8016268 <ip4_output_if>
 8013b10:	4603      	mov	r3, r0
 8013b12:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3720      	adds	r7, #32
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8013b20:	0801b0d8 	.word	0x0801b0d8
 8013b24:	0801b69c 	.word	0x0801b69c
 8013b28:	0801b12c 	.word	0x0801b12c
 8013b2c:	0801b6bc 	.word	0x0801b6bc
 8013b30:	0801b6dc 	.word	0x0801b6dc
 8013b34:	200114fc 	.word	0x200114fc
 8013b38:	0801b700 	.word	0x0801b700

08013b3c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013b3c:	b5b0      	push	{r4, r5, r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d106      	bne.n	8013b58 <tcp_rexmit_rto_prepare+0x1c>
 8013b4a:	4b31      	ldr	r3, [pc, #196]	; (8013c10 <tcp_rexmit_rto_prepare+0xd4>)
 8013b4c:	f240 6263 	movw	r2, #1635	; 0x663
 8013b50:	4930      	ldr	r1, [pc, #192]	; (8013c14 <tcp_rexmit_rto_prepare+0xd8>)
 8013b52:	4831      	ldr	r0, [pc, #196]	; (8013c18 <tcp_rexmit_rto_prepare+0xdc>)
 8013b54:	f003 fe5a 	bl	801780c <iprintf>

  if (pcb->unacked == NULL) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d102      	bne.n	8013b66 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b60:	f06f 0305 	mvn.w	r3, #5
 8013b64:	e050      	b.n	8013c08 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b6a:	60fb      	str	r3, [r7, #12]
 8013b6c:	e00b      	b.n	8013b86 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b6e:	68f8      	ldr	r0, [r7, #12]
 8013b70:	f7ff fee6 	bl	8013940 <tcp_output_segment_busy>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d002      	beq.n	8013b80 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b7a:	f06f 0305 	mvn.w	r3, #5
 8013b7e:	e043      	b.n	8013c08 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	60fb      	str	r3, [r7, #12]
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d1ef      	bne.n	8013b6e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b8e:	68f8      	ldr	r0, [r7, #12]
 8013b90:	f7ff fed6 	bl	8013940 <tcp_output_segment_busy>
 8013b94:	4603      	mov	r3, r0
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d002      	beq.n	8013ba0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b9a:	f06f 0305 	mvn.w	r3, #5
 8013b9e:	e033      	b.n	8013c08 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	8b5b      	ldrh	r3, [r3, #26]
 8013bba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7f8 fd7d 	bl	800c6ca <lwip_htonl>
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	891b      	ldrh	r3, [r3, #8]
 8013bd6:	461d      	mov	r5, r3
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	899b      	ldrh	r3, [r3, #12]
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7f8 fd5d 	bl	800c6a0 <lwip_htons>
 8013be6:	4603      	mov	r3, r0
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	f003 0303 	and.w	r3, r3, #3
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d001      	beq.n	8013bf6 <tcp_rexmit_rto_prepare+0xba>
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e000      	b.n	8013bf8 <tcp_rexmit_rto_prepare+0xbc>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	442b      	add	r3, r5
 8013bfa:	18e2      	adds	r2, r4, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2200      	movs	r2, #0
 8013c04:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013c06:	2300      	movs	r3, #0
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3710      	adds	r7, #16
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8013c10:	0801b0d8 	.word	0x0801b0d8
 8013c14:	0801b714 	.word	0x0801b714
 8013c18:	0801b12c 	.word	0x0801b12c

08013c1c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d106      	bne.n	8013c38 <tcp_rexmit_rto_commit+0x1c>
 8013c2a:	4b0d      	ldr	r3, [pc, #52]	; (8013c60 <tcp_rexmit_rto_commit+0x44>)
 8013c2c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c30:	490c      	ldr	r1, [pc, #48]	; (8013c64 <tcp_rexmit_rto_commit+0x48>)
 8013c32:	480d      	ldr	r0, [pc, #52]	; (8013c68 <tcp_rexmit_rto_commit+0x4c>)
 8013c34:	f003 fdea 	bl	801780c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c3e:	2bff      	cmp	r3, #255	; 0xff
 8013c40:	d007      	beq.n	8013c52 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c48:	3301      	adds	r3, #1
 8013c4a:	b2da      	uxtb	r2, r3
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7ff fc80 	bl	8013558 <tcp_output>
}
 8013c58:	bf00      	nop
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	0801b0d8 	.word	0x0801b0d8
 8013c64:	0801b738 	.word	0x0801b738
 8013c68:	0801b12c 	.word	0x0801b12c

08013c6c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <tcp_rexmit_rto+0x1c>
 8013c7a:	4b0a      	ldr	r3, [pc, #40]	; (8013ca4 <tcp_rexmit_rto+0x38>)
 8013c7c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c80:	4909      	ldr	r1, [pc, #36]	; (8013ca8 <tcp_rexmit_rto+0x3c>)
 8013c82:	480a      	ldr	r0, [pc, #40]	; (8013cac <tcp_rexmit_rto+0x40>)
 8013c84:	f003 fdc2 	bl	801780c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7ff ff57 	bl	8013b3c <tcp_rexmit_rto_prepare>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d102      	bne.n	8013c9a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7ff ffc1 	bl	8013c1c <tcp_rexmit_rto_commit>
  }
}
 8013c9a:	bf00      	nop
 8013c9c:	3708      	adds	r7, #8
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	0801b0d8 	.word	0x0801b0d8
 8013ca8:	0801b75c 	.word	0x0801b75c
 8013cac:	0801b12c 	.word	0x0801b12c

08013cb0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013cb0:	b590      	push	{r4, r7, lr}
 8013cb2:	b085      	sub	sp, #20
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d106      	bne.n	8013ccc <tcp_rexmit+0x1c>
 8013cbe:	4b2f      	ldr	r3, [pc, #188]	; (8013d7c <tcp_rexmit+0xcc>)
 8013cc0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013cc4:	492e      	ldr	r1, [pc, #184]	; (8013d80 <tcp_rexmit+0xd0>)
 8013cc6:	482f      	ldr	r0, [pc, #188]	; (8013d84 <tcp_rexmit+0xd4>)
 8013cc8:	f003 fda0 	bl	801780c <iprintf>

  if (pcb->unacked == NULL) {
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013cd4:	f06f 0305 	mvn.w	r3, #5
 8013cd8:	e04c      	b.n	8013d74 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cde:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013ce0:	68b8      	ldr	r0, [r7, #8]
 8013ce2:	f7ff fe2d 	bl	8013940 <tcp_output_segment_busy>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d002      	beq.n	8013cf2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013cec:	f06f 0305 	mvn.w	r3, #5
 8013cf0:	e040      	b.n	8013d74 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	336c      	adds	r3, #108	; 0x6c
 8013cfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d00:	e002      	b.n	8013d08 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d011      	beq.n	8013d34 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	68db      	ldr	r3, [r3, #12]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7f8 fcd6 	bl	800c6ca <lwip_htonl>
 8013d1e:	4604      	mov	r4, r0
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7f8 fccf 	bl	800c6ca <lwip_htonl>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	dbe6      	blt.n	8013d02 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	68ba      	ldr	r2, [r7, #8]
 8013d40:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d103      	bne.n	8013d52 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d58:	2bff      	cmp	r3, #255	; 0xff
 8013d5a:	d007      	beq.n	8013d6c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d62:	3301      	adds	r3, #1
 8013d64:	b2da      	uxtb	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d72:	2300      	movs	r3, #0
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3714      	adds	r7, #20
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd90      	pop	{r4, r7, pc}
 8013d7c:	0801b0d8 	.word	0x0801b0d8
 8013d80:	0801b778 	.word	0x0801b778
 8013d84:	0801b12c 	.word	0x0801b12c

08013d88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d106      	bne.n	8013da4 <tcp_rexmit_fast+0x1c>
 8013d96:	4b2a      	ldr	r3, [pc, #168]	; (8013e40 <tcp_rexmit_fast+0xb8>)
 8013d98:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d9c:	4929      	ldr	r1, [pc, #164]	; (8013e44 <tcp_rexmit_fast+0xbc>)
 8013d9e:	482a      	ldr	r0, [pc, #168]	; (8013e48 <tcp_rexmit_fast+0xc0>)
 8013da0:	f003 fd34 	bl	801780c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d045      	beq.n	8013e38 <tcp_rexmit_fast+0xb0>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	8b5b      	ldrh	r3, [r3, #26]
 8013db0:	f003 0304 	and.w	r3, r3, #4
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d13f      	bne.n	8013e38 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7ff ff79 	bl	8013cb0 <tcp_rexmit>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d139      	bne.n	8013e38 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	bf28      	it	cs
 8013dd4:	4613      	movcs	r3, r2
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	da00      	bge.n	8013dde <tcp_rexmit_fast+0x56>
 8013ddc:	3301      	adds	r3, #1
 8013dde:	105b      	asrs	r3, r3, #1
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013dee:	461a      	mov	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013df4:	005b      	lsls	r3, r3, #1
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d206      	bcs.n	8013e08 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dfe:	005b      	lsls	r3, r3, #1
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e12:	4619      	mov	r1, r3
 8013e14:	0049      	lsls	r1, r1, #1
 8013e16:	440b      	add	r3, r1
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	4413      	add	r3, r2
 8013e1c:	b29a      	uxth	r2, r3
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	8b5b      	ldrh	r3, [r3, #26]
 8013e28:	f043 0304 	orr.w	r3, r3, #4
 8013e2c:	b29a      	uxth	r2, r3
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2200      	movs	r2, #0
 8013e36:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013e38:	bf00      	nop
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	0801b0d8 	.word	0x0801b0d8
 8013e44:	0801b790 	.word	0x0801b790
 8013e48:	0801b12c 	.word	0x0801b12c

08013e4c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b086      	sub	sp, #24
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	60f8      	str	r0, [r7, #12]
 8013e54:	607b      	str	r3, [r7, #4]
 8013e56:	460b      	mov	r3, r1
 8013e58:	817b      	strh	r3, [r7, #10]
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e5e:	897a      	ldrh	r2, [r7, #10]
 8013e60:	893b      	ldrh	r3, [r7, #8]
 8013e62:	4413      	add	r3, r2
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	3314      	adds	r3, #20
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e6e:	4619      	mov	r1, r3
 8013e70:	2022      	movs	r0, #34	; 0x22
 8013e72:	f7f9 fcdd 	bl	800d830 <pbuf_alloc>
 8013e76:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d04d      	beq.n	8013f1a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e7e:	897b      	ldrh	r3, [r7, #10]
 8013e80:	3313      	adds	r3, #19
 8013e82:	697a      	ldr	r2, [r7, #20]
 8013e84:	8952      	ldrh	r2, [r2, #10]
 8013e86:	4293      	cmp	r3, r2
 8013e88:	db06      	blt.n	8013e98 <tcp_output_alloc_header_common+0x4c>
 8013e8a:	4b26      	ldr	r3, [pc, #152]	; (8013f24 <tcp_output_alloc_header_common+0xd8>)
 8013e8c:	f240 7223 	movw	r2, #1827	; 0x723
 8013e90:	4925      	ldr	r1, [pc, #148]	; (8013f28 <tcp_output_alloc_header_common+0xdc>)
 8013e92:	4826      	ldr	r0, [pc, #152]	; (8013f2c <tcp_output_alloc_header_common+0xe0>)
 8013e94:	f003 fcba 	bl	801780c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e9e:	8c3b      	ldrh	r3, [r7, #32]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7f8 fbfd 	bl	800c6a0 <lwip_htons>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7f8 fbf5 	bl	800c6a0 <lwip_htons>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	461a      	mov	r2, r3
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f7f8 fc00 	bl	800c6ca <lwip_htonl>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013ed0:	897b      	ldrh	r3, [r7, #10]
 8013ed2:	089b      	lsrs	r3, r3, #2
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	3305      	adds	r3, #5
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	031b      	lsls	r3, r3, #12
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	b29b      	uxth	r3, r3
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7f8 fbd9 	bl	800c6a0 <lwip_htons>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013ef6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7f8 fbd1 	bl	800c6a0 <lwip_htons>
 8013efe:	4603      	mov	r3, r0
 8013f00:	461a      	mov	r2, r3
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	741a      	strb	r2, [r3, #16]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	2200      	movs	r2, #0
 8013f14:	749a      	strb	r2, [r3, #18]
 8013f16:	2200      	movs	r2, #0
 8013f18:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013f1a:	697b      	ldr	r3, [r7, #20]
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3718      	adds	r7, #24
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	0801b0d8 	.word	0x0801b0d8
 8013f28:	0801b7b0 	.word	0x0801b7b0
 8013f2c:	0801b12c 	.word	0x0801b12c

08013f30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013f30:	b5b0      	push	{r4, r5, r7, lr}
 8013f32:	b08a      	sub	sp, #40	; 0x28
 8013f34:	af04      	add	r7, sp, #16
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	607b      	str	r3, [r7, #4]
 8013f3a:	460b      	mov	r3, r1
 8013f3c:	817b      	strh	r3, [r7, #10]
 8013f3e:	4613      	mov	r3, r2
 8013f40:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d106      	bne.n	8013f56 <tcp_output_alloc_header+0x26>
 8013f48:	4b15      	ldr	r3, [pc, #84]	; (8013fa0 <tcp_output_alloc_header+0x70>)
 8013f4a:	f240 7242 	movw	r2, #1858	; 0x742
 8013f4e:	4915      	ldr	r1, [pc, #84]	; (8013fa4 <tcp_output_alloc_header+0x74>)
 8013f50:	4815      	ldr	r0, [pc, #84]	; (8013fa8 <tcp_output_alloc_header+0x78>)
 8013f52:	f003 fc5b 	bl	801780c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	8adb      	ldrh	r3, [r3, #22]
 8013f5e:	68fa      	ldr	r2, [r7, #12]
 8013f60:	8b12      	ldrh	r2, [r2, #24]
 8013f62:	68f9      	ldr	r1, [r7, #12]
 8013f64:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f66:	893d      	ldrh	r5, [r7, #8]
 8013f68:	897c      	ldrh	r4, [r7, #10]
 8013f6a:	9103      	str	r1, [sp, #12]
 8013f6c:	2110      	movs	r1, #16
 8013f6e:	9102      	str	r1, [sp, #8]
 8013f70:	9201      	str	r2, [sp, #4]
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	462a      	mov	r2, r5
 8013f78:	4621      	mov	r1, r4
 8013f7a:	f7ff ff67 	bl	8013e4c <tcp_output_alloc_header_common>
 8013f7e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d006      	beq.n	8013f94 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f8a:	68fa      	ldr	r2, [r7, #12]
 8013f8c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f8e:	441a      	add	r2, r3
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f94:	697b      	ldr	r3, [r7, #20]
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3718      	adds	r7, #24
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	0801b0d8 	.word	0x0801b0d8
 8013fa4:	0801b7e0 	.word	0x0801b7e0
 8013fa8:	0801b12c 	.word	0x0801b12c

08013fac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b088      	sub	sp, #32
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	4611      	mov	r1, r2
 8013fb8:	461a      	mov	r2, r3
 8013fba:	460b      	mov	r3, r1
 8013fbc:	71fb      	strb	r3, [r7, #7]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d106      	bne.n	8013fda <tcp_output_fill_options+0x2e>
 8013fcc:	4b13      	ldr	r3, [pc, #76]	; (801401c <tcp_output_fill_options+0x70>)
 8013fce:	f240 7256 	movw	r2, #1878	; 0x756
 8013fd2:	4913      	ldr	r1, [pc, #76]	; (8014020 <tcp_output_fill_options+0x74>)
 8013fd4:	4813      	ldr	r0, [pc, #76]	; (8014024 <tcp_output_fill_options+0x78>)
 8013fd6:	f003 fc19 	bl	801780c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	3314      	adds	r3, #20
 8013fe4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	f103 0214 	add.w	r2, r3, #20
 8013fec:	8bfb      	ldrh	r3, [r7, #30]
 8013fee:	009b      	lsls	r3, r3, #2
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	79fb      	ldrb	r3, [r7, #7]
 8013ff4:	009b      	lsls	r3, r3, #2
 8013ff6:	f003 0304 	and.w	r3, r3, #4
 8013ffa:	440b      	add	r3, r1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	697a      	ldr	r2, [r7, #20]
 8014000:	429a      	cmp	r2, r3
 8014002:	d006      	beq.n	8014012 <tcp_output_fill_options+0x66>
 8014004:	4b05      	ldr	r3, [pc, #20]	; (801401c <tcp_output_fill_options+0x70>)
 8014006:	f240 7275 	movw	r2, #1909	; 0x775
 801400a:	4907      	ldr	r1, [pc, #28]	; (8014028 <tcp_output_fill_options+0x7c>)
 801400c:	4805      	ldr	r0, [pc, #20]	; (8014024 <tcp_output_fill_options+0x78>)
 801400e:	f003 fbfd 	bl	801780c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014012:	bf00      	nop
 8014014:	3720      	adds	r7, #32
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	0801b0d8 	.word	0x0801b0d8
 8014020:	0801b808 	.word	0x0801b808
 8014024:	0801b12c 	.word	0x0801b12c
 8014028:	0801b700 	.word	0x0801b700

0801402c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b08a      	sub	sp, #40	; 0x28
 8014030:	af04      	add	r7, sp, #16
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
 8014038:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d106      	bne.n	801404e <tcp_output_control_segment+0x22>
 8014040:	4b1c      	ldr	r3, [pc, #112]	; (80140b4 <tcp_output_control_segment+0x88>)
 8014042:	f240 7287 	movw	r2, #1927	; 0x787
 8014046:	491c      	ldr	r1, [pc, #112]	; (80140b8 <tcp_output_control_segment+0x8c>)
 8014048:	481c      	ldr	r0, [pc, #112]	; (80140bc <tcp_output_control_segment+0x90>)
 801404a:	f003 fbdf 	bl	801780c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801404e:	683a      	ldr	r2, [r7, #0]
 8014050:	6879      	ldr	r1, [r7, #4]
 8014052:	68f8      	ldr	r0, [r7, #12]
 8014054:	f7fe fae8 	bl	8012628 <tcp_route>
 8014058:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014060:	23fc      	movs	r3, #252	; 0xfc
 8014062:	75fb      	strb	r3, [r7, #23]
 8014064:	e01c      	b.n	80140a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d006      	beq.n	801407a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	7adb      	ldrb	r3, [r3, #11]
 8014070:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	7a9b      	ldrb	r3, [r3, #10]
 8014076:	757b      	strb	r3, [r7, #21]
 8014078:	e003      	b.n	8014082 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801407a:	23ff      	movs	r3, #255	; 0xff
 801407c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014082:	7dba      	ldrb	r2, [r7, #22]
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	9302      	str	r3, [sp, #8]
 8014088:	2306      	movs	r3, #6
 801408a:	9301      	str	r3, [sp, #4]
 801408c:	7d7b      	ldrb	r3, [r7, #21]
 801408e:	9300      	str	r3, [sp, #0]
 8014090:	4613      	mov	r3, r2
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	6879      	ldr	r1, [r7, #4]
 8014096:	68b8      	ldr	r0, [r7, #8]
 8014098:	f002 f8e6 	bl	8016268 <ip4_output_if>
 801409c:	4603      	mov	r3, r0
 801409e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80140a0:	68b8      	ldr	r0, [r7, #8]
 80140a2:	f7f9 fead 	bl	800de00 <pbuf_free>
  return err;
 80140a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3718      	adds	r7, #24
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop
 80140b4:	0801b0d8 	.word	0x0801b0d8
 80140b8:	0801b830 	.word	0x0801b830
 80140bc:	0801b12c 	.word	0x0801b12c

080140c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80140c0:	b590      	push	{r4, r7, lr}
 80140c2:	b08b      	sub	sp, #44	; 0x2c
 80140c4:	af04      	add	r7, sp, #16
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
 80140cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d106      	bne.n	80140e2 <tcp_rst+0x22>
 80140d4:	4b1f      	ldr	r3, [pc, #124]	; (8014154 <tcp_rst+0x94>)
 80140d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80140da:	491f      	ldr	r1, [pc, #124]	; (8014158 <tcp_rst+0x98>)
 80140dc:	481f      	ldr	r0, [pc, #124]	; (801415c <tcp_rst+0x9c>)
 80140de:	f003 fb95 	bl	801780c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80140e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d106      	bne.n	80140f6 <tcp_rst+0x36>
 80140e8:	4b1a      	ldr	r3, [pc, #104]	; (8014154 <tcp_rst+0x94>)
 80140ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80140ee:	491c      	ldr	r1, [pc, #112]	; (8014160 <tcp_rst+0xa0>)
 80140f0:	481a      	ldr	r0, [pc, #104]	; (801415c <tcp_rst+0x9c>)
 80140f2:	f003 fb8b 	bl	801780c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140f6:	2300      	movs	r3, #0
 80140f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80140fa:	f24d 0316 	movw	r3, #53270	; 0xd016
 80140fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014100:	7dfb      	ldrb	r3, [r7, #23]
 8014102:	b29c      	uxth	r4, r3
 8014104:	68b8      	ldr	r0, [r7, #8]
 8014106:	f7f8 fae0 	bl	800c6ca <lwip_htonl>
 801410a:	4602      	mov	r2, r0
 801410c:	8abb      	ldrh	r3, [r7, #20]
 801410e:	9303      	str	r3, [sp, #12]
 8014110:	2314      	movs	r3, #20
 8014112:	9302      	str	r3, [sp, #8]
 8014114:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	4613      	mov	r3, r2
 801411e:	2200      	movs	r2, #0
 8014120:	4621      	mov	r1, r4
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff fe92 	bl	8013e4c <tcp_output_alloc_header_common>
 8014128:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d00c      	beq.n	801414a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014130:	7dfb      	ldrb	r3, [r7, #23]
 8014132:	2200      	movs	r2, #0
 8014134:	6939      	ldr	r1, [r7, #16]
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f7ff ff38 	bl	8013fac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801413e:	683a      	ldr	r2, [r7, #0]
 8014140:	6939      	ldr	r1, [r7, #16]
 8014142:	68f8      	ldr	r0, [r7, #12]
 8014144:	f7ff ff72 	bl	801402c <tcp_output_control_segment>
 8014148:	e000      	b.n	801414c <tcp_rst+0x8c>
    return;
 801414a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801414c:	371c      	adds	r7, #28
 801414e:	46bd      	mov	sp, r7
 8014150:	bd90      	pop	{r4, r7, pc}
 8014152:	bf00      	nop
 8014154:	0801b0d8 	.word	0x0801b0d8
 8014158:	0801b85c 	.word	0x0801b85c
 801415c:	0801b12c 	.word	0x0801b12c
 8014160:	0801b878 	.word	0x0801b878

08014164 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014164:	b590      	push	{r4, r7, lr}
 8014166:	b087      	sub	sp, #28
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801416c:	2300      	movs	r3, #0
 801416e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014170:	2300      	movs	r3, #0
 8014172:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d106      	bne.n	8014188 <tcp_send_empty_ack+0x24>
 801417a:	4b28      	ldr	r3, [pc, #160]	; (801421c <tcp_send_empty_ack+0xb8>)
 801417c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014180:	4927      	ldr	r1, [pc, #156]	; (8014220 <tcp_send_empty_ack+0xbc>)
 8014182:	4828      	ldr	r0, [pc, #160]	; (8014224 <tcp_send_empty_ack+0xc0>)
 8014184:	f003 fb42 	bl	801780c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014188:	7dfb      	ldrb	r3, [r7, #23]
 801418a:	009b      	lsls	r3, r3, #2
 801418c:	b2db      	uxtb	r3, r3
 801418e:	f003 0304 	and.w	r3, r3, #4
 8014192:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014194:	7d7b      	ldrb	r3, [r7, #21]
 8014196:	b29c      	uxth	r4, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801419c:	4618      	mov	r0, r3
 801419e:	f7f8 fa94 	bl	800c6ca <lwip_htonl>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2200      	movs	r2, #0
 80141a6:	4621      	mov	r1, r4
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7ff fec1 	bl	8013f30 <tcp_output_alloc_header>
 80141ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141b0:	693b      	ldr	r3, [r7, #16]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d109      	bne.n	80141ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	8b5b      	ldrh	r3, [r3, #26]
 80141ba:	f043 0303 	orr.w	r3, r3, #3
 80141be:	b29a      	uxth	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80141c4:	f06f 0301 	mvn.w	r3, #1
 80141c8:	e023      	b.n	8014212 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141ca:	7dbb      	ldrb	r3, [r7, #22]
 80141cc:	7dfa      	ldrb	r2, [r7, #23]
 80141ce:	6939      	ldr	r1, [r7, #16]
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f7ff feeb 	bl	8013fac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	3304      	adds	r3, #4
 80141dc:	6939      	ldr	r1, [r7, #16]
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f7ff ff24 	bl	801402c <tcp_output_control_segment>
 80141e4:	4603      	mov	r3, r0
 80141e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80141e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d007      	beq.n	8014200 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	8b5b      	ldrh	r3, [r3, #26]
 80141f4:	f043 0303 	orr.w	r3, r3, #3
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	835a      	strh	r2, [r3, #26]
 80141fe:	e006      	b.n	801420e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	8b5b      	ldrh	r3, [r3, #26]
 8014204:	f023 0303 	bic.w	r3, r3, #3
 8014208:	b29a      	uxth	r2, r3
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801420e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014212:	4618      	mov	r0, r3
 8014214:	371c      	adds	r7, #28
 8014216:	46bd      	mov	sp, r7
 8014218:	bd90      	pop	{r4, r7, pc}
 801421a:	bf00      	nop
 801421c:	0801b0d8 	.word	0x0801b0d8
 8014220:	0801b894 	.word	0x0801b894
 8014224:	0801b12c 	.word	0x0801b12c

08014228 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014228:	b590      	push	{r4, r7, lr}
 801422a:	b087      	sub	sp, #28
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014230:	2300      	movs	r3, #0
 8014232:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d106      	bne.n	8014248 <tcp_keepalive+0x20>
 801423a:	4b18      	ldr	r3, [pc, #96]	; (801429c <tcp_keepalive+0x74>)
 801423c:	f640 0224 	movw	r2, #2084	; 0x824
 8014240:	4917      	ldr	r1, [pc, #92]	; (80142a0 <tcp_keepalive+0x78>)
 8014242:	4818      	ldr	r0, [pc, #96]	; (80142a4 <tcp_keepalive+0x7c>)
 8014244:	f003 fae2 	bl	801780c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014248:	7dfb      	ldrb	r3, [r7, #23]
 801424a:	b29c      	uxth	r4, r3
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014250:	3b01      	subs	r3, #1
 8014252:	4618      	mov	r0, r3
 8014254:	f7f8 fa39 	bl	800c6ca <lwip_htonl>
 8014258:	4603      	mov	r3, r0
 801425a:	2200      	movs	r2, #0
 801425c:	4621      	mov	r1, r4
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7ff fe66 	bl	8013f30 <tcp_output_alloc_header>
 8014264:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d102      	bne.n	8014272 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801426c:	f04f 33ff 	mov.w	r3, #4294967295
 8014270:	e010      	b.n	8014294 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014272:	7dfb      	ldrb	r3, [r7, #23]
 8014274:	2200      	movs	r2, #0
 8014276:	6939      	ldr	r1, [r7, #16]
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f7ff fe97 	bl	8013fac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	3304      	adds	r3, #4
 8014284:	6939      	ldr	r1, [r7, #16]
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7ff fed0 	bl	801402c <tcp_output_control_segment>
 801428c:	4603      	mov	r3, r0
 801428e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014294:	4618      	mov	r0, r3
 8014296:	371c      	adds	r7, #28
 8014298:	46bd      	mov	sp, r7
 801429a:	bd90      	pop	{r4, r7, pc}
 801429c:	0801b0d8 	.word	0x0801b0d8
 80142a0:	0801b8b4 	.word	0x0801b8b4
 80142a4:	0801b12c 	.word	0x0801b12c

080142a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80142a8:	b590      	push	{r4, r7, lr}
 80142aa:	b08b      	sub	sp, #44	; 0x2c
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142b0:	2300      	movs	r3, #0
 80142b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d106      	bne.n	80142ca <tcp_zero_window_probe+0x22>
 80142bc:	4b4c      	ldr	r3, [pc, #304]	; (80143f0 <tcp_zero_window_probe+0x148>)
 80142be:	f640 024f 	movw	r2, #2127	; 0x84f
 80142c2:	494c      	ldr	r1, [pc, #304]	; (80143f4 <tcp_zero_window_probe+0x14c>)
 80142c4:	484c      	ldr	r0, [pc, #304]	; (80143f8 <tcp_zero_window_probe+0x150>)
 80142c6:	f003 faa1 	bl	801780c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80142d0:	6a3b      	ldr	r3, [r7, #32]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d101      	bne.n	80142da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e086      	b.n	80143e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142e0:	2bff      	cmp	r3, #255	; 0xff
 80142e2:	d007      	beq.n	80142f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142ea:	3301      	adds	r3, #1
 80142ec:	b2da      	uxtb	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80142f4:	6a3b      	ldr	r3, [r7, #32]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	899b      	ldrh	r3, [r3, #12]
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7f8 f9cf 	bl	800c6a0 <lwip_htons>
 8014302:	4603      	mov	r3, r0
 8014304:	b2db      	uxtb	r3, r3
 8014306:	f003 0301 	and.w	r3, r3, #1
 801430a:	2b00      	cmp	r3, #0
 801430c:	d005      	beq.n	801431a <tcp_zero_window_probe+0x72>
 801430e:	6a3b      	ldr	r3, [r7, #32]
 8014310:	891b      	ldrh	r3, [r3, #8]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d101      	bne.n	801431a <tcp_zero_window_probe+0x72>
 8014316:	2301      	movs	r3, #1
 8014318:	e000      	b.n	801431c <tcp_zero_window_probe+0x74>
 801431a:	2300      	movs	r3, #0
 801431c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801431e:	7ffb      	ldrb	r3, [r7, #31]
 8014320:	2b00      	cmp	r3, #0
 8014322:	bf0c      	ite	eq
 8014324:	2301      	moveq	r3, #1
 8014326:	2300      	movne	r3, #0
 8014328:	b2db      	uxtb	r3, r3
 801432a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801432c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014330:	b299      	uxth	r1, r3
 8014332:	6a3b      	ldr	r3, [r7, #32]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	8bba      	ldrh	r2, [r7, #28]
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f7ff fdf8 	bl	8013f30 <tcp_output_alloc_header>
 8014340:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d102      	bne.n	801434e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014348:	f04f 33ff 	mov.w	r3, #4294967295
 801434c:	e04c      	b.n	80143e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014354:	7ffb      	ldrb	r3, [r7, #31]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d011      	beq.n	801437e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	899b      	ldrh	r3, [r3, #12]
 801435e:	b29b      	uxth	r3, r3
 8014360:	b21b      	sxth	r3, r3
 8014362:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014366:	b21c      	sxth	r4, r3
 8014368:	2011      	movs	r0, #17
 801436a:	f7f8 f999 	bl	800c6a0 <lwip_htons>
 801436e:	4603      	mov	r3, r0
 8014370:	b21b      	sxth	r3, r3
 8014372:	4323      	orrs	r3, r4
 8014374:	b21b      	sxth	r3, r3
 8014376:	b29a      	uxth	r2, r3
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	819a      	strh	r2, [r3, #12]
 801437c:	e010      	b.n	80143a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	3314      	adds	r3, #20
 8014384:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014386:	6a3b      	ldr	r3, [r7, #32]
 8014388:	6858      	ldr	r0, [r3, #4]
 801438a:	6a3b      	ldr	r3, [r7, #32]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	891a      	ldrh	r2, [r3, #8]
 8014390:	6a3b      	ldr	r3, [r7, #32]
 8014392:	891b      	ldrh	r3, [r3, #8]
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	b29b      	uxth	r3, r3
 8014398:	2201      	movs	r2, #1
 801439a:	6939      	ldr	r1, [r7, #16]
 801439c:	f7f9 ff26 	bl	800e1ec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80143a0:	6a3b      	ldr	r3, [r7, #32]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7f8 f98f 	bl	800c6ca <lwip_htonl>
 80143ac:	4603      	mov	r3, r0
 80143ae:	3301      	adds	r3, #1
 80143b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	1ad3      	subs	r3, r2, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da02      	bge.n	80143c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	68fa      	ldr	r2, [r7, #12]
 80143c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143c8:	2200      	movs	r2, #0
 80143ca:	69b9      	ldr	r1, [r7, #24]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7ff fded 	bl	8013fac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143d2:	687a      	ldr	r2, [r7, #4]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	3304      	adds	r3, #4
 80143d8:	69b9      	ldr	r1, [r7, #24]
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7ff fe26 	bl	801402c <tcp_output_control_segment>
 80143e0:	4603      	mov	r3, r0
 80143e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	372c      	adds	r7, #44	; 0x2c
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd90      	pop	{r4, r7, pc}
 80143f0:	0801b0d8 	.word	0x0801b0d8
 80143f4:	0801b8d0 	.word	0x0801b8d0
 80143f8:	0801b12c 	.word	0x0801b12c

080143fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014404:	f7f9 ffe0 	bl	800e3c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014408:	4b0a      	ldr	r3, [pc, #40]	; (8014434 <tcpip_tcp_timer+0x38>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d103      	bne.n	8014418 <tcpip_tcp_timer+0x1c>
 8014410:	4b09      	ldr	r3, [pc, #36]	; (8014438 <tcpip_tcp_timer+0x3c>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d005      	beq.n	8014424 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014418:	2200      	movs	r2, #0
 801441a:	4908      	ldr	r1, [pc, #32]	; (801443c <tcpip_tcp_timer+0x40>)
 801441c:	20fa      	movs	r0, #250	; 0xfa
 801441e:	f000 f8f3 	bl	8014608 <sys_timeout>
 8014422:	e003      	b.n	801442c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014424:	4b06      	ldr	r3, [pc, #24]	; (8014440 <tcpip_tcp_timer+0x44>)
 8014426:	2200      	movs	r2, #0
 8014428:	601a      	str	r2, [r3, #0]
  }
}
 801442a:	bf00      	nop
 801442c:	bf00      	nop
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	200114f8 	.word	0x200114f8
 8014438:	20011508 	.word	0x20011508
 801443c:	080143fd 	.word	0x080143fd
 8014440:	20004a40 	.word	0x20004a40

08014444 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014448:	4b0a      	ldr	r3, [pc, #40]	; (8014474 <tcp_timer_needed+0x30>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d10f      	bne.n	8014470 <tcp_timer_needed+0x2c>
 8014450:	4b09      	ldr	r3, [pc, #36]	; (8014478 <tcp_timer_needed+0x34>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d103      	bne.n	8014460 <tcp_timer_needed+0x1c>
 8014458:	4b08      	ldr	r3, [pc, #32]	; (801447c <tcp_timer_needed+0x38>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d007      	beq.n	8014470 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014460:	4b04      	ldr	r3, [pc, #16]	; (8014474 <tcp_timer_needed+0x30>)
 8014462:	2201      	movs	r2, #1
 8014464:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014466:	2200      	movs	r2, #0
 8014468:	4905      	ldr	r1, [pc, #20]	; (8014480 <tcp_timer_needed+0x3c>)
 801446a:	20fa      	movs	r0, #250	; 0xfa
 801446c:	f000 f8cc 	bl	8014608 <sys_timeout>
  }
}
 8014470:	bf00      	nop
 8014472:	bd80      	pop	{r7, pc}
 8014474:	20004a40 	.word	0x20004a40
 8014478:	200114f8 	.word	0x200114f8
 801447c:	20011508 	.word	0x20011508
 8014480:	080143fd 	.word	0x080143fd

08014484 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b086      	sub	sp, #24
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014490:	200a      	movs	r0, #10
 8014492:	f7f8 fdbb 	bl	800d00c <memp_malloc>
 8014496:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d109      	bne.n	80144b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d151      	bne.n	8014548 <sys_timeout_abs+0xc4>
 80144a4:	4b2a      	ldr	r3, [pc, #168]	; (8014550 <sys_timeout_abs+0xcc>)
 80144a6:	22be      	movs	r2, #190	; 0xbe
 80144a8:	492a      	ldr	r1, [pc, #168]	; (8014554 <sys_timeout_abs+0xd0>)
 80144aa:	482b      	ldr	r0, [pc, #172]	; (8014558 <sys_timeout_abs+0xd4>)
 80144ac:	f003 f9ae 	bl	801780c <iprintf>
    return;
 80144b0:	e04a      	b.n	8014548 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	2200      	movs	r2, #0
 80144b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	68ba      	ldr	r2, [r7, #8]
 80144bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	68fa      	ldr	r2, [r7, #12]
 80144c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144ca:	4b24      	ldr	r3, [pc, #144]	; (801455c <sys_timeout_abs+0xd8>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d103      	bne.n	80144da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80144d2:	4a22      	ldr	r2, [pc, #136]	; (801455c <sys_timeout_abs+0xd8>)
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	6013      	str	r3, [r2, #0]
    return;
 80144d8:	e037      	b.n	801454a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	685a      	ldr	r2, [r3, #4]
 80144de:	4b1f      	ldr	r3, [pc, #124]	; (801455c <sys_timeout_abs+0xd8>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	685b      	ldr	r3, [r3, #4]
 80144e4:	1ad3      	subs	r3, r2, r3
 80144e6:	0fdb      	lsrs	r3, r3, #31
 80144e8:	f003 0301 	and.w	r3, r3, #1
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d007      	beq.n	8014502 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80144f2:	4b1a      	ldr	r3, [pc, #104]	; (801455c <sys_timeout_abs+0xd8>)
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80144fa:	4a18      	ldr	r2, [pc, #96]	; (801455c <sys_timeout_abs+0xd8>)
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	e023      	b.n	801454a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014502:	4b16      	ldr	r3, [pc, #88]	; (801455c <sys_timeout_abs+0xd8>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	617b      	str	r3, [r7, #20]
 8014508:	e01a      	b.n	8014540 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d00b      	beq.n	801452a <sys_timeout_abs+0xa6>
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	685a      	ldr	r2, [r3, #4]
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	1ad3      	subs	r3, r2, r3
 801451e:	0fdb      	lsrs	r3, r3, #31
 8014520:	f003 0301 	and.w	r3, r3, #1
 8014524:	b2db      	uxtb	r3, r3
 8014526:	2b00      	cmp	r3, #0
 8014528:	d007      	beq.n	801453a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	693a      	ldr	r2, [r7, #16]
 8014536:	601a      	str	r2, [r3, #0]
        break;
 8014538:	e007      	b.n	801454a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	617b      	str	r3, [r7, #20]
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d1e1      	bne.n	801450a <sys_timeout_abs+0x86>
 8014546:	e000      	b.n	801454a <sys_timeout_abs+0xc6>
    return;
 8014548:	bf00      	nop
      }
    }
  }
}
 801454a:	3718      	adds	r7, #24
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	0801b8f4 	.word	0x0801b8f4
 8014554:	0801b928 	.word	0x0801b928
 8014558:	0801b968 	.word	0x0801b968
 801455c:	20004a38 	.word	0x20004a38

08014560 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b086      	sub	sp, #24
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	4798      	blx	r3

  now = sys_now();
 8014572:	f7f1 fca7 	bl	8005ec4 <sys_now>
 8014576:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	681a      	ldr	r2, [r3, #0]
 801457c:	4b0f      	ldr	r3, [pc, #60]	; (80145bc <lwip_cyclic_timer+0x5c>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4413      	add	r3, r2
 8014582:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014584:	68fa      	ldr	r2, [r7, #12]
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	1ad3      	subs	r3, r2, r3
 801458a:	0fdb      	lsrs	r3, r3, #31
 801458c:	f003 0301 	and.w	r3, r3, #1
 8014590:	b2db      	uxtb	r3, r3
 8014592:	2b00      	cmp	r3, #0
 8014594:	d009      	beq.n	80145aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	4413      	add	r3, r2
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	4907      	ldr	r1, [pc, #28]	; (80145c0 <lwip_cyclic_timer+0x60>)
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7ff ff6e 	bl	8014484 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80145a8:	e004      	b.n	80145b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	4904      	ldr	r1, [pc, #16]	; (80145c0 <lwip_cyclic_timer+0x60>)
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f7ff ff68 	bl	8014484 <sys_timeout_abs>
}
 80145b4:	bf00      	nop
 80145b6:	3718      	adds	r7, #24
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}
 80145bc:	20004a3c 	.word	0x20004a3c
 80145c0:	08014561 	.word	0x08014561

080145c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145ca:	2301      	movs	r3, #1
 80145cc:	607b      	str	r3, [r7, #4]
 80145ce:	e00e      	b.n	80145ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80145d0:	4a0b      	ldr	r2, [pc, #44]	; (8014600 <sys_timeouts_init+0x3c>)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	00db      	lsls	r3, r3, #3
 80145dc:	4a08      	ldr	r2, [pc, #32]	; (8014600 <sys_timeouts_init+0x3c>)
 80145de:	4413      	add	r3, r2
 80145e0:	461a      	mov	r2, r3
 80145e2:	4908      	ldr	r1, [pc, #32]	; (8014604 <sys_timeouts_init+0x40>)
 80145e4:	f000 f810 	bl	8014608 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	3301      	adds	r3, #1
 80145ec:	607b      	str	r3, [r7, #4]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2b02      	cmp	r3, #2
 80145f2:	d9ed      	bls.n	80145d0 <sys_timeouts_init+0xc>
  }
}
 80145f4:	bf00      	nop
 80145f6:	bf00      	nop
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	0801c560 	.word	0x0801c560
 8014604:	08014561 	.word	0x08014561

08014608 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af00      	add	r7, sp, #0
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801461a:	d306      	bcc.n	801462a <sys_timeout+0x22>
 801461c:	4b0a      	ldr	r3, [pc, #40]	; (8014648 <sys_timeout+0x40>)
 801461e:	f240 1229 	movw	r2, #297	; 0x129
 8014622:	490a      	ldr	r1, [pc, #40]	; (801464c <sys_timeout+0x44>)
 8014624:	480a      	ldr	r0, [pc, #40]	; (8014650 <sys_timeout+0x48>)
 8014626:	f003 f8f1 	bl	801780c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801462a:	f7f1 fc4b 	bl	8005ec4 <sys_now>
 801462e:	4602      	mov	r2, r0
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	4413      	add	r3, r2
 8014634:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	68b9      	ldr	r1, [r7, #8]
 801463a:	6978      	ldr	r0, [r7, #20]
 801463c:	f7ff ff22 	bl	8014484 <sys_timeout_abs>
#endif
}
 8014640:	bf00      	nop
 8014642:	3718      	adds	r7, #24
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}
 8014648:	0801b8f4 	.word	0x0801b8f4
 801464c:	0801b990 	.word	0x0801b990
 8014650:	0801b968 	.word	0x0801b968

08014654 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801465a:	f7f1 fc33 	bl	8005ec4 <sys_now>
 801465e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014660:	4b17      	ldr	r3, [pc, #92]	; (80146c0 <sys_check_timeouts+0x6c>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d022      	beq.n	80146b2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	68fa      	ldr	r2, [r7, #12]
 8014672:	1ad3      	subs	r3, r2, r3
 8014674:	0fdb      	lsrs	r3, r3, #31
 8014676:	f003 0301 	and.w	r3, r3, #1
 801467a:	b2db      	uxtb	r3, r3
 801467c:	2b00      	cmp	r3, #0
 801467e:	d11a      	bne.n	80146b6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	4a0e      	ldr	r2, [pc, #56]	; (80146c0 <sys_check_timeouts+0x6c>)
 8014686:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	4a0a      	ldr	r2, [pc, #40]	; (80146c4 <sys_check_timeouts+0x70>)
 801469a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801469c:	68b9      	ldr	r1, [r7, #8]
 801469e:	200a      	movs	r0, #10
 80146a0:	f7f8 fd06 	bl	800d0b0 <memp_free>
    if (handler != NULL) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d0da      	beq.n	8014660 <sys_check_timeouts+0xc>
      handler(arg);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6838      	ldr	r0, [r7, #0]
 80146ae:	4798      	blx	r3
  do {
 80146b0:	e7d6      	b.n	8014660 <sys_check_timeouts+0xc>
      return;
 80146b2:	bf00      	nop
 80146b4:	e000      	b.n	80146b8 <sys_check_timeouts+0x64>
      return;
 80146b6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	20004a38 	.word	0x20004a38
 80146c4:	20004a3c 	.word	0x20004a3c

080146c8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80146ce:	4b16      	ldr	r3, [pc, #88]	; (8014728 <sys_timeouts_sleeptime+0x60>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d102      	bne.n	80146dc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80146d6:	f04f 33ff 	mov.w	r3, #4294967295
 80146da:	e020      	b.n	801471e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80146dc:	f7f1 fbf2 	bl	8005ec4 <sys_now>
 80146e0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80146e2:	4b11      	ldr	r3, [pc, #68]	; (8014728 <sys_timeouts_sleeptime+0x60>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	685a      	ldr	r2, [r3, #4]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	0fdb      	lsrs	r3, r3, #31
 80146ee:	f003 0301 	and.w	r3, r3, #1
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d001      	beq.n	80146fc <sys_timeouts_sleeptime+0x34>
    return 0;
 80146f8:	2300      	movs	r3, #0
 80146fa:	e010      	b.n	801471e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80146fc:	4b0a      	ldr	r3, [pc, #40]	; (8014728 <sys_timeouts_sleeptime+0x60>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	685a      	ldr	r2, [r3, #4]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	da06      	bge.n	801471c <sys_timeouts_sleeptime+0x54>
 801470e:	4b07      	ldr	r3, [pc, #28]	; (801472c <sys_timeouts_sleeptime+0x64>)
 8014710:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014714:	4906      	ldr	r1, [pc, #24]	; (8014730 <sys_timeouts_sleeptime+0x68>)
 8014716:	4807      	ldr	r0, [pc, #28]	; (8014734 <sys_timeouts_sleeptime+0x6c>)
 8014718:	f003 f878 	bl	801780c <iprintf>
    return ret;
 801471c:	683b      	ldr	r3, [r7, #0]
  }
}
 801471e:	4618      	mov	r0, r3
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	20004a38 	.word	0x20004a38
 801472c:	0801b8f4 	.word	0x0801b8f4
 8014730:	0801b9c8 	.word	0x0801b9c8
 8014734:	0801b968 	.word	0x0801b968

08014738 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801473c:	f003 f8f4 	bl	8017928 <rand>
 8014740:	4603      	mov	r3, r0
 8014742:	b29b      	uxth	r3, r3
 8014744:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014748:	b29b      	uxth	r3, r3
 801474a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801474e:	b29a      	uxth	r2, r3
 8014750:	4b01      	ldr	r3, [pc, #4]	; (8014758 <udp_init+0x20>)
 8014752:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014754:	bf00      	nop
 8014756:	bd80      	pop	{r7, pc}
 8014758:	20000018 	.word	0x20000018

0801475c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014766:	4b17      	ldr	r3, [pc, #92]	; (80147c4 <udp_new_port+0x68>)
 8014768:	881b      	ldrh	r3, [r3, #0]
 801476a:	1c5a      	adds	r2, r3, #1
 801476c:	b291      	uxth	r1, r2
 801476e:	4a15      	ldr	r2, [pc, #84]	; (80147c4 <udp_new_port+0x68>)
 8014770:	8011      	strh	r1, [r2, #0]
 8014772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014776:	4293      	cmp	r3, r2
 8014778:	d103      	bne.n	8014782 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801477a:	4b12      	ldr	r3, [pc, #72]	; (80147c4 <udp_new_port+0x68>)
 801477c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014780:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014782:	4b11      	ldr	r3, [pc, #68]	; (80147c8 <udp_new_port+0x6c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	603b      	str	r3, [r7, #0]
 8014788:	e011      	b.n	80147ae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	8a5a      	ldrh	r2, [r3, #18]
 801478e:	4b0d      	ldr	r3, [pc, #52]	; (80147c4 <udp_new_port+0x68>)
 8014790:	881b      	ldrh	r3, [r3, #0]
 8014792:	429a      	cmp	r2, r3
 8014794:	d108      	bne.n	80147a8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014796:	88fb      	ldrh	r3, [r7, #6]
 8014798:	3301      	adds	r3, #1
 801479a:	80fb      	strh	r3, [r7, #6]
 801479c:	88fb      	ldrh	r3, [r7, #6]
 801479e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147a2:	d3e0      	bcc.n	8014766 <udp_new_port+0xa>
        return 0;
 80147a4:	2300      	movs	r3, #0
 80147a6:	e007      	b.n	80147b8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	603b      	str	r3, [r7, #0]
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d1ea      	bne.n	801478a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80147b4:	4b03      	ldr	r3, [pc, #12]	; (80147c4 <udp_new_port+0x68>)
 80147b6:	881b      	ldrh	r3, [r3, #0]
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	370c      	adds	r7, #12
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr
 80147c4:	20000018 	.word	0x20000018
 80147c8:	20011510 	.word	0x20011510

080147cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	4613      	mov	r3, r2
 80147d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d105      	bne.n	80147ec <udp_input_local_match+0x20>
 80147e0:	4b27      	ldr	r3, [pc, #156]	; (8014880 <udp_input_local_match+0xb4>)
 80147e2:	2287      	movs	r2, #135	; 0x87
 80147e4:	4927      	ldr	r1, [pc, #156]	; (8014884 <udp_input_local_match+0xb8>)
 80147e6:	4828      	ldr	r0, [pc, #160]	; (8014888 <udp_input_local_match+0xbc>)
 80147e8:	f003 f810 	bl	801780c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d105      	bne.n	80147fe <udp_input_local_match+0x32>
 80147f2:	4b23      	ldr	r3, [pc, #140]	; (8014880 <udp_input_local_match+0xb4>)
 80147f4:	2288      	movs	r2, #136	; 0x88
 80147f6:	4925      	ldr	r1, [pc, #148]	; (801488c <udp_input_local_match+0xc0>)
 80147f8:	4823      	ldr	r0, [pc, #140]	; (8014888 <udp_input_local_match+0xbc>)
 80147fa:	f003 f807 	bl	801780c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	7a1b      	ldrb	r3, [r3, #8]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d00b      	beq.n	801481e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	7a1a      	ldrb	r2, [r3, #8]
 801480a:	4b21      	ldr	r3, [pc, #132]	; (8014890 <udp_input_local_match+0xc4>)
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014812:	3301      	adds	r3, #1
 8014814:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014816:	429a      	cmp	r2, r3
 8014818:	d001      	beq.n	801481e <udp_input_local_match+0x52>
    return 0;
 801481a:	2300      	movs	r3, #0
 801481c:	e02b      	b.n	8014876 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801481e:	79fb      	ldrb	r3, [r7, #7]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d018      	beq.n	8014856 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d013      	beq.n	8014852 <udp_input_local_match+0x86>
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00f      	beq.n	8014852 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014832:	4b17      	ldr	r3, [pc, #92]	; (8014890 <udp_input_local_match+0xc4>)
 8014834:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801483a:	d00a      	beq.n	8014852 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	4b13      	ldr	r3, [pc, #76]	; (8014890 <udp_input_local_match+0xc4>)
 8014842:	695b      	ldr	r3, [r3, #20]
 8014844:	405a      	eors	r2, r3
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	3308      	adds	r3, #8
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801484e:	2b00      	cmp	r3, #0
 8014850:	d110      	bne.n	8014874 <udp_input_local_match+0xa8>
          return 1;
 8014852:	2301      	movs	r3, #1
 8014854:	e00f      	b.n	8014876 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d009      	beq.n	8014870 <udp_input_local_match+0xa4>
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d005      	beq.n	8014870 <udp_input_local_match+0xa4>
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	4b09      	ldr	r3, [pc, #36]	; (8014890 <udp_input_local_match+0xc4>)
 801486a:	695b      	ldr	r3, [r3, #20]
 801486c:	429a      	cmp	r2, r3
 801486e:	d101      	bne.n	8014874 <udp_input_local_match+0xa8>
        return 1;
 8014870:	2301      	movs	r3, #1
 8014872:	e000      	b.n	8014876 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	0801b9dc 	.word	0x0801b9dc
 8014884:	0801ba0c 	.word	0x0801ba0c
 8014888:	0801ba30 	.word	0x0801ba30
 801488c:	0801ba58 	.word	0x0801ba58
 8014890:	200081e4 	.word	0x200081e4

08014894 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014894:	b590      	push	{r4, r7, lr}
 8014896:	b08d      	sub	sp, #52	; 0x34
 8014898:	af02      	add	r7, sp, #8
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801489e:	2300      	movs	r3, #0
 80148a0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d105      	bne.n	80148b4 <udp_input+0x20>
 80148a8:	4b7c      	ldr	r3, [pc, #496]	; (8014a9c <udp_input+0x208>)
 80148aa:	22cf      	movs	r2, #207	; 0xcf
 80148ac:	497c      	ldr	r1, [pc, #496]	; (8014aa0 <udp_input+0x20c>)
 80148ae:	487d      	ldr	r0, [pc, #500]	; (8014aa4 <udp_input+0x210>)
 80148b0:	f002 ffac 	bl	801780c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d105      	bne.n	80148c6 <udp_input+0x32>
 80148ba:	4b78      	ldr	r3, [pc, #480]	; (8014a9c <udp_input+0x208>)
 80148bc:	22d0      	movs	r2, #208	; 0xd0
 80148be:	497a      	ldr	r1, [pc, #488]	; (8014aa8 <udp_input+0x214>)
 80148c0:	4878      	ldr	r0, [pc, #480]	; (8014aa4 <udp_input+0x210>)
 80148c2:	f002 ffa3 	bl	801780c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	895b      	ldrh	r3, [r3, #10]
 80148ca:	2b07      	cmp	r3, #7
 80148cc:	d803      	bhi.n	80148d6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f7f9 fa96 	bl	800de00 <pbuf_free>
    goto end;
 80148d4:	e0de      	b.n	8014a94 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80148dc:	4b73      	ldr	r3, [pc, #460]	; (8014aac <udp_input+0x218>)
 80148de:	695b      	ldr	r3, [r3, #20]
 80148e0:	4a72      	ldr	r2, [pc, #456]	; (8014aac <udp_input+0x218>)
 80148e2:	6812      	ldr	r2, [r2, #0]
 80148e4:	4611      	mov	r1, r2
 80148e6:	4618      	mov	r0, r3
 80148e8:	f001 fd96 	bl	8016418 <ip4_addr_isbroadcast_u32>
 80148ec:	4603      	mov	r3, r0
 80148ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80148f0:	697b      	ldr	r3, [r7, #20]
 80148f2:	881b      	ldrh	r3, [r3, #0]
 80148f4:	b29b      	uxth	r3, r3
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7f7 fed2 	bl	800c6a0 <lwip_htons>
 80148fc:	4603      	mov	r3, r0
 80148fe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	885b      	ldrh	r3, [r3, #2]
 8014904:	b29b      	uxth	r3, r3
 8014906:	4618      	mov	r0, r3
 8014908:	f7f7 feca 	bl	800c6a0 <lwip_htons>
 801490c:	4603      	mov	r3, r0
 801490e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014910:	2300      	movs	r3, #0
 8014912:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014914:	2300      	movs	r3, #0
 8014916:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014918:	2300      	movs	r3, #0
 801491a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801491c:	4b64      	ldr	r3, [pc, #400]	; (8014ab0 <udp_input+0x21c>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	627b      	str	r3, [r7, #36]	; 0x24
 8014922:	e054      	b.n	80149ce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014926:	8a5b      	ldrh	r3, [r3, #18]
 8014928:	89fa      	ldrh	r2, [r7, #14]
 801492a:	429a      	cmp	r2, r3
 801492c:	d14a      	bne.n	80149c4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801492e:	7cfb      	ldrb	r3, [r7, #19]
 8014930:	461a      	mov	r2, r3
 8014932:	6839      	ldr	r1, [r7, #0]
 8014934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014936:	f7ff ff49 	bl	80147cc <udp_input_local_match>
 801493a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801493c:	2b00      	cmp	r3, #0
 801493e:	d041      	beq.n	80149c4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014942:	7c1b      	ldrb	r3, [r3, #16]
 8014944:	f003 0304 	and.w	r3, r3, #4
 8014948:	2b00      	cmp	r3, #0
 801494a:	d11d      	bne.n	8014988 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d102      	bne.n	8014958 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014954:	61fb      	str	r3, [r7, #28]
 8014956:	e017      	b.n	8014988 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014958:	7cfb      	ldrb	r3, [r7, #19]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d014      	beq.n	8014988 <udp_input+0xf4>
 801495e:	4b53      	ldr	r3, [pc, #332]	; (8014aac <udp_input+0x218>)
 8014960:	695b      	ldr	r3, [r3, #20]
 8014962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014966:	d10f      	bne.n	8014988 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	3304      	adds	r3, #4
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	429a      	cmp	r2, r3
 8014974:	d008      	beq.n	8014988 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	3304      	adds	r3, #4
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	429a      	cmp	r2, r3
 8014982:	d101      	bne.n	8014988 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014986:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498a:	8a9b      	ldrh	r3, [r3, #20]
 801498c:	8a3a      	ldrh	r2, [r7, #16]
 801498e:	429a      	cmp	r2, r3
 8014990:	d118      	bne.n	80149c4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014994:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014996:	2b00      	cmp	r3, #0
 8014998:	d005      	beq.n	80149a6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499c:	685a      	ldr	r2, [r3, #4]
 801499e:	4b43      	ldr	r3, [pc, #268]	; (8014aac <udp_input+0x218>)
 80149a0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d10e      	bne.n	80149c4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d014      	beq.n	80149d6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ae:	68da      	ldr	r2, [r3, #12]
 80149b0:	6a3b      	ldr	r3, [r7, #32]
 80149b2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80149b4:	4b3e      	ldr	r3, [pc, #248]	; (8014ab0 <udp_input+0x21c>)
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80149bc:	4a3c      	ldr	r2, [pc, #240]	; (8014ab0 <udp_input+0x21c>)
 80149be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80149c2:	e008      	b.n	80149d6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80149c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	627b      	str	r3, [r7, #36]	; 0x24
 80149ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d1a7      	bne.n	8014924 <udp_input+0x90>
 80149d4:	e000      	b.n	80149d8 <udp_input+0x144>
        break;
 80149d6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80149d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d101      	bne.n	80149e2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80149de:	69fb      	ldr	r3, [r7, #28]
 80149e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80149e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d002      	beq.n	80149ee <udp_input+0x15a>
    for_us = 1;
 80149e8:	2301      	movs	r3, #1
 80149ea:	76fb      	strb	r3, [r7, #27]
 80149ec:	e00a      	b.n	8014a04 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	3304      	adds	r3, #4
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	4b2d      	ldr	r3, [pc, #180]	; (8014aac <udp_input+0x218>)
 80149f6:	695b      	ldr	r3, [r3, #20]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	bf0c      	ite	eq
 80149fc:	2301      	moveq	r3, #1
 80149fe:	2300      	movne	r3, #0
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014a04:	7efb      	ldrb	r3, [r7, #27]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d041      	beq.n	8014a8e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014a0a:	2108      	movs	r1, #8
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f7f9 f971 	bl	800dcf4 <pbuf_remove_header>
 8014a12:	4603      	mov	r3, r0
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00a      	beq.n	8014a2e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014a18:	4b20      	ldr	r3, [pc, #128]	; (8014a9c <udp_input+0x208>)
 8014a1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014a1e:	4925      	ldr	r1, [pc, #148]	; (8014ab4 <udp_input+0x220>)
 8014a20:	4820      	ldr	r0, [pc, #128]	; (8014aa4 <udp_input+0x210>)
 8014a22:	f002 fef3 	bl	801780c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7f9 f9ea 	bl	800de00 <pbuf_free>
      goto end;
 8014a2c:	e032      	b.n	8014a94 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d012      	beq.n	8014a5a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a36:	699b      	ldr	r3, [r3, #24]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d00a      	beq.n	8014a52 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3e:	699c      	ldr	r4, [r3, #24]
 8014a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a42:	69d8      	ldr	r0, [r3, #28]
 8014a44:	8a3b      	ldrh	r3, [r7, #16]
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	4b1b      	ldr	r3, [pc, #108]	; (8014ab8 <udp_input+0x224>)
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a50:	e021      	b.n	8014a96 <udp_input+0x202>
        pbuf_free(p);
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f7f9 f9d4 	bl	800de00 <pbuf_free>
        goto end;
 8014a58:	e01c      	b.n	8014a94 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a5a:	7cfb      	ldrb	r3, [r7, #19]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d112      	bne.n	8014a86 <udp_input+0x1f2>
 8014a60:	4b12      	ldr	r3, [pc, #72]	; (8014aac <udp_input+0x218>)
 8014a62:	695b      	ldr	r3, [r3, #20]
 8014a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a68:	2be0      	cmp	r3, #224	; 0xe0
 8014a6a:	d00c      	beq.n	8014a86 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a6c:	4b0f      	ldr	r3, [pc, #60]	; (8014aac <udp_input+0x218>)
 8014a6e:	899b      	ldrh	r3, [r3, #12]
 8014a70:	3308      	adds	r3, #8
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	b21b      	sxth	r3, r3
 8014a76:	4619      	mov	r1, r3
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7f9 f9ae 	bl	800ddda <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a7e:	2103      	movs	r1, #3
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f001 f9a9 	bl	8015dd8 <icmp_dest_unreach>
      pbuf_free(p);
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f7f9 f9ba 	bl	800de00 <pbuf_free>
  return;
 8014a8c:	e003      	b.n	8014a96 <udp_input+0x202>
    pbuf_free(p);
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7f9 f9b6 	bl	800de00 <pbuf_free>
  return;
 8014a94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a96:	372c      	adds	r7, #44	; 0x2c
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd90      	pop	{r4, r7, pc}
 8014a9c:	0801b9dc 	.word	0x0801b9dc
 8014aa0:	0801ba80 	.word	0x0801ba80
 8014aa4:	0801ba30 	.word	0x0801ba30
 8014aa8:	0801ba98 	.word	0x0801ba98
 8014aac:	200081e4 	.word	0x200081e4
 8014ab0:	20011510 	.word	0x20011510
 8014ab4:	0801bab4 	.word	0x0801bab4
 8014ab8:	200081f4 	.word	0x200081f4

08014abc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b086      	sub	sp, #24
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d101      	bne.n	8014ad4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014ad0:	4b39      	ldr	r3, [pc, #228]	; (8014bb8 <udp_bind+0xfc>)
 8014ad2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d109      	bne.n	8014aee <udp_bind+0x32>
 8014ada:	4b38      	ldr	r3, [pc, #224]	; (8014bbc <udp_bind+0x100>)
 8014adc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014ae0:	4937      	ldr	r1, [pc, #220]	; (8014bc0 <udp_bind+0x104>)
 8014ae2:	4838      	ldr	r0, [pc, #224]	; (8014bc4 <udp_bind+0x108>)
 8014ae4:	f002 fe92 	bl	801780c <iprintf>
 8014ae8:	f06f 030f 	mvn.w	r3, #15
 8014aec:	e060      	b.n	8014bb0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014aee:	2300      	movs	r3, #0
 8014af0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014af2:	4b35      	ldr	r3, [pc, #212]	; (8014bc8 <udp_bind+0x10c>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	617b      	str	r3, [r7, #20]
 8014af8:	e009      	b.n	8014b0e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014afa:	68fa      	ldr	r2, [r7, #12]
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d102      	bne.n	8014b08 <udp_bind+0x4c>
      rebind = 1;
 8014b02:	2301      	movs	r3, #1
 8014b04:	74fb      	strb	r3, [r7, #19]
      break;
 8014b06:	e005      	b.n	8014b14 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	617b      	str	r3, [r7, #20]
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d1f2      	bne.n	8014afa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014b14:	88fb      	ldrh	r3, [r7, #6]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d109      	bne.n	8014b2e <udp_bind+0x72>
    port = udp_new_port();
 8014b1a:	f7ff fe1f 	bl	801475c <udp_new_port>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014b22:	88fb      	ldrh	r3, [r7, #6]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d12c      	bne.n	8014b82 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014b28:	f06f 0307 	mvn.w	r3, #7
 8014b2c:	e040      	b.n	8014bb0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b2e:	4b26      	ldr	r3, [pc, #152]	; (8014bc8 <udp_bind+0x10c>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	617b      	str	r3, [r7, #20]
 8014b34:	e022      	b.n	8014b7c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014b36:	68fa      	ldr	r2, [r7, #12]
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d01b      	beq.n	8014b76 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	8a5b      	ldrh	r3, [r3, #18]
 8014b42:	88fa      	ldrh	r2, [r7, #6]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d116      	bne.n	8014b76 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d00d      	beq.n	8014b70 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d00a      	beq.n	8014b70 <udp_bind+0xb4>
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d006      	beq.n	8014b70 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b62:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d003      	beq.n	8014b70 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d102      	bne.n	8014b76 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014b70:	f06f 0307 	mvn.w	r3, #7
 8014b74:	e01c      	b.n	8014bb0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	68db      	ldr	r3, [r3, #12]
 8014b7a:	617b      	str	r3, [r7, #20]
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d1d9      	bne.n	8014b36 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d002      	beq.n	8014b8e <udp_bind+0xd2>
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	e000      	b.n	8014b90 <udp_bind+0xd4>
 8014b8e:	2300      	movs	r3, #0
 8014b90:	68fa      	ldr	r2, [r7, #12]
 8014b92:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	88fa      	ldrh	r2, [r7, #6]
 8014b98:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014b9a:	7cfb      	ldrb	r3, [r7, #19]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d106      	bne.n	8014bae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014ba0:	4b09      	ldr	r3, [pc, #36]	; (8014bc8 <udp_bind+0x10c>)
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014ba8:	4a07      	ldr	r2, [pc, #28]	; (8014bc8 <udp_bind+0x10c>)
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014bae:	2300      	movs	r3, #0
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0801c578 	.word	0x0801c578
 8014bbc:	0801b9dc 	.word	0x0801b9dc
 8014bc0:	0801bca4 	.word	0x0801bca4
 8014bc4:	0801ba30 	.word	0x0801ba30
 8014bc8:	20011510 	.word	0x20011510

08014bcc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b084      	sub	sp, #16
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	60b9      	str	r1, [r7, #8]
 8014bd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d107      	bne.n	8014bee <udp_recv+0x22>
 8014bde:	4b08      	ldr	r3, [pc, #32]	; (8014c00 <udp_recv+0x34>)
 8014be0:	f240 428a 	movw	r2, #1162	; 0x48a
 8014be4:	4907      	ldr	r1, [pc, #28]	; (8014c04 <udp_recv+0x38>)
 8014be6:	4808      	ldr	r0, [pc, #32]	; (8014c08 <udp_recv+0x3c>)
 8014be8:	f002 fe10 	bl	801780c <iprintf>
 8014bec:	e005      	b.n	8014bfa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	61da      	str	r2, [r3, #28]
}
 8014bfa:	3710      	adds	r7, #16
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	0801b9dc 	.word	0x0801b9dc
 8014c04:	0801bd10 	.word	0x0801bd10
 8014c08:	0801ba30 	.word	0x0801ba30

08014c0c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d107      	bne.n	8014c2a <udp_remove+0x1e>
 8014c1a:	4b19      	ldr	r3, [pc, #100]	; (8014c80 <udp_remove+0x74>)
 8014c1c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014c20:	4918      	ldr	r1, [pc, #96]	; (8014c84 <udp_remove+0x78>)
 8014c22:	4819      	ldr	r0, [pc, #100]	; (8014c88 <udp_remove+0x7c>)
 8014c24:	f002 fdf2 	bl	801780c <iprintf>
 8014c28:	e026      	b.n	8014c78 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014c2a:	4b18      	ldr	r3, [pc, #96]	; (8014c8c <udp_remove+0x80>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	687a      	ldr	r2, [r7, #4]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d105      	bne.n	8014c40 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014c34:	4b15      	ldr	r3, [pc, #84]	; (8014c8c <udp_remove+0x80>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	68db      	ldr	r3, [r3, #12]
 8014c3a:	4a14      	ldr	r2, [pc, #80]	; (8014c8c <udp_remove+0x80>)
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	e017      	b.n	8014c70 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c40:	4b12      	ldr	r3, [pc, #72]	; (8014c8c <udp_remove+0x80>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	60fb      	str	r3, [r7, #12]
 8014c46:	e010      	b.n	8014c6a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d009      	beq.n	8014c64 <udp_remove+0x58>
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d104      	bne.n	8014c64 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	68da      	ldr	r2, [r3, #12]
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	60da      	str	r2, [r3, #12]
        break;
 8014c62:	e005      	b.n	8014c70 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	60fb      	str	r3, [r7, #12]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1eb      	bne.n	8014c48 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014c70:	6879      	ldr	r1, [r7, #4]
 8014c72:	2000      	movs	r0, #0
 8014c74:	f7f8 fa1c 	bl	800d0b0 <memp_free>
}
 8014c78:	3710      	adds	r7, #16
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}
 8014c7e:	bf00      	nop
 8014c80:	0801b9dc 	.word	0x0801b9dc
 8014c84:	0801bd28 	.word	0x0801bd28
 8014c88:	0801ba30 	.word	0x0801ba30
 8014c8c:	20011510 	.word	0x20011510

08014c90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014c96:	2000      	movs	r0, #0
 8014c98:	f7f8 f9b8 	bl	800d00c <memp_malloc>
 8014c9c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d007      	beq.n	8014cb4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014ca4:	2220      	movs	r2, #32
 8014ca6:	2100      	movs	r1, #0
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f002 fda7 	bl	80177fc <memset>
    pcb->ttl = UDP_TTL;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	22ff      	movs	r2, #255	; 0xff
 8014cb2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014cb4:	687b      	ldr	r3, [r7, #4]
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3708      	adds	r7, #8
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014cbe:	b580      	push	{r7, lr}
 8014cc0:	b084      	sub	sp, #16
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014cc8:	f7ff ffe2 	bl	8014c90 <udp_new>
 8014ccc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014cce:	68fb      	ldr	r3, [r7, #12]
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d01e      	beq.n	8014d26 <udp_netif_ip_addr_changed+0x4e>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d01a      	beq.n	8014d26 <udp_netif_ip_addr_changed+0x4e>
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d017      	beq.n	8014d26 <udp_netif_ip_addr_changed+0x4e>
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d013      	beq.n	8014d26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014cfe:	4b0d      	ldr	r3, [pc, #52]	; (8014d34 <udp_netif_ip_addr_changed+0x5c>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	60fb      	str	r3, [r7, #12]
 8014d04:	e00c      	b.n	8014d20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d103      	bne.n	8014d1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	68db      	ldr	r3, [r3, #12]
 8014d1e:	60fb      	str	r3, [r7, #12]
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d1ef      	bne.n	8014d06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d26:	bf00      	nop
 8014d28:	3714      	adds	r7, #20
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop
 8014d34:	20011510 	.word	0x20011510

08014d38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014d40:	4915      	ldr	r1, [pc, #84]	; (8014d98 <etharp_free_entry+0x60>)
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	4613      	mov	r3, r2
 8014d46:	005b      	lsls	r3, r3, #1
 8014d48:	4413      	add	r3, r2
 8014d4a:	00db      	lsls	r3, r3, #3
 8014d4c:	440b      	add	r3, r1
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d013      	beq.n	8014d7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014d54:	4910      	ldr	r1, [pc, #64]	; (8014d98 <etharp_free_entry+0x60>)
 8014d56:	687a      	ldr	r2, [r7, #4]
 8014d58:	4613      	mov	r3, r2
 8014d5a:	005b      	lsls	r3, r3, #1
 8014d5c:	4413      	add	r3, r2
 8014d5e:	00db      	lsls	r3, r3, #3
 8014d60:	440b      	add	r3, r1
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f9 f84b 	bl	800de00 <pbuf_free>
    arp_table[i].q = NULL;
 8014d6a:	490b      	ldr	r1, [pc, #44]	; (8014d98 <etharp_free_entry+0x60>)
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	4613      	mov	r3, r2
 8014d70:	005b      	lsls	r3, r3, #1
 8014d72:	4413      	add	r3, r2
 8014d74:	00db      	lsls	r3, r3, #3
 8014d76:	440b      	add	r3, r1
 8014d78:	2200      	movs	r2, #0
 8014d7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014d7c:	4906      	ldr	r1, [pc, #24]	; (8014d98 <etharp_free_entry+0x60>)
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	4613      	mov	r3, r2
 8014d82:	005b      	lsls	r3, r3, #1
 8014d84:	4413      	add	r3, r2
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	440b      	add	r3, r1
 8014d8a:	3314      	adds	r3, #20
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014d90:	bf00      	nop
 8014d92:	3708      	adds	r7, #8
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	20004a44 	.word	0x20004a44

08014d9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014da2:	2300      	movs	r3, #0
 8014da4:	607b      	str	r3, [r7, #4]
 8014da6:	e096      	b.n	8014ed6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014da8:	494f      	ldr	r1, [pc, #316]	; (8014ee8 <etharp_tmr+0x14c>)
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	4613      	mov	r3, r2
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	4413      	add	r3, r2
 8014db2:	00db      	lsls	r3, r3, #3
 8014db4:	440b      	add	r3, r1
 8014db6:	3314      	adds	r3, #20
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014dbc:	78fb      	ldrb	r3, [r7, #3]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	f000 8086 	beq.w	8014ed0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014dc4:	4948      	ldr	r1, [pc, #288]	; (8014ee8 <etharp_tmr+0x14c>)
 8014dc6:	687a      	ldr	r2, [r7, #4]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	005b      	lsls	r3, r3, #1
 8014dcc:	4413      	add	r3, r2
 8014dce:	00db      	lsls	r3, r3, #3
 8014dd0:	440b      	add	r3, r1
 8014dd2:	3312      	adds	r3, #18
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	b298      	uxth	r0, r3
 8014dda:	4943      	ldr	r1, [pc, #268]	; (8014ee8 <etharp_tmr+0x14c>)
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	4613      	mov	r3, r2
 8014de0:	005b      	lsls	r3, r3, #1
 8014de2:	4413      	add	r3, r2
 8014de4:	00db      	lsls	r3, r3, #3
 8014de6:	440b      	add	r3, r1
 8014de8:	3312      	adds	r3, #18
 8014dea:	4602      	mov	r2, r0
 8014dec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014dee:	493e      	ldr	r1, [pc, #248]	; (8014ee8 <etharp_tmr+0x14c>)
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	4613      	mov	r3, r2
 8014df4:	005b      	lsls	r3, r3, #1
 8014df6:	4413      	add	r3, r2
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	440b      	add	r3, r1
 8014dfc:	3312      	adds	r3, #18
 8014dfe:	881b      	ldrh	r3, [r3, #0]
 8014e00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014e04:	d215      	bcs.n	8014e32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e06:	4938      	ldr	r1, [pc, #224]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	440b      	add	r3, r1
 8014e14:	3314      	adds	r3, #20
 8014e16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	d10e      	bne.n	8014e3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014e1c:	4932      	ldr	r1, [pc, #200]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	4613      	mov	r3, r2
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	4413      	add	r3, r2
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	440b      	add	r3, r1
 8014e2a:	3312      	adds	r3, #18
 8014e2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e2e:	2b04      	cmp	r3, #4
 8014e30:	d903      	bls.n	8014e3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7ff ff80 	bl	8014d38 <etharp_free_entry>
 8014e38:	e04a      	b.n	8014ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014e3a:	492b      	ldr	r1, [pc, #172]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	4613      	mov	r3, r2
 8014e40:	005b      	lsls	r3, r3, #1
 8014e42:	4413      	add	r3, r2
 8014e44:	00db      	lsls	r3, r3, #3
 8014e46:	440b      	add	r3, r1
 8014e48:	3314      	adds	r3, #20
 8014e4a:	781b      	ldrb	r3, [r3, #0]
 8014e4c:	2b03      	cmp	r3, #3
 8014e4e:	d10a      	bne.n	8014e66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014e50:	4925      	ldr	r1, [pc, #148]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	4613      	mov	r3, r2
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	4413      	add	r3, r2
 8014e5a:	00db      	lsls	r3, r3, #3
 8014e5c:	440b      	add	r3, r1
 8014e5e:	3314      	adds	r3, #20
 8014e60:	2204      	movs	r2, #4
 8014e62:	701a      	strb	r2, [r3, #0]
 8014e64:	e034      	b.n	8014ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014e66:	4920      	ldr	r1, [pc, #128]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	005b      	lsls	r3, r3, #1
 8014e6e:	4413      	add	r3, r2
 8014e70:	00db      	lsls	r3, r3, #3
 8014e72:	440b      	add	r3, r1
 8014e74:	3314      	adds	r3, #20
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	2b04      	cmp	r3, #4
 8014e7a:	d10a      	bne.n	8014e92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014e7c:	491a      	ldr	r1, [pc, #104]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	4613      	mov	r3, r2
 8014e82:	005b      	lsls	r3, r3, #1
 8014e84:	4413      	add	r3, r2
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	440b      	add	r3, r1
 8014e8a:	3314      	adds	r3, #20
 8014e8c:	2202      	movs	r2, #2
 8014e8e:	701a      	strb	r2, [r3, #0]
 8014e90:	e01e      	b.n	8014ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e92:	4915      	ldr	r1, [pc, #84]	; (8014ee8 <etharp_tmr+0x14c>)
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	4613      	mov	r3, r2
 8014e98:	005b      	lsls	r3, r3, #1
 8014e9a:	4413      	add	r3, r2
 8014e9c:	00db      	lsls	r3, r3, #3
 8014e9e:	440b      	add	r3, r1
 8014ea0:	3314      	adds	r3, #20
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d113      	bne.n	8014ed0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014ea8:	490f      	ldr	r1, [pc, #60]	; (8014ee8 <etharp_tmr+0x14c>)
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	4613      	mov	r3, r2
 8014eae:	005b      	lsls	r3, r3, #1
 8014eb0:	4413      	add	r3, r2
 8014eb2:	00db      	lsls	r3, r3, #3
 8014eb4:	440b      	add	r3, r1
 8014eb6:	3308      	adds	r3, #8
 8014eb8:	6818      	ldr	r0, [r3, #0]
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	4413      	add	r3, r2
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	4a08      	ldr	r2, [pc, #32]	; (8014ee8 <etharp_tmr+0x14c>)
 8014ec6:	4413      	add	r3, r2
 8014ec8:	3304      	adds	r3, #4
 8014eca:	4619      	mov	r1, r3
 8014ecc:	f000 fe6e 	bl	8015bac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	607b      	str	r3, [r7, #4]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2b09      	cmp	r3, #9
 8014eda:	f77f af65 	ble.w	8014da8 <etharp_tmr+0xc>
      }
    }
  }
}
 8014ede:	bf00      	nop
 8014ee0:	bf00      	nop
 8014ee2:	3708      	adds	r7, #8
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	20004a44 	.word	0x20004a44

08014eec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b08a      	sub	sp, #40	; 0x28
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	607a      	str	r2, [r7, #4]
 8014ef8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014efa:	230a      	movs	r3, #10
 8014efc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014efe:	230a      	movs	r3, #10
 8014f00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014f02:	230a      	movs	r3, #10
 8014f04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014f0a:	230a      	movs	r3, #10
 8014f0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	83bb      	strh	r3, [r7, #28]
 8014f12:	2300      	movs	r3, #0
 8014f14:	837b      	strh	r3, [r7, #26]
 8014f16:	2300      	movs	r3, #0
 8014f18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	843b      	strh	r3, [r7, #32]
 8014f1e:	e0ae      	b.n	801507e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014f20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f24:	49a6      	ldr	r1, [pc, #664]	; (80151c0 <etharp_find_entry+0x2d4>)
 8014f26:	4613      	mov	r3, r2
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	4413      	add	r3, r2
 8014f2c:	00db      	lsls	r3, r3, #3
 8014f2e:	440b      	add	r3, r1
 8014f30:	3314      	adds	r3, #20
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014f36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f3a:	2b0a      	cmp	r3, #10
 8014f3c:	d105      	bne.n	8014f4a <etharp_find_entry+0x5e>
 8014f3e:	7dfb      	ldrb	r3, [r7, #23]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d102      	bne.n	8014f4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014f44:	8c3b      	ldrh	r3, [r7, #32]
 8014f46:	847b      	strh	r3, [r7, #34]	; 0x22
 8014f48:	e095      	b.n	8015076 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014f4a:	7dfb      	ldrb	r3, [r7, #23]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	f000 8092 	beq.w	8015076 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014f52:	7dfb      	ldrb	r3, [r7, #23]
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d009      	beq.n	8014f6c <etharp_find_entry+0x80>
 8014f58:	7dfb      	ldrb	r3, [r7, #23]
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d806      	bhi.n	8014f6c <etharp_find_entry+0x80>
 8014f5e:	4b99      	ldr	r3, [pc, #612]	; (80151c4 <etharp_find_entry+0x2d8>)
 8014f60:	f240 1223 	movw	r2, #291	; 0x123
 8014f64:	4998      	ldr	r1, [pc, #608]	; (80151c8 <etharp_find_entry+0x2dc>)
 8014f66:	4899      	ldr	r0, [pc, #612]	; (80151cc <etharp_find_entry+0x2e0>)
 8014f68:	f002 fc50 	bl	801780c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d020      	beq.n	8014fb4 <etharp_find_entry+0xc8>
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	6819      	ldr	r1, [r3, #0]
 8014f76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f7a:	4891      	ldr	r0, [pc, #580]	; (80151c0 <etharp_find_entry+0x2d4>)
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	00db      	lsls	r3, r3, #3
 8014f84:	4403      	add	r3, r0
 8014f86:	3304      	adds	r3, #4
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4299      	cmp	r1, r3
 8014f8c:	d112      	bne.n	8014fb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00c      	beq.n	8014fae <etharp_find_entry+0xc2>
 8014f94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f98:	4989      	ldr	r1, [pc, #548]	; (80151c0 <etharp_find_entry+0x2d4>)
 8014f9a:	4613      	mov	r3, r2
 8014f9c:	005b      	lsls	r3, r3, #1
 8014f9e:	4413      	add	r3, r2
 8014fa0:	00db      	lsls	r3, r3, #3
 8014fa2:	440b      	add	r3, r1
 8014fa4:	3308      	adds	r3, #8
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d102      	bne.n	8014fb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014fae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fb2:	e100      	b.n	80151b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014fb4:	7dfb      	ldrb	r3, [r7, #23]
 8014fb6:	2b01      	cmp	r3, #1
 8014fb8:	d140      	bne.n	801503c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014fba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fbe:	4980      	ldr	r1, [pc, #512]	; (80151c0 <etharp_find_entry+0x2d4>)
 8014fc0:	4613      	mov	r3, r2
 8014fc2:	005b      	lsls	r3, r3, #1
 8014fc4:	4413      	add	r3, r2
 8014fc6:	00db      	lsls	r3, r3, #3
 8014fc8:	440b      	add	r3, r1
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d01a      	beq.n	8015006 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fd4:	497a      	ldr	r1, [pc, #488]	; (80151c0 <etharp_find_entry+0x2d4>)
 8014fd6:	4613      	mov	r3, r2
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	4413      	add	r3, r2
 8014fdc:	00db      	lsls	r3, r3, #3
 8014fde:	440b      	add	r3, r1
 8014fe0:	3312      	adds	r3, #18
 8014fe2:	881b      	ldrh	r3, [r3, #0]
 8014fe4:	8bba      	ldrh	r2, [r7, #28]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d845      	bhi.n	8015076 <etharp_find_entry+0x18a>
            old_queue = i;
 8014fea:	8c3b      	ldrh	r3, [r7, #32]
 8014fec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014fee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ff2:	4973      	ldr	r1, [pc, #460]	; (80151c0 <etharp_find_entry+0x2d4>)
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	005b      	lsls	r3, r3, #1
 8014ff8:	4413      	add	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	440b      	add	r3, r1
 8014ffe:	3312      	adds	r3, #18
 8015000:	881b      	ldrh	r3, [r3, #0]
 8015002:	83bb      	strh	r3, [r7, #28]
 8015004:	e037      	b.n	8015076 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801500a:	496d      	ldr	r1, [pc, #436]	; (80151c0 <etharp_find_entry+0x2d4>)
 801500c:	4613      	mov	r3, r2
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	3312      	adds	r3, #18
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	8b7a      	ldrh	r2, [r7, #26]
 801501c:	429a      	cmp	r2, r3
 801501e:	d82a      	bhi.n	8015076 <etharp_find_entry+0x18a>
            old_pending = i;
 8015020:	8c3b      	ldrh	r3, [r7, #32]
 8015022:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015028:	4965      	ldr	r1, [pc, #404]	; (80151c0 <etharp_find_entry+0x2d4>)
 801502a:	4613      	mov	r3, r2
 801502c:	005b      	lsls	r3, r3, #1
 801502e:	4413      	add	r3, r2
 8015030:	00db      	lsls	r3, r3, #3
 8015032:	440b      	add	r3, r1
 8015034:	3312      	adds	r3, #18
 8015036:	881b      	ldrh	r3, [r3, #0]
 8015038:	837b      	strh	r3, [r7, #26]
 801503a:	e01c      	b.n	8015076 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801503c:	7dfb      	ldrb	r3, [r7, #23]
 801503e:	2b01      	cmp	r3, #1
 8015040:	d919      	bls.n	8015076 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015046:	495e      	ldr	r1, [pc, #376]	; (80151c0 <etharp_find_entry+0x2d4>)
 8015048:	4613      	mov	r3, r2
 801504a:	005b      	lsls	r3, r3, #1
 801504c:	4413      	add	r3, r2
 801504e:	00db      	lsls	r3, r3, #3
 8015050:	440b      	add	r3, r1
 8015052:	3312      	adds	r3, #18
 8015054:	881b      	ldrh	r3, [r3, #0]
 8015056:	8b3a      	ldrh	r2, [r7, #24]
 8015058:	429a      	cmp	r2, r3
 801505a:	d80c      	bhi.n	8015076 <etharp_find_entry+0x18a>
            old_stable = i;
 801505c:	8c3b      	ldrh	r3, [r7, #32]
 801505e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015064:	4956      	ldr	r1, [pc, #344]	; (80151c0 <etharp_find_entry+0x2d4>)
 8015066:	4613      	mov	r3, r2
 8015068:	005b      	lsls	r3, r3, #1
 801506a:	4413      	add	r3, r2
 801506c:	00db      	lsls	r3, r3, #3
 801506e:	440b      	add	r3, r1
 8015070:	3312      	adds	r3, #18
 8015072:	881b      	ldrh	r3, [r3, #0]
 8015074:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015076:	8c3b      	ldrh	r3, [r7, #32]
 8015078:	3301      	adds	r3, #1
 801507a:	b29b      	uxth	r3, r3
 801507c:	843b      	strh	r3, [r7, #32]
 801507e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015082:	2b09      	cmp	r3, #9
 8015084:	f77f af4c 	ble.w	8014f20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015088:	7afb      	ldrb	r3, [r7, #11]
 801508a:	f003 0302 	and.w	r3, r3, #2
 801508e:	2b00      	cmp	r3, #0
 8015090:	d108      	bne.n	80150a4 <etharp_find_entry+0x1b8>
 8015092:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015096:	2b0a      	cmp	r3, #10
 8015098:	d107      	bne.n	80150aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801509a:	7afb      	ldrb	r3, [r7, #11]
 801509c:	f003 0301 	and.w	r3, r3, #1
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d102      	bne.n	80150aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80150a4:	f04f 33ff 	mov.w	r3, #4294967295
 80150a8:	e085      	b.n	80151b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80150aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150ae:	2b09      	cmp	r3, #9
 80150b0:	dc02      	bgt.n	80150b8 <etharp_find_entry+0x1cc>
    i = empty;
 80150b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150b4:	843b      	strh	r3, [r7, #32]
 80150b6:	e039      	b.n	801512c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80150b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80150bc:	2b09      	cmp	r3, #9
 80150be:	dc14      	bgt.n	80150ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80150c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80150c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150c8:	493d      	ldr	r1, [pc, #244]	; (80151c0 <etharp_find_entry+0x2d4>)
 80150ca:	4613      	mov	r3, r2
 80150cc:	005b      	lsls	r3, r3, #1
 80150ce:	4413      	add	r3, r2
 80150d0:	00db      	lsls	r3, r3, #3
 80150d2:	440b      	add	r3, r1
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d018      	beq.n	801510c <etharp_find_entry+0x220>
 80150da:	4b3a      	ldr	r3, [pc, #232]	; (80151c4 <etharp_find_entry+0x2d8>)
 80150dc:	f240 126d 	movw	r2, #365	; 0x16d
 80150e0:	493b      	ldr	r1, [pc, #236]	; (80151d0 <etharp_find_entry+0x2e4>)
 80150e2:	483a      	ldr	r0, [pc, #232]	; (80151cc <etharp_find_entry+0x2e0>)
 80150e4:	f002 fb92 	bl	801780c <iprintf>
 80150e8:	e010      	b.n	801510c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80150ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80150ee:	2b09      	cmp	r3, #9
 80150f0:	dc02      	bgt.n	80150f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80150f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80150f4:	843b      	strh	r3, [r7, #32]
 80150f6:	e009      	b.n	801510c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80150f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80150fc:	2b09      	cmp	r3, #9
 80150fe:	dc02      	bgt.n	8015106 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015100:	8bfb      	ldrh	r3, [r7, #30]
 8015102:	843b      	strh	r3, [r7, #32]
 8015104:	e002      	b.n	801510c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015106:	f04f 33ff 	mov.w	r3, #4294967295
 801510a:	e054      	b.n	80151b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801510c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015110:	2b09      	cmp	r3, #9
 8015112:	dd06      	ble.n	8015122 <etharp_find_entry+0x236>
 8015114:	4b2b      	ldr	r3, [pc, #172]	; (80151c4 <etharp_find_entry+0x2d8>)
 8015116:	f240 127f 	movw	r2, #383	; 0x17f
 801511a:	492e      	ldr	r1, [pc, #184]	; (80151d4 <etharp_find_entry+0x2e8>)
 801511c:	482b      	ldr	r0, [pc, #172]	; (80151cc <etharp_find_entry+0x2e0>)
 801511e:	f002 fb75 	bl	801780c <iprintf>
    etharp_free_entry(i);
 8015122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015126:	4618      	mov	r0, r3
 8015128:	f7ff fe06 	bl	8014d38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801512c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015130:	2b09      	cmp	r3, #9
 8015132:	dd06      	ble.n	8015142 <etharp_find_entry+0x256>
 8015134:	4b23      	ldr	r3, [pc, #140]	; (80151c4 <etharp_find_entry+0x2d8>)
 8015136:	f240 1283 	movw	r2, #387	; 0x183
 801513a:	4926      	ldr	r1, [pc, #152]	; (80151d4 <etharp_find_entry+0x2e8>)
 801513c:	4823      	ldr	r0, [pc, #140]	; (80151cc <etharp_find_entry+0x2e0>)
 801513e:	f002 fb65 	bl	801780c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015146:	491e      	ldr	r1, [pc, #120]	; (80151c0 <etharp_find_entry+0x2d4>)
 8015148:	4613      	mov	r3, r2
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	4413      	add	r3, r2
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	440b      	add	r3, r1
 8015152:	3314      	adds	r3, #20
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d006      	beq.n	8015168 <etharp_find_entry+0x27c>
 801515a:	4b1a      	ldr	r3, [pc, #104]	; (80151c4 <etharp_find_entry+0x2d8>)
 801515c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015160:	491d      	ldr	r1, [pc, #116]	; (80151d8 <etharp_find_entry+0x2ec>)
 8015162:	481a      	ldr	r0, [pc, #104]	; (80151cc <etharp_find_entry+0x2e0>)
 8015164:	f002 fb52 	bl	801780c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d00b      	beq.n	8015186 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801516e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	6819      	ldr	r1, [r3, #0]
 8015176:	4812      	ldr	r0, [pc, #72]	; (80151c0 <etharp_find_entry+0x2d4>)
 8015178:	4613      	mov	r3, r2
 801517a:	005b      	lsls	r3, r3, #1
 801517c:	4413      	add	r3, r2
 801517e:	00db      	lsls	r3, r3, #3
 8015180:	4403      	add	r3, r0
 8015182:	3304      	adds	r3, #4
 8015184:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801518a:	490d      	ldr	r1, [pc, #52]	; (80151c0 <etharp_find_entry+0x2d4>)
 801518c:	4613      	mov	r3, r2
 801518e:	005b      	lsls	r3, r3, #1
 8015190:	4413      	add	r3, r2
 8015192:	00db      	lsls	r3, r3, #3
 8015194:	440b      	add	r3, r1
 8015196:	3312      	adds	r3, #18
 8015198:	2200      	movs	r2, #0
 801519a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801519c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151a0:	4907      	ldr	r1, [pc, #28]	; (80151c0 <etharp_find_entry+0x2d4>)
 80151a2:	4613      	mov	r3, r2
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4413      	add	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	440b      	add	r3, r1
 80151ac:	3308      	adds	r3, #8
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80151b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3728      	adds	r7, #40	; 0x28
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	20004a44 	.word	0x20004a44
 80151c4:	0801bd40 	.word	0x0801bd40
 80151c8:	0801bd78 	.word	0x0801bd78
 80151cc:	0801bdb8 	.word	0x0801bdb8
 80151d0:	0801bde0 	.word	0x0801bde0
 80151d4:	0801bdf8 	.word	0x0801bdf8
 80151d8:	0801be0c 	.word	0x0801be0c

080151dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b088      	sub	sp, #32
 80151e0:	af02      	add	r7, sp, #8
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80151f0:	2b06      	cmp	r3, #6
 80151f2:	d006      	beq.n	8015202 <etharp_update_arp_entry+0x26>
 80151f4:	4b48      	ldr	r3, [pc, #288]	; (8015318 <etharp_update_arp_entry+0x13c>)
 80151f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80151fa:	4948      	ldr	r1, [pc, #288]	; (801531c <etharp_update_arp_entry+0x140>)
 80151fc:	4848      	ldr	r0, [pc, #288]	; (8015320 <etharp_update_arp_entry+0x144>)
 80151fe:	f002 fb05 	bl	801780c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d012      	beq.n	801522e <etharp_update_arp_entry+0x52>
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00e      	beq.n	801522e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	68f9      	ldr	r1, [r7, #12]
 8015216:	4618      	mov	r0, r3
 8015218:	f001 f8fe 	bl	8016418 <ip4_addr_isbroadcast_u32>
 801521c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801521e:	2b00      	cmp	r3, #0
 8015220:	d105      	bne.n	801522e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801522a:	2be0      	cmp	r3, #224	; 0xe0
 801522c:	d102      	bne.n	8015234 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801522e:	f06f 030f 	mvn.w	r3, #15
 8015232:	e06c      	b.n	801530e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015234:	78fb      	ldrb	r3, [r7, #3]
 8015236:	68fa      	ldr	r2, [r7, #12]
 8015238:	4619      	mov	r1, r3
 801523a:	68b8      	ldr	r0, [r7, #8]
 801523c:	f7ff fe56 	bl	8014eec <etharp_find_entry>
 8015240:	4603      	mov	r3, r0
 8015242:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015248:	2b00      	cmp	r3, #0
 801524a:	da02      	bge.n	8015252 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801524c:	8afb      	ldrh	r3, [r7, #22]
 801524e:	b25b      	sxtb	r3, r3
 8015250:	e05d      	b.n	801530e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015256:	4933      	ldr	r1, [pc, #204]	; (8015324 <etharp_update_arp_entry+0x148>)
 8015258:	4613      	mov	r3, r2
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	00db      	lsls	r3, r3, #3
 8015260:	440b      	add	r3, r1
 8015262:	3314      	adds	r3, #20
 8015264:	2202      	movs	r2, #2
 8015266:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801526c:	492d      	ldr	r1, [pc, #180]	; (8015324 <etharp_update_arp_entry+0x148>)
 801526e:	4613      	mov	r3, r2
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	4413      	add	r3, r2
 8015274:	00db      	lsls	r3, r3, #3
 8015276:	440b      	add	r3, r1
 8015278:	3308      	adds	r3, #8
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801527e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015282:	4613      	mov	r3, r2
 8015284:	005b      	lsls	r3, r3, #1
 8015286:	4413      	add	r3, r2
 8015288:	00db      	lsls	r3, r3, #3
 801528a:	3308      	adds	r3, #8
 801528c:	4a25      	ldr	r2, [pc, #148]	; (8015324 <etharp_update_arp_entry+0x148>)
 801528e:	4413      	add	r3, r2
 8015290:	3304      	adds	r3, #4
 8015292:	2206      	movs	r2, #6
 8015294:	6879      	ldr	r1, [r7, #4]
 8015296:	4618      	mov	r0, r3
 8015298:	f002 fa88 	bl	80177ac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801529c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152a0:	4920      	ldr	r1, [pc, #128]	; (8015324 <etharp_update_arp_entry+0x148>)
 80152a2:	4613      	mov	r3, r2
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	4413      	add	r3, r2
 80152a8:	00db      	lsls	r3, r3, #3
 80152aa:	440b      	add	r3, r1
 80152ac:	3312      	adds	r3, #18
 80152ae:	2200      	movs	r2, #0
 80152b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80152b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152b6:	491b      	ldr	r1, [pc, #108]	; (8015324 <etharp_update_arp_entry+0x148>)
 80152b8:	4613      	mov	r3, r2
 80152ba:	005b      	lsls	r3, r3, #1
 80152bc:	4413      	add	r3, r2
 80152be:	00db      	lsls	r3, r3, #3
 80152c0:	440b      	add	r3, r1
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d021      	beq.n	801530c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80152c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152cc:	4915      	ldr	r1, [pc, #84]	; (8015324 <etharp_update_arp_entry+0x148>)
 80152ce:	4613      	mov	r3, r2
 80152d0:	005b      	lsls	r3, r3, #1
 80152d2:	4413      	add	r3, r2
 80152d4:	00db      	lsls	r3, r3, #3
 80152d6:	440b      	add	r3, r1
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80152dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152e0:	4910      	ldr	r1, [pc, #64]	; (8015324 <etharp_update_arp_entry+0x148>)
 80152e2:	4613      	mov	r3, r2
 80152e4:	005b      	lsls	r3, r3, #1
 80152e6:	4413      	add	r3, r2
 80152e8:	00db      	lsls	r3, r3, #3
 80152ea:	440b      	add	r3, r1
 80152ec:	2200      	movs	r2, #0
 80152ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80152f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80152fa:	9300      	str	r3, [sp, #0]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6939      	ldr	r1, [r7, #16]
 8015300:	68f8      	ldr	r0, [r7, #12]
 8015302:	f002 f823 	bl	801734c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015306:	6938      	ldr	r0, [r7, #16]
 8015308:	f7f8 fd7a 	bl	800de00 <pbuf_free>
  }
  return ERR_OK;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3718      	adds	r7, #24
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	0801bd40 	.word	0x0801bd40
 801531c:	0801be38 	.word	0x0801be38
 8015320:	0801bdb8 	.word	0x0801bdb8
 8015324:	20004a44 	.word	0x20004a44

08015328 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b084      	sub	sp, #16
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015330:	2300      	movs	r3, #0
 8015332:	60fb      	str	r3, [r7, #12]
 8015334:	e01e      	b.n	8015374 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015336:	4913      	ldr	r1, [pc, #76]	; (8015384 <etharp_cleanup_netif+0x5c>)
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	4613      	mov	r3, r2
 801533c:	005b      	lsls	r3, r3, #1
 801533e:	4413      	add	r3, r2
 8015340:	00db      	lsls	r3, r3, #3
 8015342:	440b      	add	r3, r1
 8015344:	3314      	adds	r3, #20
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801534a:	7afb      	ldrb	r3, [r7, #11]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d00e      	beq.n	801536e <etharp_cleanup_netif+0x46>
 8015350:	490c      	ldr	r1, [pc, #48]	; (8015384 <etharp_cleanup_netif+0x5c>)
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	4613      	mov	r3, r2
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	440b      	add	r3, r1
 801535e:	3308      	adds	r3, #8
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	429a      	cmp	r2, r3
 8015366:	d102      	bne.n	801536e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015368:	68f8      	ldr	r0, [r7, #12]
 801536a:	f7ff fce5 	bl	8014d38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	3301      	adds	r3, #1
 8015372:	60fb      	str	r3, [r7, #12]
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2b09      	cmp	r3, #9
 8015378:	dddd      	ble.n	8015336 <etharp_cleanup_netif+0xe>
    }
  }
}
 801537a:	bf00      	nop
 801537c:	bf00      	nop
 801537e:	3710      	adds	r7, #16
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	20004a44 	.word	0x20004a44

08015388 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015388:	b5b0      	push	{r4, r5, r7, lr}
 801538a:	b08a      	sub	sp, #40	; 0x28
 801538c:	af04      	add	r7, sp, #16
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d107      	bne.n	80153a8 <etharp_input+0x20>
 8015398:	4b3d      	ldr	r3, [pc, #244]	; (8015490 <etharp_input+0x108>)
 801539a:	f240 228a 	movw	r2, #650	; 0x28a
 801539e:	493d      	ldr	r1, [pc, #244]	; (8015494 <etharp_input+0x10c>)
 80153a0:	483d      	ldr	r0, [pc, #244]	; (8015498 <etharp_input+0x110>)
 80153a2:	f002 fa33 	bl	801780c <iprintf>
 80153a6:	e06f      	b.n	8015488 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	881b      	ldrh	r3, [r3, #0]
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153b8:	d10c      	bne.n	80153d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153be:	2b06      	cmp	r3, #6
 80153c0:	d108      	bne.n	80153d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153c6:	2b04      	cmp	r3, #4
 80153c8:	d104      	bne.n	80153d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	885b      	ldrh	r3, [r3, #2]
 80153ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153d0:	2b08      	cmp	r3, #8
 80153d2:	d003      	beq.n	80153dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7f8 fd13 	bl	800de00 <pbuf_free>
    return;
 80153da:	e055      	b.n	8015488 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	330e      	adds	r3, #14
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	3318      	adds	r3, #24
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	3304      	adds	r3, #4
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d102      	bne.n	80153fc <etharp_input+0x74>
    for_us = 0;
 80153f6:	2300      	movs	r3, #0
 80153f8:	75fb      	strb	r3, [r7, #23]
 80153fa:	e009      	b.n	8015410 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80153fc:	68ba      	ldr	r2, [r7, #8]
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	3304      	adds	r3, #4
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	429a      	cmp	r2, r3
 8015406:	bf0c      	ite	eq
 8015408:	2301      	moveq	r3, #1
 801540a:	2300      	movne	r3, #0
 801540c:	b2db      	uxtb	r3, r3
 801540e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	f103 0208 	add.w	r2, r3, #8
 8015416:	7dfb      	ldrb	r3, [r7, #23]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d001      	beq.n	8015420 <etharp_input+0x98>
 801541c:	2301      	movs	r3, #1
 801541e:	e000      	b.n	8015422 <etharp_input+0x9a>
 8015420:	2302      	movs	r3, #2
 8015422:	f107 010c 	add.w	r1, r7, #12
 8015426:	6838      	ldr	r0, [r7, #0]
 8015428:	f7ff fed8 	bl	80151dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801542c:	693b      	ldr	r3, [r7, #16]
 801542e:	88db      	ldrh	r3, [r3, #6]
 8015430:	b29b      	uxth	r3, r3
 8015432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015436:	d003      	beq.n	8015440 <etharp_input+0xb8>
 8015438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801543c:	d01e      	beq.n	801547c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801543e:	e020      	b.n	8015482 <etharp_input+0xfa>
      if (for_us) {
 8015440:	7dfb      	ldrb	r3, [r7, #23]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d01c      	beq.n	8015480 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801545c:	693a      	ldr	r2, [r7, #16]
 801545e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015460:	2102      	movs	r1, #2
 8015462:	9103      	str	r1, [sp, #12]
 8015464:	f107 010c 	add.w	r1, r7, #12
 8015468:	9102      	str	r1, [sp, #8]
 801546a:	9201      	str	r2, [sp, #4]
 801546c:	9300      	str	r3, [sp, #0]
 801546e:	462b      	mov	r3, r5
 8015470:	4622      	mov	r2, r4
 8015472:	4601      	mov	r1, r0
 8015474:	6838      	ldr	r0, [r7, #0]
 8015476:	f000 faeb 	bl	8015a50 <etharp_raw>
      break;
 801547a:	e001      	b.n	8015480 <etharp_input+0xf8>
      break;
 801547c:	bf00      	nop
 801547e:	e000      	b.n	8015482 <etharp_input+0xfa>
      break;
 8015480:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f7f8 fcbc 	bl	800de00 <pbuf_free>
}
 8015488:	3718      	adds	r7, #24
 801548a:	46bd      	mov	sp, r7
 801548c:	bdb0      	pop	{r4, r5, r7, pc}
 801548e:	bf00      	nop
 8015490:	0801bd40 	.word	0x0801bd40
 8015494:	0801be90 	.word	0x0801be90
 8015498:	0801bdb8 	.word	0x0801bdb8

0801549c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b086      	sub	sp, #24
 80154a0:	af02      	add	r7, sp, #8
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	4613      	mov	r3, r2
 80154a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80154aa:	79fa      	ldrb	r2, [r7, #7]
 80154ac:	4944      	ldr	r1, [pc, #272]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 80154ae:	4613      	mov	r3, r2
 80154b0:	005b      	lsls	r3, r3, #1
 80154b2:	4413      	add	r3, r2
 80154b4:	00db      	lsls	r3, r3, #3
 80154b6:	440b      	add	r3, r1
 80154b8:	3314      	adds	r3, #20
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	2b01      	cmp	r3, #1
 80154be:	d806      	bhi.n	80154ce <etharp_output_to_arp_index+0x32>
 80154c0:	4b40      	ldr	r3, [pc, #256]	; (80155c4 <etharp_output_to_arp_index+0x128>)
 80154c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80154c6:	4940      	ldr	r1, [pc, #256]	; (80155c8 <etharp_output_to_arp_index+0x12c>)
 80154c8:	4840      	ldr	r0, [pc, #256]	; (80155cc <etharp_output_to_arp_index+0x130>)
 80154ca:	f002 f99f 	bl	801780c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80154ce:	79fa      	ldrb	r2, [r7, #7]
 80154d0:	493b      	ldr	r1, [pc, #236]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 80154d2:	4613      	mov	r3, r2
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4413      	add	r3, r2
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	3314      	adds	r3, #20
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	2b02      	cmp	r3, #2
 80154e2:	d153      	bne.n	801558c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80154e4:	79fa      	ldrb	r2, [r7, #7]
 80154e6:	4936      	ldr	r1, [pc, #216]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 80154e8:	4613      	mov	r3, r2
 80154ea:	005b      	lsls	r3, r3, #1
 80154ec:	4413      	add	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	440b      	add	r3, r1
 80154f2:	3312      	adds	r3, #18
 80154f4:	881b      	ldrh	r3, [r3, #0]
 80154f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80154fa:	d919      	bls.n	8015530 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80154fc:	79fa      	ldrb	r2, [r7, #7]
 80154fe:	4613      	mov	r3, r2
 8015500:	005b      	lsls	r3, r3, #1
 8015502:	4413      	add	r3, r2
 8015504:	00db      	lsls	r3, r3, #3
 8015506:	4a2e      	ldr	r2, [pc, #184]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 8015508:	4413      	add	r3, r2
 801550a:	3304      	adds	r3, #4
 801550c:	4619      	mov	r1, r3
 801550e:	68f8      	ldr	r0, [r7, #12]
 8015510:	f000 fb4c 	bl	8015bac <etharp_request>
 8015514:	4603      	mov	r3, r0
 8015516:	2b00      	cmp	r3, #0
 8015518:	d138      	bne.n	801558c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801551a:	79fa      	ldrb	r2, [r7, #7]
 801551c:	4928      	ldr	r1, [pc, #160]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 801551e:	4613      	mov	r3, r2
 8015520:	005b      	lsls	r3, r3, #1
 8015522:	4413      	add	r3, r2
 8015524:	00db      	lsls	r3, r3, #3
 8015526:	440b      	add	r3, r1
 8015528:	3314      	adds	r3, #20
 801552a:	2203      	movs	r2, #3
 801552c:	701a      	strb	r2, [r3, #0]
 801552e:	e02d      	b.n	801558c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015530:	79fa      	ldrb	r2, [r7, #7]
 8015532:	4923      	ldr	r1, [pc, #140]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 8015534:	4613      	mov	r3, r2
 8015536:	005b      	lsls	r3, r3, #1
 8015538:	4413      	add	r3, r2
 801553a:	00db      	lsls	r3, r3, #3
 801553c:	440b      	add	r3, r1
 801553e:	3312      	adds	r3, #18
 8015540:	881b      	ldrh	r3, [r3, #0]
 8015542:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015546:	d321      	bcc.n	801558c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015548:	79fa      	ldrb	r2, [r7, #7]
 801554a:	4613      	mov	r3, r2
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	4413      	add	r3, r2
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	4a1b      	ldr	r2, [pc, #108]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 8015554:	4413      	add	r3, r2
 8015556:	1d19      	adds	r1, r3, #4
 8015558:	79fa      	ldrb	r2, [r7, #7]
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	00db      	lsls	r3, r3, #3
 8015562:	3308      	adds	r3, #8
 8015564:	4a16      	ldr	r2, [pc, #88]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 8015566:	4413      	add	r3, r2
 8015568:	3304      	adds	r3, #4
 801556a:	461a      	mov	r2, r3
 801556c:	68f8      	ldr	r0, [r7, #12]
 801556e:	f000 fafb 	bl	8015b68 <etharp_request_dst>
 8015572:	4603      	mov	r3, r0
 8015574:	2b00      	cmp	r3, #0
 8015576:	d109      	bne.n	801558c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015578:	79fa      	ldrb	r2, [r7, #7]
 801557a:	4911      	ldr	r1, [pc, #68]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 801557c:	4613      	mov	r3, r2
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	4413      	add	r3, r2
 8015582:	00db      	lsls	r3, r3, #3
 8015584:	440b      	add	r3, r1
 8015586:	3314      	adds	r3, #20
 8015588:	2203      	movs	r2, #3
 801558a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015592:	79fa      	ldrb	r2, [r7, #7]
 8015594:	4613      	mov	r3, r2
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	3308      	adds	r3, #8
 801559e:	4a08      	ldr	r2, [pc, #32]	; (80155c0 <etharp_output_to_arp_index+0x124>)
 80155a0:	4413      	add	r3, r2
 80155a2:	3304      	adds	r3, #4
 80155a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155a8:	9200      	str	r2, [sp, #0]
 80155aa:	460a      	mov	r2, r1
 80155ac:	68b9      	ldr	r1, [r7, #8]
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f001 fecc 	bl	801734c <ethernet_output>
 80155b4:	4603      	mov	r3, r0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3710      	adds	r7, #16
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	20004a44 	.word	0x20004a44
 80155c4:	0801bd40 	.word	0x0801bd40
 80155c8:	0801beb0 	.word	0x0801beb0
 80155cc:	0801bdb8 	.word	0x0801bdb8

080155d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b08a      	sub	sp, #40	; 0x28
 80155d4:	af02      	add	r7, sp, #8
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d106      	bne.n	80155f4 <etharp_output+0x24>
 80155e6:	4b73      	ldr	r3, [pc, #460]	; (80157b4 <etharp_output+0x1e4>)
 80155e8:	f240 321e 	movw	r2, #798	; 0x31e
 80155ec:	4972      	ldr	r1, [pc, #456]	; (80157b8 <etharp_output+0x1e8>)
 80155ee:	4873      	ldr	r0, [pc, #460]	; (80157bc <etharp_output+0x1ec>)
 80155f0:	f002 f90c 	bl	801780c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d106      	bne.n	8015608 <etharp_output+0x38>
 80155fa:	4b6e      	ldr	r3, [pc, #440]	; (80157b4 <etharp_output+0x1e4>)
 80155fc:	f240 321f 	movw	r2, #799	; 0x31f
 8015600:	496f      	ldr	r1, [pc, #444]	; (80157c0 <etharp_output+0x1f0>)
 8015602:	486e      	ldr	r0, [pc, #440]	; (80157bc <etharp_output+0x1ec>)
 8015604:	f002 f902 	bl	801780c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d106      	bne.n	801561c <etharp_output+0x4c>
 801560e:	4b69      	ldr	r3, [pc, #420]	; (80157b4 <etharp_output+0x1e4>)
 8015610:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015614:	496b      	ldr	r1, [pc, #428]	; (80157c4 <etharp_output+0x1f4>)
 8015616:	4869      	ldr	r0, [pc, #420]	; (80157bc <etharp_output+0x1ec>)
 8015618:	f002 f8f8 	bl	801780c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	68f9      	ldr	r1, [r7, #12]
 8015622:	4618      	mov	r0, r3
 8015624:	f000 fef8 	bl	8016418 <ip4_addr_isbroadcast_u32>
 8015628:	4603      	mov	r3, r0
 801562a:	2b00      	cmp	r3, #0
 801562c:	d002      	beq.n	8015634 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801562e:	4b66      	ldr	r3, [pc, #408]	; (80157c8 <etharp_output+0x1f8>)
 8015630:	61fb      	str	r3, [r7, #28]
 8015632:	e0af      	b.n	8015794 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801563c:	2be0      	cmp	r3, #224	; 0xe0
 801563e:	d118      	bne.n	8015672 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015640:	2301      	movs	r3, #1
 8015642:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015644:	2300      	movs	r3, #0
 8015646:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015648:	235e      	movs	r3, #94	; 0x5e
 801564a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	3301      	adds	r3, #1
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015656:	b2db      	uxtb	r3, r3
 8015658:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	3302      	adds	r3, #2
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	3303      	adds	r3, #3
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801566a:	f107 0310 	add.w	r3, r7, #16
 801566e:	61fb      	str	r3, [r7, #28]
 8015670:	e090      	b.n	8015794 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	3304      	adds	r3, #4
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	405a      	eors	r2, r3
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	3308      	adds	r3, #8
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4013      	ands	r3, r2
 8015686:	2b00      	cmp	r3, #0
 8015688:	d012      	beq.n	80156b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015690:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015694:	4293      	cmp	r3, r2
 8015696:	d00b      	beq.n	80156b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	330c      	adds	r3, #12
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d003      	beq.n	80156aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	330c      	adds	r3, #12
 80156a6:	61bb      	str	r3, [r7, #24]
 80156a8:	e002      	b.n	80156b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80156aa:	f06f 0303 	mvn.w	r3, #3
 80156ae:	e07d      	b.n	80157ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156b0:	4b46      	ldr	r3, [pc, #280]	; (80157cc <etharp_output+0x1fc>)
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	4619      	mov	r1, r3
 80156b6:	4a46      	ldr	r2, [pc, #280]	; (80157d0 <etharp_output+0x200>)
 80156b8:	460b      	mov	r3, r1
 80156ba:	005b      	lsls	r3, r3, #1
 80156bc:	440b      	add	r3, r1
 80156be:	00db      	lsls	r3, r3, #3
 80156c0:	4413      	add	r3, r2
 80156c2:	3314      	adds	r3, #20
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	d925      	bls.n	8015716 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80156ca:	4b40      	ldr	r3, [pc, #256]	; (80157cc <etharp_output+0x1fc>)
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	4619      	mov	r1, r3
 80156d0:	4a3f      	ldr	r2, [pc, #252]	; (80157d0 <etharp_output+0x200>)
 80156d2:	460b      	mov	r3, r1
 80156d4:	005b      	lsls	r3, r3, #1
 80156d6:	440b      	add	r3, r1
 80156d8:	00db      	lsls	r3, r3, #3
 80156da:	4413      	add	r3, r2
 80156dc:	3308      	adds	r3, #8
 80156de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156e0:	68fa      	ldr	r2, [r7, #12]
 80156e2:	429a      	cmp	r2, r3
 80156e4:	d117      	bne.n	8015716 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	4b38      	ldr	r3, [pc, #224]	; (80157cc <etharp_output+0x1fc>)
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	4618      	mov	r0, r3
 80156f0:	4937      	ldr	r1, [pc, #220]	; (80157d0 <etharp_output+0x200>)
 80156f2:	4603      	mov	r3, r0
 80156f4:	005b      	lsls	r3, r3, #1
 80156f6:	4403      	add	r3, r0
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	440b      	add	r3, r1
 80156fc:	3304      	adds	r3, #4
 80156fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015700:	429a      	cmp	r2, r3
 8015702:	d108      	bne.n	8015716 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015704:	4b31      	ldr	r3, [pc, #196]	; (80157cc <etharp_output+0x1fc>)
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	461a      	mov	r2, r3
 801570a:	68b9      	ldr	r1, [r7, #8]
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f7ff fec5 	bl	801549c <etharp_output_to_arp_index>
 8015712:	4603      	mov	r3, r0
 8015714:	e04a      	b.n	80157ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015716:	2300      	movs	r3, #0
 8015718:	75fb      	strb	r3, [r7, #23]
 801571a:	e031      	b.n	8015780 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801571c:	7dfa      	ldrb	r2, [r7, #23]
 801571e:	492c      	ldr	r1, [pc, #176]	; (80157d0 <etharp_output+0x200>)
 8015720:	4613      	mov	r3, r2
 8015722:	005b      	lsls	r3, r3, #1
 8015724:	4413      	add	r3, r2
 8015726:	00db      	lsls	r3, r3, #3
 8015728:	440b      	add	r3, r1
 801572a:	3314      	adds	r3, #20
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	2b01      	cmp	r3, #1
 8015730:	d923      	bls.n	801577a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015732:	7dfa      	ldrb	r2, [r7, #23]
 8015734:	4926      	ldr	r1, [pc, #152]	; (80157d0 <etharp_output+0x200>)
 8015736:	4613      	mov	r3, r2
 8015738:	005b      	lsls	r3, r3, #1
 801573a:	4413      	add	r3, r2
 801573c:	00db      	lsls	r3, r3, #3
 801573e:	440b      	add	r3, r1
 8015740:	3308      	adds	r3, #8
 8015742:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015744:	68fa      	ldr	r2, [r7, #12]
 8015746:	429a      	cmp	r2, r3
 8015748:	d117      	bne.n	801577a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801574a:	69bb      	ldr	r3, [r7, #24]
 801574c:	6819      	ldr	r1, [r3, #0]
 801574e:	7dfa      	ldrb	r2, [r7, #23]
 8015750:	481f      	ldr	r0, [pc, #124]	; (80157d0 <etharp_output+0x200>)
 8015752:	4613      	mov	r3, r2
 8015754:	005b      	lsls	r3, r3, #1
 8015756:	4413      	add	r3, r2
 8015758:	00db      	lsls	r3, r3, #3
 801575a:	4403      	add	r3, r0
 801575c:	3304      	adds	r3, #4
 801575e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015760:	4299      	cmp	r1, r3
 8015762:	d10a      	bne.n	801577a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015764:	4a19      	ldr	r2, [pc, #100]	; (80157cc <etharp_output+0x1fc>)
 8015766:	7dfb      	ldrb	r3, [r7, #23]
 8015768:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801576a:	7dfb      	ldrb	r3, [r7, #23]
 801576c:	461a      	mov	r2, r3
 801576e:	68b9      	ldr	r1, [r7, #8]
 8015770:	68f8      	ldr	r0, [r7, #12]
 8015772:	f7ff fe93 	bl	801549c <etharp_output_to_arp_index>
 8015776:	4603      	mov	r3, r0
 8015778:	e018      	b.n	80157ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801577a:	7dfb      	ldrb	r3, [r7, #23]
 801577c:	3301      	adds	r3, #1
 801577e:	75fb      	strb	r3, [r7, #23]
 8015780:	7dfb      	ldrb	r3, [r7, #23]
 8015782:	2b09      	cmp	r3, #9
 8015784:	d9ca      	bls.n	801571c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015786:	68ba      	ldr	r2, [r7, #8]
 8015788:	69b9      	ldr	r1, [r7, #24]
 801578a:	68f8      	ldr	r0, [r7, #12]
 801578c:	f000 f822 	bl	80157d4 <etharp_query>
 8015790:	4603      	mov	r3, r0
 8015792:	e00b      	b.n	80157ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801579a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	68b9      	ldr	r1, [r7, #8]
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f001 fdd1 	bl	801734c <ethernet_output>
 80157aa:	4603      	mov	r3, r0
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3720      	adds	r7, #32
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	0801bd40 	.word	0x0801bd40
 80157b8:	0801be90 	.word	0x0801be90
 80157bc:	0801bdb8 	.word	0x0801bdb8
 80157c0:	0801bee0 	.word	0x0801bee0
 80157c4:	0801be80 	.word	0x0801be80
 80157c8:	0801c57c 	.word	0x0801c57c
 80157cc:	20004b34 	.word	0x20004b34
 80157d0:	20004a44 	.word	0x20004a44

080157d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b08c      	sub	sp, #48	; 0x30
 80157d8:	af02      	add	r7, sp, #8
 80157da:	60f8      	str	r0, [r7, #12]
 80157dc:	60b9      	str	r1, [r7, #8]
 80157de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	3326      	adds	r3, #38	; 0x26
 80157e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80157e6:	23ff      	movs	r3, #255	; 0xff
 80157e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80157ec:	2300      	movs	r3, #0
 80157ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	68f9      	ldr	r1, [r7, #12]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f000 fe0e 	bl	8016418 <ip4_addr_isbroadcast_u32>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d10c      	bne.n	801581c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801580a:	2be0      	cmp	r3, #224	; 0xe0
 801580c:	d006      	beq.n	801581c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d003      	beq.n	801581c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d102      	bne.n	8015822 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801581c:	f06f 030f 	mvn.w	r3, #15
 8015820:	e101      	b.n	8015a26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015822:	68fa      	ldr	r2, [r7, #12]
 8015824:	2101      	movs	r1, #1
 8015826:	68b8      	ldr	r0, [r7, #8]
 8015828:	f7ff fb60 	bl	8014eec <etharp_find_entry>
 801582c:	4603      	mov	r3, r0
 801582e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015834:	2b00      	cmp	r3, #0
 8015836:	da02      	bge.n	801583e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015838:	8a7b      	ldrh	r3, [r7, #18]
 801583a:	b25b      	sxtb	r3, r3
 801583c:	e0f3      	b.n	8015a26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801583e:	8a7b      	ldrh	r3, [r7, #18]
 8015840:	2b7e      	cmp	r3, #126	; 0x7e
 8015842:	d906      	bls.n	8015852 <etharp_query+0x7e>
 8015844:	4b7a      	ldr	r3, [pc, #488]	; (8015a30 <etharp_query+0x25c>)
 8015846:	f240 32c1 	movw	r2, #961	; 0x3c1
 801584a:	497a      	ldr	r1, [pc, #488]	; (8015a34 <etharp_query+0x260>)
 801584c:	487a      	ldr	r0, [pc, #488]	; (8015a38 <etharp_query+0x264>)
 801584e:	f001 ffdd 	bl	801780c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015852:	8a7b      	ldrh	r3, [r7, #18]
 8015854:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015856:	7c7a      	ldrb	r2, [r7, #17]
 8015858:	4978      	ldr	r1, [pc, #480]	; (8015a3c <etharp_query+0x268>)
 801585a:	4613      	mov	r3, r2
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	4413      	add	r3, r2
 8015860:	00db      	lsls	r3, r3, #3
 8015862:	440b      	add	r3, r1
 8015864:	3314      	adds	r3, #20
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d115      	bne.n	8015898 <etharp_query+0xc4>
    is_new_entry = 1;
 801586c:	2301      	movs	r3, #1
 801586e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015870:	7c7a      	ldrb	r2, [r7, #17]
 8015872:	4972      	ldr	r1, [pc, #456]	; (8015a3c <etharp_query+0x268>)
 8015874:	4613      	mov	r3, r2
 8015876:	005b      	lsls	r3, r3, #1
 8015878:	4413      	add	r3, r2
 801587a:	00db      	lsls	r3, r3, #3
 801587c:	440b      	add	r3, r1
 801587e:	3314      	adds	r3, #20
 8015880:	2201      	movs	r2, #1
 8015882:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015884:	7c7a      	ldrb	r2, [r7, #17]
 8015886:	496d      	ldr	r1, [pc, #436]	; (8015a3c <etharp_query+0x268>)
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	3308      	adds	r3, #8
 8015894:	68fa      	ldr	r2, [r7, #12]
 8015896:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015898:	7c7a      	ldrb	r2, [r7, #17]
 801589a:	4968      	ldr	r1, [pc, #416]	; (8015a3c <etharp_query+0x268>)
 801589c:	4613      	mov	r3, r2
 801589e:	005b      	lsls	r3, r3, #1
 80158a0:	4413      	add	r3, r2
 80158a2:	00db      	lsls	r3, r3, #3
 80158a4:	440b      	add	r3, r1
 80158a6:	3314      	adds	r3, #20
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	2b01      	cmp	r3, #1
 80158ac:	d011      	beq.n	80158d2 <etharp_query+0xfe>
 80158ae:	7c7a      	ldrb	r2, [r7, #17]
 80158b0:	4962      	ldr	r1, [pc, #392]	; (8015a3c <etharp_query+0x268>)
 80158b2:	4613      	mov	r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	4413      	add	r3, r2
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	440b      	add	r3, r1
 80158bc:	3314      	adds	r3, #20
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d806      	bhi.n	80158d2 <etharp_query+0xfe>
 80158c4:	4b5a      	ldr	r3, [pc, #360]	; (8015a30 <etharp_query+0x25c>)
 80158c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80158ca:	495d      	ldr	r1, [pc, #372]	; (8015a40 <etharp_query+0x26c>)
 80158cc:	485a      	ldr	r0, [pc, #360]	; (8015a38 <etharp_query+0x264>)
 80158ce:	f001 ff9d 	bl	801780c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80158d2:	6a3b      	ldr	r3, [r7, #32]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d102      	bne.n	80158de <etharp_query+0x10a>
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d10c      	bne.n	80158f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80158de:	68b9      	ldr	r1, [r7, #8]
 80158e0:	68f8      	ldr	r0, [r7, #12]
 80158e2:	f000 f963 	bl	8015bac <etharp_request>
 80158e6:	4603      	mov	r3, r0
 80158e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d102      	bne.n	80158f8 <etharp_query+0x124>
      return result;
 80158f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80158f6:	e096      	b.n	8015a26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d106      	bne.n	801590c <etharp_query+0x138>
 80158fe:	4b4c      	ldr	r3, [pc, #304]	; (8015a30 <etharp_query+0x25c>)
 8015900:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015904:	494f      	ldr	r1, [pc, #316]	; (8015a44 <etharp_query+0x270>)
 8015906:	484c      	ldr	r0, [pc, #304]	; (8015a38 <etharp_query+0x264>)
 8015908:	f001 ff80 	bl	801780c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801590c:	7c7a      	ldrb	r2, [r7, #17]
 801590e:	494b      	ldr	r1, [pc, #300]	; (8015a3c <etharp_query+0x268>)
 8015910:	4613      	mov	r3, r2
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	4413      	add	r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	440b      	add	r3, r1
 801591a:	3314      	adds	r3, #20
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	2b01      	cmp	r3, #1
 8015920:	d917      	bls.n	8015952 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015922:	4a49      	ldr	r2, [pc, #292]	; (8015a48 <etharp_query+0x274>)
 8015924:	7c7b      	ldrb	r3, [r7, #17]
 8015926:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015928:	7c7a      	ldrb	r2, [r7, #17]
 801592a:	4613      	mov	r3, r2
 801592c:	005b      	lsls	r3, r3, #1
 801592e:	4413      	add	r3, r2
 8015930:	00db      	lsls	r3, r3, #3
 8015932:	3308      	adds	r3, #8
 8015934:	4a41      	ldr	r2, [pc, #260]	; (8015a3c <etharp_query+0x268>)
 8015936:	4413      	add	r3, r2
 8015938:	3304      	adds	r3, #4
 801593a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801593e:	9200      	str	r2, [sp, #0]
 8015940:	697a      	ldr	r2, [r7, #20]
 8015942:	6879      	ldr	r1, [r7, #4]
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f001 fd01 	bl	801734c <ethernet_output>
 801594a:	4603      	mov	r3, r0
 801594c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015950:	e067      	b.n	8015a22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015952:	7c7a      	ldrb	r2, [r7, #17]
 8015954:	4939      	ldr	r1, [pc, #228]	; (8015a3c <etharp_query+0x268>)
 8015956:	4613      	mov	r3, r2
 8015958:	005b      	lsls	r3, r3, #1
 801595a:	4413      	add	r3, r2
 801595c:	00db      	lsls	r3, r3, #3
 801595e:	440b      	add	r3, r1
 8015960:	3314      	adds	r3, #20
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b01      	cmp	r3, #1
 8015966:	d15c      	bne.n	8015a22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015968:	2300      	movs	r3, #0
 801596a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015970:	e01c      	b.n	80159ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	895a      	ldrh	r2, [r3, #10]
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	891b      	ldrh	r3, [r3, #8]
 801597a:	429a      	cmp	r2, r3
 801597c:	d10a      	bne.n	8015994 <etharp_query+0x1c0>
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d006      	beq.n	8015994 <etharp_query+0x1c0>
 8015986:	4b2a      	ldr	r3, [pc, #168]	; (8015a30 <etharp_query+0x25c>)
 8015988:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801598c:	492f      	ldr	r1, [pc, #188]	; (8015a4c <etharp_query+0x278>)
 801598e:	482a      	ldr	r0, [pc, #168]	; (8015a38 <etharp_query+0x264>)
 8015990:	f001 ff3c 	bl	801780c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	7b1b      	ldrb	r3, [r3, #12]
 8015998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801599c:	2b00      	cmp	r3, #0
 801599e:	d002      	beq.n	80159a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80159a0:	2301      	movs	r3, #1
 80159a2:	61bb      	str	r3, [r7, #24]
        break;
 80159a4:	e005      	b.n	80159b2 <etharp_query+0x1de>
      }
      p = p->next;
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d1df      	bne.n	8015972 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d007      	beq.n	80159c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80159be:	200e      	movs	r0, #14
 80159c0:	f7f8 fc86 	bl	800e2d0 <pbuf_clone>
 80159c4:	61f8      	str	r0, [r7, #28]
 80159c6:	e004      	b.n	80159d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80159cc:	69f8      	ldr	r0, [r7, #28]
 80159ce:	f7f8 fabd 	bl	800df4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d021      	beq.n	8015a1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80159d8:	7c7a      	ldrb	r2, [r7, #17]
 80159da:	4918      	ldr	r1, [pc, #96]	; (8015a3c <etharp_query+0x268>)
 80159dc:	4613      	mov	r3, r2
 80159de:	005b      	lsls	r3, r3, #1
 80159e0:	4413      	add	r3, r2
 80159e2:	00db      	lsls	r3, r3, #3
 80159e4:	440b      	add	r3, r1
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d00a      	beq.n	8015a02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80159ec:	7c7a      	ldrb	r2, [r7, #17]
 80159ee:	4913      	ldr	r1, [pc, #76]	; (8015a3c <etharp_query+0x268>)
 80159f0:	4613      	mov	r3, r2
 80159f2:	005b      	lsls	r3, r3, #1
 80159f4:	4413      	add	r3, r2
 80159f6:	00db      	lsls	r3, r3, #3
 80159f8:	440b      	add	r3, r1
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7f8 f9ff 	bl	800de00 <pbuf_free>
      }
      arp_table[i].q = p;
 8015a02:	7c7a      	ldrb	r2, [r7, #17]
 8015a04:	490d      	ldr	r1, [pc, #52]	; (8015a3c <etharp_query+0x268>)
 8015a06:	4613      	mov	r3, r2
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4413      	add	r3, r2
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	440b      	add	r3, r1
 8015a10:	69fa      	ldr	r2, [r7, #28]
 8015a12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015a14:	2300      	movs	r3, #0
 8015a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a1a:	e002      	b.n	8015a22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015a1c:	23ff      	movs	r3, #255	; 0xff
 8015a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3728      	adds	r7, #40	; 0x28
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	0801bd40 	.word	0x0801bd40
 8015a34:	0801beec 	.word	0x0801beec
 8015a38:	0801bdb8 	.word	0x0801bdb8
 8015a3c:	20004a44 	.word	0x20004a44
 8015a40:	0801befc 	.word	0x0801befc
 8015a44:	0801bee0 	.word	0x0801bee0
 8015a48:	20004b34 	.word	0x20004b34
 8015a4c:	0801bf24 	.word	0x0801bf24

08015a50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b08a      	sub	sp, #40	; 0x28
 8015a54:	af02      	add	r7, sp, #8
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
 8015a5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d106      	bne.n	8015a76 <etharp_raw+0x26>
 8015a68:	4b3a      	ldr	r3, [pc, #232]	; (8015b54 <etharp_raw+0x104>)
 8015a6a:	f240 4257 	movw	r2, #1111	; 0x457
 8015a6e:	493a      	ldr	r1, [pc, #232]	; (8015b58 <etharp_raw+0x108>)
 8015a70:	483a      	ldr	r0, [pc, #232]	; (8015b5c <etharp_raw+0x10c>)
 8015a72:	f001 fecb 	bl	801780c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015a76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a7a:	211c      	movs	r1, #28
 8015a7c:	200e      	movs	r0, #14
 8015a7e:	f7f7 fed7 	bl	800d830 <pbuf_alloc>
 8015a82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015a84:	69bb      	ldr	r3, [r7, #24]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d102      	bne.n	8015a90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a8e:	e05d      	b.n	8015b4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	895b      	ldrh	r3, [r3, #10]
 8015a94:	2b1b      	cmp	r3, #27
 8015a96:	d806      	bhi.n	8015aa6 <etharp_raw+0x56>
 8015a98:	4b2e      	ldr	r3, [pc, #184]	; (8015b54 <etharp_raw+0x104>)
 8015a9a:	f240 4262 	movw	r2, #1122	; 0x462
 8015a9e:	4930      	ldr	r1, [pc, #192]	; (8015b60 <etharp_raw+0x110>)
 8015aa0:	482e      	ldr	r0, [pc, #184]	; (8015b5c <etharp_raw+0x10c>)
 8015aa2:	f001 feb3 	bl	801780c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015aa6:	69bb      	ldr	r3, [r7, #24]
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015aac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7f6 fdf6 	bl	800c6a0 <lwip_htons>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ac2:	2b06      	cmp	r3, #6
 8015ac4:	d006      	beq.n	8015ad4 <etharp_raw+0x84>
 8015ac6:	4b23      	ldr	r3, [pc, #140]	; (8015b54 <etharp_raw+0x104>)
 8015ac8:	f240 4269 	movw	r2, #1129	; 0x469
 8015acc:	4925      	ldr	r1, [pc, #148]	; (8015b64 <etharp_raw+0x114>)
 8015ace:	4823      	ldr	r0, [pc, #140]	; (8015b5c <etharp_raw+0x10c>)
 8015ad0:	f001 fe9c 	bl	801780c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	3308      	adds	r3, #8
 8015ad8:	2206      	movs	r2, #6
 8015ada:	6839      	ldr	r1, [r7, #0]
 8015adc:	4618      	mov	r0, r3
 8015ade:	f001 fe65 	bl	80177ac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	3312      	adds	r3, #18
 8015ae6:	2206      	movs	r2, #6
 8015ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015aea:	4618      	mov	r0, r3
 8015aec:	f001 fe5e 	bl	80177ac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	330e      	adds	r3, #14
 8015af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015af6:	6812      	ldr	r2, [r2, #0]
 8015af8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	3318      	adds	r3, #24
 8015afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b00:	6812      	ldr	r2, [r2, #0]
 8015b02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	2200      	movs	r2, #0
 8015b08:	701a      	strb	r2, [r3, #0]
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	f042 0201 	orr.w	r2, r2, #1
 8015b10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	2200      	movs	r2, #0
 8015b16:	f042 0208 	orr.w	r2, r2, #8
 8015b1a:	709a      	strb	r2, [r3, #2]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	2206      	movs	r2, #6
 8015b24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	2204      	movs	r2, #4
 8015b2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015b2c:	f640 0306 	movw	r3, #2054	; 0x806
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	68ba      	ldr	r2, [r7, #8]
 8015b36:	69b9      	ldr	r1, [r7, #24]
 8015b38:	68f8      	ldr	r0, [r7, #12]
 8015b3a:	f001 fc07 	bl	801734c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015b3e:	69b8      	ldr	r0, [r7, #24]
 8015b40:	f7f8 f95e 	bl	800de00 <pbuf_free>
  p = NULL;
 8015b44:	2300      	movs	r3, #0
 8015b46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015b48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3720      	adds	r7, #32
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	0801bd40 	.word	0x0801bd40
 8015b58:	0801be90 	.word	0x0801be90
 8015b5c:	0801bdb8 	.word	0x0801bdb8
 8015b60:	0801bf40 	.word	0x0801bf40
 8015b64:	0801bf74 	.word	0x0801bf74

08015b68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b088      	sub	sp, #32
 8015b6c:	af04      	add	r7, sp, #16
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	60b9      	str	r1, [r7, #8]
 8015b72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b84:	2201      	movs	r2, #1
 8015b86:	9203      	str	r2, [sp, #12]
 8015b88:	68ba      	ldr	r2, [r7, #8]
 8015b8a:	9202      	str	r2, [sp, #8]
 8015b8c:	4a06      	ldr	r2, [pc, #24]	; (8015ba8 <etharp_request_dst+0x40>)
 8015b8e:	9201      	str	r2, [sp, #4]
 8015b90:	9300      	str	r3, [sp, #0]
 8015b92:	4603      	mov	r3, r0
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	68f8      	ldr	r0, [r7, #12]
 8015b98:	f7ff ff5a 	bl	8015a50 <etharp_raw>
 8015b9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	0801c584 	.word	0x0801c584

08015bac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015bb6:	4a05      	ldr	r2, [pc, #20]	; (8015bcc <etharp_request+0x20>)
 8015bb8:	6839      	ldr	r1, [r7, #0]
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f7ff ffd4 	bl	8015b68 <etharp_request_dst>
 8015bc0:	4603      	mov	r3, r0
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3708      	adds	r7, #8
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}
 8015bca:	bf00      	nop
 8015bcc:	0801c57c 	.word	0x0801c57c

08015bd0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b08e      	sub	sp, #56	; 0x38
 8015bd4:	af04      	add	r7, sp, #16
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015bda:	4b79      	ldr	r3, [pc, #484]	; (8015dc0 <icmp_input+0x1f0>)
 8015bdc:	689b      	ldr	r3, [r3, #8]
 8015bde:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	f003 030f 	and.w	r3, r3, #15
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bf2:	2b13      	cmp	r3, #19
 8015bf4:	f240 80cd 	bls.w	8015d92 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	895b      	ldrh	r3, [r3, #10]
 8015bfc:	2b03      	cmp	r3, #3
 8015bfe:	f240 80ca 	bls.w	8015d96 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015c0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f000 80b7 	beq.w	8015d84 <icmp_input+0x1b4>
 8015c16:	2b08      	cmp	r3, #8
 8015c18:	f040 80b7 	bne.w	8015d8a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015c1c:	4b69      	ldr	r3, [pc, #420]	; (8015dc4 <icmp_input+0x1f4>)
 8015c1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c20:	4b67      	ldr	r3, [pc, #412]	; (8015dc0 <icmp_input+0x1f0>)
 8015c22:	695b      	ldr	r3, [r3, #20]
 8015c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c28:	2be0      	cmp	r3, #224	; 0xe0
 8015c2a:	f000 80bb 	beq.w	8015da4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015c2e:	4b64      	ldr	r3, [pc, #400]	; (8015dc0 <icmp_input+0x1f0>)
 8015c30:	695b      	ldr	r3, [r3, #20]
 8015c32:	4a63      	ldr	r2, [pc, #396]	; (8015dc0 <icmp_input+0x1f0>)
 8015c34:	6812      	ldr	r2, [r2, #0]
 8015c36:	4611      	mov	r1, r2
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f000 fbed 	bl	8016418 <ip4_addr_isbroadcast_u32>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f040 80b1 	bne.w	8015da8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	891b      	ldrh	r3, [r3, #8]
 8015c4a:	2b07      	cmp	r3, #7
 8015c4c:	f240 80a5 	bls.w	8015d9a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c52:	330e      	adds	r3, #14
 8015c54:	4619      	mov	r1, r3
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f7f8 f83c 	bl	800dcd4 <pbuf_add_header>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d04b      	beq.n	8015cfa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	891a      	ldrh	r2, [r3, #8]
 8015c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c68:	4413      	add	r3, r2
 8015c6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	891b      	ldrh	r3, [r3, #8]
 8015c70:	8b7a      	ldrh	r2, [r7, #26]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	f0c0 809a 	bcc.w	8015dac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015c78:	8b7b      	ldrh	r3, [r7, #26]
 8015c7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c7e:	4619      	mov	r1, r3
 8015c80:	200e      	movs	r0, #14
 8015c82:	f7f7 fdd5 	bl	800d830 <pbuf_alloc>
 8015c86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f000 8090 	beq.w	8015db0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	895b      	ldrh	r3, [r3, #10]
 8015c94:	461a      	mov	r2, r3
 8015c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c98:	3308      	adds	r3, #8
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d203      	bcs.n	8015ca6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015c9e:	6978      	ldr	r0, [r7, #20]
 8015ca0:	f7f8 f8ae 	bl	800de00 <pbuf_free>
          goto icmperr;
 8015ca4:	e085      	b.n	8015db2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f001 fd7c 	bl	80177ac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015cb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	6978      	ldr	r0, [r7, #20]
 8015cba:	f7f8 f81b 	bl	800dcf4 <pbuf_remove_header>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d009      	beq.n	8015cd8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015cc4:	4b40      	ldr	r3, [pc, #256]	; (8015dc8 <icmp_input+0x1f8>)
 8015cc6:	22b6      	movs	r2, #182	; 0xb6
 8015cc8:	4940      	ldr	r1, [pc, #256]	; (8015dcc <icmp_input+0x1fc>)
 8015cca:	4841      	ldr	r0, [pc, #260]	; (8015dd0 <icmp_input+0x200>)
 8015ccc:	f001 fd9e 	bl	801780c <iprintf>
          pbuf_free(r);
 8015cd0:	6978      	ldr	r0, [r7, #20]
 8015cd2:	f7f8 f895 	bl	800de00 <pbuf_free>
          goto icmperr;
 8015cd6:	e06c      	b.n	8015db2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015cd8:	6879      	ldr	r1, [r7, #4]
 8015cda:	6978      	ldr	r0, [r7, #20]
 8015cdc:	f7f8 f9b4 	bl	800e048 <pbuf_copy>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d003      	beq.n	8015cee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015ce6:	6978      	ldr	r0, [r7, #20]
 8015ce8:	f7f8 f88a 	bl	800de00 <pbuf_free>
          goto icmperr;
 8015cec:	e061      	b.n	8015db2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f7f8 f886 	bl	800de00 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	607b      	str	r3, [r7, #4]
 8015cf8:	e00f      	b.n	8015d1a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cfc:	330e      	adds	r3, #14
 8015cfe:	4619      	mov	r1, r3
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f7f7 fff7 	bl	800dcf4 <pbuf_remove_header>
 8015d06:	4603      	mov	r3, r0
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d006      	beq.n	8015d1a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015d0c:	4b2e      	ldr	r3, [pc, #184]	; (8015dc8 <icmp_input+0x1f8>)
 8015d0e:	22c7      	movs	r2, #199	; 0xc7
 8015d10:	4930      	ldr	r1, [pc, #192]	; (8015dd4 <icmp_input+0x204>)
 8015d12:	482f      	ldr	r0, [pc, #188]	; (8015dd0 <icmp_input+0x200>)
 8015d14:	f001 fd7a 	bl	801780c <iprintf>
          goto icmperr;
 8015d18:	e04b      	b.n	8015db2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d22:	4619      	mov	r1, r3
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f7f7 ffd5 	bl	800dcd4 <pbuf_add_header>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d12b      	bne.n	8015d88 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015d3e:	4b20      	ldr	r3, [pc, #128]	; (8015dc0 <icmp_input+0x1f0>)
 8015d40:	691a      	ldr	r2, [r3, #16]
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	709a      	strb	r2, [r3, #2]
 8015d52:	2200      	movs	r2, #0
 8015d54:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	22ff      	movs	r2, #255	; 0xff
 8015d5a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	729a      	strb	r2, [r3, #10]
 8015d62:	2200      	movs	r2, #0
 8015d64:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	9302      	str	r3, [sp, #8]
 8015d6a:	2301      	movs	r3, #1
 8015d6c:	9301      	str	r3, [sp, #4]
 8015d6e:	2300      	movs	r3, #0
 8015d70:	9300      	str	r3, [sp, #0]
 8015d72:	23ff      	movs	r3, #255	; 0xff
 8015d74:	2200      	movs	r2, #0
 8015d76:	69f9      	ldr	r1, [r7, #28]
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f000 fa75 	bl	8016268 <ip4_output_if>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015d82:	e001      	b.n	8015d88 <icmp_input+0x1b8>
      break;
 8015d84:	bf00      	nop
 8015d86:	e000      	b.n	8015d8a <icmp_input+0x1ba>
      break;
 8015d88:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7f8 f838 	bl	800de00 <pbuf_free>
  return;
 8015d90:	e013      	b.n	8015dba <icmp_input+0x1ea>
    goto lenerr;
 8015d92:	bf00      	nop
 8015d94:	e002      	b.n	8015d9c <icmp_input+0x1cc>
    goto lenerr;
 8015d96:	bf00      	nop
 8015d98:	e000      	b.n	8015d9c <icmp_input+0x1cc>
        goto lenerr;
 8015d9a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f7f8 f82f 	bl	800de00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015da2:	e00a      	b.n	8015dba <icmp_input+0x1ea>
        goto icmperr;
 8015da4:	bf00      	nop
 8015da6:	e004      	b.n	8015db2 <icmp_input+0x1e2>
        goto icmperr;
 8015da8:	bf00      	nop
 8015daa:	e002      	b.n	8015db2 <icmp_input+0x1e2>
          goto icmperr;
 8015dac:	bf00      	nop
 8015dae:	e000      	b.n	8015db2 <icmp_input+0x1e2>
          goto icmperr;
 8015db0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7f8 f824 	bl	800de00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015db8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015dba:	3728      	adds	r7, #40	; 0x28
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	200081e4 	.word	0x200081e4
 8015dc4:	200081f8 	.word	0x200081f8
 8015dc8:	0801bfb8 	.word	0x0801bfb8
 8015dcc:	0801bff0 	.word	0x0801bff0
 8015dd0:	0801c028 	.word	0x0801c028
 8015dd4:	0801c050 	.word	0x0801c050

08015dd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
 8015de0:	460b      	mov	r3, r1
 8015de2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015de4:	78fb      	ldrb	r3, [r7, #3]
 8015de6:	461a      	mov	r2, r3
 8015de8:	2103      	movs	r1, #3
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f814 	bl	8015e18 <icmp_send_response>
}
 8015df0:	bf00      	nop
 8015df2:	3708      	adds	r7, #8
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	460b      	mov	r3, r1
 8015e02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015e04:	78fb      	ldrb	r3, [r7, #3]
 8015e06:	461a      	mov	r2, r3
 8015e08:	210b      	movs	r1, #11
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 f804 	bl	8015e18 <icmp_send_response>
}
 8015e10:	bf00      	nop
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b08c      	sub	sp, #48	; 0x30
 8015e1c:	af04      	add	r7, sp, #16
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	460b      	mov	r3, r1
 8015e22:	70fb      	strb	r3, [r7, #3]
 8015e24:	4613      	mov	r3, r2
 8015e26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015e28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e2c:	2124      	movs	r1, #36	; 0x24
 8015e2e:	2022      	movs	r0, #34	; 0x22
 8015e30:	f7f7 fcfe 	bl	800d830 <pbuf_alloc>
 8015e34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015e36:	69fb      	ldr	r3, [r7, #28]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d04c      	beq.n	8015ed6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	895b      	ldrh	r3, [r3, #10]
 8015e40:	2b23      	cmp	r3, #35	; 0x23
 8015e42:	d806      	bhi.n	8015e52 <icmp_send_response+0x3a>
 8015e44:	4b26      	ldr	r3, [pc, #152]	; (8015ee0 <icmp_send_response+0xc8>)
 8015e46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015e4a:	4926      	ldr	r1, [pc, #152]	; (8015ee4 <icmp_send_response+0xcc>)
 8015e4c:	4826      	ldr	r0, [pc, #152]	; (8015ee8 <icmp_send_response+0xd0>)
 8015e4e:	f001 fcdd 	bl	801780c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	78fa      	ldrb	r2, [r7, #3]
 8015e62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	78ba      	ldrb	r2, [r7, #2]
 8015e68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	711a      	strb	r2, [r3, #4]
 8015e70:	2200      	movs	r2, #0
 8015e72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	2200      	movs	r2, #0
 8015e78:	719a      	strb	r2, [r3, #6]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015e7e:	69fb      	ldr	r3, [r7, #28]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	f103 0008 	add.w	r0, r3, #8
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	221c      	movs	r2, #28
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	f001 fc8d 	bl	80177ac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	68db      	ldr	r3, [r3, #12]
 8015e96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015e98:	f107 030c 	add.w	r3, r7, #12
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	f000 f825 	bl	8015eec <ip4_route>
 8015ea2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d011      	beq.n	8015ece <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	2200      	movs	r2, #0
 8015eae:	709a      	strb	r2, [r3, #2]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015eb4:	f107 020c 	add.w	r2, r7, #12
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	9302      	str	r3, [sp, #8]
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	9301      	str	r3, [sp, #4]
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	9300      	str	r3, [sp, #0]
 8015ec4:	23ff      	movs	r3, #255	; 0xff
 8015ec6:	2100      	movs	r1, #0
 8015ec8:	69f8      	ldr	r0, [r7, #28]
 8015eca:	f000 f9cd 	bl	8016268 <ip4_output_if>
  }
  pbuf_free(q);
 8015ece:	69f8      	ldr	r0, [r7, #28]
 8015ed0:	f7f7 ff96 	bl	800de00 <pbuf_free>
 8015ed4:	e000      	b.n	8015ed8 <icmp_send_response+0xc0>
    return;
 8015ed6:	bf00      	nop
}
 8015ed8:	3720      	adds	r7, #32
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop
 8015ee0:	0801bfb8 	.word	0x0801bfb8
 8015ee4:	0801c084 	.word	0x0801c084
 8015ee8:	0801c028 	.word	0x0801c028

08015eec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b085      	sub	sp, #20
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015ef4:	4b33      	ldr	r3, [pc, #204]	; (8015fc4 <ip4_route+0xd8>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	60fb      	str	r3, [r7, #12]
 8015efa:	e036      	b.n	8015f6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f02:	f003 0301 	and.w	r3, r3, #1
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d02b      	beq.n	8015f64 <ip4_route+0x78>
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f12:	089b      	lsrs	r3, r3, #2
 8015f14:	f003 0301 	and.w	r3, r3, #1
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d022      	beq.n	8015f64 <ip4_route+0x78>
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	3304      	adds	r3, #4
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d01d      	beq.n	8015f64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	3304      	adds	r3, #4
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	405a      	eors	r2, r3
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	3308      	adds	r3, #8
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	4013      	ands	r3, r2
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d101      	bne.n	8015f44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	e038      	b.n	8015fb6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f4a:	f003 0302 	and.w	r3, r3, #2
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d108      	bne.n	8015f64 <ip4_route+0x78>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	330c      	adds	r3, #12
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d101      	bne.n	8015f64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	e028      	b.n	8015fb6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	60fb      	str	r3, [r7, #12]
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d1c5      	bne.n	8015efc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f70:	4b15      	ldr	r3, [pc, #84]	; (8015fc8 <ip4_route+0xdc>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d01a      	beq.n	8015fae <ip4_route+0xc2>
 8015f78:	4b13      	ldr	r3, [pc, #76]	; (8015fc8 <ip4_route+0xdc>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f80:	f003 0301 	and.w	r3, r3, #1
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d012      	beq.n	8015fae <ip4_route+0xc2>
 8015f88:	4b0f      	ldr	r3, [pc, #60]	; (8015fc8 <ip4_route+0xdc>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f90:	f003 0304 	and.w	r3, r3, #4
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d00a      	beq.n	8015fae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015f98:	4b0b      	ldr	r3, [pc, #44]	; (8015fc8 <ip4_route+0xdc>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	3304      	adds	r3, #4
 8015f9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d004      	beq.n	8015fae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	b2db      	uxtb	r3, r3
 8015faa:	2b7f      	cmp	r3, #127	; 0x7f
 8015fac:	d101      	bne.n	8015fb2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	e001      	b.n	8015fb6 <ip4_route+0xca>
  }

  return netif_default;
 8015fb2:	4b05      	ldr	r3, [pc, #20]	; (8015fc8 <ip4_route+0xdc>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3714      	adds	r7, #20
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	200114e8 	.word	0x200114e8
 8015fc8:	200114ec 	.word	0x200114ec

08015fcc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fda:	f003 0301 	and.w	r3, r3, #1
 8015fde:	b2db      	uxtb	r3, r3
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d016      	beq.n	8016012 <ip4_input_accept+0x46>
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	3304      	adds	r3, #4
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d011      	beq.n	8016012 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015fee:	4b0b      	ldr	r3, [pc, #44]	; (801601c <ip4_input_accept+0x50>)
 8015ff0:	695a      	ldr	r2, [r3, #20]
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	3304      	adds	r3, #4
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d008      	beq.n	801600e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015ffc:	4b07      	ldr	r3, [pc, #28]	; (801601c <ip4_input_accept+0x50>)
 8015ffe:	695b      	ldr	r3, [r3, #20]
 8016000:	6879      	ldr	r1, [r7, #4]
 8016002:	4618      	mov	r0, r3
 8016004:	f000 fa08 	bl	8016418 <ip4_addr_isbroadcast_u32>
 8016008:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801600a:	2b00      	cmp	r3, #0
 801600c:	d001      	beq.n	8016012 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801600e:	2301      	movs	r3, #1
 8016010:	e000      	b.n	8016014 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	200081e4 	.word	0x200081e4

08016020 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b086      	sub	sp, #24
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
 8016028:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	781b      	ldrb	r3, [r3, #0]
 8016034:	091b      	lsrs	r3, r3, #4
 8016036:	b2db      	uxtb	r3, r3
 8016038:	2b04      	cmp	r3, #4
 801603a:	d004      	beq.n	8016046 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f7f7 fedf 	bl	800de00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016042:	2300      	movs	r3, #0
 8016044:	e107      	b.n	8016256 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	f003 030f 	and.w	r3, r3, #15
 801604e:	b2db      	uxtb	r3, r3
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	b2db      	uxtb	r3, r3
 8016054:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	885b      	ldrh	r3, [r3, #2]
 801605a:	b29b      	uxth	r3, r3
 801605c:	4618      	mov	r0, r3
 801605e:	f7f6 fb1f 	bl	800c6a0 <lwip_htons>
 8016062:	4603      	mov	r3, r0
 8016064:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	891b      	ldrh	r3, [r3, #8]
 801606a:	89ba      	ldrh	r2, [r7, #12]
 801606c:	429a      	cmp	r2, r3
 801606e:	d204      	bcs.n	801607a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016070:	89bb      	ldrh	r3, [r7, #12]
 8016072:	4619      	mov	r1, r3
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7f7 fd3d 	bl	800daf4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	895b      	ldrh	r3, [r3, #10]
 801607e:	89fa      	ldrh	r2, [r7, #14]
 8016080:	429a      	cmp	r2, r3
 8016082:	d807      	bhi.n	8016094 <ip4_input+0x74>
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	891b      	ldrh	r3, [r3, #8]
 8016088:	89ba      	ldrh	r2, [r7, #12]
 801608a:	429a      	cmp	r2, r3
 801608c:	d802      	bhi.n	8016094 <ip4_input+0x74>
 801608e:	89fb      	ldrh	r3, [r7, #14]
 8016090:	2b13      	cmp	r3, #19
 8016092:	d804      	bhi.n	801609e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7f7 feb3 	bl	800de00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801609a:	2300      	movs	r3, #0
 801609c:	e0db      	b.n	8016256 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	691b      	ldr	r3, [r3, #16]
 80160a2:	4a6f      	ldr	r2, [pc, #444]	; (8016260 <ip4_input+0x240>)
 80160a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	4a6d      	ldr	r2, [pc, #436]	; (8016260 <ip4_input+0x240>)
 80160ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160ae:	4b6c      	ldr	r3, [pc, #432]	; (8016260 <ip4_input+0x240>)
 80160b0:	695b      	ldr	r3, [r3, #20]
 80160b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160b6:	2be0      	cmp	r3, #224	; 0xe0
 80160b8:	d112      	bne.n	80160e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160c0:	f003 0301 	and.w	r3, r3, #1
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d007      	beq.n	80160da <ip4_input+0xba>
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	3304      	adds	r3, #4
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d002      	beq.n	80160da <ip4_input+0xba>
      netif = inp;
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	613b      	str	r3, [r7, #16]
 80160d8:	e02a      	b.n	8016130 <ip4_input+0x110>
    } else {
      netif = NULL;
 80160da:	2300      	movs	r3, #0
 80160dc:	613b      	str	r3, [r7, #16]
 80160de:	e027      	b.n	8016130 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80160e0:	6838      	ldr	r0, [r7, #0]
 80160e2:	f7ff ff73 	bl	8015fcc <ip4_input_accept>
 80160e6:	4603      	mov	r3, r0
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d002      	beq.n	80160f2 <ip4_input+0xd2>
      netif = inp;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	613b      	str	r3, [r7, #16]
 80160f0:	e01e      	b.n	8016130 <ip4_input+0x110>
    } else {
      netif = NULL;
 80160f2:	2300      	movs	r3, #0
 80160f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80160f6:	4b5a      	ldr	r3, [pc, #360]	; (8016260 <ip4_input+0x240>)
 80160f8:	695b      	ldr	r3, [r3, #20]
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	2b7f      	cmp	r3, #127	; 0x7f
 80160fe:	d017      	beq.n	8016130 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016100:	4b58      	ldr	r3, [pc, #352]	; (8016264 <ip4_input+0x244>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	613b      	str	r3, [r7, #16]
 8016106:	e00e      	b.n	8016126 <ip4_input+0x106>
          if (netif == inp) {
 8016108:	693a      	ldr	r2, [r7, #16]
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	429a      	cmp	r2, r3
 801610e:	d006      	beq.n	801611e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016110:	6938      	ldr	r0, [r7, #16]
 8016112:	f7ff ff5b 	bl	8015fcc <ip4_input_accept>
 8016116:	4603      	mov	r3, r0
 8016118:	2b00      	cmp	r3, #0
 801611a:	d108      	bne.n	801612e <ip4_input+0x10e>
 801611c:	e000      	b.n	8016120 <ip4_input+0x100>
            continue;
 801611e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	613b      	str	r3, [r7, #16]
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1ed      	bne.n	8016108 <ip4_input+0xe8>
 801612c:	e000      	b.n	8016130 <ip4_input+0x110>
            break;
 801612e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016130:	4b4b      	ldr	r3, [pc, #300]	; (8016260 <ip4_input+0x240>)
 8016132:	691b      	ldr	r3, [r3, #16]
 8016134:	6839      	ldr	r1, [r7, #0]
 8016136:	4618      	mov	r0, r3
 8016138:	f000 f96e 	bl	8016418 <ip4_addr_isbroadcast_u32>
 801613c:	4603      	mov	r3, r0
 801613e:	2b00      	cmp	r3, #0
 8016140:	d105      	bne.n	801614e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016142:	4b47      	ldr	r3, [pc, #284]	; (8016260 <ip4_input+0x240>)
 8016144:	691b      	ldr	r3, [r3, #16]
 8016146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801614a:	2be0      	cmp	r3, #224	; 0xe0
 801614c:	d104      	bne.n	8016158 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7f7 fe56 	bl	800de00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016154:	2300      	movs	r3, #0
 8016156:	e07e      	b.n	8016256 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d104      	bne.n	8016168 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f7f7 fe4e 	bl	800de00 <pbuf_free>
    return ERR_OK;
 8016164:	2300      	movs	r3, #0
 8016166:	e076      	b.n	8016256 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	88db      	ldrh	r3, [r3, #6]
 801616c:	b29b      	uxth	r3, r3
 801616e:	461a      	mov	r2, r3
 8016170:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016174:	4013      	ands	r3, r2
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00b      	beq.n	8016192 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 fd24 	bl	8016bc8 <ip4_reass>
 8016180:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d101      	bne.n	801618c <ip4_input+0x16c>
      return ERR_OK;
 8016188:	2300      	movs	r3, #0
 801618a:	e064      	b.n	8016256 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016192:	4a33      	ldr	r2, [pc, #204]	; (8016260 <ip4_input+0x240>)
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016198:	4a31      	ldr	r2, [pc, #196]	; (8016260 <ip4_input+0x240>)
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801619e:	4a30      	ldr	r2, [pc, #192]	; (8016260 <ip4_input+0x240>)
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	f003 030f 	and.w	r3, r3, #15
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	4b2a      	ldr	r3, [pc, #168]	; (8016260 <ip4_input+0x240>)
 80161b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80161b8:	89fb      	ldrh	r3, [r7, #14]
 80161ba:	4619      	mov	r1, r3
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f7f7 fd99 	bl	800dcf4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80161c2:	697b      	ldr	r3, [r7, #20]
 80161c4:	7a5b      	ldrb	r3, [r3, #9]
 80161c6:	2b11      	cmp	r3, #17
 80161c8:	d006      	beq.n	80161d8 <ip4_input+0x1b8>
 80161ca:	2b11      	cmp	r3, #17
 80161cc:	dc13      	bgt.n	80161f6 <ip4_input+0x1d6>
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d00c      	beq.n	80161ec <ip4_input+0x1cc>
 80161d2:	2b06      	cmp	r3, #6
 80161d4:	d005      	beq.n	80161e2 <ip4_input+0x1c2>
 80161d6:	e00e      	b.n	80161f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80161d8:	6839      	ldr	r1, [r7, #0]
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f7fe fb5a 	bl	8014894 <udp_input>
        break;
 80161e0:	e026      	b.n	8016230 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80161e2:	6839      	ldr	r1, [r7, #0]
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f7f9 ff15 	bl	8010014 <tcp_input>
        break;
 80161ea:	e021      	b.n	8016230 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80161ec:	6839      	ldr	r1, [r7, #0]
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f7ff fcee 	bl	8015bd0 <icmp_input>
        break;
 80161f4:	e01c      	b.n	8016230 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80161f6:	4b1a      	ldr	r3, [pc, #104]	; (8016260 <ip4_input+0x240>)
 80161f8:	695b      	ldr	r3, [r3, #20]
 80161fa:	6939      	ldr	r1, [r7, #16]
 80161fc:	4618      	mov	r0, r3
 80161fe:	f000 f90b 	bl	8016418 <ip4_addr_isbroadcast_u32>
 8016202:	4603      	mov	r3, r0
 8016204:	2b00      	cmp	r3, #0
 8016206:	d10f      	bne.n	8016228 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016208:	4b15      	ldr	r3, [pc, #84]	; (8016260 <ip4_input+0x240>)
 801620a:	695b      	ldr	r3, [r3, #20]
 801620c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016210:	2be0      	cmp	r3, #224	; 0xe0
 8016212:	d009      	beq.n	8016228 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016218:	4619      	mov	r1, r3
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f7f7 fddd 	bl	800ddda <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016220:	2102      	movs	r1, #2
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f7ff fdd8 	bl	8015dd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7f7 fde9 	bl	800de00 <pbuf_free>
        break;
 801622e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016230:	4b0b      	ldr	r3, [pc, #44]	; (8016260 <ip4_input+0x240>)
 8016232:	2200      	movs	r2, #0
 8016234:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016236:	4b0a      	ldr	r3, [pc, #40]	; (8016260 <ip4_input+0x240>)
 8016238:	2200      	movs	r2, #0
 801623a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801623c:	4b08      	ldr	r3, [pc, #32]	; (8016260 <ip4_input+0x240>)
 801623e:	2200      	movs	r2, #0
 8016240:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016242:	4b07      	ldr	r3, [pc, #28]	; (8016260 <ip4_input+0x240>)
 8016244:	2200      	movs	r2, #0
 8016246:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016248:	4b05      	ldr	r3, [pc, #20]	; (8016260 <ip4_input+0x240>)
 801624a:	2200      	movs	r2, #0
 801624c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801624e:	4b04      	ldr	r3, [pc, #16]	; (8016260 <ip4_input+0x240>)
 8016250:	2200      	movs	r2, #0
 8016252:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016254:	2300      	movs	r3, #0
}
 8016256:	4618      	mov	r0, r3
 8016258:	3718      	adds	r7, #24
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	200081e4 	.word	0x200081e4
 8016264:	200114e8 	.word	0x200114e8

08016268 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b08a      	sub	sp, #40	; 0x28
 801626c:	af04      	add	r7, sp, #16
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
 8016274:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d009      	beq.n	8016294 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d003      	beq.n	801628e <ip4_output_if+0x26>
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d102      	bne.n	8016294 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016290:	3304      	adds	r3, #4
 8016292:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016294:	78fa      	ldrb	r2, [r7, #3]
 8016296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016298:	9302      	str	r3, [sp, #8]
 801629a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801629e:	9301      	str	r3, [sp, #4]
 80162a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162a4:	9300      	str	r3, [sp, #0]
 80162a6:	4613      	mov	r3, r2
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	6979      	ldr	r1, [r7, #20]
 80162ac:	68f8      	ldr	r0, [r7, #12]
 80162ae:	f000 f805 	bl	80162bc <ip4_output_if_src>
 80162b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80162b4:	4618      	mov	r0, r3
 80162b6:	3718      	adds	r7, #24
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}

080162bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b088      	sub	sp, #32
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
 80162c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	7b9b      	ldrb	r3, [r3, #14]
 80162ce:	2b01      	cmp	r3, #1
 80162d0:	d006      	beq.n	80162e0 <ip4_output_if_src+0x24>
 80162d2:	4b4b      	ldr	r3, [pc, #300]	; (8016400 <ip4_output_if_src+0x144>)
 80162d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80162d8:	494a      	ldr	r1, [pc, #296]	; (8016404 <ip4_output_if_src+0x148>)
 80162da:	484b      	ldr	r0, [pc, #300]	; (8016408 <ip4_output_if_src+0x14c>)
 80162dc:	f001 fa96 	bl	801780c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d060      	beq.n	80163a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80162e6:	2314      	movs	r3, #20
 80162e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80162ea:	2114      	movs	r1, #20
 80162ec:	68f8      	ldr	r0, [r7, #12]
 80162ee:	f7f7 fcf1 	bl	800dcd4 <pbuf_add_header>
 80162f2:	4603      	mov	r3, r0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d002      	beq.n	80162fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80162f8:	f06f 0301 	mvn.w	r3, #1
 80162fc:	e07c      	b.n	80163f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	895b      	ldrh	r3, [r3, #10]
 8016308:	2b13      	cmp	r3, #19
 801630a:	d806      	bhi.n	801631a <ip4_output_if_src+0x5e>
 801630c:	4b3c      	ldr	r3, [pc, #240]	; (8016400 <ip4_output_if_src+0x144>)
 801630e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016312:	493e      	ldr	r1, [pc, #248]	; (801640c <ip4_output_if_src+0x150>)
 8016314:	483c      	ldr	r0, [pc, #240]	; (8016408 <ip4_output_if_src+0x14c>)
 8016316:	f001 fa79 	bl	801780c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	78fa      	ldrb	r2, [r7, #3]
 801631e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016326:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681a      	ldr	r2, [r3, #0]
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016330:	8b7b      	ldrh	r3, [r7, #26]
 8016332:	089b      	lsrs	r3, r3, #2
 8016334:	b29b      	uxth	r3, r3
 8016336:	b2db      	uxtb	r3, r3
 8016338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801633c:	b2da      	uxtb	r2, r3
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016342:	69fb      	ldr	r3, [r7, #28]
 8016344:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016348:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	891b      	ldrh	r3, [r3, #8]
 801634e:	4618      	mov	r0, r3
 8016350:	f7f6 f9a6 	bl	800c6a0 <lwip_htons>
 8016354:	4603      	mov	r3, r0
 8016356:	461a      	mov	r2, r3
 8016358:	69fb      	ldr	r3, [r7, #28]
 801635a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	2200      	movs	r2, #0
 8016360:	719a      	strb	r2, [r3, #6]
 8016362:	2200      	movs	r2, #0
 8016364:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016366:	4b2a      	ldr	r3, [pc, #168]	; (8016410 <ip4_output_if_src+0x154>)
 8016368:	881b      	ldrh	r3, [r3, #0]
 801636a:	4618      	mov	r0, r3
 801636c:	f7f6 f998 	bl	800c6a0 <lwip_htons>
 8016370:	4603      	mov	r3, r0
 8016372:	461a      	mov	r2, r3
 8016374:	69fb      	ldr	r3, [r7, #28]
 8016376:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016378:	4b25      	ldr	r3, [pc, #148]	; (8016410 <ip4_output_if_src+0x154>)
 801637a:	881b      	ldrh	r3, [r3, #0]
 801637c:	3301      	adds	r3, #1
 801637e:	b29a      	uxth	r2, r3
 8016380:	4b23      	ldr	r3, [pc, #140]	; (8016410 <ip4_output_if_src+0x154>)
 8016382:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d104      	bne.n	8016394 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801638a:	4b22      	ldr	r3, [pc, #136]	; (8016414 <ip4_output_if_src+0x158>)
 801638c:	681a      	ldr	r2, [r3, #0]
 801638e:	69fb      	ldr	r3, [r7, #28]
 8016390:	60da      	str	r2, [r3, #12]
 8016392:	e003      	b.n	801639c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	681a      	ldr	r2, [r3, #0]
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	2200      	movs	r2, #0
 80163a0:	729a      	strb	r2, [r3, #10]
 80163a2:	2200      	movs	r2, #0
 80163a4:	72da      	strb	r2, [r3, #11]
 80163a6:	e00f      	b.n	80163c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	895b      	ldrh	r3, [r3, #10]
 80163ac:	2b13      	cmp	r3, #19
 80163ae:	d802      	bhi.n	80163b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80163b0:	f06f 0301 	mvn.w	r3, #1
 80163b4:	e020      	b.n	80163f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	685b      	ldr	r3, [r3, #4]
 80163ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80163bc:	69fb      	ldr	r3, [r7, #28]
 80163be:	691b      	ldr	r3, [r3, #16]
 80163c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80163c2:	f107 0314 	add.w	r3, r7, #20
 80163c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80163c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d00c      	beq.n	80163ea <ip4_output_if_src+0x12e>
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	891a      	ldrh	r2, [r3, #8]
 80163d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163d8:	429a      	cmp	r2, r3
 80163da:	d906      	bls.n	80163ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80163dc:	687a      	ldr	r2, [r7, #4]
 80163de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f000 fddf 	bl	8016fa4 <ip4_frag>
 80163e6:	4603      	mov	r3, r0
 80163e8:	e006      	b.n	80163f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80163ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	687a      	ldr	r2, [r7, #4]
 80163f0:	68f9      	ldr	r1, [r7, #12]
 80163f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163f4:	4798      	blx	r3
 80163f6:	4603      	mov	r3, r0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3720      	adds	r7, #32
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	0801c0b0 	.word	0x0801c0b0
 8016404:	0801c0e4 	.word	0x0801c0e4
 8016408:	0801c0f0 	.word	0x0801c0f0
 801640c:	0801c118 	.word	0x0801c118
 8016410:	20004b36 	.word	0x20004b36
 8016414:	0801c578 	.word	0x0801c578

08016418 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016418:	b480      	push	{r7}
 801641a:	b085      	sub	sp, #20
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801642c:	d002      	beq.n	8016434 <ip4_addr_isbroadcast_u32+0x1c>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d101      	bne.n	8016438 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016434:	2301      	movs	r3, #1
 8016436:	e02a      	b.n	801648e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016438:	683b      	ldr	r3, [r7, #0]
 801643a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801643e:	f003 0302 	and.w	r3, r3, #2
 8016442:	2b00      	cmp	r3, #0
 8016444:	d101      	bne.n	801644a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016446:	2300      	movs	r3, #0
 8016448:	e021      	b.n	801648e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	3304      	adds	r3, #4
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	429a      	cmp	r2, r3
 8016454:	d101      	bne.n	801645a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016456:	2300      	movs	r3, #0
 8016458:	e019      	b.n	801648e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801645a:	68fa      	ldr	r2, [r7, #12]
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	3304      	adds	r3, #4
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	405a      	eors	r2, r3
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	3308      	adds	r3, #8
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	4013      	ands	r3, r2
 801646c:	2b00      	cmp	r3, #0
 801646e:	d10d      	bne.n	801648c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	3308      	adds	r3, #8
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	43da      	mvns	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	3308      	adds	r3, #8
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016484:	429a      	cmp	r2, r3
 8016486:	d101      	bne.n	801648c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016488:	2301      	movs	r3, #1
 801648a:	e000      	b.n	801648e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801648c:	2300      	movs	r3, #0
  }
}
 801648e:	4618      	mov	r0, r3
 8016490:	3714      	adds	r7, #20
 8016492:	46bd      	mov	sp, r7
 8016494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016498:	4770      	bx	lr
	...

0801649c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b082      	sub	sp, #8
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80164a4:	2210      	movs	r2, #16
 80164a6:	4904      	ldr	r1, [pc, #16]	; (80164b8 <ip4addr_ntoa+0x1c>)
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f000 f807 	bl	80164bc <ip4addr_ntoa_r>
 80164ae:	4603      	mov	r3, r0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	20004b38 	.word	0x20004b38

080164bc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80164bc:	b480      	push	{r7}
 80164be:	b08d      	sub	sp, #52	; 0x34
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80164c8:	2300      	movs	r3, #0
 80164ca:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80164d6:	f107 0318 	add.w	r3, r7, #24
 80164da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80164dc:	2300      	movs	r3, #0
 80164de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164e2:	e059      	b.n	8016598 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80164e4:	2300      	movs	r3, #0
 80164e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80164ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ec:	781a      	ldrb	r2, [r3, #0]
 80164ee:	4b33      	ldr	r3, [pc, #204]	; (80165bc <ip4addr_ntoa_r+0x100>)
 80164f0:	fba3 1302 	umull	r1, r3, r3, r2
 80164f4:	08d9      	lsrs	r1, r3, #3
 80164f6:	460b      	mov	r3, r1
 80164f8:	009b      	lsls	r3, r3, #2
 80164fa:	440b      	add	r3, r1
 80164fc:	005b      	lsls	r3, r3, #1
 80164fe:	1ad3      	subs	r3, r2, r3
 8016500:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8016502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016504:	781b      	ldrb	r3, [r3, #0]
 8016506:	4a2d      	ldr	r2, [pc, #180]	; (80165bc <ip4addr_ntoa_r+0x100>)
 8016508:	fba2 2303 	umull	r2, r3, r2, r3
 801650c:	08db      	lsrs	r3, r3, #3
 801650e:	b2da      	uxtb	r2, r3
 8016510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016512:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8016514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016518:	1c5a      	adds	r2, r3, #1
 801651a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801651e:	4619      	mov	r1, r3
 8016520:	7ffb      	ldrb	r3, [r7, #31]
 8016522:	3330      	adds	r3, #48	; 0x30
 8016524:	b2da      	uxtb	r2, r3
 8016526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801652a:	440b      	add	r3, r1
 801652c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8016530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d1d8      	bne.n	80164ea <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8016538:	e012      	b.n	8016560 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801653a:	6a3b      	ldr	r3, [r7, #32]
 801653c:	1c5a      	adds	r2, r3, #1
 801653e:	623a      	str	r2, [r7, #32]
 8016540:	687a      	ldr	r2, [r7, #4]
 8016542:	429a      	cmp	r2, r3
 8016544:	dc01      	bgt.n	801654a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8016546:	2300      	movs	r3, #0
 8016548:	e031      	b.n	80165ae <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801654a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016550:	1c59      	adds	r1, r3, #1
 8016552:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016554:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016558:	440a      	add	r2, r1
 801655a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801655e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8016560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016564:	1e5a      	subs	r2, r3, #1
 8016566:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801656a:	2b00      	cmp	r3, #0
 801656c:	d1e5      	bne.n	801653a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801656e:	6a3b      	ldr	r3, [r7, #32]
 8016570:	1c5a      	adds	r2, r3, #1
 8016572:	623a      	str	r2, [r7, #32]
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	429a      	cmp	r2, r3
 8016578:	dc01      	bgt.n	801657e <ip4addr_ntoa_r+0xc2>
      return NULL;
 801657a:	2300      	movs	r3, #0
 801657c:	e017      	b.n	80165ae <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016580:	1c5a      	adds	r2, r3, #1
 8016582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016584:	222e      	movs	r2, #46	; 0x2e
 8016586:	701a      	strb	r2, [r3, #0]
    ap++;
 8016588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658a:	3301      	adds	r3, #1
 801658c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801658e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016592:	3301      	adds	r3, #1
 8016594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801659c:	2b03      	cmp	r3, #3
 801659e:	d9a1      	bls.n	80164e4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80165a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a2:	3b01      	subs	r3, #1
 80165a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a8:	2200      	movs	r2, #0
 80165aa:	701a      	strb	r2, [r3, #0]
  return buf;
 80165ac:	68bb      	ldr	r3, [r7, #8]
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3734      	adds	r7, #52	; 0x34
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	cccccccd 	.word	0xcccccccd

080165c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b084      	sub	sp, #16
 80165c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80165ca:	4b12      	ldr	r3, [pc, #72]	; (8016614 <ip_reass_tmr+0x54>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80165d0:	e018      	b.n	8016604 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	7fdb      	ldrb	r3, [r3, #31]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d00b      	beq.n	80165f2 <ip_reass_tmr+0x32>
      r->timer--;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	7fdb      	ldrb	r3, [r3, #31]
 80165de:	3b01      	subs	r3, #1
 80165e0:	b2da      	uxtb	r2, r3
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	60fb      	str	r3, [r7, #12]
 80165f0:	e008      	b.n	8016604 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80165fc:	68b9      	ldr	r1, [r7, #8]
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 f80a 	bl	8016618 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1e3      	bne.n	80165d2 <ip_reass_tmr+0x12>
    }
  }
}
 801660a:	bf00      	nop
 801660c:	bf00      	nop
 801660e:	3710      	adds	r7, #16
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}
 8016614:	20004b48 	.word	0x20004b48

08016618 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b088      	sub	sp, #32
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016622:	2300      	movs	r3, #0
 8016624:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016626:	683a      	ldr	r2, [r7, #0]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	429a      	cmp	r2, r3
 801662c:	d105      	bne.n	801663a <ip_reass_free_complete_datagram+0x22>
 801662e:	4b45      	ldr	r3, [pc, #276]	; (8016744 <ip_reass_free_complete_datagram+0x12c>)
 8016630:	22ab      	movs	r2, #171	; 0xab
 8016632:	4945      	ldr	r1, [pc, #276]	; (8016748 <ip_reass_free_complete_datagram+0x130>)
 8016634:	4845      	ldr	r0, [pc, #276]	; (801674c <ip_reass_free_complete_datagram+0x134>)
 8016636:	f001 f8e9 	bl	801780c <iprintf>
  if (prev != NULL) {
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d00a      	beq.n	8016656 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	687a      	ldr	r2, [r7, #4]
 8016646:	429a      	cmp	r2, r3
 8016648:	d005      	beq.n	8016656 <ip_reass_free_complete_datagram+0x3e>
 801664a:	4b3e      	ldr	r3, [pc, #248]	; (8016744 <ip_reass_free_complete_datagram+0x12c>)
 801664c:	22ad      	movs	r2, #173	; 0xad
 801664e:	4940      	ldr	r1, [pc, #256]	; (8016750 <ip_reass_free_complete_datagram+0x138>)
 8016650:	483e      	ldr	r0, [pc, #248]	; (801674c <ip_reass_free_complete_datagram+0x134>)
 8016652:	f001 f8db 	bl	801780c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	889b      	ldrh	r3, [r3, #4]
 8016662:	b29b      	uxth	r3, r3
 8016664:	2b00      	cmp	r3, #0
 8016666:	d12a      	bne.n	80166be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801666e:	697b      	ldr	r3, [r7, #20]
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	6858      	ldr	r0, [r3, #4]
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	3308      	adds	r3, #8
 801667e:	2214      	movs	r2, #20
 8016680:	4619      	mov	r1, r3
 8016682:	f001 f893 	bl	80177ac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016686:	2101      	movs	r1, #1
 8016688:	69b8      	ldr	r0, [r7, #24]
 801668a:	f7ff fbb5 	bl	8015df8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801668e:	69b8      	ldr	r0, [r7, #24]
 8016690:	f7f7 fc44 	bl	800df1c <pbuf_clen>
 8016694:	4603      	mov	r3, r0
 8016696:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016698:	8bfa      	ldrh	r2, [r7, #30]
 801669a:	8a7b      	ldrh	r3, [r7, #18]
 801669c:	4413      	add	r3, r2
 801669e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166a2:	db05      	blt.n	80166b0 <ip_reass_free_complete_datagram+0x98>
 80166a4:	4b27      	ldr	r3, [pc, #156]	; (8016744 <ip_reass_free_complete_datagram+0x12c>)
 80166a6:	22bc      	movs	r2, #188	; 0xbc
 80166a8:	492a      	ldr	r1, [pc, #168]	; (8016754 <ip_reass_free_complete_datagram+0x13c>)
 80166aa:	4828      	ldr	r0, [pc, #160]	; (801674c <ip_reass_free_complete_datagram+0x134>)
 80166ac:	f001 f8ae 	bl	801780c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80166b0:	8bfa      	ldrh	r2, [r7, #30]
 80166b2:	8a7b      	ldrh	r3, [r7, #18]
 80166b4:	4413      	add	r3, r2
 80166b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80166b8:	69b8      	ldr	r0, [r7, #24]
 80166ba:	f7f7 fba1 	bl	800de00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80166c4:	e01f      	b.n	8016706 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	685b      	ldr	r3, [r3, #4]
 80166ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80166cc:	69bb      	ldr	r3, [r7, #24]
 80166ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80166d6:	68f8      	ldr	r0, [r7, #12]
 80166d8:	f7f7 fc20 	bl	800df1c <pbuf_clen>
 80166dc:	4603      	mov	r3, r0
 80166de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80166e0:	8bfa      	ldrh	r2, [r7, #30]
 80166e2:	8a7b      	ldrh	r3, [r7, #18]
 80166e4:	4413      	add	r3, r2
 80166e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166ea:	db05      	blt.n	80166f8 <ip_reass_free_complete_datagram+0xe0>
 80166ec:	4b15      	ldr	r3, [pc, #84]	; (8016744 <ip_reass_free_complete_datagram+0x12c>)
 80166ee:	22cc      	movs	r2, #204	; 0xcc
 80166f0:	4918      	ldr	r1, [pc, #96]	; (8016754 <ip_reass_free_complete_datagram+0x13c>)
 80166f2:	4816      	ldr	r0, [pc, #88]	; (801674c <ip_reass_free_complete_datagram+0x134>)
 80166f4:	f001 f88a 	bl	801780c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80166f8:	8bfa      	ldrh	r2, [r7, #30]
 80166fa:	8a7b      	ldrh	r3, [r7, #18]
 80166fc:	4413      	add	r3, r2
 80166fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016700:	68f8      	ldr	r0, [r7, #12]
 8016702:	f7f7 fb7d 	bl	800de00 <pbuf_free>
  while (p != NULL) {
 8016706:	69bb      	ldr	r3, [r7, #24]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d1dc      	bne.n	80166c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801670c:	6839      	ldr	r1, [r7, #0]
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f000 f8c2 	bl	8016898 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016714:	4b10      	ldr	r3, [pc, #64]	; (8016758 <ip_reass_free_complete_datagram+0x140>)
 8016716:	881b      	ldrh	r3, [r3, #0]
 8016718:	8bfa      	ldrh	r2, [r7, #30]
 801671a:	429a      	cmp	r2, r3
 801671c:	d905      	bls.n	801672a <ip_reass_free_complete_datagram+0x112>
 801671e:	4b09      	ldr	r3, [pc, #36]	; (8016744 <ip_reass_free_complete_datagram+0x12c>)
 8016720:	22d2      	movs	r2, #210	; 0xd2
 8016722:	490e      	ldr	r1, [pc, #56]	; (801675c <ip_reass_free_complete_datagram+0x144>)
 8016724:	4809      	ldr	r0, [pc, #36]	; (801674c <ip_reass_free_complete_datagram+0x134>)
 8016726:	f001 f871 	bl	801780c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801672a:	4b0b      	ldr	r3, [pc, #44]	; (8016758 <ip_reass_free_complete_datagram+0x140>)
 801672c:	881a      	ldrh	r2, [r3, #0]
 801672e:	8bfb      	ldrh	r3, [r7, #30]
 8016730:	1ad3      	subs	r3, r2, r3
 8016732:	b29a      	uxth	r2, r3
 8016734:	4b08      	ldr	r3, [pc, #32]	; (8016758 <ip_reass_free_complete_datagram+0x140>)
 8016736:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016738:	8bfb      	ldrh	r3, [r7, #30]
}
 801673a:	4618      	mov	r0, r3
 801673c:	3720      	adds	r7, #32
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	0801c148 	.word	0x0801c148
 8016748:	0801c184 	.word	0x0801c184
 801674c:	0801c190 	.word	0x0801c190
 8016750:	0801c1b8 	.word	0x0801c1b8
 8016754:	0801c1cc 	.word	0x0801c1cc
 8016758:	20004b4c 	.word	0x20004b4c
 801675c:	0801c1ec 	.word	0x0801c1ec

08016760 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b08a      	sub	sp, #40	; 0x28
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801676a:	2300      	movs	r3, #0
 801676c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801676e:	2300      	movs	r3, #0
 8016770:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016772:	2300      	movs	r3, #0
 8016774:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016776:	2300      	movs	r3, #0
 8016778:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801677e:	4b28      	ldr	r3, [pc, #160]	; (8016820 <ip_reass_remove_oldest_datagram+0xc0>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016784:	e030      	b.n	80167e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016788:	695a      	ldr	r2, [r3, #20]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	68db      	ldr	r3, [r3, #12]
 801678e:	429a      	cmp	r2, r3
 8016790:	d10c      	bne.n	80167ac <ip_reass_remove_oldest_datagram+0x4c>
 8016792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016794:	699a      	ldr	r2, [r3, #24]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	691b      	ldr	r3, [r3, #16]
 801679a:	429a      	cmp	r2, r3
 801679c:	d106      	bne.n	80167ac <ip_reass_remove_oldest_datagram+0x4c>
 801679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a0:	899a      	ldrh	r2, [r3, #12]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	889b      	ldrh	r3, [r3, #4]
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d014      	beq.n	80167d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	3301      	adds	r3, #1
 80167b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80167b2:	6a3b      	ldr	r3, [r7, #32]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d104      	bne.n	80167c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80167b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	61bb      	str	r3, [r7, #24]
 80167c0:	e009      	b.n	80167d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80167c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c4:	7fda      	ldrb	r2, [r3, #31]
 80167c6:	6a3b      	ldr	r3, [r7, #32]
 80167c8:	7fdb      	ldrb	r3, [r3, #31]
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d803      	bhi.n	80167d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80167ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80167d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d001      	beq.n	80167e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80167de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80167e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80167e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1cb      	bne.n	8016786 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80167ee:	6a3b      	ldr	r3, [r7, #32]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d008      	beq.n	8016806 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80167f4:	69b9      	ldr	r1, [r7, #24]
 80167f6:	6a38      	ldr	r0, [r7, #32]
 80167f8:	f7ff ff0e 	bl	8016618 <ip_reass_free_complete_datagram>
 80167fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80167fe:	697a      	ldr	r2, [r7, #20]
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	4413      	add	r3, r2
 8016804:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016806:	697a      	ldr	r2, [r7, #20]
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	da02      	bge.n	8016814 <ip_reass_remove_oldest_datagram+0xb4>
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	2b01      	cmp	r3, #1
 8016812:	dcac      	bgt.n	801676e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016814:	697b      	ldr	r3, [r7, #20]
}
 8016816:	4618      	mov	r0, r3
 8016818:	3728      	adds	r7, #40	; 0x28
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	20004b48 	.word	0x20004b48

08016824 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801682e:	2004      	movs	r0, #4
 8016830:	f7f6 fbec 	bl	800d00c <memp_malloc>
 8016834:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d110      	bne.n	801685e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801683c:	6839      	ldr	r1, [r7, #0]
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	f7ff ff8e 	bl	8016760 <ip_reass_remove_oldest_datagram>
 8016844:	4602      	mov	r2, r0
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	4293      	cmp	r3, r2
 801684a:	dc03      	bgt.n	8016854 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801684c:	2004      	movs	r0, #4
 801684e:	f7f6 fbdd 	bl	800d00c <memp_malloc>
 8016852:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d101      	bne.n	801685e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801685a:	2300      	movs	r3, #0
 801685c:	e016      	b.n	801688c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801685e:	2220      	movs	r2, #32
 8016860:	2100      	movs	r1, #0
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	f000 ffca 	bl	80177fc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	220f      	movs	r2, #15
 801686c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801686e:	4b09      	ldr	r3, [pc, #36]	; (8016894 <ip_reass_enqueue_new_datagram+0x70>)
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016876:	4a07      	ldr	r2, [pc, #28]	; (8016894 <ip_reass_enqueue_new_datagram+0x70>)
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	3308      	adds	r3, #8
 8016880:	2214      	movs	r2, #20
 8016882:	6879      	ldr	r1, [r7, #4]
 8016884:	4618      	mov	r0, r3
 8016886:	f000 ff91 	bl	80177ac <memcpy>
  return ipr;
 801688a:	68fb      	ldr	r3, [r7, #12]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3710      	adds	r7, #16
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	20004b48 	.word	0x20004b48

08016898 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80168a2:	4b10      	ldr	r3, [pc, #64]	; (80168e4 <ip_reass_dequeue_datagram+0x4c>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d104      	bne.n	80168b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	4a0c      	ldr	r2, [pc, #48]	; (80168e4 <ip_reass_dequeue_datagram+0x4c>)
 80168b2:	6013      	str	r3, [r2, #0]
 80168b4:	e00d      	b.n	80168d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d106      	bne.n	80168ca <ip_reass_dequeue_datagram+0x32>
 80168bc:	4b0a      	ldr	r3, [pc, #40]	; (80168e8 <ip_reass_dequeue_datagram+0x50>)
 80168be:	f240 1245 	movw	r2, #325	; 0x145
 80168c2:	490a      	ldr	r1, [pc, #40]	; (80168ec <ip_reass_dequeue_datagram+0x54>)
 80168c4:	480a      	ldr	r0, [pc, #40]	; (80168f0 <ip_reass_dequeue_datagram+0x58>)
 80168c6:	f000 ffa1 	bl	801780c <iprintf>
    prev->next = ipr->next;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681a      	ldr	r2, [r3, #0]
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80168d2:	6879      	ldr	r1, [r7, #4]
 80168d4:	2004      	movs	r0, #4
 80168d6:	f7f6 fbeb 	bl	800d0b0 <memp_free>
}
 80168da:	bf00      	nop
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	20004b48 	.word	0x20004b48
 80168e8:	0801c148 	.word	0x0801c148
 80168ec:	0801c210 	.word	0x0801c210
 80168f0:	0801c190 	.word	0x0801c190

080168f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b08c      	sub	sp, #48	; 0x30
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	60f8      	str	r0, [r7, #12]
 80168fc:	60b9      	str	r1, [r7, #8]
 80168fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016900:	2300      	movs	r3, #0
 8016902:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016904:	2301      	movs	r3, #1
 8016906:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016908:	68bb      	ldr	r3, [r7, #8]
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	885b      	ldrh	r3, [r3, #2]
 8016912:	b29b      	uxth	r3, r3
 8016914:	4618      	mov	r0, r3
 8016916:	f7f5 fec3 	bl	800c6a0 <lwip_htons>
 801691a:	4603      	mov	r3, r0
 801691c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	f003 030f 	and.w	r3, r3, #15
 8016926:	b2db      	uxtb	r3, r3
 8016928:	009b      	lsls	r3, r3, #2
 801692a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801692c:	7e7b      	ldrb	r3, [r7, #25]
 801692e:	b29b      	uxth	r3, r3
 8016930:	8b7a      	ldrh	r2, [r7, #26]
 8016932:	429a      	cmp	r2, r3
 8016934:	d202      	bcs.n	801693c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016936:	f04f 33ff 	mov.w	r3, #4294967295
 801693a:	e135      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801693c:	7e7b      	ldrb	r3, [r7, #25]
 801693e:	b29b      	uxth	r3, r3
 8016940:	8b7a      	ldrh	r2, [r7, #26]
 8016942:	1ad3      	subs	r3, r2, r3
 8016944:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016946:	69fb      	ldr	r3, [r7, #28]
 8016948:	88db      	ldrh	r3, [r3, #6]
 801694a:	b29b      	uxth	r3, r3
 801694c:	4618      	mov	r0, r3
 801694e:	f7f5 fea7 	bl	800c6a0 <lwip_htons>
 8016952:	4603      	mov	r3, r0
 8016954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016958:	b29b      	uxth	r3, r3
 801695a:	00db      	lsls	r3, r3, #3
 801695c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016966:	2200      	movs	r2, #0
 8016968:	701a      	strb	r2, [r3, #0]
 801696a:	2200      	movs	r2, #0
 801696c:	705a      	strb	r2, [r3, #1]
 801696e:	2200      	movs	r2, #0
 8016970:	709a      	strb	r2, [r3, #2]
 8016972:	2200      	movs	r2, #0
 8016974:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016978:	8afa      	ldrh	r2, [r7, #22]
 801697a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801697c:	8afa      	ldrh	r2, [r7, #22]
 801697e:	8b7b      	ldrh	r3, [r7, #26]
 8016980:	4413      	add	r3, r2
 8016982:	b29a      	uxth	r2, r3
 8016984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016986:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801698a:	88db      	ldrh	r3, [r3, #6]
 801698c:	b29b      	uxth	r3, r3
 801698e:	8afa      	ldrh	r2, [r7, #22]
 8016990:	429a      	cmp	r2, r3
 8016992:	d902      	bls.n	801699a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016994:	f04f 33ff 	mov.w	r3, #4294967295
 8016998:	e106      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	627b      	str	r3, [r7, #36]	; 0x24
 80169a0:	e068      	b.n	8016a74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80169a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80169a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169aa:	889b      	ldrh	r3, [r3, #4]
 80169ac:	b29a      	uxth	r2, r3
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	889b      	ldrh	r3, [r3, #4]
 80169b2:	b29b      	uxth	r3, r3
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d235      	bcs.n	8016a24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80169b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80169be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d020      	beq.n	8016a06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80169c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c6:	889b      	ldrh	r3, [r3, #4]
 80169c8:	b29a      	uxth	r2, r3
 80169ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169cc:	88db      	ldrh	r3, [r3, #6]
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d307      	bcc.n	80169e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80169d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d6:	88db      	ldrh	r3, [r3, #6]
 80169d8:	b29a      	uxth	r2, r3
 80169da:	693b      	ldr	r3, [r7, #16]
 80169dc:	889b      	ldrh	r3, [r3, #4]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d902      	bls.n	80169ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169e4:	f04f 33ff 	mov.w	r3, #4294967295
 80169e8:	e0de      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80169ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ec:	68ba      	ldr	r2, [r7, #8]
 80169ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80169f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f2:	88db      	ldrh	r3, [r3, #6]
 80169f4:	b29a      	uxth	r2, r3
 80169f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f8:	889b      	ldrh	r3, [r3, #4]
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d03d      	beq.n	8016a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a00:	2300      	movs	r3, #0
 8016a02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016a04:	e03a      	b.n	8016a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a08:	88db      	ldrh	r3, [r3, #6]
 8016a0a:	b29a      	uxth	r2, r3
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	889b      	ldrh	r3, [r3, #4]
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	429a      	cmp	r2, r3
 8016a14:	d902      	bls.n	8016a1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a16:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1a:	e0c5      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	68ba      	ldr	r2, [r7, #8]
 8016a20:	605a      	str	r2, [r3, #4]
      break;
 8016a22:	e02b      	b.n	8016a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a26:	889b      	ldrh	r3, [r3, #4]
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	889b      	ldrh	r3, [r3, #4]
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d102      	bne.n	8016a3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a34:	f04f 33ff 	mov.w	r3, #4294967295
 8016a38:	e0b6      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a3c:	889b      	ldrh	r3, [r3, #4]
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	88db      	ldrh	r3, [r3, #6]
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d202      	bcs.n	8016a50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a4e:	e0ab      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d009      	beq.n	8016a6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a58:	88db      	ldrh	r3, [r3, #6]
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	693b      	ldr	r3, [r7, #16]
 8016a5e:	889b      	ldrh	r3, [r3, #4]
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	429a      	cmp	r2, r3
 8016a64:	d001      	beq.n	8016a6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d193      	bne.n	80169a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016a7a:	e000      	b.n	8016a7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016a7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d12d      	bne.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d01c      	beq.n	8016ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a8c:	88db      	ldrh	r3, [r3, #6]
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a92:	889b      	ldrh	r3, [r3, #4]
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d906      	bls.n	8016aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016a9a:	4b45      	ldr	r3, [pc, #276]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a9c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016aa0:	4944      	ldr	r1, [pc, #272]	; (8016bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016aa2:	4845      	ldr	r0, [pc, #276]	; (8016bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016aa4:	f000 feb2 	bl	801780c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aaa:	68ba      	ldr	r2, [r7, #8]
 8016aac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab0:	88db      	ldrh	r3, [r3, #6]
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab6:	889b      	ldrh	r3, [r3, #4]
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d010      	beq.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	623b      	str	r3, [r7, #32]
 8016ac2:	e00d      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	685b      	ldr	r3, [r3, #4]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d006      	beq.n	8016ada <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016acc:	4b38      	ldr	r3, [pc, #224]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ace:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016ad2:	493a      	ldr	r1, [pc, #232]	; (8016bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016ad4:	4838      	ldr	r0, [pc, #224]	; (8016bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ad6:	f000 fe99 	bl	801780c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	68ba      	ldr	r2, [r7, #8]
 8016ade:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d105      	bne.n	8016af2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	7f9b      	ldrb	r3, [r3, #30]
 8016aea:	f003 0301 	and.w	r3, r3, #1
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d059      	beq.n	8016ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016af2:	6a3b      	ldr	r3, [r7, #32]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d04f      	beq.n	8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d006      	beq.n	8016b0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	685b      	ldr	r3, [r3, #4]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	889b      	ldrh	r3, [r3, #4]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d002      	beq.n	8016b14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	623b      	str	r3, [r7, #32]
 8016b12:	e041      	b.n	8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b16:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b1e:	e012      	b.n	8016b46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b28:	88db      	ldrh	r3, [r3, #6]
 8016b2a:	b29a      	uxth	r2, r3
 8016b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2e:	889b      	ldrh	r3, [r3, #4]
 8016b30:	b29b      	uxth	r3, r3
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d002      	beq.n	8016b3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016b36:	2300      	movs	r3, #0
 8016b38:	623b      	str	r3, [r7, #32]
            break;
 8016b3a:	e007      	b.n	8016b4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d1e9      	bne.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016b4c:	6a3b      	ldr	r3, [r7, #32]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d022      	beq.n	8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d106      	bne.n	8016b68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016b5a:	4b15      	ldr	r3, [pc, #84]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b5c:	f240 12df 	movw	r2, #479	; 0x1df
 8016b60:	4917      	ldr	r1, [pc, #92]	; (8016bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016b62:	4815      	ldr	r0, [pc, #84]	; (8016bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b64:	f000 fe52 	bl	801780c <iprintf>
          LWIP_ASSERT("sanity check",
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	685b      	ldr	r3, [r3, #4]
 8016b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d106      	bne.n	8016b82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016b74:	4b0e      	ldr	r3, [pc, #56]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016b7a:	4911      	ldr	r1, [pc, #68]	; (8016bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016b7c:	480e      	ldr	r0, [pc, #56]	; (8016bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b7e:	f000 fe45 	bl	801780c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d006      	beq.n	8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016b8a:	4b09      	ldr	r3, [pc, #36]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b8c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016b90:	490c      	ldr	r1, [pc, #48]	; (8016bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016b92:	4809      	ldr	r0, [pc, #36]	; (8016bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b94:	f000 fe3a 	bl	801780c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016b98:	6a3b      	ldr	r3, [r7, #32]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	bf14      	ite	ne
 8016b9e:	2301      	movne	r3, #1
 8016ba0:	2300      	moveq	r3, #0
 8016ba2:	b2db      	uxtb	r3, r3
 8016ba4:	e000      	b.n	8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3730      	adds	r7, #48	; 0x30
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	0801c148 	.word	0x0801c148
 8016bb4:	0801c22c 	.word	0x0801c22c
 8016bb8:	0801c190 	.word	0x0801c190
 8016bbc:	0801c24c 	.word	0x0801c24c
 8016bc0:	0801c284 	.word	0x0801c284
 8016bc4:	0801c294 	.word	0x0801c294

08016bc8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b08e      	sub	sp, #56	; 0x38
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	f003 030f 	and.w	r3, r3, #15
 8016bde:	b2db      	uxtb	r3, r3
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	2b14      	cmp	r3, #20
 8016be6:	f040 8167 	bne.w	8016eb8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bec:	88db      	ldrh	r3, [r3, #6]
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7f5 fd55 	bl	800c6a0 <lwip_htons>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	00db      	lsls	r3, r3, #3
 8016c00:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c04:	885b      	ldrh	r3, [r3, #2]
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7f5 fd49 	bl	800c6a0 <lwip_htons>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	f003 030f 	and.w	r3, r3, #15
 8016c1a:	b2db      	uxtb	r3, r3
 8016c1c:	009b      	lsls	r3, r3, #2
 8016c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c26:	b29b      	uxth	r3, r3
 8016c28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	f0c0 8146 	bcc.w	8016ebc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c34:	b29b      	uxth	r3, r3
 8016c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c38:	1ad3      	subs	r3, r2, r3
 8016c3a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016c3c:	6878      	ldr	r0, [r7, #4]
 8016c3e:	f7f7 f96d 	bl	800df1c <pbuf_clen>
 8016c42:	4603      	mov	r3, r0
 8016c44:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016c46:	4b9f      	ldr	r3, [pc, #636]	; (8016ec4 <ip4_reass+0x2fc>)
 8016c48:	881b      	ldrh	r3, [r3, #0]
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	8c3b      	ldrh	r3, [r7, #32]
 8016c4e:	4413      	add	r3, r2
 8016c50:	2b0a      	cmp	r3, #10
 8016c52:	dd10      	ble.n	8016c76 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016c54:	8c3b      	ldrh	r3, [r7, #32]
 8016c56:	4619      	mov	r1, r3
 8016c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c5a:	f7ff fd81 	bl	8016760 <ip_reass_remove_oldest_datagram>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	f000 812d 	beq.w	8016ec0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016c66:	4b97      	ldr	r3, [pc, #604]	; (8016ec4 <ip4_reass+0x2fc>)
 8016c68:	881b      	ldrh	r3, [r3, #0]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	8c3b      	ldrh	r3, [r7, #32]
 8016c6e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016c70:	2b0a      	cmp	r3, #10
 8016c72:	f300 8125 	bgt.w	8016ec0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016c76:	4b94      	ldr	r3, [pc, #592]	; (8016ec8 <ip4_reass+0x300>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8016c7c:	e015      	b.n	8016caa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c80:	695a      	ldr	r2, [r3, #20]
 8016c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c84:	68db      	ldr	r3, [r3, #12]
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d10c      	bne.n	8016ca4 <ip4_reass+0xdc>
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8c:	699a      	ldr	r2, [r3, #24]
 8016c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c90:	691b      	ldr	r3, [r3, #16]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d106      	bne.n	8016ca4 <ip4_reass+0xdc>
 8016c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c98:	899a      	ldrh	r2, [r3, #12]
 8016c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c9c:	889b      	ldrh	r3, [r3, #4]
 8016c9e:	b29b      	uxth	r3, r3
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d006      	beq.n	8016cb2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8016caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d1e6      	bne.n	8016c7e <ip4_reass+0xb6>
 8016cb0:	e000      	b.n	8016cb4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016cb2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d109      	bne.n	8016cce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016cba:	8c3b      	ldrh	r3, [r7, #32]
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cc0:	f7ff fdb0 	bl	8016824 <ip_reass_enqueue_new_datagram>
 8016cc4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d11c      	bne.n	8016d06 <ip4_reass+0x13e>
      goto nullreturn;
 8016ccc:	e109      	b.n	8016ee2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd0:	88db      	ldrh	r3, [r3, #6]
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7f5 fce3 	bl	800c6a0 <lwip_htons>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d110      	bne.n	8016d06 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce6:	89db      	ldrh	r3, [r3, #14]
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7f5 fcd9 	bl	800c6a0 <lwip_htons>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d006      	beq.n	8016d06 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfa:	3308      	adds	r3, #8
 8016cfc:	2214      	movs	r2, #20
 8016cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d00:	4618      	mov	r0, r3
 8016d02:	f000 fd53 	bl	80177ac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d08:	88db      	ldrh	r3, [r3, #6]
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	f003 0320 	and.w	r3, r3, #32
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	bf0c      	ite	eq
 8016d14:	2301      	moveq	r3, #1
 8016d16:	2300      	movne	r3, #0
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016d1c:	69fb      	ldr	r3, [r7, #28]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00e      	beq.n	8016d40 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d26:	4413      	add	r3, r2
 8016d28:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016d2a:	8b7a      	ldrh	r2, [r7, #26]
 8016d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	f0c0 80a0 	bcc.w	8016e74 <ip4_reass+0x2ac>
 8016d34:	8b7b      	ldrh	r3, [r7, #26]
 8016d36:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016d3a:	4293      	cmp	r3, r2
 8016d3c:	f200 809a 	bhi.w	8016e74 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016d40:	69fa      	ldr	r2, [r7, #28]
 8016d42:	6879      	ldr	r1, [r7, #4]
 8016d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d46:	f7ff fdd5 	bl	80168f4 <ip_reass_chain_frag_into_datagram_and_validate>
 8016d4a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d52:	f000 8091 	beq.w	8016e78 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016d56:	4b5b      	ldr	r3, [pc, #364]	; (8016ec4 <ip4_reass+0x2fc>)
 8016d58:	881a      	ldrh	r2, [r3, #0]
 8016d5a:	8c3b      	ldrh	r3, [r7, #32]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	b29a      	uxth	r2, r3
 8016d60:	4b58      	ldr	r3, [pc, #352]	; (8016ec4 <ip4_reass+0x2fc>)
 8016d62:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d00d      	beq.n	8016d86 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d6e:	4413      	add	r3, r2
 8016d70:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d74:	8a7a      	ldrh	r2, [r7, #18]
 8016d76:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7a:	7f9b      	ldrb	r3, [r3, #30]
 8016d7c:	f043 0301 	orr.w	r3, r3, #1
 8016d80:	b2da      	uxtb	r2, r3
 8016d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d84:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016d86:	697b      	ldr	r3, [r7, #20]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d171      	bne.n	8016e70 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8e:	8b9b      	ldrh	r3, [r3, #28]
 8016d90:	3314      	adds	r3, #20
 8016d92:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da8:	3308      	adds	r3, #8
 8016daa:	2214      	movs	r2, #20
 8016dac:	4619      	mov	r1, r3
 8016dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016db0:	f000 fcfc 	bl	80177ac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016db4:	8a3b      	ldrh	r3, [r7, #16]
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7f5 fc72 	bl	800c6a0 <lwip_htons>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	719a      	strb	r2, [r3, #6]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	729a      	strb	r2, [r3, #10]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016dde:	e00d      	b.n	8016dfc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016de6:	2114      	movs	r1, #20
 8016de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016dea:	f7f6 ff83 	bl	800dcf4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016dee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f7f7 f8d3 	bl	800df9c <pbuf_cat>
      r = iprh->next_pbuf;
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d1ee      	bne.n	8016de0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016e02:	4b31      	ldr	r3, [pc, #196]	; (8016ec8 <ip4_reass+0x300>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d102      	bne.n	8016e12 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e10:	e010      	b.n	8016e34 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e12:	4b2d      	ldr	r3, [pc, #180]	; (8016ec8 <ip4_reass+0x300>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e18:	e007      	b.n	8016e2a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e20:	429a      	cmp	r2, r3
 8016e22:	d006      	beq.n	8016e32 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d1f4      	bne.n	8016e1a <ip4_reass+0x252>
 8016e30:	e000      	b.n	8016e34 <ip4_reass+0x26c>
          break;
 8016e32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e38:	f7ff fd2e 	bl	8016898 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	f7f7 f86d 	bl	800df1c <pbuf_clen>
 8016e42:	4603      	mov	r3, r0
 8016e44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016e46:	4b1f      	ldr	r3, [pc, #124]	; (8016ec4 <ip4_reass+0x2fc>)
 8016e48:	881b      	ldrh	r3, [r3, #0]
 8016e4a:	8c3a      	ldrh	r2, [r7, #32]
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	d906      	bls.n	8016e5e <ip4_reass+0x296>
 8016e50:	4b1e      	ldr	r3, [pc, #120]	; (8016ecc <ip4_reass+0x304>)
 8016e52:	f240 229b 	movw	r2, #667	; 0x29b
 8016e56:	491e      	ldr	r1, [pc, #120]	; (8016ed0 <ip4_reass+0x308>)
 8016e58:	481e      	ldr	r0, [pc, #120]	; (8016ed4 <ip4_reass+0x30c>)
 8016e5a:	f000 fcd7 	bl	801780c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016e5e:	4b19      	ldr	r3, [pc, #100]	; (8016ec4 <ip4_reass+0x2fc>)
 8016e60:	881a      	ldrh	r2, [r3, #0]
 8016e62:	8c3b      	ldrh	r3, [r7, #32]
 8016e64:	1ad3      	subs	r3, r2, r3
 8016e66:	b29a      	uxth	r2, r3
 8016e68:	4b16      	ldr	r3, [pc, #88]	; (8016ec4 <ip4_reass+0x2fc>)
 8016e6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	e03c      	b.n	8016eea <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016e70:	2300      	movs	r3, #0
 8016e72:	e03a      	b.n	8016eea <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016e74:	bf00      	nop
 8016e76:	e000      	b.n	8016e7a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016e78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d106      	bne.n	8016e8e <ip4_reass+0x2c6>
 8016e80:	4b12      	ldr	r3, [pc, #72]	; (8016ecc <ip4_reass+0x304>)
 8016e82:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016e86:	4914      	ldr	r1, [pc, #80]	; (8016ed8 <ip4_reass+0x310>)
 8016e88:	4812      	ldr	r0, [pc, #72]	; (8016ed4 <ip4_reass+0x30c>)
 8016e8a:	f000 fcbf 	bl	801780c <iprintf>
  if (ipr->p == NULL) {
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d124      	bne.n	8016ee0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016e96:	4b0c      	ldr	r3, [pc, #48]	; (8016ec8 <ip4_reass+0x300>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	d006      	beq.n	8016eae <ip4_reass+0x2e6>
 8016ea0:	4b0a      	ldr	r3, [pc, #40]	; (8016ecc <ip4_reass+0x304>)
 8016ea2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016ea6:	490d      	ldr	r1, [pc, #52]	; (8016edc <ip4_reass+0x314>)
 8016ea8:	480a      	ldr	r0, [pc, #40]	; (8016ed4 <ip4_reass+0x30c>)
 8016eaa:	f000 fcaf 	bl	801780c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016eae:	2100      	movs	r1, #0
 8016eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016eb2:	f7ff fcf1 	bl	8016898 <ip_reass_dequeue_datagram>
 8016eb6:	e014      	b.n	8016ee2 <ip4_reass+0x31a>
    goto nullreturn;
 8016eb8:	bf00      	nop
 8016eba:	e012      	b.n	8016ee2 <ip4_reass+0x31a>
    goto nullreturn;
 8016ebc:	bf00      	nop
 8016ebe:	e010      	b.n	8016ee2 <ip4_reass+0x31a>
      goto nullreturn;
 8016ec0:	bf00      	nop
 8016ec2:	e00e      	b.n	8016ee2 <ip4_reass+0x31a>
 8016ec4:	20004b4c 	.word	0x20004b4c
 8016ec8:	20004b48 	.word	0x20004b48
 8016ecc:	0801c148 	.word	0x0801c148
 8016ed0:	0801c2b8 	.word	0x0801c2b8
 8016ed4:	0801c190 	.word	0x0801c190
 8016ed8:	0801c2d4 	.word	0x0801c2d4
 8016edc:	0801c2e0 	.word	0x0801c2e0
  }

nullreturn:
 8016ee0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f7f6 ff8c 	bl	800de00 <pbuf_free>
  return NULL;
 8016ee8:	2300      	movs	r3, #0
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	3738      	adds	r7, #56	; 0x38
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop

08016ef4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016ef8:	2005      	movs	r0, #5
 8016efa:	f7f6 f887 	bl	800d00c <memp_malloc>
 8016efe:	4603      	mov	r3, r0
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	bd80      	pop	{r7, pc}

08016f04 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b082      	sub	sp, #8
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d106      	bne.n	8016f20 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016f12:	4b07      	ldr	r3, [pc, #28]	; (8016f30 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016f14:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016f18:	4906      	ldr	r1, [pc, #24]	; (8016f34 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016f1a:	4807      	ldr	r0, [pc, #28]	; (8016f38 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016f1c:	f000 fc76 	bl	801780c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016f20:	6879      	ldr	r1, [r7, #4]
 8016f22:	2005      	movs	r0, #5
 8016f24:	f7f6 f8c4 	bl	800d0b0 <memp_free>
}
 8016f28:	bf00      	nop
 8016f2a:	3708      	adds	r7, #8
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}
 8016f30:	0801c148 	.word	0x0801c148
 8016f34:	0801c300 	.word	0x0801c300
 8016f38:	0801c190 	.word	0x0801c190

08016f3c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d106      	bne.n	8016f5c <ipfrag_free_pbuf_custom+0x20>
 8016f4e:	4b11      	ldr	r3, [pc, #68]	; (8016f94 <ipfrag_free_pbuf_custom+0x58>)
 8016f50:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016f54:	4910      	ldr	r1, [pc, #64]	; (8016f98 <ipfrag_free_pbuf_custom+0x5c>)
 8016f56:	4811      	ldr	r0, [pc, #68]	; (8016f9c <ipfrag_free_pbuf_custom+0x60>)
 8016f58:	f000 fc58 	bl	801780c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016f5c:	68fa      	ldr	r2, [r7, #12]
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d006      	beq.n	8016f72 <ipfrag_free_pbuf_custom+0x36>
 8016f64:	4b0b      	ldr	r3, [pc, #44]	; (8016f94 <ipfrag_free_pbuf_custom+0x58>)
 8016f66:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016f6a:	490d      	ldr	r1, [pc, #52]	; (8016fa0 <ipfrag_free_pbuf_custom+0x64>)
 8016f6c:	480b      	ldr	r0, [pc, #44]	; (8016f9c <ipfrag_free_pbuf_custom+0x60>)
 8016f6e:	f000 fc4d 	bl	801780c <iprintf>
  if (pcr->original != NULL) {
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	695b      	ldr	r3, [r3, #20]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d004      	beq.n	8016f84 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	695b      	ldr	r3, [r3, #20]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7f6 ff3e 	bl	800de00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016f84:	68f8      	ldr	r0, [r7, #12]
 8016f86:	f7ff ffbd 	bl	8016f04 <ip_frag_free_pbuf_custom_ref>
}
 8016f8a:	bf00      	nop
 8016f8c:	3710      	adds	r7, #16
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	0801c148 	.word	0x0801c148
 8016f98:	0801c30c 	.word	0x0801c30c
 8016f9c:	0801c190 	.word	0x0801c190
 8016fa0:	0801c318 	.word	0x0801c318

08016fa4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b094      	sub	sp, #80	; 0x50
 8016fa8:	af02      	add	r7, sp, #8
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016fba:	3b14      	subs	r3, #20
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	da00      	bge.n	8016fc2 <ip4_frag+0x1e>
 8016fc0:	3307      	adds	r3, #7
 8016fc2:	10db      	asrs	r3, r3, #3
 8016fc4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016fc6:	2314      	movs	r3, #20
 8016fc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd6:	781b      	ldrb	r3, [r3, #0]
 8016fd8:	f003 030f 	and.w	r3, r3, #15
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	2b14      	cmp	r3, #20
 8016fe4:	d002      	beq.n	8016fec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016fe6:	f06f 0305 	mvn.w	r3, #5
 8016fea:	e110      	b.n	801720e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	895b      	ldrh	r3, [r3, #10]
 8016ff0:	2b13      	cmp	r3, #19
 8016ff2:	d809      	bhi.n	8017008 <ip4_frag+0x64>
 8016ff4:	4b88      	ldr	r3, [pc, #544]	; (8017218 <ip4_frag+0x274>)
 8016ff6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016ffa:	4988      	ldr	r1, [pc, #544]	; (801721c <ip4_frag+0x278>)
 8016ffc:	4888      	ldr	r0, [pc, #544]	; (8017220 <ip4_frag+0x27c>)
 8016ffe:	f000 fc05 	bl	801780c <iprintf>
 8017002:	f06f 0305 	mvn.w	r3, #5
 8017006:	e102      	b.n	801720e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700a:	88db      	ldrh	r3, [r3, #6]
 801700c:	b29b      	uxth	r3, r3
 801700e:	4618      	mov	r0, r3
 8017010:	f7f5 fb46 	bl	800c6a0 <lwip_htons>
 8017014:	4603      	mov	r3, r0
 8017016:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017018:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801701a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801701e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017022:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017028:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	891b      	ldrh	r3, [r3, #8]
 801702e:	3b14      	subs	r3, #20
 8017030:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017034:	e0e1      	b.n	80171fa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017036:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017038:	00db      	lsls	r3, r3, #3
 801703a:	b29b      	uxth	r3, r3
 801703c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017040:	4293      	cmp	r3, r2
 8017042:	bf28      	it	cs
 8017044:	4613      	movcs	r3, r2
 8017046:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017048:	f44f 7220 	mov.w	r2, #640	; 0x280
 801704c:	2114      	movs	r1, #20
 801704e:	200e      	movs	r0, #14
 8017050:	f7f6 fbee 	bl	800d830 <pbuf_alloc>
 8017054:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017058:	2b00      	cmp	r3, #0
 801705a:	f000 80d5 	beq.w	8017208 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017060:	895b      	ldrh	r3, [r3, #10]
 8017062:	2b13      	cmp	r3, #19
 8017064:	d806      	bhi.n	8017074 <ip4_frag+0xd0>
 8017066:	4b6c      	ldr	r3, [pc, #432]	; (8017218 <ip4_frag+0x274>)
 8017068:	f44f 7249 	mov.w	r2, #804	; 0x324
 801706c:	496d      	ldr	r1, [pc, #436]	; (8017224 <ip4_frag+0x280>)
 801706e:	486c      	ldr	r0, [pc, #432]	; (8017220 <ip4_frag+0x27c>)
 8017070:	f000 fbcc 	bl	801780c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017076:	685b      	ldr	r3, [r3, #4]
 8017078:	2214      	movs	r2, #20
 801707a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801707c:	4618      	mov	r0, r3
 801707e:	f000 fb95 	bl	80177ac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017088:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801708a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801708e:	e064      	b.n	801715a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	895a      	ldrh	r2, [r3, #10]
 8017094:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	895b      	ldrh	r3, [r3, #10]
 801709e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80170a0:	429a      	cmp	r2, r3
 80170a2:	d906      	bls.n	80170b2 <ip4_frag+0x10e>
 80170a4:	4b5c      	ldr	r3, [pc, #368]	; (8017218 <ip4_frag+0x274>)
 80170a6:	f240 322d 	movw	r2, #813	; 0x32d
 80170aa:	495f      	ldr	r1, [pc, #380]	; (8017228 <ip4_frag+0x284>)
 80170ac:	485c      	ldr	r0, [pc, #368]	; (8017220 <ip4_frag+0x27c>)
 80170ae:	f000 fbad 	bl	801780c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80170b2:	8bfa      	ldrh	r2, [r7, #30]
 80170b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80170b8:	4293      	cmp	r3, r2
 80170ba:	bf28      	it	cs
 80170bc:	4613      	movcs	r3, r2
 80170be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80170c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d105      	bne.n	80170d6 <ip4_frag+0x132>
        poff = 0;
 80170ca:	2300      	movs	r3, #0
 80170cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	60fb      	str	r3, [r7, #12]
        continue;
 80170d4:	e041      	b.n	801715a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80170d6:	f7ff ff0d 	bl	8016ef4 <ip_frag_alloc_pbuf_custom_ref>
 80170da:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80170dc:	69bb      	ldr	r3, [r7, #24]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d103      	bne.n	80170ea <ip4_frag+0x146>
        pbuf_free(rambuf);
 80170e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170e4:	f7f6 fe8c 	bl	800de00 <pbuf_free>
        goto memerr;
 80170e8:	e08f      	b.n	801720a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80170ea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80170f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170f2:	4413      	add	r3, r2
 80170f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80170f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80170fc:	9201      	str	r2, [sp, #4]
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	4603      	mov	r3, r0
 8017102:	2241      	movs	r2, #65	; 0x41
 8017104:	2000      	movs	r0, #0
 8017106:	f7f6 fcc1 	bl	800da8c <pbuf_alloced_custom>
 801710a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d106      	bne.n	8017120 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017112:	69b8      	ldr	r0, [r7, #24]
 8017114:	f7ff fef6 	bl	8016f04 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801711a:	f7f6 fe71 	bl	800de00 <pbuf_free>
        goto memerr;
 801711e:	e074      	b.n	801720a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017120:	68f8      	ldr	r0, [r7, #12]
 8017122:	f7f6 ff13 	bl	800df4c <pbuf_ref>
      pcr->original = p;
 8017126:	69bb      	ldr	r3, [r7, #24]
 8017128:	68fa      	ldr	r2, [r7, #12]
 801712a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801712c:	69bb      	ldr	r3, [r7, #24]
 801712e:	4a3f      	ldr	r2, [pc, #252]	; (801722c <ip4_frag+0x288>)
 8017130:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017132:	6979      	ldr	r1, [r7, #20]
 8017134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017136:	f7f6 ff31 	bl	800df9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801713a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801713e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017148:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801714c:	2b00      	cmp	r3, #0
 801714e:	d004      	beq.n	801715a <ip4_frag+0x1b6>
        poff = 0;
 8017150:	2300      	movs	r3, #0
 8017152:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801715a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801715e:	2b00      	cmp	r3, #0
 8017160:	d196      	bne.n	8017090 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017162:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017164:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017168:	4413      	add	r3, r2
 801716a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017170:	f1a3 0213 	sub.w	r2, r3, #19
 8017174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017178:	429a      	cmp	r2, r3
 801717a:	bfcc      	ite	gt
 801717c:	2301      	movgt	r3, #1
 801717e:	2300      	movle	r3, #0
 8017180:	b2db      	uxtb	r3, r3
 8017182:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017184:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801718c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801718e:	6a3b      	ldr	r3, [r7, #32]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d002      	beq.n	801719a <ip4_frag+0x1f6>
 8017194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017196:	2b00      	cmp	r3, #0
 8017198:	d003      	beq.n	80171a2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801719a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801719c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80171a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80171a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7f5 fa7b 	bl	800c6a0 <lwip_htons>
 80171aa:	4603      	mov	r3, r0
 80171ac:	461a      	mov	r2, r3
 80171ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80171b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80171b4:	3314      	adds	r3, #20
 80171b6:	b29b      	uxth	r3, r3
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7f5 fa71 	bl	800c6a0 <lwip_htons>
 80171be:	4603      	mov	r3, r0
 80171c0:	461a      	mov	r2, r3
 80171c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80171c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c8:	2200      	movs	r2, #0
 80171ca:	729a      	strb	r2, [r3, #10]
 80171cc:	2200      	movs	r2, #0
 80171ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	695b      	ldr	r3, [r3, #20]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80171d8:	68b8      	ldr	r0, [r7, #8]
 80171da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80171dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171de:	f7f6 fe0f 	bl	800de00 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80171e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80171e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80171ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80171f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171f4:	4413      	add	r3, r2
 80171f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80171fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f47f af19 	bne.w	8017036 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017204:	2300      	movs	r3, #0
 8017206:	e002      	b.n	801720e <ip4_frag+0x26a>
      goto memerr;
 8017208:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801720a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801720e:	4618      	mov	r0, r3
 8017210:	3748      	adds	r7, #72	; 0x48
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	0801c148 	.word	0x0801c148
 801721c:	0801c324 	.word	0x0801c324
 8017220:	0801c190 	.word	0x0801c190
 8017224:	0801c340 	.word	0x0801c340
 8017228:	0801c360 	.word	0x0801c360
 801722c:	08016f3d 	.word	0x08016f3d

08017230 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b086      	sub	sp, #24
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801723a:	230e      	movs	r3, #14
 801723c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	895b      	ldrh	r3, [r3, #10]
 8017242:	2b0e      	cmp	r3, #14
 8017244:	d96e      	bls.n	8017324 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	7bdb      	ldrb	r3, [r3, #15]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d106      	bne.n	801725c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017254:	3301      	adds	r3, #1
 8017256:	b2da      	uxtb	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	685b      	ldr	r3, [r3, #4]
 8017260:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	7b1a      	ldrb	r2, [r3, #12]
 8017266:	7b5b      	ldrb	r3, [r3, #13]
 8017268:	021b      	lsls	r3, r3, #8
 801726a:	4313      	orrs	r3, r2
 801726c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801726e:	693b      	ldr	r3, [r7, #16]
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	f003 0301 	and.w	r3, r3, #1
 8017276:	2b00      	cmp	r3, #0
 8017278:	d023      	beq.n	80172c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	781b      	ldrb	r3, [r3, #0]
 801727e:	2b01      	cmp	r3, #1
 8017280:	d10f      	bne.n	80172a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017282:	693b      	ldr	r3, [r7, #16]
 8017284:	785b      	ldrb	r3, [r3, #1]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d11b      	bne.n	80172c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801728a:	693b      	ldr	r3, [r7, #16]
 801728c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801728e:	2b5e      	cmp	r3, #94	; 0x5e
 8017290:	d117      	bne.n	80172c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	7b5b      	ldrb	r3, [r3, #13]
 8017296:	f043 0310 	orr.w	r3, r3, #16
 801729a:	b2da      	uxtb	r2, r3
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	735a      	strb	r2, [r3, #13]
 80172a0:	e00f      	b.n	80172c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	2206      	movs	r2, #6
 80172a6:	4928      	ldr	r1, [pc, #160]	; (8017348 <ethernet_input+0x118>)
 80172a8:	4618      	mov	r0, r3
 80172aa:	f000 fa71 	bl	8017790 <memcmp>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d106      	bne.n	80172c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	7b5b      	ldrb	r3, [r3, #13]
 80172b8:	f043 0308 	orr.w	r3, r3, #8
 80172bc:	b2da      	uxtb	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80172c2:	89fb      	ldrh	r3, [r7, #14]
 80172c4:	2b08      	cmp	r3, #8
 80172c6:	d003      	beq.n	80172d0 <ethernet_input+0xa0>
 80172c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80172cc:	d014      	beq.n	80172f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80172ce:	e032      	b.n	8017336 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172d6:	f003 0308 	and.w	r3, r3, #8
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d024      	beq.n	8017328 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80172de:	8afb      	ldrh	r3, [r7, #22]
 80172e0:	4619      	mov	r1, r3
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	f7f6 fd06 	bl	800dcf4 <pbuf_remove_header>
 80172e8:	4603      	mov	r3, r0
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d11e      	bne.n	801732c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80172ee:	6839      	ldr	r1, [r7, #0]
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7fe fe95 	bl	8016020 <ip4_input>
      break;
 80172f6:	e013      	b.n	8017320 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172fe:	f003 0308 	and.w	r3, r3, #8
 8017302:	2b00      	cmp	r3, #0
 8017304:	d014      	beq.n	8017330 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017306:	8afb      	ldrh	r3, [r7, #22]
 8017308:	4619      	mov	r1, r3
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f7f6 fcf2 	bl	800dcf4 <pbuf_remove_header>
 8017310:	4603      	mov	r3, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	d10e      	bne.n	8017334 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017316:	6839      	ldr	r1, [r7, #0]
 8017318:	6878      	ldr	r0, [r7, #4]
 801731a:	f7fe f835 	bl	8015388 <etharp_input>
      break;
 801731e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017320:	2300      	movs	r3, #0
 8017322:	e00c      	b.n	801733e <ethernet_input+0x10e>
    goto free_and_return;
 8017324:	bf00      	nop
 8017326:	e006      	b.n	8017336 <ethernet_input+0x106>
        goto free_and_return;
 8017328:	bf00      	nop
 801732a:	e004      	b.n	8017336 <ethernet_input+0x106>
        goto free_and_return;
 801732c:	bf00      	nop
 801732e:	e002      	b.n	8017336 <ethernet_input+0x106>
        goto free_and_return;
 8017330:	bf00      	nop
 8017332:	e000      	b.n	8017336 <ethernet_input+0x106>
        goto free_and_return;
 8017334:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017336:	6878      	ldr	r0, [r7, #4]
 8017338:	f7f6 fd62 	bl	800de00 <pbuf_free>
  return ERR_OK;
 801733c:	2300      	movs	r3, #0
}
 801733e:	4618      	mov	r0, r3
 8017340:	3718      	adds	r7, #24
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	0801c57c 	.word	0x0801c57c

0801734c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801734c:	b580      	push	{r7, lr}
 801734e:	b086      	sub	sp, #24
 8017350:	af00      	add	r7, sp, #0
 8017352:	60f8      	str	r0, [r7, #12]
 8017354:	60b9      	str	r1, [r7, #8]
 8017356:	607a      	str	r2, [r7, #4]
 8017358:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801735a:	8c3b      	ldrh	r3, [r7, #32]
 801735c:	4618      	mov	r0, r3
 801735e:	f7f5 f99f 	bl	800c6a0 <lwip_htons>
 8017362:	4603      	mov	r3, r0
 8017364:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017366:	210e      	movs	r1, #14
 8017368:	68b8      	ldr	r0, [r7, #8]
 801736a:	f7f6 fcb3 	bl	800dcd4 <pbuf_add_header>
 801736e:	4603      	mov	r3, r0
 8017370:	2b00      	cmp	r3, #0
 8017372:	d125      	bne.n	80173c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	685b      	ldr	r3, [r3, #4]
 8017378:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801737a:	693b      	ldr	r3, [r7, #16]
 801737c:	8afa      	ldrh	r2, [r7, #22]
 801737e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017380:	693b      	ldr	r3, [r7, #16]
 8017382:	2206      	movs	r2, #6
 8017384:	6839      	ldr	r1, [r7, #0]
 8017386:	4618      	mov	r0, r3
 8017388:	f000 fa10 	bl	80177ac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801738c:	693b      	ldr	r3, [r7, #16]
 801738e:	3306      	adds	r3, #6
 8017390:	2206      	movs	r2, #6
 8017392:	6879      	ldr	r1, [r7, #4]
 8017394:	4618      	mov	r0, r3
 8017396:	f000 fa09 	bl	80177ac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80173a0:	2b06      	cmp	r3, #6
 80173a2:	d006      	beq.n	80173b2 <ethernet_output+0x66>
 80173a4:	4b0a      	ldr	r3, [pc, #40]	; (80173d0 <ethernet_output+0x84>)
 80173a6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80173aa:	490a      	ldr	r1, [pc, #40]	; (80173d4 <ethernet_output+0x88>)
 80173ac:	480a      	ldr	r0, [pc, #40]	; (80173d8 <ethernet_output+0x8c>)
 80173ae:	f000 fa2d 	bl	801780c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	699b      	ldr	r3, [r3, #24]
 80173b6:	68b9      	ldr	r1, [r7, #8]
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	4798      	blx	r3
 80173bc:	4603      	mov	r3, r0
 80173be:	e002      	b.n	80173c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80173c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80173c2:	f06f 0301 	mvn.w	r3, #1
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	3718      	adds	r7, #24
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	0801c370 	.word	0x0801c370
 80173d4:	0801c3a8 	.word	0x0801c3a8
 80173d8:	0801c3dc 	.word	0x0801c3dc

080173dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b082      	sub	sp, #8
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
 80173e4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	2200      	movs	r2, #0
 80173ea:	2104      	movs	r1, #4
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7ef fa79 	bl	80068e4 <osMessageQueueNew>
 80173f2:	4602      	mov	r2, r0
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d102      	bne.n	8017406 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017400:	f04f 33ff 	mov.w	r3, #4294967295
 8017404:	e000      	b.n	8017408 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017406:	2300      	movs	r3, #0
}
 8017408:	4618      	mov	r0, r3
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}

08017410 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	4618      	mov	r0, r3
 801741e:	f7ef fbcd 	bl	8006bbc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	4618      	mov	r0, r3
 8017428:	f7ef fbfa 	bl	8006c20 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801742c:	bf00      	nop
 801742e:	3708      	adds	r7, #8
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b084      	sub	sp, #16
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
 801743c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	6818      	ldr	r0, [r3, #0]
 8017442:	4639      	mov	r1, r7
 8017444:	2300      	movs	r3, #0
 8017446:	2200      	movs	r2, #0
 8017448:	f7ef fad2 	bl	80069f0 <osMessageQueuePut>
 801744c:	4603      	mov	r3, r0
 801744e:	2b00      	cmp	r3, #0
 8017450:	d102      	bne.n	8017458 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017452:	2300      	movs	r3, #0
 8017454:	73fb      	strb	r3, [r7, #15]
 8017456:	e001      	b.n	801745c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017458:	23ff      	movs	r3, #255	; 0xff
 801745a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801745c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017460:	4618      	mov	r0, r3
 8017462:	3710      	adds	r7, #16
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}

08017468 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b086      	sub	sp, #24
 801746c:	af00      	add	r7, sp, #0
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017474:	f7ee fe62 	bl	800613c <osKernelGetTickCount>
 8017478:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d013      	beq.n	80174a8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	6818      	ldr	r0, [r3, #0]
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	2200      	movs	r2, #0
 8017488:	68b9      	ldr	r1, [r7, #8]
 801748a:	f7ef fb25 	bl	8006ad8 <osMessageQueueGet>
 801748e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d105      	bne.n	80174a2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017496:	f7ee fe51 	bl	800613c <osKernelGetTickCount>
 801749a:	4602      	mov	r2, r0
 801749c:	697b      	ldr	r3, [r7, #20]
 801749e:	1ad3      	subs	r3, r2, r3
 80174a0:	e00f      	b.n	80174c2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174a2:	f04f 33ff 	mov.w	r3, #4294967295
 80174a6:	e00c      	b.n	80174c2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	6818      	ldr	r0, [r3, #0]
 80174ac:	f04f 33ff 	mov.w	r3, #4294967295
 80174b0:	2200      	movs	r2, #0
 80174b2:	68b9      	ldr	r1, [r7, #8]
 80174b4:	f7ef fb10 	bl	8006ad8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80174b8:	f7ee fe40 	bl	800613c <osKernelGetTickCount>
 80174bc:	4602      	mov	r2, r0
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	3718      	adds	r7, #24
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}

080174ca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80174ca:	b580      	push	{r7, lr}
 80174cc:	b082      	sub	sp, #8
 80174ce:	af00      	add	r7, sp, #0
 80174d0:	6078      	str	r0, [r7, #4]
 80174d2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6818      	ldr	r0, [r3, #0]
 80174d8:	2300      	movs	r3, #0
 80174da:	2200      	movs	r2, #0
 80174dc:	6839      	ldr	r1, [r7, #0]
 80174de:	f7ef fafb 	bl	8006ad8 <osMessageQueueGet>
 80174e2:	4603      	mov	r3, r0
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d101      	bne.n	80174ec <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80174e8:	2300      	movs	r3, #0
 80174ea:	e001      	b.n	80174f0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80174ec:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80174f8:	b480      	push	{r7}
 80174fa:	b083      	sub	sp, #12
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d101      	bne.n	801750c <sys_mbox_valid+0x14>
    return 0;
 8017508:	2300      	movs	r3, #0
 801750a:	e000      	b.n	801750e <sys_mbox_valid+0x16>
  else
    return 1;
 801750c:	2301      	movs	r3, #1
}
 801750e:	4618      	mov	r0, r3
 8017510:	370c      	adds	r7, #12
 8017512:	46bd      	mov	sp, r7
 8017514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017518:	4770      	bx	lr

0801751a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801751a:	b480      	push	{r7}
 801751c:	b083      	sub	sp, #12
 801751e:	af00      	add	r7, sp, #0
 8017520:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2200      	movs	r2, #0
 8017526:	601a      	str	r2, [r3, #0]
}
 8017528:	bf00      	nop
 801752a:	370c      	adds	r7, #12
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr

08017534 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	460b      	mov	r3, r1
 801753e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8017540:	78fb      	ldrb	r3, [r7, #3]
 8017542:	2200      	movs	r2, #0
 8017544:	4619      	mov	r1, r3
 8017546:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801754a:	f7ef f83b 	bl	80065c4 <osSemaphoreNew>
 801754e:	4602      	mov	r2, r0
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d102      	bne.n	8017562 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801755c:	f04f 33ff 	mov.w	r3, #4294967295
 8017560:	e009      	b.n	8017576 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8017562:	78fb      	ldrb	r3, [r7, #3]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d105      	bne.n	8017574 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	2100      	movs	r1, #0
 801756e:	4618      	mov	r0, r3
 8017570:	f7ef f8c4 	bl	80066fc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017574:	2300      	movs	r3, #0
}
 8017576:	4618      	mov	r0, r3
 8017578:	3708      	adds	r7, #8
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b084      	sub	sp, #16
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
 8017586:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8017588:	f7ee fdd8 	bl	800613c <osKernelGetTickCount>
 801758c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d011      	beq.n	80175b8 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	6839      	ldr	r1, [r7, #0]
 801759a:	4618      	mov	r0, r3
 801759c:	f7ef f8ae 	bl	80066fc <osSemaphoreAcquire>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d105      	bne.n	80175b2 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80175a6:	f7ee fdc9 	bl	800613c <osKernelGetTickCount>
 80175aa:	4602      	mov	r2, r0
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	1ad3      	subs	r3, r2, r3
 80175b0:	e012      	b.n	80175d8 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80175b2:	f04f 33ff 	mov.w	r3, #4294967295
 80175b6:	e00f      	b.n	80175d8 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80175b8:	bf00      	nop
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	f04f 31ff 	mov.w	r1, #4294967295
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7ef f89a 	bl	80066fc <osSemaphoreAcquire>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d1f5      	bne.n	80175ba <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80175ce:	f7ee fdb5 	bl	800613c <osKernelGetTickCount>
 80175d2:	4602      	mov	r2, r0
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3710      	adds	r7, #16
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7ef f8eb 	bl	80067c8 <osSemaphoreRelease>
}
 80175f2:	bf00      	nop
 80175f4:	3708      	adds	r7, #8
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}

080175fa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80175fa:	b580      	push	{r7, lr}
 80175fc:	b082      	sub	sp, #8
 80175fe:	af00      	add	r7, sp, #0
 8017600:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	4618      	mov	r0, r3
 8017608:	f7ef f936 	bl	8006878 <osSemaphoreDelete>
}
 801760c:	bf00      	nop
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017614:	b480      	push	{r7}
 8017616:	b083      	sub	sp, #12
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d101      	bne.n	8017628 <sys_sem_valid+0x14>
    return 0;
 8017624:	2300      	movs	r3, #0
 8017626:	e000      	b.n	801762a <sys_sem_valid+0x16>
  else
    return 1;
 8017628:	2301      	movs	r3, #1
}
 801762a:	4618      	mov	r0, r3
 801762c:	370c      	adds	r7, #12
 801762e:	46bd      	mov	sp, r7
 8017630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017634:	4770      	bx	lr

08017636 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017636:	b480      	push	{r7}
 8017638:	b083      	sub	sp, #12
 801763a:	af00      	add	r7, sp, #0
 801763c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	2200      	movs	r2, #0
 8017642:	601a      	str	r2, [r3, #0]
}
 8017644:	bf00      	nop
 8017646:	370c      	adds	r7, #12
 8017648:	46bd      	mov	sp, r7
 801764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764e:	4770      	bx	lr

08017650 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017654:	2000      	movs	r0, #0
 8017656:	f7ee fe6d 	bl	8006334 <osMutexNew>
 801765a:	4603      	mov	r3, r0
 801765c:	4a01      	ldr	r2, [pc, #4]	; (8017664 <sys_init+0x14>)
 801765e:	6013      	str	r3, [r2, #0]
#endif
}
 8017660:	bf00      	nop
 8017662:	bd80      	pop	{r7, pc}
 8017664:	20011518 	.word	0x20011518

08017668 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017670:	2000      	movs	r0, #0
 8017672:	f7ee fe5f 	bl	8006334 <osMutexNew>
 8017676:	4602      	mov	r2, r0
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d102      	bne.n	801768a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017684:	f04f 33ff 	mov.w	r3, #4294967295
 8017688:	e000      	b.n	801768c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801768a:	2300      	movs	r3, #0
}
 801768c:	4618      	mov	r0, r3
 801768e:	3708      	adds	r7, #8
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}

08017694 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b082      	sub	sp, #8
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	f04f 31ff 	mov.w	r1, #4294967295
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7ee fedf 	bl	8006468 <osMutexAcquire>
#endif
}
 80176aa:	bf00      	nop
 80176ac:	3708      	adds	r7, #8
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}

080176b2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80176b2:	b580      	push	{r7, lr}
 80176b4:	b082      	sub	sp, #8
 80176b6:	af00      	add	r7, sp, #0
 80176b8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	4618      	mov	r0, r3
 80176c0:	f7ee ff30 	bl	8006524 <osMutexRelease>
}
 80176c4:	bf00      	nop
 80176c6:	3708      	adds	r7, #8
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b08e      	sub	sp, #56	; 0x38
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80176da:	f107 0314 	add.w	r3, r7, #20
 80176de:	2224      	movs	r2, #36	; 0x24
 80176e0:	2100      	movs	r1, #0
 80176e2:	4618      	mov	r0, r3
 80176e4:	f000 f88a 	bl	80177fc <memset>
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	617b      	str	r3, [r7, #20]
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80176f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80176f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80176f4:	f107 0314 	add.w	r3, r7, #20
 80176f8:	461a      	mov	r2, r3
 80176fa:	6879      	ldr	r1, [r7, #4]
 80176fc:	68b8      	ldr	r0, [r7, #8]
 80176fe:	f7ee fd45 	bl	800618c <osThreadNew>
 8017702:	4603      	mov	r3, r0
#endif
}
 8017704:	4618      	mov	r0, r3
 8017706:	3738      	adds	r7, #56	; 0x38
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017710:	4b04      	ldr	r3, [pc, #16]	; (8017724 <sys_arch_protect+0x18>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	f04f 31ff 	mov.w	r1, #4294967295
 8017718:	4618      	mov	r0, r3
 801771a:	f7ee fea5 	bl	8006468 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801771e:	2301      	movs	r3, #1
}
 8017720:	4618      	mov	r0, r3
 8017722:	bd80      	pop	{r7, pc}
 8017724:	20011518 	.word	0x20011518

08017728 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017730:	4b04      	ldr	r3, [pc, #16]	; (8017744 <sys_arch_unprotect+0x1c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4618      	mov	r0, r3
 8017736:	f7ee fef5 	bl	8006524 <osMutexRelease>
}
 801773a:	bf00      	nop
 801773c:	3708      	adds	r7, #8
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	20011518 	.word	0x20011518

08017748 <__libc_init_array>:
 8017748:	b570      	push	{r4, r5, r6, lr}
 801774a:	4d0d      	ldr	r5, [pc, #52]	; (8017780 <__libc_init_array+0x38>)
 801774c:	4c0d      	ldr	r4, [pc, #52]	; (8017784 <__libc_init_array+0x3c>)
 801774e:	1b64      	subs	r4, r4, r5
 8017750:	10a4      	asrs	r4, r4, #2
 8017752:	2600      	movs	r6, #0
 8017754:	42a6      	cmp	r6, r4
 8017756:	d109      	bne.n	801776c <__libc_init_array+0x24>
 8017758:	4d0b      	ldr	r5, [pc, #44]	; (8017788 <__libc_init_array+0x40>)
 801775a:	4c0c      	ldr	r4, [pc, #48]	; (801778c <__libc_init_array+0x44>)
 801775c:	f001 fb68 	bl	8018e30 <_init>
 8017760:	1b64      	subs	r4, r4, r5
 8017762:	10a4      	asrs	r4, r4, #2
 8017764:	2600      	movs	r6, #0
 8017766:	42a6      	cmp	r6, r4
 8017768:	d105      	bne.n	8017776 <__libc_init_array+0x2e>
 801776a:	bd70      	pop	{r4, r5, r6, pc}
 801776c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017770:	4798      	blx	r3
 8017772:	3601      	adds	r6, #1
 8017774:	e7ee      	b.n	8017754 <__libc_init_array+0xc>
 8017776:	f855 3b04 	ldr.w	r3, [r5], #4
 801777a:	4798      	blx	r3
 801777c:	3601      	adds	r6, #1
 801777e:	e7f2      	b.n	8017766 <__libc_init_array+0x1e>
 8017780:	0801c6e0 	.word	0x0801c6e0
 8017784:	0801c6e0 	.word	0x0801c6e0
 8017788:	0801c6e0 	.word	0x0801c6e0
 801778c:	0801c6e4 	.word	0x0801c6e4

08017790 <memcmp>:
 8017790:	b530      	push	{r4, r5, lr}
 8017792:	3901      	subs	r1, #1
 8017794:	2400      	movs	r4, #0
 8017796:	42a2      	cmp	r2, r4
 8017798:	d101      	bne.n	801779e <memcmp+0xe>
 801779a:	2000      	movs	r0, #0
 801779c:	e005      	b.n	80177aa <memcmp+0x1a>
 801779e:	5d03      	ldrb	r3, [r0, r4]
 80177a0:	3401      	adds	r4, #1
 80177a2:	5d0d      	ldrb	r5, [r1, r4]
 80177a4:	42ab      	cmp	r3, r5
 80177a6:	d0f6      	beq.n	8017796 <memcmp+0x6>
 80177a8:	1b58      	subs	r0, r3, r5
 80177aa:	bd30      	pop	{r4, r5, pc}

080177ac <memcpy>:
 80177ac:	440a      	add	r2, r1
 80177ae:	4291      	cmp	r1, r2
 80177b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80177b4:	d100      	bne.n	80177b8 <memcpy+0xc>
 80177b6:	4770      	bx	lr
 80177b8:	b510      	push	{r4, lr}
 80177ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177c2:	4291      	cmp	r1, r2
 80177c4:	d1f9      	bne.n	80177ba <memcpy+0xe>
 80177c6:	bd10      	pop	{r4, pc}

080177c8 <memmove>:
 80177c8:	4288      	cmp	r0, r1
 80177ca:	b510      	push	{r4, lr}
 80177cc:	eb01 0402 	add.w	r4, r1, r2
 80177d0:	d902      	bls.n	80177d8 <memmove+0x10>
 80177d2:	4284      	cmp	r4, r0
 80177d4:	4623      	mov	r3, r4
 80177d6:	d807      	bhi.n	80177e8 <memmove+0x20>
 80177d8:	1e43      	subs	r3, r0, #1
 80177da:	42a1      	cmp	r1, r4
 80177dc:	d008      	beq.n	80177f0 <memmove+0x28>
 80177de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177e6:	e7f8      	b.n	80177da <memmove+0x12>
 80177e8:	4402      	add	r2, r0
 80177ea:	4601      	mov	r1, r0
 80177ec:	428a      	cmp	r2, r1
 80177ee:	d100      	bne.n	80177f2 <memmove+0x2a>
 80177f0:	bd10      	pop	{r4, pc}
 80177f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80177fa:	e7f7      	b.n	80177ec <memmove+0x24>

080177fc <memset>:
 80177fc:	4402      	add	r2, r0
 80177fe:	4603      	mov	r3, r0
 8017800:	4293      	cmp	r3, r2
 8017802:	d100      	bne.n	8017806 <memset+0xa>
 8017804:	4770      	bx	lr
 8017806:	f803 1b01 	strb.w	r1, [r3], #1
 801780a:	e7f9      	b.n	8017800 <memset+0x4>

0801780c <iprintf>:
 801780c:	b40f      	push	{r0, r1, r2, r3}
 801780e:	4b0a      	ldr	r3, [pc, #40]	; (8017838 <iprintf+0x2c>)
 8017810:	b513      	push	{r0, r1, r4, lr}
 8017812:	681c      	ldr	r4, [r3, #0]
 8017814:	b124      	cbz	r4, 8017820 <iprintf+0x14>
 8017816:	69a3      	ldr	r3, [r4, #24]
 8017818:	b913      	cbnz	r3, 8017820 <iprintf+0x14>
 801781a:	4620      	mov	r0, r4
 801781c:	f000 fba2 	bl	8017f64 <__sinit>
 8017820:	ab05      	add	r3, sp, #20
 8017822:	9a04      	ldr	r2, [sp, #16]
 8017824:	68a1      	ldr	r1, [r4, #8]
 8017826:	9301      	str	r3, [sp, #4]
 8017828:	4620      	mov	r0, r4
 801782a:	f000 fee9 	bl	8018600 <_vfiprintf_r>
 801782e:	b002      	add	sp, #8
 8017830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017834:	b004      	add	sp, #16
 8017836:	4770      	bx	lr
 8017838:	2000001c 	.word	0x2000001c

0801783c <_puts_r>:
 801783c:	b570      	push	{r4, r5, r6, lr}
 801783e:	460e      	mov	r6, r1
 8017840:	4605      	mov	r5, r0
 8017842:	b118      	cbz	r0, 801784c <_puts_r+0x10>
 8017844:	6983      	ldr	r3, [r0, #24]
 8017846:	b90b      	cbnz	r3, 801784c <_puts_r+0x10>
 8017848:	f000 fb8c 	bl	8017f64 <__sinit>
 801784c:	69ab      	ldr	r3, [r5, #24]
 801784e:	68ac      	ldr	r4, [r5, #8]
 8017850:	b913      	cbnz	r3, 8017858 <_puts_r+0x1c>
 8017852:	4628      	mov	r0, r5
 8017854:	f000 fb86 	bl	8017f64 <__sinit>
 8017858:	4b2c      	ldr	r3, [pc, #176]	; (801790c <_puts_r+0xd0>)
 801785a:	429c      	cmp	r4, r3
 801785c:	d120      	bne.n	80178a0 <_puts_r+0x64>
 801785e:	686c      	ldr	r4, [r5, #4]
 8017860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017862:	07db      	lsls	r3, r3, #31
 8017864:	d405      	bmi.n	8017872 <_puts_r+0x36>
 8017866:	89a3      	ldrh	r3, [r4, #12]
 8017868:	0598      	lsls	r0, r3, #22
 801786a:	d402      	bmi.n	8017872 <_puts_r+0x36>
 801786c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801786e:	f000 fc29 	bl	80180c4 <__retarget_lock_acquire_recursive>
 8017872:	89a3      	ldrh	r3, [r4, #12]
 8017874:	0719      	lsls	r1, r3, #28
 8017876:	d51d      	bpl.n	80178b4 <_puts_r+0x78>
 8017878:	6923      	ldr	r3, [r4, #16]
 801787a:	b1db      	cbz	r3, 80178b4 <_puts_r+0x78>
 801787c:	3e01      	subs	r6, #1
 801787e:	68a3      	ldr	r3, [r4, #8]
 8017880:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017884:	3b01      	subs	r3, #1
 8017886:	60a3      	str	r3, [r4, #8]
 8017888:	bb39      	cbnz	r1, 80178da <_puts_r+0x9e>
 801788a:	2b00      	cmp	r3, #0
 801788c:	da38      	bge.n	8017900 <_puts_r+0xc4>
 801788e:	4622      	mov	r2, r4
 8017890:	210a      	movs	r1, #10
 8017892:	4628      	mov	r0, r5
 8017894:	f000 f96e 	bl	8017b74 <__swbuf_r>
 8017898:	3001      	adds	r0, #1
 801789a:	d011      	beq.n	80178c0 <_puts_r+0x84>
 801789c:	250a      	movs	r5, #10
 801789e:	e011      	b.n	80178c4 <_puts_r+0x88>
 80178a0:	4b1b      	ldr	r3, [pc, #108]	; (8017910 <_puts_r+0xd4>)
 80178a2:	429c      	cmp	r4, r3
 80178a4:	d101      	bne.n	80178aa <_puts_r+0x6e>
 80178a6:	68ac      	ldr	r4, [r5, #8]
 80178a8:	e7da      	b.n	8017860 <_puts_r+0x24>
 80178aa:	4b1a      	ldr	r3, [pc, #104]	; (8017914 <_puts_r+0xd8>)
 80178ac:	429c      	cmp	r4, r3
 80178ae:	bf08      	it	eq
 80178b0:	68ec      	ldreq	r4, [r5, #12]
 80178b2:	e7d5      	b.n	8017860 <_puts_r+0x24>
 80178b4:	4621      	mov	r1, r4
 80178b6:	4628      	mov	r0, r5
 80178b8:	f000 f9ae 	bl	8017c18 <__swsetup_r>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d0dd      	beq.n	801787c <_puts_r+0x40>
 80178c0:	f04f 35ff 	mov.w	r5, #4294967295
 80178c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178c6:	07da      	lsls	r2, r3, #31
 80178c8:	d405      	bmi.n	80178d6 <_puts_r+0x9a>
 80178ca:	89a3      	ldrh	r3, [r4, #12]
 80178cc:	059b      	lsls	r3, r3, #22
 80178ce:	d402      	bmi.n	80178d6 <_puts_r+0x9a>
 80178d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178d2:	f000 fbf8 	bl	80180c6 <__retarget_lock_release_recursive>
 80178d6:	4628      	mov	r0, r5
 80178d8:	bd70      	pop	{r4, r5, r6, pc}
 80178da:	2b00      	cmp	r3, #0
 80178dc:	da04      	bge.n	80178e8 <_puts_r+0xac>
 80178de:	69a2      	ldr	r2, [r4, #24]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	dc06      	bgt.n	80178f2 <_puts_r+0xb6>
 80178e4:	290a      	cmp	r1, #10
 80178e6:	d004      	beq.n	80178f2 <_puts_r+0xb6>
 80178e8:	6823      	ldr	r3, [r4, #0]
 80178ea:	1c5a      	adds	r2, r3, #1
 80178ec:	6022      	str	r2, [r4, #0]
 80178ee:	7019      	strb	r1, [r3, #0]
 80178f0:	e7c5      	b.n	801787e <_puts_r+0x42>
 80178f2:	4622      	mov	r2, r4
 80178f4:	4628      	mov	r0, r5
 80178f6:	f000 f93d 	bl	8017b74 <__swbuf_r>
 80178fa:	3001      	adds	r0, #1
 80178fc:	d1bf      	bne.n	801787e <_puts_r+0x42>
 80178fe:	e7df      	b.n	80178c0 <_puts_r+0x84>
 8017900:	6823      	ldr	r3, [r4, #0]
 8017902:	250a      	movs	r5, #10
 8017904:	1c5a      	adds	r2, r3, #1
 8017906:	6022      	str	r2, [r4, #0]
 8017908:	701d      	strb	r5, [r3, #0]
 801790a:	e7db      	b.n	80178c4 <_puts_r+0x88>
 801790c:	0801c664 	.word	0x0801c664
 8017910:	0801c684 	.word	0x0801c684
 8017914:	0801c644 	.word	0x0801c644

08017918 <puts>:
 8017918:	4b02      	ldr	r3, [pc, #8]	; (8017924 <puts+0xc>)
 801791a:	4601      	mov	r1, r0
 801791c:	6818      	ldr	r0, [r3, #0]
 801791e:	f7ff bf8d 	b.w	801783c <_puts_r>
 8017922:	bf00      	nop
 8017924:	2000001c 	.word	0x2000001c

08017928 <rand>:
 8017928:	4b17      	ldr	r3, [pc, #92]	; (8017988 <rand+0x60>)
 801792a:	b510      	push	{r4, lr}
 801792c:	681c      	ldr	r4, [r3, #0]
 801792e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017930:	b9b3      	cbnz	r3, 8017960 <rand+0x38>
 8017932:	2018      	movs	r0, #24
 8017934:	f000 fc2c 	bl	8018190 <malloc>
 8017938:	63a0      	str	r0, [r4, #56]	; 0x38
 801793a:	b928      	cbnz	r0, 8017948 <rand+0x20>
 801793c:	4602      	mov	r2, r0
 801793e:	4b13      	ldr	r3, [pc, #76]	; (801798c <rand+0x64>)
 8017940:	4813      	ldr	r0, [pc, #76]	; (8017990 <rand+0x68>)
 8017942:	214e      	movs	r1, #78	; 0x4e
 8017944:	f000 f9d6 	bl	8017cf4 <__assert_func>
 8017948:	4a12      	ldr	r2, [pc, #72]	; (8017994 <rand+0x6c>)
 801794a:	4b13      	ldr	r3, [pc, #76]	; (8017998 <rand+0x70>)
 801794c:	e9c0 2300 	strd	r2, r3, [r0]
 8017950:	4b12      	ldr	r3, [pc, #72]	; (801799c <rand+0x74>)
 8017952:	6083      	str	r3, [r0, #8]
 8017954:	230b      	movs	r3, #11
 8017956:	8183      	strh	r3, [r0, #12]
 8017958:	2201      	movs	r2, #1
 801795a:	2300      	movs	r3, #0
 801795c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017960:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017962:	480f      	ldr	r0, [pc, #60]	; (80179a0 <rand+0x78>)
 8017964:	690a      	ldr	r2, [r1, #16]
 8017966:	694b      	ldr	r3, [r1, #20]
 8017968:	4c0e      	ldr	r4, [pc, #56]	; (80179a4 <rand+0x7c>)
 801796a:	4350      	muls	r0, r2
 801796c:	fb04 0003 	mla	r0, r4, r3, r0
 8017970:	fba2 3404 	umull	r3, r4, r2, r4
 8017974:	1c5a      	adds	r2, r3, #1
 8017976:	4404      	add	r4, r0
 8017978:	f144 0000 	adc.w	r0, r4, #0
 801797c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017980:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017984:	bd10      	pop	{r4, pc}
 8017986:	bf00      	nop
 8017988:	2000001c 	.word	0x2000001c
 801798c:	0801c590 	.word	0x0801c590
 8017990:	0801c5a7 	.word	0x0801c5a7
 8017994:	abcd330e 	.word	0xabcd330e
 8017998:	e66d1234 	.word	0xe66d1234
 801799c:	0005deec 	.word	0x0005deec
 80179a0:	5851f42d 	.word	0x5851f42d
 80179a4:	4c957f2d 	.word	0x4c957f2d

080179a8 <setvbuf>:
 80179a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80179ac:	461d      	mov	r5, r3
 80179ae:	4b5d      	ldr	r3, [pc, #372]	; (8017b24 <setvbuf+0x17c>)
 80179b0:	681f      	ldr	r7, [r3, #0]
 80179b2:	4604      	mov	r4, r0
 80179b4:	460e      	mov	r6, r1
 80179b6:	4690      	mov	r8, r2
 80179b8:	b127      	cbz	r7, 80179c4 <setvbuf+0x1c>
 80179ba:	69bb      	ldr	r3, [r7, #24]
 80179bc:	b913      	cbnz	r3, 80179c4 <setvbuf+0x1c>
 80179be:	4638      	mov	r0, r7
 80179c0:	f000 fad0 	bl	8017f64 <__sinit>
 80179c4:	4b58      	ldr	r3, [pc, #352]	; (8017b28 <setvbuf+0x180>)
 80179c6:	429c      	cmp	r4, r3
 80179c8:	d167      	bne.n	8017a9a <setvbuf+0xf2>
 80179ca:	687c      	ldr	r4, [r7, #4]
 80179cc:	f1b8 0f02 	cmp.w	r8, #2
 80179d0:	d006      	beq.n	80179e0 <setvbuf+0x38>
 80179d2:	f1b8 0f01 	cmp.w	r8, #1
 80179d6:	f200 809f 	bhi.w	8017b18 <setvbuf+0x170>
 80179da:	2d00      	cmp	r5, #0
 80179dc:	f2c0 809c 	blt.w	8017b18 <setvbuf+0x170>
 80179e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80179e2:	07db      	lsls	r3, r3, #31
 80179e4:	d405      	bmi.n	80179f2 <setvbuf+0x4a>
 80179e6:	89a3      	ldrh	r3, [r4, #12]
 80179e8:	0598      	lsls	r0, r3, #22
 80179ea:	d402      	bmi.n	80179f2 <setvbuf+0x4a>
 80179ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179ee:	f000 fb69 	bl	80180c4 <__retarget_lock_acquire_recursive>
 80179f2:	4621      	mov	r1, r4
 80179f4:	4638      	mov	r0, r7
 80179f6:	f000 fa21 	bl	8017e3c <_fflush_r>
 80179fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179fc:	b141      	cbz	r1, 8017a10 <setvbuf+0x68>
 80179fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a02:	4299      	cmp	r1, r3
 8017a04:	d002      	beq.n	8017a0c <setvbuf+0x64>
 8017a06:	4638      	mov	r0, r7
 8017a08:	f000 fbca 	bl	80181a0 <_free_r>
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	6363      	str	r3, [r4, #52]	; 0x34
 8017a10:	2300      	movs	r3, #0
 8017a12:	61a3      	str	r3, [r4, #24]
 8017a14:	6063      	str	r3, [r4, #4]
 8017a16:	89a3      	ldrh	r3, [r4, #12]
 8017a18:	0619      	lsls	r1, r3, #24
 8017a1a:	d503      	bpl.n	8017a24 <setvbuf+0x7c>
 8017a1c:	6921      	ldr	r1, [r4, #16]
 8017a1e:	4638      	mov	r0, r7
 8017a20:	f000 fbbe 	bl	80181a0 <_free_r>
 8017a24:	89a3      	ldrh	r3, [r4, #12]
 8017a26:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8017a2a:	f023 0303 	bic.w	r3, r3, #3
 8017a2e:	f1b8 0f02 	cmp.w	r8, #2
 8017a32:	81a3      	strh	r3, [r4, #12]
 8017a34:	d06c      	beq.n	8017b10 <setvbuf+0x168>
 8017a36:	ab01      	add	r3, sp, #4
 8017a38:	466a      	mov	r2, sp
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	4638      	mov	r0, r7
 8017a3e:	f000 fb43 	bl	80180c8 <__swhatbuf_r>
 8017a42:	89a3      	ldrh	r3, [r4, #12]
 8017a44:	4318      	orrs	r0, r3
 8017a46:	81a0      	strh	r0, [r4, #12]
 8017a48:	2d00      	cmp	r5, #0
 8017a4a:	d130      	bne.n	8017aae <setvbuf+0x106>
 8017a4c:	9d00      	ldr	r5, [sp, #0]
 8017a4e:	4628      	mov	r0, r5
 8017a50:	f000 fb9e 	bl	8018190 <malloc>
 8017a54:	4606      	mov	r6, r0
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d155      	bne.n	8017b06 <setvbuf+0x15e>
 8017a5a:	f8dd 9000 	ldr.w	r9, [sp]
 8017a5e:	45a9      	cmp	r9, r5
 8017a60:	d14a      	bne.n	8017af8 <setvbuf+0x150>
 8017a62:	f04f 35ff 	mov.w	r5, #4294967295
 8017a66:	2200      	movs	r2, #0
 8017a68:	60a2      	str	r2, [r4, #8]
 8017a6a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8017a6e:	6022      	str	r2, [r4, #0]
 8017a70:	6122      	str	r2, [r4, #16]
 8017a72:	2201      	movs	r2, #1
 8017a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a78:	6162      	str	r2, [r4, #20]
 8017a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017a7c:	f043 0302 	orr.w	r3, r3, #2
 8017a80:	07d2      	lsls	r2, r2, #31
 8017a82:	81a3      	strh	r3, [r4, #12]
 8017a84:	d405      	bmi.n	8017a92 <setvbuf+0xea>
 8017a86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017a8a:	d102      	bne.n	8017a92 <setvbuf+0xea>
 8017a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a8e:	f000 fb1a 	bl	80180c6 <__retarget_lock_release_recursive>
 8017a92:	4628      	mov	r0, r5
 8017a94:	b003      	add	sp, #12
 8017a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a9a:	4b24      	ldr	r3, [pc, #144]	; (8017b2c <setvbuf+0x184>)
 8017a9c:	429c      	cmp	r4, r3
 8017a9e:	d101      	bne.n	8017aa4 <setvbuf+0xfc>
 8017aa0:	68bc      	ldr	r4, [r7, #8]
 8017aa2:	e793      	b.n	80179cc <setvbuf+0x24>
 8017aa4:	4b22      	ldr	r3, [pc, #136]	; (8017b30 <setvbuf+0x188>)
 8017aa6:	429c      	cmp	r4, r3
 8017aa8:	bf08      	it	eq
 8017aaa:	68fc      	ldreq	r4, [r7, #12]
 8017aac:	e78e      	b.n	80179cc <setvbuf+0x24>
 8017aae:	2e00      	cmp	r6, #0
 8017ab0:	d0cd      	beq.n	8017a4e <setvbuf+0xa6>
 8017ab2:	69bb      	ldr	r3, [r7, #24]
 8017ab4:	b913      	cbnz	r3, 8017abc <setvbuf+0x114>
 8017ab6:	4638      	mov	r0, r7
 8017ab8:	f000 fa54 	bl	8017f64 <__sinit>
 8017abc:	f1b8 0f01 	cmp.w	r8, #1
 8017ac0:	bf08      	it	eq
 8017ac2:	89a3      	ldrheq	r3, [r4, #12]
 8017ac4:	6026      	str	r6, [r4, #0]
 8017ac6:	bf04      	itt	eq
 8017ac8:	f043 0301 	orreq.w	r3, r3, #1
 8017acc:	81a3      	strheq	r3, [r4, #12]
 8017ace:	89a2      	ldrh	r2, [r4, #12]
 8017ad0:	f012 0308 	ands.w	r3, r2, #8
 8017ad4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8017ad8:	d01c      	beq.n	8017b14 <setvbuf+0x16c>
 8017ada:	07d3      	lsls	r3, r2, #31
 8017adc:	bf41      	itttt	mi
 8017ade:	2300      	movmi	r3, #0
 8017ae0:	426d      	negmi	r5, r5
 8017ae2:	60a3      	strmi	r3, [r4, #8]
 8017ae4:	61a5      	strmi	r5, [r4, #24]
 8017ae6:	bf58      	it	pl
 8017ae8:	60a5      	strpl	r5, [r4, #8]
 8017aea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8017aec:	f015 0501 	ands.w	r5, r5, #1
 8017af0:	d115      	bne.n	8017b1e <setvbuf+0x176>
 8017af2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8017af6:	e7c8      	b.n	8017a8a <setvbuf+0xe2>
 8017af8:	4648      	mov	r0, r9
 8017afa:	f000 fb49 	bl	8018190 <malloc>
 8017afe:	4606      	mov	r6, r0
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d0ae      	beq.n	8017a62 <setvbuf+0xba>
 8017b04:	464d      	mov	r5, r9
 8017b06:	89a3      	ldrh	r3, [r4, #12]
 8017b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b0c:	81a3      	strh	r3, [r4, #12]
 8017b0e:	e7d0      	b.n	8017ab2 <setvbuf+0x10a>
 8017b10:	2500      	movs	r5, #0
 8017b12:	e7a8      	b.n	8017a66 <setvbuf+0xbe>
 8017b14:	60a3      	str	r3, [r4, #8]
 8017b16:	e7e8      	b.n	8017aea <setvbuf+0x142>
 8017b18:	f04f 35ff 	mov.w	r5, #4294967295
 8017b1c:	e7b9      	b.n	8017a92 <setvbuf+0xea>
 8017b1e:	2500      	movs	r5, #0
 8017b20:	e7b7      	b.n	8017a92 <setvbuf+0xea>
 8017b22:	bf00      	nop
 8017b24:	2000001c 	.word	0x2000001c
 8017b28:	0801c664 	.word	0x0801c664
 8017b2c:	0801c684 	.word	0x0801c684
 8017b30:	0801c644 	.word	0x0801c644

08017b34 <siprintf>:
 8017b34:	b40e      	push	{r1, r2, r3}
 8017b36:	b500      	push	{lr}
 8017b38:	b09c      	sub	sp, #112	; 0x70
 8017b3a:	ab1d      	add	r3, sp, #116	; 0x74
 8017b3c:	9002      	str	r0, [sp, #8]
 8017b3e:	9006      	str	r0, [sp, #24]
 8017b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b44:	4809      	ldr	r0, [pc, #36]	; (8017b6c <siprintf+0x38>)
 8017b46:	9107      	str	r1, [sp, #28]
 8017b48:	9104      	str	r1, [sp, #16]
 8017b4a:	4909      	ldr	r1, [pc, #36]	; (8017b70 <siprintf+0x3c>)
 8017b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b50:	9105      	str	r1, [sp, #20]
 8017b52:	6800      	ldr	r0, [r0, #0]
 8017b54:	9301      	str	r3, [sp, #4]
 8017b56:	a902      	add	r1, sp, #8
 8017b58:	f000 fc28 	bl	80183ac <_svfiprintf_r>
 8017b5c:	9b02      	ldr	r3, [sp, #8]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	701a      	strb	r2, [r3, #0]
 8017b62:	b01c      	add	sp, #112	; 0x70
 8017b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b68:	b003      	add	sp, #12
 8017b6a:	4770      	bx	lr
 8017b6c:	2000001c 	.word	0x2000001c
 8017b70:	ffff0208 	.word	0xffff0208

08017b74 <__swbuf_r>:
 8017b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b76:	460e      	mov	r6, r1
 8017b78:	4614      	mov	r4, r2
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	b118      	cbz	r0, 8017b86 <__swbuf_r+0x12>
 8017b7e:	6983      	ldr	r3, [r0, #24]
 8017b80:	b90b      	cbnz	r3, 8017b86 <__swbuf_r+0x12>
 8017b82:	f000 f9ef 	bl	8017f64 <__sinit>
 8017b86:	4b21      	ldr	r3, [pc, #132]	; (8017c0c <__swbuf_r+0x98>)
 8017b88:	429c      	cmp	r4, r3
 8017b8a:	d12b      	bne.n	8017be4 <__swbuf_r+0x70>
 8017b8c:	686c      	ldr	r4, [r5, #4]
 8017b8e:	69a3      	ldr	r3, [r4, #24]
 8017b90:	60a3      	str	r3, [r4, #8]
 8017b92:	89a3      	ldrh	r3, [r4, #12]
 8017b94:	071a      	lsls	r2, r3, #28
 8017b96:	d52f      	bpl.n	8017bf8 <__swbuf_r+0x84>
 8017b98:	6923      	ldr	r3, [r4, #16]
 8017b9a:	b36b      	cbz	r3, 8017bf8 <__swbuf_r+0x84>
 8017b9c:	6923      	ldr	r3, [r4, #16]
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	1ac0      	subs	r0, r0, r3
 8017ba2:	6963      	ldr	r3, [r4, #20]
 8017ba4:	b2f6      	uxtb	r6, r6
 8017ba6:	4283      	cmp	r3, r0
 8017ba8:	4637      	mov	r7, r6
 8017baa:	dc04      	bgt.n	8017bb6 <__swbuf_r+0x42>
 8017bac:	4621      	mov	r1, r4
 8017bae:	4628      	mov	r0, r5
 8017bb0:	f000 f944 	bl	8017e3c <_fflush_r>
 8017bb4:	bb30      	cbnz	r0, 8017c04 <__swbuf_r+0x90>
 8017bb6:	68a3      	ldr	r3, [r4, #8]
 8017bb8:	3b01      	subs	r3, #1
 8017bba:	60a3      	str	r3, [r4, #8]
 8017bbc:	6823      	ldr	r3, [r4, #0]
 8017bbe:	1c5a      	adds	r2, r3, #1
 8017bc0:	6022      	str	r2, [r4, #0]
 8017bc2:	701e      	strb	r6, [r3, #0]
 8017bc4:	6963      	ldr	r3, [r4, #20]
 8017bc6:	3001      	adds	r0, #1
 8017bc8:	4283      	cmp	r3, r0
 8017bca:	d004      	beq.n	8017bd6 <__swbuf_r+0x62>
 8017bcc:	89a3      	ldrh	r3, [r4, #12]
 8017bce:	07db      	lsls	r3, r3, #31
 8017bd0:	d506      	bpl.n	8017be0 <__swbuf_r+0x6c>
 8017bd2:	2e0a      	cmp	r6, #10
 8017bd4:	d104      	bne.n	8017be0 <__swbuf_r+0x6c>
 8017bd6:	4621      	mov	r1, r4
 8017bd8:	4628      	mov	r0, r5
 8017bda:	f000 f92f 	bl	8017e3c <_fflush_r>
 8017bde:	b988      	cbnz	r0, 8017c04 <__swbuf_r+0x90>
 8017be0:	4638      	mov	r0, r7
 8017be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017be4:	4b0a      	ldr	r3, [pc, #40]	; (8017c10 <__swbuf_r+0x9c>)
 8017be6:	429c      	cmp	r4, r3
 8017be8:	d101      	bne.n	8017bee <__swbuf_r+0x7a>
 8017bea:	68ac      	ldr	r4, [r5, #8]
 8017bec:	e7cf      	b.n	8017b8e <__swbuf_r+0x1a>
 8017bee:	4b09      	ldr	r3, [pc, #36]	; (8017c14 <__swbuf_r+0xa0>)
 8017bf0:	429c      	cmp	r4, r3
 8017bf2:	bf08      	it	eq
 8017bf4:	68ec      	ldreq	r4, [r5, #12]
 8017bf6:	e7ca      	b.n	8017b8e <__swbuf_r+0x1a>
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	f000 f80c 	bl	8017c18 <__swsetup_r>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d0cb      	beq.n	8017b9c <__swbuf_r+0x28>
 8017c04:	f04f 37ff 	mov.w	r7, #4294967295
 8017c08:	e7ea      	b.n	8017be0 <__swbuf_r+0x6c>
 8017c0a:	bf00      	nop
 8017c0c:	0801c664 	.word	0x0801c664
 8017c10:	0801c684 	.word	0x0801c684
 8017c14:	0801c644 	.word	0x0801c644

08017c18 <__swsetup_r>:
 8017c18:	4b32      	ldr	r3, [pc, #200]	; (8017ce4 <__swsetup_r+0xcc>)
 8017c1a:	b570      	push	{r4, r5, r6, lr}
 8017c1c:	681d      	ldr	r5, [r3, #0]
 8017c1e:	4606      	mov	r6, r0
 8017c20:	460c      	mov	r4, r1
 8017c22:	b125      	cbz	r5, 8017c2e <__swsetup_r+0x16>
 8017c24:	69ab      	ldr	r3, [r5, #24]
 8017c26:	b913      	cbnz	r3, 8017c2e <__swsetup_r+0x16>
 8017c28:	4628      	mov	r0, r5
 8017c2a:	f000 f99b 	bl	8017f64 <__sinit>
 8017c2e:	4b2e      	ldr	r3, [pc, #184]	; (8017ce8 <__swsetup_r+0xd0>)
 8017c30:	429c      	cmp	r4, r3
 8017c32:	d10f      	bne.n	8017c54 <__swsetup_r+0x3c>
 8017c34:	686c      	ldr	r4, [r5, #4]
 8017c36:	89a3      	ldrh	r3, [r4, #12]
 8017c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c3c:	0719      	lsls	r1, r3, #28
 8017c3e:	d42c      	bmi.n	8017c9a <__swsetup_r+0x82>
 8017c40:	06dd      	lsls	r5, r3, #27
 8017c42:	d411      	bmi.n	8017c68 <__swsetup_r+0x50>
 8017c44:	2309      	movs	r3, #9
 8017c46:	6033      	str	r3, [r6, #0]
 8017c48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017c4c:	81a3      	strh	r3, [r4, #12]
 8017c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c52:	e03e      	b.n	8017cd2 <__swsetup_r+0xba>
 8017c54:	4b25      	ldr	r3, [pc, #148]	; (8017cec <__swsetup_r+0xd4>)
 8017c56:	429c      	cmp	r4, r3
 8017c58:	d101      	bne.n	8017c5e <__swsetup_r+0x46>
 8017c5a:	68ac      	ldr	r4, [r5, #8]
 8017c5c:	e7eb      	b.n	8017c36 <__swsetup_r+0x1e>
 8017c5e:	4b24      	ldr	r3, [pc, #144]	; (8017cf0 <__swsetup_r+0xd8>)
 8017c60:	429c      	cmp	r4, r3
 8017c62:	bf08      	it	eq
 8017c64:	68ec      	ldreq	r4, [r5, #12]
 8017c66:	e7e6      	b.n	8017c36 <__swsetup_r+0x1e>
 8017c68:	0758      	lsls	r0, r3, #29
 8017c6a:	d512      	bpl.n	8017c92 <__swsetup_r+0x7a>
 8017c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c6e:	b141      	cbz	r1, 8017c82 <__swsetup_r+0x6a>
 8017c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c74:	4299      	cmp	r1, r3
 8017c76:	d002      	beq.n	8017c7e <__swsetup_r+0x66>
 8017c78:	4630      	mov	r0, r6
 8017c7a:	f000 fa91 	bl	80181a0 <_free_r>
 8017c7e:	2300      	movs	r3, #0
 8017c80:	6363      	str	r3, [r4, #52]	; 0x34
 8017c82:	89a3      	ldrh	r3, [r4, #12]
 8017c84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c88:	81a3      	strh	r3, [r4, #12]
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	6063      	str	r3, [r4, #4]
 8017c8e:	6923      	ldr	r3, [r4, #16]
 8017c90:	6023      	str	r3, [r4, #0]
 8017c92:	89a3      	ldrh	r3, [r4, #12]
 8017c94:	f043 0308 	orr.w	r3, r3, #8
 8017c98:	81a3      	strh	r3, [r4, #12]
 8017c9a:	6923      	ldr	r3, [r4, #16]
 8017c9c:	b94b      	cbnz	r3, 8017cb2 <__swsetup_r+0x9a>
 8017c9e:	89a3      	ldrh	r3, [r4, #12]
 8017ca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ca8:	d003      	beq.n	8017cb2 <__swsetup_r+0x9a>
 8017caa:	4621      	mov	r1, r4
 8017cac:	4630      	mov	r0, r6
 8017cae:	f000 fa2f 	bl	8018110 <__smakebuf_r>
 8017cb2:	89a0      	ldrh	r0, [r4, #12]
 8017cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017cb8:	f010 0301 	ands.w	r3, r0, #1
 8017cbc:	d00a      	beq.n	8017cd4 <__swsetup_r+0xbc>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	60a3      	str	r3, [r4, #8]
 8017cc2:	6963      	ldr	r3, [r4, #20]
 8017cc4:	425b      	negs	r3, r3
 8017cc6:	61a3      	str	r3, [r4, #24]
 8017cc8:	6923      	ldr	r3, [r4, #16]
 8017cca:	b943      	cbnz	r3, 8017cde <__swsetup_r+0xc6>
 8017ccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017cd0:	d1ba      	bne.n	8017c48 <__swsetup_r+0x30>
 8017cd2:	bd70      	pop	{r4, r5, r6, pc}
 8017cd4:	0781      	lsls	r1, r0, #30
 8017cd6:	bf58      	it	pl
 8017cd8:	6963      	ldrpl	r3, [r4, #20]
 8017cda:	60a3      	str	r3, [r4, #8]
 8017cdc:	e7f4      	b.n	8017cc8 <__swsetup_r+0xb0>
 8017cde:	2000      	movs	r0, #0
 8017ce0:	e7f7      	b.n	8017cd2 <__swsetup_r+0xba>
 8017ce2:	bf00      	nop
 8017ce4:	2000001c 	.word	0x2000001c
 8017ce8:	0801c664 	.word	0x0801c664
 8017cec:	0801c684 	.word	0x0801c684
 8017cf0:	0801c644 	.word	0x0801c644

08017cf4 <__assert_func>:
 8017cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cf6:	4614      	mov	r4, r2
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	4b09      	ldr	r3, [pc, #36]	; (8017d20 <__assert_func+0x2c>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4605      	mov	r5, r0
 8017d00:	68d8      	ldr	r0, [r3, #12]
 8017d02:	b14c      	cbz	r4, 8017d18 <__assert_func+0x24>
 8017d04:	4b07      	ldr	r3, [pc, #28]	; (8017d24 <__assert_func+0x30>)
 8017d06:	9100      	str	r1, [sp, #0]
 8017d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d0c:	4906      	ldr	r1, [pc, #24]	; (8017d28 <__assert_func+0x34>)
 8017d0e:	462b      	mov	r3, r5
 8017d10:	f000 f9a6 	bl	8018060 <fiprintf>
 8017d14:	f000 ff9e 	bl	8018c54 <abort>
 8017d18:	4b04      	ldr	r3, [pc, #16]	; (8017d2c <__assert_func+0x38>)
 8017d1a:	461c      	mov	r4, r3
 8017d1c:	e7f3      	b.n	8017d06 <__assert_func+0x12>
 8017d1e:	bf00      	nop
 8017d20:	2000001c 	.word	0x2000001c
 8017d24:	0801c606 	.word	0x0801c606
 8017d28:	0801c613 	.word	0x0801c613
 8017d2c:	0801c641 	.word	0x0801c641

08017d30 <__sflush_r>:
 8017d30:	898a      	ldrh	r2, [r1, #12]
 8017d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d36:	4605      	mov	r5, r0
 8017d38:	0710      	lsls	r0, r2, #28
 8017d3a:	460c      	mov	r4, r1
 8017d3c:	d458      	bmi.n	8017df0 <__sflush_r+0xc0>
 8017d3e:	684b      	ldr	r3, [r1, #4]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	dc05      	bgt.n	8017d50 <__sflush_r+0x20>
 8017d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	dc02      	bgt.n	8017d50 <__sflush_r+0x20>
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d52:	2e00      	cmp	r6, #0
 8017d54:	d0f9      	beq.n	8017d4a <__sflush_r+0x1a>
 8017d56:	2300      	movs	r3, #0
 8017d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d5c:	682f      	ldr	r7, [r5, #0]
 8017d5e:	602b      	str	r3, [r5, #0]
 8017d60:	d032      	beq.n	8017dc8 <__sflush_r+0x98>
 8017d62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d64:	89a3      	ldrh	r3, [r4, #12]
 8017d66:	075a      	lsls	r2, r3, #29
 8017d68:	d505      	bpl.n	8017d76 <__sflush_r+0x46>
 8017d6a:	6863      	ldr	r3, [r4, #4]
 8017d6c:	1ac0      	subs	r0, r0, r3
 8017d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d70:	b10b      	cbz	r3, 8017d76 <__sflush_r+0x46>
 8017d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d74:	1ac0      	subs	r0, r0, r3
 8017d76:	2300      	movs	r3, #0
 8017d78:	4602      	mov	r2, r0
 8017d7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d7c:	6a21      	ldr	r1, [r4, #32]
 8017d7e:	4628      	mov	r0, r5
 8017d80:	47b0      	blx	r6
 8017d82:	1c43      	adds	r3, r0, #1
 8017d84:	89a3      	ldrh	r3, [r4, #12]
 8017d86:	d106      	bne.n	8017d96 <__sflush_r+0x66>
 8017d88:	6829      	ldr	r1, [r5, #0]
 8017d8a:	291d      	cmp	r1, #29
 8017d8c:	d82c      	bhi.n	8017de8 <__sflush_r+0xb8>
 8017d8e:	4a2a      	ldr	r2, [pc, #168]	; (8017e38 <__sflush_r+0x108>)
 8017d90:	40ca      	lsrs	r2, r1
 8017d92:	07d6      	lsls	r6, r2, #31
 8017d94:	d528      	bpl.n	8017de8 <__sflush_r+0xb8>
 8017d96:	2200      	movs	r2, #0
 8017d98:	6062      	str	r2, [r4, #4]
 8017d9a:	04d9      	lsls	r1, r3, #19
 8017d9c:	6922      	ldr	r2, [r4, #16]
 8017d9e:	6022      	str	r2, [r4, #0]
 8017da0:	d504      	bpl.n	8017dac <__sflush_r+0x7c>
 8017da2:	1c42      	adds	r2, r0, #1
 8017da4:	d101      	bne.n	8017daa <__sflush_r+0x7a>
 8017da6:	682b      	ldr	r3, [r5, #0]
 8017da8:	b903      	cbnz	r3, 8017dac <__sflush_r+0x7c>
 8017daa:	6560      	str	r0, [r4, #84]	; 0x54
 8017dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dae:	602f      	str	r7, [r5, #0]
 8017db0:	2900      	cmp	r1, #0
 8017db2:	d0ca      	beq.n	8017d4a <__sflush_r+0x1a>
 8017db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017db8:	4299      	cmp	r1, r3
 8017dba:	d002      	beq.n	8017dc2 <__sflush_r+0x92>
 8017dbc:	4628      	mov	r0, r5
 8017dbe:	f000 f9ef 	bl	80181a0 <_free_r>
 8017dc2:	2000      	movs	r0, #0
 8017dc4:	6360      	str	r0, [r4, #52]	; 0x34
 8017dc6:	e7c1      	b.n	8017d4c <__sflush_r+0x1c>
 8017dc8:	6a21      	ldr	r1, [r4, #32]
 8017dca:	2301      	movs	r3, #1
 8017dcc:	4628      	mov	r0, r5
 8017dce:	47b0      	blx	r6
 8017dd0:	1c41      	adds	r1, r0, #1
 8017dd2:	d1c7      	bne.n	8017d64 <__sflush_r+0x34>
 8017dd4:	682b      	ldr	r3, [r5, #0]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d0c4      	beq.n	8017d64 <__sflush_r+0x34>
 8017dda:	2b1d      	cmp	r3, #29
 8017ddc:	d001      	beq.n	8017de2 <__sflush_r+0xb2>
 8017dde:	2b16      	cmp	r3, #22
 8017de0:	d101      	bne.n	8017de6 <__sflush_r+0xb6>
 8017de2:	602f      	str	r7, [r5, #0]
 8017de4:	e7b1      	b.n	8017d4a <__sflush_r+0x1a>
 8017de6:	89a3      	ldrh	r3, [r4, #12]
 8017de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dec:	81a3      	strh	r3, [r4, #12]
 8017dee:	e7ad      	b.n	8017d4c <__sflush_r+0x1c>
 8017df0:	690f      	ldr	r7, [r1, #16]
 8017df2:	2f00      	cmp	r7, #0
 8017df4:	d0a9      	beq.n	8017d4a <__sflush_r+0x1a>
 8017df6:	0793      	lsls	r3, r2, #30
 8017df8:	680e      	ldr	r6, [r1, #0]
 8017dfa:	bf08      	it	eq
 8017dfc:	694b      	ldreq	r3, [r1, #20]
 8017dfe:	600f      	str	r7, [r1, #0]
 8017e00:	bf18      	it	ne
 8017e02:	2300      	movne	r3, #0
 8017e04:	eba6 0807 	sub.w	r8, r6, r7
 8017e08:	608b      	str	r3, [r1, #8]
 8017e0a:	f1b8 0f00 	cmp.w	r8, #0
 8017e0e:	dd9c      	ble.n	8017d4a <__sflush_r+0x1a>
 8017e10:	6a21      	ldr	r1, [r4, #32]
 8017e12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e14:	4643      	mov	r3, r8
 8017e16:	463a      	mov	r2, r7
 8017e18:	4628      	mov	r0, r5
 8017e1a:	47b0      	blx	r6
 8017e1c:	2800      	cmp	r0, #0
 8017e1e:	dc06      	bgt.n	8017e2e <__sflush_r+0xfe>
 8017e20:	89a3      	ldrh	r3, [r4, #12]
 8017e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e26:	81a3      	strh	r3, [r4, #12]
 8017e28:	f04f 30ff 	mov.w	r0, #4294967295
 8017e2c:	e78e      	b.n	8017d4c <__sflush_r+0x1c>
 8017e2e:	4407      	add	r7, r0
 8017e30:	eba8 0800 	sub.w	r8, r8, r0
 8017e34:	e7e9      	b.n	8017e0a <__sflush_r+0xda>
 8017e36:	bf00      	nop
 8017e38:	20400001 	.word	0x20400001

08017e3c <_fflush_r>:
 8017e3c:	b538      	push	{r3, r4, r5, lr}
 8017e3e:	690b      	ldr	r3, [r1, #16]
 8017e40:	4605      	mov	r5, r0
 8017e42:	460c      	mov	r4, r1
 8017e44:	b913      	cbnz	r3, 8017e4c <_fflush_r+0x10>
 8017e46:	2500      	movs	r5, #0
 8017e48:	4628      	mov	r0, r5
 8017e4a:	bd38      	pop	{r3, r4, r5, pc}
 8017e4c:	b118      	cbz	r0, 8017e56 <_fflush_r+0x1a>
 8017e4e:	6983      	ldr	r3, [r0, #24]
 8017e50:	b90b      	cbnz	r3, 8017e56 <_fflush_r+0x1a>
 8017e52:	f000 f887 	bl	8017f64 <__sinit>
 8017e56:	4b14      	ldr	r3, [pc, #80]	; (8017ea8 <_fflush_r+0x6c>)
 8017e58:	429c      	cmp	r4, r3
 8017e5a:	d11b      	bne.n	8017e94 <_fflush_r+0x58>
 8017e5c:	686c      	ldr	r4, [r5, #4]
 8017e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d0ef      	beq.n	8017e46 <_fflush_r+0xa>
 8017e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017e68:	07d0      	lsls	r0, r2, #31
 8017e6a:	d404      	bmi.n	8017e76 <_fflush_r+0x3a>
 8017e6c:	0599      	lsls	r1, r3, #22
 8017e6e:	d402      	bmi.n	8017e76 <_fflush_r+0x3a>
 8017e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e72:	f000 f927 	bl	80180c4 <__retarget_lock_acquire_recursive>
 8017e76:	4628      	mov	r0, r5
 8017e78:	4621      	mov	r1, r4
 8017e7a:	f7ff ff59 	bl	8017d30 <__sflush_r>
 8017e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e80:	07da      	lsls	r2, r3, #31
 8017e82:	4605      	mov	r5, r0
 8017e84:	d4e0      	bmi.n	8017e48 <_fflush_r+0xc>
 8017e86:	89a3      	ldrh	r3, [r4, #12]
 8017e88:	059b      	lsls	r3, r3, #22
 8017e8a:	d4dd      	bmi.n	8017e48 <_fflush_r+0xc>
 8017e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e8e:	f000 f91a 	bl	80180c6 <__retarget_lock_release_recursive>
 8017e92:	e7d9      	b.n	8017e48 <_fflush_r+0xc>
 8017e94:	4b05      	ldr	r3, [pc, #20]	; (8017eac <_fflush_r+0x70>)
 8017e96:	429c      	cmp	r4, r3
 8017e98:	d101      	bne.n	8017e9e <_fflush_r+0x62>
 8017e9a:	68ac      	ldr	r4, [r5, #8]
 8017e9c:	e7df      	b.n	8017e5e <_fflush_r+0x22>
 8017e9e:	4b04      	ldr	r3, [pc, #16]	; (8017eb0 <_fflush_r+0x74>)
 8017ea0:	429c      	cmp	r4, r3
 8017ea2:	bf08      	it	eq
 8017ea4:	68ec      	ldreq	r4, [r5, #12]
 8017ea6:	e7da      	b.n	8017e5e <_fflush_r+0x22>
 8017ea8:	0801c664 	.word	0x0801c664
 8017eac:	0801c684 	.word	0x0801c684
 8017eb0:	0801c644 	.word	0x0801c644

08017eb4 <std>:
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	b510      	push	{r4, lr}
 8017eb8:	4604      	mov	r4, r0
 8017eba:	e9c0 3300 	strd	r3, r3, [r0]
 8017ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ec2:	6083      	str	r3, [r0, #8]
 8017ec4:	8181      	strh	r1, [r0, #12]
 8017ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8017ec8:	81c2      	strh	r2, [r0, #14]
 8017eca:	6183      	str	r3, [r0, #24]
 8017ecc:	4619      	mov	r1, r3
 8017ece:	2208      	movs	r2, #8
 8017ed0:	305c      	adds	r0, #92	; 0x5c
 8017ed2:	f7ff fc93 	bl	80177fc <memset>
 8017ed6:	4b05      	ldr	r3, [pc, #20]	; (8017eec <std+0x38>)
 8017ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8017eda:	4b05      	ldr	r3, [pc, #20]	; (8017ef0 <std+0x3c>)
 8017edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8017ede:	4b05      	ldr	r3, [pc, #20]	; (8017ef4 <std+0x40>)
 8017ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ee2:	4b05      	ldr	r3, [pc, #20]	; (8017ef8 <std+0x44>)
 8017ee4:	6224      	str	r4, [r4, #32]
 8017ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8017ee8:	bd10      	pop	{r4, pc}
 8017eea:	bf00      	nop
 8017eec:	08018ba9 	.word	0x08018ba9
 8017ef0:	08018bcb 	.word	0x08018bcb
 8017ef4:	08018c03 	.word	0x08018c03
 8017ef8:	08018c27 	.word	0x08018c27

08017efc <_cleanup_r>:
 8017efc:	4901      	ldr	r1, [pc, #4]	; (8017f04 <_cleanup_r+0x8>)
 8017efe:	f000 b8c1 	b.w	8018084 <_fwalk_reent>
 8017f02:	bf00      	nop
 8017f04:	08017e3d 	.word	0x08017e3d

08017f08 <__sfmoreglue>:
 8017f08:	b570      	push	{r4, r5, r6, lr}
 8017f0a:	1e4a      	subs	r2, r1, #1
 8017f0c:	2568      	movs	r5, #104	; 0x68
 8017f0e:	4355      	muls	r5, r2
 8017f10:	460e      	mov	r6, r1
 8017f12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f16:	f000 f993 	bl	8018240 <_malloc_r>
 8017f1a:	4604      	mov	r4, r0
 8017f1c:	b140      	cbz	r0, 8017f30 <__sfmoreglue+0x28>
 8017f1e:	2100      	movs	r1, #0
 8017f20:	e9c0 1600 	strd	r1, r6, [r0]
 8017f24:	300c      	adds	r0, #12
 8017f26:	60a0      	str	r0, [r4, #8]
 8017f28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f2c:	f7ff fc66 	bl	80177fc <memset>
 8017f30:	4620      	mov	r0, r4
 8017f32:	bd70      	pop	{r4, r5, r6, pc}

08017f34 <__sfp_lock_acquire>:
 8017f34:	4801      	ldr	r0, [pc, #4]	; (8017f3c <__sfp_lock_acquire+0x8>)
 8017f36:	f000 b8c5 	b.w	80180c4 <__retarget_lock_acquire_recursive>
 8017f3a:	bf00      	nop
 8017f3c:	20011524 	.word	0x20011524

08017f40 <__sfp_lock_release>:
 8017f40:	4801      	ldr	r0, [pc, #4]	; (8017f48 <__sfp_lock_release+0x8>)
 8017f42:	f000 b8c0 	b.w	80180c6 <__retarget_lock_release_recursive>
 8017f46:	bf00      	nop
 8017f48:	20011524 	.word	0x20011524

08017f4c <__sinit_lock_acquire>:
 8017f4c:	4801      	ldr	r0, [pc, #4]	; (8017f54 <__sinit_lock_acquire+0x8>)
 8017f4e:	f000 b8b9 	b.w	80180c4 <__retarget_lock_acquire_recursive>
 8017f52:	bf00      	nop
 8017f54:	2001151f 	.word	0x2001151f

08017f58 <__sinit_lock_release>:
 8017f58:	4801      	ldr	r0, [pc, #4]	; (8017f60 <__sinit_lock_release+0x8>)
 8017f5a:	f000 b8b4 	b.w	80180c6 <__retarget_lock_release_recursive>
 8017f5e:	bf00      	nop
 8017f60:	2001151f 	.word	0x2001151f

08017f64 <__sinit>:
 8017f64:	b510      	push	{r4, lr}
 8017f66:	4604      	mov	r4, r0
 8017f68:	f7ff fff0 	bl	8017f4c <__sinit_lock_acquire>
 8017f6c:	69a3      	ldr	r3, [r4, #24]
 8017f6e:	b11b      	cbz	r3, 8017f78 <__sinit+0x14>
 8017f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f74:	f7ff bff0 	b.w	8017f58 <__sinit_lock_release>
 8017f78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017f7c:	6523      	str	r3, [r4, #80]	; 0x50
 8017f7e:	4b13      	ldr	r3, [pc, #76]	; (8017fcc <__sinit+0x68>)
 8017f80:	4a13      	ldr	r2, [pc, #76]	; (8017fd0 <__sinit+0x6c>)
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	62a2      	str	r2, [r4, #40]	; 0x28
 8017f86:	42a3      	cmp	r3, r4
 8017f88:	bf04      	itt	eq
 8017f8a:	2301      	moveq	r3, #1
 8017f8c:	61a3      	streq	r3, [r4, #24]
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f000 f820 	bl	8017fd4 <__sfp>
 8017f94:	6060      	str	r0, [r4, #4]
 8017f96:	4620      	mov	r0, r4
 8017f98:	f000 f81c 	bl	8017fd4 <__sfp>
 8017f9c:	60a0      	str	r0, [r4, #8]
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f000 f818 	bl	8017fd4 <__sfp>
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	60e0      	str	r0, [r4, #12]
 8017fa8:	2104      	movs	r1, #4
 8017faa:	6860      	ldr	r0, [r4, #4]
 8017fac:	f7ff ff82 	bl	8017eb4 <std>
 8017fb0:	68a0      	ldr	r0, [r4, #8]
 8017fb2:	2201      	movs	r2, #1
 8017fb4:	2109      	movs	r1, #9
 8017fb6:	f7ff ff7d 	bl	8017eb4 <std>
 8017fba:	68e0      	ldr	r0, [r4, #12]
 8017fbc:	2202      	movs	r2, #2
 8017fbe:	2112      	movs	r1, #18
 8017fc0:	f7ff ff78 	bl	8017eb4 <std>
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	61a3      	str	r3, [r4, #24]
 8017fc8:	e7d2      	b.n	8017f70 <__sinit+0xc>
 8017fca:	bf00      	nop
 8017fcc:	0801c58c 	.word	0x0801c58c
 8017fd0:	08017efd 	.word	0x08017efd

08017fd4 <__sfp>:
 8017fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fd6:	4607      	mov	r7, r0
 8017fd8:	f7ff ffac 	bl	8017f34 <__sfp_lock_acquire>
 8017fdc:	4b1e      	ldr	r3, [pc, #120]	; (8018058 <__sfp+0x84>)
 8017fde:	681e      	ldr	r6, [r3, #0]
 8017fe0:	69b3      	ldr	r3, [r6, #24]
 8017fe2:	b913      	cbnz	r3, 8017fea <__sfp+0x16>
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	f7ff ffbd 	bl	8017f64 <__sinit>
 8017fea:	3648      	adds	r6, #72	; 0x48
 8017fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017ff0:	3b01      	subs	r3, #1
 8017ff2:	d503      	bpl.n	8017ffc <__sfp+0x28>
 8017ff4:	6833      	ldr	r3, [r6, #0]
 8017ff6:	b30b      	cbz	r3, 801803c <__sfp+0x68>
 8017ff8:	6836      	ldr	r6, [r6, #0]
 8017ffa:	e7f7      	b.n	8017fec <__sfp+0x18>
 8017ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018000:	b9d5      	cbnz	r5, 8018038 <__sfp+0x64>
 8018002:	4b16      	ldr	r3, [pc, #88]	; (801805c <__sfp+0x88>)
 8018004:	60e3      	str	r3, [r4, #12]
 8018006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801800a:	6665      	str	r5, [r4, #100]	; 0x64
 801800c:	f000 f859 	bl	80180c2 <__retarget_lock_init_recursive>
 8018010:	f7ff ff96 	bl	8017f40 <__sfp_lock_release>
 8018014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801801c:	6025      	str	r5, [r4, #0]
 801801e:	61a5      	str	r5, [r4, #24]
 8018020:	2208      	movs	r2, #8
 8018022:	4629      	mov	r1, r5
 8018024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018028:	f7ff fbe8 	bl	80177fc <memset>
 801802c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018034:	4620      	mov	r0, r4
 8018036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018038:	3468      	adds	r4, #104	; 0x68
 801803a:	e7d9      	b.n	8017ff0 <__sfp+0x1c>
 801803c:	2104      	movs	r1, #4
 801803e:	4638      	mov	r0, r7
 8018040:	f7ff ff62 	bl	8017f08 <__sfmoreglue>
 8018044:	4604      	mov	r4, r0
 8018046:	6030      	str	r0, [r6, #0]
 8018048:	2800      	cmp	r0, #0
 801804a:	d1d5      	bne.n	8017ff8 <__sfp+0x24>
 801804c:	f7ff ff78 	bl	8017f40 <__sfp_lock_release>
 8018050:	230c      	movs	r3, #12
 8018052:	603b      	str	r3, [r7, #0]
 8018054:	e7ee      	b.n	8018034 <__sfp+0x60>
 8018056:	bf00      	nop
 8018058:	0801c58c 	.word	0x0801c58c
 801805c:	ffff0001 	.word	0xffff0001

08018060 <fiprintf>:
 8018060:	b40e      	push	{r1, r2, r3}
 8018062:	b503      	push	{r0, r1, lr}
 8018064:	4601      	mov	r1, r0
 8018066:	ab03      	add	r3, sp, #12
 8018068:	4805      	ldr	r0, [pc, #20]	; (8018080 <fiprintf+0x20>)
 801806a:	f853 2b04 	ldr.w	r2, [r3], #4
 801806e:	6800      	ldr	r0, [r0, #0]
 8018070:	9301      	str	r3, [sp, #4]
 8018072:	f000 fac5 	bl	8018600 <_vfiprintf_r>
 8018076:	b002      	add	sp, #8
 8018078:	f85d eb04 	ldr.w	lr, [sp], #4
 801807c:	b003      	add	sp, #12
 801807e:	4770      	bx	lr
 8018080:	2000001c 	.word	0x2000001c

08018084 <_fwalk_reent>:
 8018084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018088:	4606      	mov	r6, r0
 801808a:	4688      	mov	r8, r1
 801808c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018090:	2700      	movs	r7, #0
 8018092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018096:	f1b9 0901 	subs.w	r9, r9, #1
 801809a:	d505      	bpl.n	80180a8 <_fwalk_reent+0x24>
 801809c:	6824      	ldr	r4, [r4, #0]
 801809e:	2c00      	cmp	r4, #0
 80180a0:	d1f7      	bne.n	8018092 <_fwalk_reent+0xe>
 80180a2:	4638      	mov	r0, r7
 80180a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180a8:	89ab      	ldrh	r3, [r5, #12]
 80180aa:	2b01      	cmp	r3, #1
 80180ac:	d907      	bls.n	80180be <_fwalk_reent+0x3a>
 80180ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180b2:	3301      	adds	r3, #1
 80180b4:	d003      	beq.n	80180be <_fwalk_reent+0x3a>
 80180b6:	4629      	mov	r1, r5
 80180b8:	4630      	mov	r0, r6
 80180ba:	47c0      	blx	r8
 80180bc:	4307      	orrs	r7, r0
 80180be:	3568      	adds	r5, #104	; 0x68
 80180c0:	e7e9      	b.n	8018096 <_fwalk_reent+0x12>

080180c2 <__retarget_lock_init_recursive>:
 80180c2:	4770      	bx	lr

080180c4 <__retarget_lock_acquire_recursive>:
 80180c4:	4770      	bx	lr

080180c6 <__retarget_lock_release_recursive>:
 80180c6:	4770      	bx	lr

080180c8 <__swhatbuf_r>:
 80180c8:	b570      	push	{r4, r5, r6, lr}
 80180ca:	460e      	mov	r6, r1
 80180cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180d0:	2900      	cmp	r1, #0
 80180d2:	b096      	sub	sp, #88	; 0x58
 80180d4:	4614      	mov	r4, r2
 80180d6:	461d      	mov	r5, r3
 80180d8:	da07      	bge.n	80180ea <__swhatbuf_r+0x22>
 80180da:	2300      	movs	r3, #0
 80180dc:	602b      	str	r3, [r5, #0]
 80180de:	89b3      	ldrh	r3, [r6, #12]
 80180e0:	061a      	lsls	r2, r3, #24
 80180e2:	d410      	bmi.n	8018106 <__swhatbuf_r+0x3e>
 80180e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180e8:	e00e      	b.n	8018108 <__swhatbuf_r+0x40>
 80180ea:	466a      	mov	r2, sp
 80180ec:	f000 fdca 	bl	8018c84 <_fstat_r>
 80180f0:	2800      	cmp	r0, #0
 80180f2:	dbf2      	blt.n	80180da <__swhatbuf_r+0x12>
 80180f4:	9a01      	ldr	r2, [sp, #4]
 80180f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80180fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80180fe:	425a      	negs	r2, r3
 8018100:	415a      	adcs	r2, r3
 8018102:	602a      	str	r2, [r5, #0]
 8018104:	e7ee      	b.n	80180e4 <__swhatbuf_r+0x1c>
 8018106:	2340      	movs	r3, #64	; 0x40
 8018108:	2000      	movs	r0, #0
 801810a:	6023      	str	r3, [r4, #0]
 801810c:	b016      	add	sp, #88	; 0x58
 801810e:	bd70      	pop	{r4, r5, r6, pc}

08018110 <__smakebuf_r>:
 8018110:	898b      	ldrh	r3, [r1, #12]
 8018112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018114:	079d      	lsls	r5, r3, #30
 8018116:	4606      	mov	r6, r0
 8018118:	460c      	mov	r4, r1
 801811a:	d507      	bpl.n	801812c <__smakebuf_r+0x1c>
 801811c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018120:	6023      	str	r3, [r4, #0]
 8018122:	6123      	str	r3, [r4, #16]
 8018124:	2301      	movs	r3, #1
 8018126:	6163      	str	r3, [r4, #20]
 8018128:	b002      	add	sp, #8
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	ab01      	add	r3, sp, #4
 801812e:	466a      	mov	r2, sp
 8018130:	f7ff ffca 	bl	80180c8 <__swhatbuf_r>
 8018134:	9900      	ldr	r1, [sp, #0]
 8018136:	4605      	mov	r5, r0
 8018138:	4630      	mov	r0, r6
 801813a:	f000 f881 	bl	8018240 <_malloc_r>
 801813e:	b948      	cbnz	r0, 8018154 <__smakebuf_r+0x44>
 8018140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018144:	059a      	lsls	r2, r3, #22
 8018146:	d4ef      	bmi.n	8018128 <__smakebuf_r+0x18>
 8018148:	f023 0303 	bic.w	r3, r3, #3
 801814c:	f043 0302 	orr.w	r3, r3, #2
 8018150:	81a3      	strh	r3, [r4, #12]
 8018152:	e7e3      	b.n	801811c <__smakebuf_r+0xc>
 8018154:	4b0d      	ldr	r3, [pc, #52]	; (801818c <__smakebuf_r+0x7c>)
 8018156:	62b3      	str	r3, [r6, #40]	; 0x28
 8018158:	89a3      	ldrh	r3, [r4, #12]
 801815a:	6020      	str	r0, [r4, #0]
 801815c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018160:	81a3      	strh	r3, [r4, #12]
 8018162:	9b00      	ldr	r3, [sp, #0]
 8018164:	6163      	str	r3, [r4, #20]
 8018166:	9b01      	ldr	r3, [sp, #4]
 8018168:	6120      	str	r0, [r4, #16]
 801816a:	b15b      	cbz	r3, 8018184 <__smakebuf_r+0x74>
 801816c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018170:	4630      	mov	r0, r6
 8018172:	f000 fd99 	bl	8018ca8 <_isatty_r>
 8018176:	b128      	cbz	r0, 8018184 <__smakebuf_r+0x74>
 8018178:	89a3      	ldrh	r3, [r4, #12]
 801817a:	f023 0303 	bic.w	r3, r3, #3
 801817e:	f043 0301 	orr.w	r3, r3, #1
 8018182:	81a3      	strh	r3, [r4, #12]
 8018184:	89a0      	ldrh	r0, [r4, #12]
 8018186:	4305      	orrs	r5, r0
 8018188:	81a5      	strh	r5, [r4, #12]
 801818a:	e7cd      	b.n	8018128 <__smakebuf_r+0x18>
 801818c:	08017efd 	.word	0x08017efd

08018190 <malloc>:
 8018190:	4b02      	ldr	r3, [pc, #8]	; (801819c <malloc+0xc>)
 8018192:	4601      	mov	r1, r0
 8018194:	6818      	ldr	r0, [r3, #0]
 8018196:	f000 b853 	b.w	8018240 <_malloc_r>
 801819a:	bf00      	nop
 801819c:	2000001c 	.word	0x2000001c

080181a0 <_free_r>:
 80181a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181a2:	2900      	cmp	r1, #0
 80181a4:	d048      	beq.n	8018238 <_free_r+0x98>
 80181a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181aa:	9001      	str	r0, [sp, #4]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	f1a1 0404 	sub.w	r4, r1, #4
 80181b2:	bfb8      	it	lt
 80181b4:	18e4      	addlt	r4, r4, r3
 80181b6:	f000 fd99 	bl	8018cec <__malloc_lock>
 80181ba:	4a20      	ldr	r2, [pc, #128]	; (801823c <_free_r+0x9c>)
 80181bc:	9801      	ldr	r0, [sp, #4]
 80181be:	6813      	ldr	r3, [r2, #0]
 80181c0:	4615      	mov	r5, r2
 80181c2:	b933      	cbnz	r3, 80181d2 <_free_r+0x32>
 80181c4:	6063      	str	r3, [r4, #4]
 80181c6:	6014      	str	r4, [r2, #0]
 80181c8:	b003      	add	sp, #12
 80181ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181ce:	f000 bd93 	b.w	8018cf8 <__malloc_unlock>
 80181d2:	42a3      	cmp	r3, r4
 80181d4:	d90b      	bls.n	80181ee <_free_r+0x4e>
 80181d6:	6821      	ldr	r1, [r4, #0]
 80181d8:	1862      	adds	r2, r4, r1
 80181da:	4293      	cmp	r3, r2
 80181dc:	bf04      	itt	eq
 80181de:	681a      	ldreq	r2, [r3, #0]
 80181e0:	685b      	ldreq	r3, [r3, #4]
 80181e2:	6063      	str	r3, [r4, #4]
 80181e4:	bf04      	itt	eq
 80181e6:	1852      	addeq	r2, r2, r1
 80181e8:	6022      	streq	r2, [r4, #0]
 80181ea:	602c      	str	r4, [r5, #0]
 80181ec:	e7ec      	b.n	80181c8 <_free_r+0x28>
 80181ee:	461a      	mov	r2, r3
 80181f0:	685b      	ldr	r3, [r3, #4]
 80181f2:	b10b      	cbz	r3, 80181f8 <_free_r+0x58>
 80181f4:	42a3      	cmp	r3, r4
 80181f6:	d9fa      	bls.n	80181ee <_free_r+0x4e>
 80181f8:	6811      	ldr	r1, [r2, #0]
 80181fa:	1855      	adds	r5, r2, r1
 80181fc:	42a5      	cmp	r5, r4
 80181fe:	d10b      	bne.n	8018218 <_free_r+0x78>
 8018200:	6824      	ldr	r4, [r4, #0]
 8018202:	4421      	add	r1, r4
 8018204:	1854      	adds	r4, r2, r1
 8018206:	42a3      	cmp	r3, r4
 8018208:	6011      	str	r1, [r2, #0]
 801820a:	d1dd      	bne.n	80181c8 <_free_r+0x28>
 801820c:	681c      	ldr	r4, [r3, #0]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	6053      	str	r3, [r2, #4]
 8018212:	4421      	add	r1, r4
 8018214:	6011      	str	r1, [r2, #0]
 8018216:	e7d7      	b.n	80181c8 <_free_r+0x28>
 8018218:	d902      	bls.n	8018220 <_free_r+0x80>
 801821a:	230c      	movs	r3, #12
 801821c:	6003      	str	r3, [r0, #0]
 801821e:	e7d3      	b.n	80181c8 <_free_r+0x28>
 8018220:	6825      	ldr	r5, [r4, #0]
 8018222:	1961      	adds	r1, r4, r5
 8018224:	428b      	cmp	r3, r1
 8018226:	bf04      	itt	eq
 8018228:	6819      	ldreq	r1, [r3, #0]
 801822a:	685b      	ldreq	r3, [r3, #4]
 801822c:	6063      	str	r3, [r4, #4]
 801822e:	bf04      	itt	eq
 8018230:	1949      	addeq	r1, r1, r5
 8018232:	6021      	streq	r1, [r4, #0]
 8018234:	6054      	str	r4, [r2, #4]
 8018236:	e7c7      	b.n	80181c8 <_free_r+0x28>
 8018238:	b003      	add	sp, #12
 801823a:	bd30      	pop	{r4, r5, pc}
 801823c:	20004b50 	.word	0x20004b50

08018240 <_malloc_r>:
 8018240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018242:	1ccd      	adds	r5, r1, #3
 8018244:	f025 0503 	bic.w	r5, r5, #3
 8018248:	3508      	adds	r5, #8
 801824a:	2d0c      	cmp	r5, #12
 801824c:	bf38      	it	cc
 801824e:	250c      	movcc	r5, #12
 8018250:	2d00      	cmp	r5, #0
 8018252:	4606      	mov	r6, r0
 8018254:	db01      	blt.n	801825a <_malloc_r+0x1a>
 8018256:	42a9      	cmp	r1, r5
 8018258:	d903      	bls.n	8018262 <_malloc_r+0x22>
 801825a:	230c      	movs	r3, #12
 801825c:	6033      	str	r3, [r6, #0]
 801825e:	2000      	movs	r0, #0
 8018260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018262:	f000 fd43 	bl	8018cec <__malloc_lock>
 8018266:	4921      	ldr	r1, [pc, #132]	; (80182ec <_malloc_r+0xac>)
 8018268:	680a      	ldr	r2, [r1, #0]
 801826a:	4614      	mov	r4, r2
 801826c:	b99c      	cbnz	r4, 8018296 <_malloc_r+0x56>
 801826e:	4f20      	ldr	r7, [pc, #128]	; (80182f0 <_malloc_r+0xb0>)
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	b923      	cbnz	r3, 801827e <_malloc_r+0x3e>
 8018274:	4621      	mov	r1, r4
 8018276:	4630      	mov	r0, r6
 8018278:	f000 fc86 	bl	8018b88 <_sbrk_r>
 801827c:	6038      	str	r0, [r7, #0]
 801827e:	4629      	mov	r1, r5
 8018280:	4630      	mov	r0, r6
 8018282:	f000 fc81 	bl	8018b88 <_sbrk_r>
 8018286:	1c43      	adds	r3, r0, #1
 8018288:	d123      	bne.n	80182d2 <_malloc_r+0x92>
 801828a:	230c      	movs	r3, #12
 801828c:	6033      	str	r3, [r6, #0]
 801828e:	4630      	mov	r0, r6
 8018290:	f000 fd32 	bl	8018cf8 <__malloc_unlock>
 8018294:	e7e3      	b.n	801825e <_malloc_r+0x1e>
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	1b5b      	subs	r3, r3, r5
 801829a:	d417      	bmi.n	80182cc <_malloc_r+0x8c>
 801829c:	2b0b      	cmp	r3, #11
 801829e:	d903      	bls.n	80182a8 <_malloc_r+0x68>
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	441c      	add	r4, r3
 80182a4:	6025      	str	r5, [r4, #0]
 80182a6:	e004      	b.n	80182b2 <_malloc_r+0x72>
 80182a8:	6863      	ldr	r3, [r4, #4]
 80182aa:	42a2      	cmp	r2, r4
 80182ac:	bf0c      	ite	eq
 80182ae:	600b      	streq	r3, [r1, #0]
 80182b0:	6053      	strne	r3, [r2, #4]
 80182b2:	4630      	mov	r0, r6
 80182b4:	f000 fd20 	bl	8018cf8 <__malloc_unlock>
 80182b8:	f104 000b 	add.w	r0, r4, #11
 80182bc:	1d23      	adds	r3, r4, #4
 80182be:	f020 0007 	bic.w	r0, r0, #7
 80182c2:	1ac2      	subs	r2, r0, r3
 80182c4:	d0cc      	beq.n	8018260 <_malloc_r+0x20>
 80182c6:	1a1b      	subs	r3, r3, r0
 80182c8:	50a3      	str	r3, [r4, r2]
 80182ca:	e7c9      	b.n	8018260 <_malloc_r+0x20>
 80182cc:	4622      	mov	r2, r4
 80182ce:	6864      	ldr	r4, [r4, #4]
 80182d0:	e7cc      	b.n	801826c <_malloc_r+0x2c>
 80182d2:	1cc4      	adds	r4, r0, #3
 80182d4:	f024 0403 	bic.w	r4, r4, #3
 80182d8:	42a0      	cmp	r0, r4
 80182da:	d0e3      	beq.n	80182a4 <_malloc_r+0x64>
 80182dc:	1a21      	subs	r1, r4, r0
 80182de:	4630      	mov	r0, r6
 80182e0:	f000 fc52 	bl	8018b88 <_sbrk_r>
 80182e4:	3001      	adds	r0, #1
 80182e6:	d1dd      	bne.n	80182a4 <_malloc_r+0x64>
 80182e8:	e7cf      	b.n	801828a <_malloc_r+0x4a>
 80182ea:	bf00      	nop
 80182ec:	20004b50 	.word	0x20004b50
 80182f0:	20004b54 	.word	0x20004b54

080182f4 <__ssputs_r>:
 80182f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182f8:	688e      	ldr	r6, [r1, #8]
 80182fa:	429e      	cmp	r6, r3
 80182fc:	4682      	mov	sl, r0
 80182fe:	460c      	mov	r4, r1
 8018300:	4690      	mov	r8, r2
 8018302:	461f      	mov	r7, r3
 8018304:	d838      	bhi.n	8018378 <__ssputs_r+0x84>
 8018306:	898a      	ldrh	r2, [r1, #12]
 8018308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801830c:	d032      	beq.n	8018374 <__ssputs_r+0x80>
 801830e:	6825      	ldr	r5, [r4, #0]
 8018310:	6909      	ldr	r1, [r1, #16]
 8018312:	eba5 0901 	sub.w	r9, r5, r1
 8018316:	6965      	ldr	r5, [r4, #20]
 8018318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801831c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018320:	3301      	adds	r3, #1
 8018322:	444b      	add	r3, r9
 8018324:	106d      	asrs	r5, r5, #1
 8018326:	429d      	cmp	r5, r3
 8018328:	bf38      	it	cc
 801832a:	461d      	movcc	r5, r3
 801832c:	0553      	lsls	r3, r2, #21
 801832e:	d531      	bpl.n	8018394 <__ssputs_r+0xa0>
 8018330:	4629      	mov	r1, r5
 8018332:	f7ff ff85 	bl	8018240 <_malloc_r>
 8018336:	4606      	mov	r6, r0
 8018338:	b950      	cbnz	r0, 8018350 <__ssputs_r+0x5c>
 801833a:	230c      	movs	r3, #12
 801833c:	f8ca 3000 	str.w	r3, [sl]
 8018340:	89a3      	ldrh	r3, [r4, #12]
 8018342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018346:	81a3      	strh	r3, [r4, #12]
 8018348:	f04f 30ff 	mov.w	r0, #4294967295
 801834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018350:	6921      	ldr	r1, [r4, #16]
 8018352:	464a      	mov	r2, r9
 8018354:	f7ff fa2a 	bl	80177ac <memcpy>
 8018358:	89a3      	ldrh	r3, [r4, #12]
 801835a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801835e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018362:	81a3      	strh	r3, [r4, #12]
 8018364:	6126      	str	r6, [r4, #16]
 8018366:	6165      	str	r5, [r4, #20]
 8018368:	444e      	add	r6, r9
 801836a:	eba5 0509 	sub.w	r5, r5, r9
 801836e:	6026      	str	r6, [r4, #0]
 8018370:	60a5      	str	r5, [r4, #8]
 8018372:	463e      	mov	r6, r7
 8018374:	42be      	cmp	r6, r7
 8018376:	d900      	bls.n	801837a <__ssputs_r+0x86>
 8018378:	463e      	mov	r6, r7
 801837a:	4632      	mov	r2, r6
 801837c:	6820      	ldr	r0, [r4, #0]
 801837e:	4641      	mov	r1, r8
 8018380:	f7ff fa22 	bl	80177c8 <memmove>
 8018384:	68a3      	ldr	r3, [r4, #8]
 8018386:	6822      	ldr	r2, [r4, #0]
 8018388:	1b9b      	subs	r3, r3, r6
 801838a:	4432      	add	r2, r6
 801838c:	60a3      	str	r3, [r4, #8]
 801838e:	6022      	str	r2, [r4, #0]
 8018390:	2000      	movs	r0, #0
 8018392:	e7db      	b.n	801834c <__ssputs_r+0x58>
 8018394:	462a      	mov	r2, r5
 8018396:	f000 fcb5 	bl	8018d04 <_realloc_r>
 801839a:	4606      	mov	r6, r0
 801839c:	2800      	cmp	r0, #0
 801839e:	d1e1      	bne.n	8018364 <__ssputs_r+0x70>
 80183a0:	6921      	ldr	r1, [r4, #16]
 80183a2:	4650      	mov	r0, sl
 80183a4:	f7ff fefc 	bl	80181a0 <_free_r>
 80183a8:	e7c7      	b.n	801833a <__ssputs_r+0x46>
	...

080183ac <_svfiprintf_r>:
 80183ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183b0:	4698      	mov	r8, r3
 80183b2:	898b      	ldrh	r3, [r1, #12]
 80183b4:	061b      	lsls	r3, r3, #24
 80183b6:	b09d      	sub	sp, #116	; 0x74
 80183b8:	4607      	mov	r7, r0
 80183ba:	460d      	mov	r5, r1
 80183bc:	4614      	mov	r4, r2
 80183be:	d50e      	bpl.n	80183de <_svfiprintf_r+0x32>
 80183c0:	690b      	ldr	r3, [r1, #16]
 80183c2:	b963      	cbnz	r3, 80183de <_svfiprintf_r+0x32>
 80183c4:	2140      	movs	r1, #64	; 0x40
 80183c6:	f7ff ff3b 	bl	8018240 <_malloc_r>
 80183ca:	6028      	str	r0, [r5, #0]
 80183cc:	6128      	str	r0, [r5, #16]
 80183ce:	b920      	cbnz	r0, 80183da <_svfiprintf_r+0x2e>
 80183d0:	230c      	movs	r3, #12
 80183d2:	603b      	str	r3, [r7, #0]
 80183d4:	f04f 30ff 	mov.w	r0, #4294967295
 80183d8:	e0d1      	b.n	801857e <_svfiprintf_r+0x1d2>
 80183da:	2340      	movs	r3, #64	; 0x40
 80183dc:	616b      	str	r3, [r5, #20]
 80183de:	2300      	movs	r3, #0
 80183e0:	9309      	str	r3, [sp, #36]	; 0x24
 80183e2:	2320      	movs	r3, #32
 80183e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80183e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80183ec:	2330      	movs	r3, #48	; 0x30
 80183ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018598 <_svfiprintf_r+0x1ec>
 80183f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80183f6:	f04f 0901 	mov.w	r9, #1
 80183fa:	4623      	mov	r3, r4
 80183fc:	469a      	mov	sl, r3
 80183fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018402:	b10a      	cbz	r2, 8018408 <_svfiprintf_r+0x5c>
 8018404:	2a25      	cmp	r2, #37	; 0x25
 8018406:	d1f9      	bne.n	80183fc <_svfiprintf_r+0x50>
 8018408:	ebba 0b04 	subs.w	fp, sl, r4
 801840c:	d00b      	beq.n	8018426 <_svfiprintf_r+0x7a>
 801840e:	465b      	mov	r3, fp
 8018410:	4622      	mov	r2, r4
 8018412:	4629      	mov	r1, r5
 8018414:	4638      	mov	r0, r7
 8018416:	f7ff ff6d 	bl	80182f4 <__ssputs_r>
 801841a:	3001      	adds	r0, #1
 801841c:	f000 80aa 	beq.w	8018574 <_svfiprintf_r+0x1c8>
 8018420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018422:	445a      	add	r2, fp
 8018424:	9209      	str	r2, [sp, #36]	; 0x24
 8018426:	f89a 3000 	ldrb.w	r3, [sl]
 801842a:	2b00      	cmp	r3, #0
 801842c:	f000 80a2 	beq.w	8018574 <_svfiprintf_r+0x1c8>
 8018430:	2300      	movs	r3, #0
 8018432:	f04f 32ff 	mov.w	r2, #4294967295
 8018436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801843a:	f10a 0a01 	add.w	sl, sl, #1
 801843e:	9304      	str	r3, [sp, #16]
 8018440:	9307      	str	r3, [sp, #28]
 8018442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018446:	931a      	str	r3, [sp, #104]	; 0x68
 8018448:	4654      	mov	r4, sl
 801844a:	2205      	movs	r2, #5
 801844c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018450:	4851      	ldr	r0, [pc, #324]	; (8018598 <_svfiprintf_r+0x1ec>)
 8018452:	f7e7 fefd 	bl	8000250 <memchr>
 8018456:	9a04      	ldr	r2, [sp, #16]
 8018458:	b9d8      	cbnz	r0, 8018492 <_svfiprintf_r+0xe6>
 801845a:	06d0      	lsls	r0, r2, #27
 801845c:	bf44      	itt	mi
 801845e:	2320      	movmi	r3, #32
 8018460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018464:	0711      	lsls	r1, r2, #28
 8018466:	bf44      	itt	mi
 8018468:	232b      	movmi	r3, #43	; 0x2b
 801846a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801846e:	f89a 3000 	ldrb.w	r3, [sl]
 8018472:	2b2a      	cmp	r3, #42	; 0x2a
 8018474:	d015      	beq.n	80184a2 <_svfiprintf_r+0xf6>
 8018476:	9a07      	ldr	r2, [sp, #28]
 8018478:	4654      	mov	r4, sl
 801847a:	2000      	movs	r0, #0
 801847c:	f04f 0c0a 	mov.w	ip, #10
 8018480:	4621      	mov	r1, r4
 8018482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018486:	3b30      	subs	r3, #48	; 0x30
 8018488:	2b09      	cmp	r3, #9
 801848a:	d94e      	bls.n	801852a <_svfiprintf_r+0x17e>
 801848c:	b1b0      	cbz	r0, 80184bc <_svfiprintf_r+0x110>
 801848e:	9207      	str	r2, [sp, #28]
 8018490:	e014      	b.n	80184bc <_svfiprintf_r+0x110>
 8018492:	eba0 0308 	sub.w	r3, r0, r8
 8018496:	fa09 f303 	lsl.w	r3, r9, r3
 801849a:	4313      	orrs	r3, r2
 801849c:	9304      	str	r3, [sp, #16]
 801849e:	46a2      	mov	sl, r4
 80184a0:	e7d2      	b.n	8018448 <_svfiprintf_r+0x9c>
 80184a2:	9b03      	ldr	r3, [sp, #12]
 80184a4:	1d19      	adds	r1, r3, #4
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	9103      	str	r1, [sp, #12]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	bfbb      	ittet	lt
 80184ae:	425b      	neglt	r3, r3
 80184b0:	f042 0202 	orrlt.w	r2, r2, #2
 80184b4:	9307      	strge	r3, [sp, #28]
 80184b6:	9307      	strlt	r3, [sp, #28]
 80184b8:	bfb8      	it	lt
 80184ba:	9204      	strlt	r2, [sp, #16]
 80184bc:	7823      	ldrb	r3, [r4, #0]
 80184be:	2b2e      	cmp	r3, #46	; 0x2e
 80184c0:	d10c      	bne.n	80184dc <_svfiprintf_r+0x130>
 80184c2:	7863      	ldrb	r3, [r4, #1]
 80184c4:	2b2a      	cmp	r3, #42	; 0x2a
 80184c6:	d135      	bne.n	8018534 <_svfiprintf_r+0x188>
 80184c8:	9b03      	ldr	r3, [sp, #12]
 80184ca:	1d1a      	adds	r2, r3, #4
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	9203      	str	r2, [sp, #12]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	bfb8      	it	lt
 80184d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80184d8:	3402      	adds	r4, #2
 80184da:	9305      	str	r3, [sp, #20]
 80184dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80185a8 <_svfiprintf_r+0x1fc>
 80184e0:	7821      	ldrb	r1, [r4, #0]
 80184e2:	2203      	movs	r2, #3
 80184e4:	4650      	mov	r0, sl
 80184e6:	f7e7 feb3 	bl	8000250 <memchr>
 80184ea:	b140      	cbz	r0, 80184fe <_svfiprintf_r+0x152>
 80184ec:	2340      	movs	r3, #64	; 0x40
 80184ee:	eba0 000a 	sub.w	r0, r0, sl
 80184f2:	fa03 f000 	lsl.w	r0, r3, r0
 80184f6:	9b04      	ldr	r3, [sp, #16]
 80184f8:	4303      	orrs	r3, r0
 80184fa:	3401      	adds	r4, #1
 80184fc:	9304      	str	r3, [sp, #16]
 80184fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018502:	4826      	ldr	r0, [pc, #152]	; (801859c <_svfiprintf_r+0x1f0>)
 8018504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018508:	2206      	movs	r2, #6
 801850a:	f7e7 fea1 	bl	8000250 <memchr>
 801850e:	2800      	cmp	r0, #0
 8018510:	d038      	beq.n	8018584 <_svfiprintf_r+0x1d8>
 8018512:	4b23      	ldr	r3, [pc, #140]	; (80185a0 <_svfiprintf_r+0x1f4>)
 8018514:	bb1b      	cbnz	r3, 801855e <_svfiprintf_r+0x1b2>
 8018516:	9b03      	ldr	r3, [sp, #12]
 8018518:	3307      	adds	r3, #7
 801851a:	f023 0307 	bic.w	r3, r3, #7
 801851e:	3308      	adds	r3, #8
 8018520:	9303      	str	r3, [sp, #12]
 8018522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018524:	4433      	add	r3, r6
 8018526:	9309      	str	r3, [sp, #36]	; 0x24
 8018528:	e767      	b.n	80183fa <_svfiprintf_r+0x4e>
 801852a:	fb0c 3202 	mla	r2, ip, r2, r3
 801852e:	460c      	mov	r4, r1
 8018530:	2001      	movs	r0, #1
 8018532:	e7a5      	b.n	8018480 <_svfiprintf_r+0xd4>
 8018534:	2300      	movs	r3, #0
 8018536:	3401      	adds	r4, #1
 8018538:	9305      	str	r3, [sp, #20]
 801853a:	4619      	mov	r1, r3
 801853c:	f04f 0c0a 	mov.w	ip, #10
 8018540:	4620      	mov	r0, r4
 8018542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018546:	3a30      	subs	r2, #48	; 0x30
 8018548:	2a09      	cmp	r2, #9
 801854a:	d903      	bls.n	8018554 <_svfiprintf_r+0x1a8>
 801854c:	2b00      	cmp	r3, #0
 801854e:	d0c5      	beq.n	80184dc <_svfiprintf_r+0x130>
 8018550:	9105      	str	r1, [sp, #20]
 8018552:	e7c3      	b.n	80184dc <_svfiprintf_r+0x130>
 8018554:	fb0c 2101 	mla	r1, ip, r1, r2
 8018558:	4604      	mov	r4, r0
 801855a:	2301      	movs	r3, #1
 801855c:	e7f0      	b.n	8018540 <_svfiprintf_r+0x194>
 801855e:	ab03      	add	r3, sp, #12
 8018560:	9300      	str	r3, [sp, #0]
 8018562:	462a      	mov	r2, r5
 8018564:	4b0f      	ldr	r3, [pc, #60]	; (80185a4 <_svfiprintf_r+0x1f8>)
 8018566:	a904      	add	r1, sp, #16
 8018568:	4638      	mov	r0, r7
 801856a:	f3af 8000 	nop.w
 801856e:	1c42      	adds	r2, r0, #1
 8018570:	4606      	mov	r6, r0
 8018572:	d1d6      	bne.n	8018522 <_svfiprintf_r+0x176>
 8018574:	89ab      	ldrh	r3, [r5, #12]
 8018576:	065b      	lsls	r3, r3, #25
 8018578:	f53f af2c 	bmi.w	80183d4 <_svfiprintf_r+0x28>
 801857c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801857e:	b01d      	add	sp, #116	; 0x74
 8018580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018584:	ab03      	add	r3, sp, #12
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	462a      	mov	r2, r5
 801858a:	4b06      	ldr	r3, [pc, #24]	; (80185a4 <_svfiprintf_r+0x1f8>)
 801858c:	a904      	add	r1, sp, #16
 801858e:	4638      	mov	r0, r7
 8018590:	f000 f9d4 	bl	801893c <_printf_i>
 8018594:	e7eb      	b.n	801856e <_svfiprintf_r+0x1c2>
 8018596:	bf00      	nop
 8018598:	0801c6a4 	.word	0x0801c6a4
 801859c:	0801c6ae 	.word	0x0801c6ae
 80185a0:	00000000 	.word	0x00000000
 80185a4:	080182f5 	.word	0x080182f5
 80185a8:	0801c6aa 	.word	0x0801c6aa

080185ac <__sfputc_r>:
 80185ac:	6893      	ldr	r3, [r2, #8]
 80185ae:	3b01      	subs	r3, #1
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	b410      	push	{r4}
 80185b4:	6093      	str	r3, [r2, #8]
 80185b6:	da08      	bge.n	80185ca <__sfputc_r+0x1e>
 80185b8:	6994      	ldr	r4, [r2, #24]
 80185ba:	42a3      	cmp	r3, r4
 80185bc:	db01      	blt.n	80185c2 <__sfputc_r+0x16>
 80185be:	290a      	cmp	r1, #10
 80185c0:	d103      	bne.n	80185ca <__sfputc_r+0x1e>
 80185c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185c6:	f7ff bad5 	b.w	8017b74 <__swbuf_r>
 80185ca:	6813      	ldr	r3, [r2, #0]
 80185cc:	1c58      	adds	r0, r3, #1
 80185ce:	6010      	str	r0, [r2, #0]
 80185d0:	7019      	strb	r1, [r3, #0]
 80185d2:	4608      	mov	r0, r1
 80185d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185d8:	4770      	bx	lr

080185da <__sfputs_r>:
 80185da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185dc:	4606      	mov	r6, r0
 80185de:	460f      	mov	r7, r1
 80185e0:	4614      	mov	r4, r2
 80185e2:	18d5      	adds	r5, r2, r3
 80185e4:	42ac      	cmp	r4, r5
 80185e6:	d101      	bne.n	80185ec <__sfputs_r+0x12>
 80185e8:	2000      	movs	r0, #0
 80185ea:	e007      	b.n	80185fc <__sfputs_r+0x22>
 80185ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185f0:	463a      	mov	r2, r7
 80185f2:	4630      	mov	r0, r6
 80185f4:	f7ff ffda 	bl	80185ac <__sfputc_r>
 80185f8:	1c43      	adds	r3, r0, #1
 80185fa:	d1f3      	bne.n	80185e4 <__sfputs_r+0xa>
 80185fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018600 <_vfiprintf_r>:
 8018600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018604:	460d      	mov	r5, r1
 8018606:	b09d      	sub	sp, #116	; 0x74
 8018608:	4614      	mov	r4, r2
 801860a:	4698      	mov	r8, r3
 801860c:	4606      	mov	r6, r0
 801860e:	b118      	cbz	r0, 8018618 <_vfiprintf_r+0x18>
 8018610:	6983      	ldr	r3, [r0, #24]
 8018612:	b90b      	cbnz	r3, 8018618 <_vfiprintf_r+0x18>
 8018614:	f7ff fca6 	bl	8017f64 <__sinit>
 8018618:	4b89      	ldr	r3, [pc, #548]	; (8018840 <_vfiprintf_r+0x240>)
 801861a:	429d      	cmp	r5, r3
 801861c:	d11b      	bne.n	8018656 <_vfiprintf_r+0x56>
 801861e:	6875      	ldr	r5, [r6, #4]
 8018620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018622:	07d9      	lsls	r1, r3, #31
 8018624:	d405      	bmi.n	8018632 <_vfiprintf_r+0x32>
 8018626:	89ab      	ldrh	r3, [r5, #12]
 8018628:	059a      	lsls	r2, r3, #22
 801862a:	d402      	bmi.n	8018632 <_vfiprintf_r+0x32>
 801862c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801862e:	f7ff fd49 	bl	80180c4 <__retarget_lock_acquire_recursive>
 8018632:	89ab      	ldrh	r3, [r5, #12]
 8018634:	071b      	lsls	r3, r3, #28
 8018636:	d501      	bpl.n	801863c <_vfiprintf_r+0x3c>
 8018638:	692b      	ldr	r3, [r5, #16]
 801863a:	b9eb      	cbnz	r3, 8018678 <_vfiprintf_r+0x78>
 801863c:	4629      	mov	r1, r5
 801863e:	4630      	mov	r0, r6
 8018640:	f7ff faea 	bl	8017c18 <__swsetup_r>
 8018644:	b1c0      	cbz	r0, 8018678 <_vfiprintf_r+0x78>
 8018646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018648:	07dc      	lsls	r4, r3, #31
 801864a:	d50e      	bpl.n	801866a <_vfiprintf_r+0x6a>
 801864c:	f04f 30ff 	mov.w	r0, #4294967295
 8018650:	b01d      	add	sp, #116	; 0x74
 8018652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018656:	4b7b      	ldr	r3, [pc, #492]	; (8018844 <_vfiprintf_r+0x244>)
 8018658:	429d      	cmp	r5, r3
 801865a:	d101      	bne.n	8018660 <_vfiprintf_r+0x60>
 801865c:	68b5      	ldr	r5, [r6, #8]
 801865e:	e7df      	b.n	8018620 <_vfiprintf_r+0x20>
 8018660:	4b79      	ldr	r3, [pc, #484]	; (8018848 <_vfiprintf_r+0x248>)
 8018662:	429d      	cmp	r5, r3
 8018664:	bf08      	it	eq
 8018666:	68f5      	ldreq	r5, [r6, #12]
 8018668:	e7da      	b.n	8018620 <_vfiprintf_r+0x20>
 801866a:	89ab      	ldrh	r3, [r5, #12]
 801866c:	0598      	lsls	r0, r3, #22
 801866e:	d4ed      	bmi.n	801864c <_vfiprintf_r+0x4c>
 8018670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018672:	f7ff fd28 	bl	80180c6 <__retarget_lock_release_recursive>
 8018676:	e7e9      	b.n	801864c <_vfiprintf_r+0x4c>
 8018678:	2300      	movs	r3, #0
 801867a:	9309      	str	r3, [sp, #36]	; 0x24
 801867c:	2320      	movs	r3, #32
 801867e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018682:	f8cd 800c 	str.w	r8, [sp, #12]
 8018686:	2330      	movs	r3, #48	; 0x30
 8018688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801884c <_vfiprintf_r+0x24c>
 801868c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018690:	f04f 0901 	mov.w	r9, #1
 8018694:	4623      	mov	r3, r4
 8018696:	469a      	mov	sl, r3
 8018698:	f813 2b01 	ldrb.w	r2, [r3], #1
 801869c:	b10a      	cbz	r2, 80186a2 <_vfiprintf_r+0xa2>
 801869e:	2a25      	cmp	r2, #37	; 0x25
 80186a0:	d1f9      	bne.n	8018696 <_vfiprintf_r+0x96>
 80186a2:	ebba 0b04 	subs.w	fp, sl, r4
 80186a6:	d00b      	beq.n	80186c0 <_vfiprintf_r+0xc0>
 80186a8:	465b      	mov	r3, fp
 80186aa:	4622      	mov	r2, r4
 80186ac:	4629      	mov	r1, r5
 80186ae:	4630      	mov	r0, r6
 80186b0:	f7ff ff93 	bl	80185da <__sfputs_r>
 80186b4:	3001      	adds	r0, #1
 80186b6:	f000 80aa 	beq.w	801880e <_vfiprintf_r+0x20e>
 80186ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186bc:	445a      	add	r2, fp
 80186be:	9209      	str	r2, [sp, #36]	; 0x24
 80186c0:	f89a 3000 	ldrb.w	r3, [sl]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f000 80a2 	beq.w	801880e <_vfiprintf_r+0x20e>
 80186ca:	2300      	movs	r3, #0
 80186cc:	f04f 32ff 	mov.w	r2, #4294967295
 80186d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80186d4:	f10a 0a01 	add.w	sl, sl, #1
 80186d8:	9304      	str	r3, [sp, #16]
 80186da:	9307      	str	r3, [sp, #28]
 80186dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80186e0:	931a      	str	r3, [sp, #104]	; 0x68
 80186e2:	4654      	mov	r4, sl
 80186e4:	2205      	movs	r2, #5
 80186e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186ea:	4858      	ldr	r0, [pc, #352]	; (801884c <_vfiprintf_r+0x24c>)
 80186ec:	f7e7 fdb0 	bl	8000250 <memchr>
 80186f0:	9a04      	ldr	r2, [sp, #16]
 80186f2:	b9d8      	cbnz	r0, 801872c <_vfiprintf_r+0x12c>
 80186f4:	06d1      	lsls	r1, r2, #27
 80186f6:	bf44      	itt	mi
 80186f8:	2320      	movmi	r3, #32
 80186fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186fe:	0713      	lsls	r3, r2, #28
 8018700:	bf44      	itt	mi
 8018702:	232b      	movmi	r3, #43	; 0x2b
 8018704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018708:	f89a 3000 	ldrb.w	r3, [sl]
 801870c:	2b2a      	cmp	r3, #42	; 0x2a
 801870e:	d015      	beq.n	801873c <_vfiprintf_r+0x13c>
 8018710:	9a07      	ldr	r2, [sp, #28]
 8018712:	4654      	mov	r4, sl
 8018714:	2000      	movs	r0, #0
 8018716:	f04f 0c0a 	mov.w	ip, #10
 801871a:	4621      	mov	r1, r4
 801871c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018720:	3b30      	subs	r3, #48	; 0x30
 8018722:	2b09      	cmp	r3, #9
 8018724:	d94e      	bls.n	80187c4 <_vfiprintf_r+0x1c4>
 8018726:	b1b0      	cbz	r0, 8018756 <_vfiprintf_r+0x156>
 8018728:	9207      	str	r2, [sp, #28]
 801872a:	e014      	b.n	8018756 <_vfiprintf_r+0x156>
 801872c:	eba0 0308 	sub.w	r3, r0, r8
 8018730:	fa09 f303 	lsl.w	r3, r9, r3
 8018734:	4313      	orrs	r3, r2
 8018736:	9304      	str	r3, [sp, #16]
 8018738:	46a2      	mov	sl, r4
 801873a:	e7d2      	b.n	80186e2 <_vfiprintf_r+0xe2>
 801873c:	9b03      	ldr	r3, [sp, #12]
 801873e:	1d19      	adds	r1, r3, #4
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	9103      	str	r1, [sp, #12]
 8018744:	2b00      	cmp	r3, #0
 8018746:	bfbb      	ittet	lt
 8018748:	425b      	neglt	r3, r3
 801874a:	f042 0202 	orrlt.w	r2, r2, #2
 801874e:	9307      	strge	r3, [sp, #28]
 8018750:	9307      	strlt	r3, [sp, #28]
 8018752:	bfb8      	it	lt
 8018754:	9204      	strlt	r2, [sp, #16]
 8018756:	7823      	ldrb	r3, [r4, #0]
 8018758:	2b2e      	cmp	r3, #46	; 0x2e
 801875a:	d10c      	bne.n	8018776 <_vfiprintf_r+0x176>
 801875c:	7863      	ldrb	r3, [r4, #1]
 801875e:	2b2a      	cmp	r3, #42	; 0x2a
 8018760:	d135      	bne.n	80187ce <_vfiprintf_r+0x1ce>
 8018762:	9b03      	ldr	r3, [sp, #12]
 8018764:	1d1a      	adds	r2, r3, #4
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	9203      	str	r2, [sp, #12]
 801876a:	2b00      	cmp	r3, #0
 801876c:	bfb8      	it	lt
 801876e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018772:	3402      	adds	r4, #2
 8018774:	9305      	str	r3, [sp, #20]
 8018776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801885c <_vfiprintf_r+0x25c>
 801877a:	7821      	ldrb	r1, [r4, #0]
 801877c:	2203      	movs	r2, #3
 801877e:	4650      	mov	r0, sl
 8018780:	f7e7 fd66 	bl	8000250 <memchr>
 8018784:	b140      	cbz	r0, 8018798 <_vfiprintf_r+0x198>
 8018786:	2340      	movs	r3, #64	; 0x40
 8018788:	eba0 000a 	sub.w	r0, r0, sl
 801878c:	fa03 f000 	lsl.w	r0, r3, r0
 8018790:	9b04      	ldr	r3, [sp, #16]
 8018792:	4303      	orrs	r3, r0
 8018794:	3401      	adds	r4, #1
 8018796:	9304      	str	r3, [sp, #16]
 8018798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801879c:	482c      	ldr	r0, [pc, #176]	; (8018850 <_vfiprintf_r+0x250>)
 801879e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187a2:	2206      	movs	r2, #6
 80187a4:	f7e7 fd54 	bl	8000250 <memchr>
 80187a8:	2800      	cmp	r0, #0
 80187aa:	d03f      	beq.n	801882c <_vfiprintf_r+0x22c>
 80187ac:	4b29      	ldr	r3, [pc, #164]	; (8018854 <_vfiprintf_r+0x254>)
 80187ae:	bb1b      	cbnz	r3, 80187f8 <_vfiprintf_r+0x1f8>
 80187b0:	9b03      	ldr	r3, [sp, #12]
 80187b2:	3307      	adds	r3, #7
 80187b4:	f023 0307 	bic.w	r3, r3, #7
 80187b8:	3308      	adds	r3, #8
 80187ba:	9303      	str	r3, [sp, #12]
 80187bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187be:	443b      	add	r3, r7
 80187c0:	9309      	str	r3, [sp, #36]	; 0x24
 80187c2:	e767      	b.n	8018694 <_vfiprintf_r+0x94>
 80187c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80187c8:	460c      	mov	r4, r1
 80187ca:	2001      	movs	r0, #1
 80187cc:	e7a5      	b.n	801871a <_vfiprintf_r+0x11a>
 80187ce:	2300      	movs	r3, #0
 80187d0:	3401      	adds	r4, #1
 80187d2:	9305      	str	r3, [sp, #20]
 80187d4:	4619      	mov	r1, r3
 80187d6:	f04f 0c0a 	mov.w	ip, #10
 80187da:	4620      	mov	r0, r4
 80187dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80187e0:	3a30      	subs	r2, #48	; 0x30
 80187e2:	2a09      	cmp	r2, #9
 80187e4:	d903      	bls.n	80187ee <_vfiprintf_r+0x1ee>
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d0c5      	beq.n	8018776 <_vfiprintf_r+0x176>
 80187ea:	9105      	str	r1, [sp, #20]
 80187ec:	e7c3      	b.n	8018776 <_vfiprintf_r+0x176>
 80187ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80187f2:	4604      	mov	r4, r0
 80187f4:	2301      	movs	r3, #1
 80187f6:	e7f0      	b.n	80187da <_vfiprintf_r+0x1da>
 80187f8:	ab03      	add	r3, sp, #12
 80187fa:	9300      	str	r3, [sp, #0]
 80187fc:	462a      	mov	r2, r5
 80187fe:	4b16      	ldr	r3, [pc, #88]	; (8018858 <_vfiprintf_r+0x258>)
 8018800:	a904      	add	r1, sp, #16
 8018802:	4630      	mov	r0, r6
 8018804:	f3af 8000 	nop.w
 8018808:	4607      	mov	r7, r0
 801880a:	1c78      	adds	r0, r7, #1
 801880c:	d1d6      	bne.n	80187bc <_vfiprintf_r+0x1bc>
 801880e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018810:	07d9      	lsls	r1, r3, #31
 8018812:	d405      	bmi.n	8018820 <_vfiprintf_r+0x220>
 8018814:	89ab      	ldrh	r3, [r5, #12]
 8018816:	059a      	lsls	r2, r3, #22
 8018818:	d402      	bmi.n	8018820 <_vfiprintf_r+0x220>
 801881a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801881c:	f7ff fc53 	bl	80180c6 <__retarget_lock_release_recursive>
 8018820:	89ab      	ldrh	r3, [r5, #12]
 8018822:	065b      	lsls	r3, r3, #25
 8018824:	f53f af12 	bmi.w	801864c <_vfiprintf_r+0x4c>
 8018828:	9809      	ldr	r0, [sp, #36]	; 0x24
 801882a:	e711      	b.n	8018650 <_vfiprintf_r+0x50>
 801882c:	ab03      	add	r3, sp, #12
 801882e:	9300      	str	r3, [sp, #0]
 8018830:	462a      	mov	r2, r5
 8018832:	4b09      	ldr	r3, [pc, #36]	; (8018858 <_vfiprintf_r+0x258>)
 8018834:	a904      	add	r1, sp, #16
 8018836:	4630      	mov	r0, r6
 8018838:	f000 f880 	bl	801893c <_printf_i>
 801883c:	e7e4      	b.n	8018808 <_vfiprintf_r+0x208>
 801883e:	bf00      	nop
 8018840:	0801c664 	.word	0x0801c664
 8018844:	0801c684 	.word	0x0801c684
 8018848:	0801c644 	.word	0x0801c644
 801884c:	0801c6a4 	.word	0x0801c6a4
 8018850:	0801c6ae 	.word	0x0801c6ae
 8018854:	00000000 	.word	0x00000000
 8018858:	080185db 	.word	0x080185db
 801885c:	0801c6aa 	.word	0x0801c6aa

08018860 <_printf_common>:
 8018860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018864:	4616      	mov	r6, r2
 8018866:	4699      	mov	r9, r3
 8018868:	688a      	ldr	r2, [r1, #8]
 801886a:	690b      	ldr	r3, [r1, #16]
 801886c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018870:	4293      	cmp	r3, r2
 8018872:	bfb8      	it	lt
 8018874:	4613      	movlt	r3, r2
 8018876:	6033      	str	r3, [r6, #0]
 8018878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801887c:	4607      	mov	r7, r0
 801887e:	460c      	mov	r4, r1
 8018880:	b10a      	cbz	r2, 8018886 <_printf_common+0x26>
 8018882:	3301      	adds	r3, #1
 8018884:	6033      	str	r3, [r6, #0]
 8018886:	6823      	ldr	r3, [r4, #0]
 8018888:	0699      	lsls	r1, r3, #26
 801888a:	bf42      	ittt	mi
 801888c:	6833      	ldrmi	r3, [r6, #0]
 801888e:	3302      	addmi	r3, #2
 8018890:	6033      	strmi	r3, [r6, #0]
 8018892:	6825      	ldr	r5, [r4, #0]
 8018894:	f015 0506 	ands.w	r5, r5, #6
 8018898:	d106      	bne.n	80188a8 <_printf_common+0x48>
 801889a:	f104 0a19 	add.w	sl, r4, #25
 801889e:	68e3      	ldr	r3, [r4, #12]
 80188a0:	6832      	ldr	r2, [r6, #0]
 80188a2:	1a9b      	subs	r3, r3, r2
 80188a4:	42ab      	cmp	r3, r5
 80188a6:	dc26      	bgt.n	80188f6 <_printf_common+0x96>
 80188a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80188ac:	1e13      	subs	r3, r2, #0
 80188ae:	6822      	ldr	r2, [r4, #0]
 80188b0:	bf18      	it	ne
 80188b2:	2301      	movne	r3, #1
 80188b4:	0692      	lsls	r2, r2, #26
 80188b6:	d42b      	bmi.n	8018910 <_printf_common+0xb0>
 80188b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80188bc:	4649      	mov	r1, r9
 80188be:	4638      	mov	r0, r7
 80188c0:	47c0      	blx	r8
 80188c2:	3001      	adds	r0, #1
 80188c4:	d01e      	beq.n	8018904 <_printf_common+0xa4>
 80188c6:	6823      	ldr	r3, [r4, #0]
 80188c8:	68e5      	ldr	r5, [r4, #12]
 80188ca:	6832      	ldr	r2, [r6, #0]
 80188cc:	f003 0306 	and.w	r3, r3, #6
 80188d0:	2b04      	cmp	r3, #4
 80188d2:	bf08      	it	eq
 80188d4:	1aad      	subeq	r5, r5, r2
 80188d6:	68a3      	ldr	r3, [r4, #8]
 80188d8:	6922      	ldr	r2, [r4, #16]
 80188da:	bf0c      	ite	eq
 80188dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80188e0:	2500      	movne	r5, #0
 80188e2:	4293      	cmp	r3, r2
 80188e4:	bfc4      	itt	gt
 80188e6:	1a9b      	subgt	r3, r3, r2
 80188e8:	18ed      	addgt	r5, r5, r3
 80188ea:	2600      	movs	r6, #0
 80188ec:	341a      	adds	r4, #26
 80188ee:	42b5      	cmp	r5, r6
 80188f0:	d11a      	bne.n	8018928 <_printf_common+0xc8>
 80188f2:	2000      	movs	r0, #0
 80188f4:	e008      	b.n	8018908 <_printf_common+0xa8>
 80188f6:	2301      	movs	r3, #1
 80188f8:	4652      	mov	r2, sl
 80188fa:	4649      	mov	r1, r9
 80188fc:	4638      	mov	r0, r7
 80188fe:	47c0      	blx	r8
 8018900:	3001      	adds	r0, #1
 8018902:	d103      	bne.n	801890c <_printf_common+0xac>
 8018904:	f04f 30ff 	mov.w	r0, #4294967295
 8018908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801890c:	3501      	adds	r5, #1
 801890e:	e7c6      	b.n	801889e <_printf_common+0x3e>
 8018910:	18e1      	adds	r1, r4, r3
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	2030      	movs	r0, #48	; 0x30
 8018916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801891a:	4422      	add	r2, r4
 801891c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018924:	3302      	adds	r3, #2
 8018926:	e7c7      	b.n	80188b8 <_printf_common+0x58>
 8018928:	2301      	movs	r3, #1
 801892a:	4622      	mov	r2, r4
 801892c:	4649      	mov	r1, r9
 801892e:	4638      	mov	r0, r7
 8018930:	47c0      	blx	r8
 8018932:	3001      	adds	r0, #1
 8018934:	d0e6      	beq.n	8018904 <_printf_common+0xa4>
 8018936:	3601      	adds	r6, #1
 8018938:	e7d9      	b.n	80188ee <_printf_common+0x8e>
	...

0801893c <_printf_i>:
 801893c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018940:	460c      	mov	r4, r1
 8018942:	4691      	mov	r9, r2
 8018944:	7e27      	ldrb	r7, [r4, #24]
 8018946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018948:	2f78      	cmp	r7, #120	; 0x78
 801894a:	4680      	mov	r8, r0
 801894c:	469a      	mov	sl, r3
 801894e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018952:	d807      	bhi.n	8018964 <_printf_i+0x28>
 8018954:	2f62      	cmp	r7, #98	; 0x62
 8018956:	d80a      	bhi.n	801896e <_printf_i+0x32>
 8018958:	2f00      	cmp	r7, #0
 801895a:	f000 80d8 	beq.w	8018b0e <_printf_i+0x1d2>
 801895e:	2f58      	cmp	r7, #88	; 0x58
 8018960:	f000 80a3 	beq.w	8018aaa <_printf_i+0x16e>
 8018964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801896c:	e03a      	b.n	80189e4 <_printf_i+0xa8>
 801896e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018972:	2b15      	cmp	r3, #21
 8018974:	d8f6      	bhi.n	8018964 <_printf_i+0x28>
 8018976:	a001      	add	r0, pc, #4	; (adr r0, 801897c <_printf_i+0x40>)
 8018978:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801897c:	080189d5 	.word	0x080189d5
 8018980:	080189e9 	.word	0x080189e9
 8018984:	08018965 	.word	0x08018965
 8018988:	08018965 	.word	0x08018965
 801898c:	08018965 	.word	0x08018965
 8018990:	08018965 	.word	0x08018965
 8018994:	080189e9 	.word	0x080189e9
 8018998:	08018965 	.word	0x08018965
 801899c:	08018965 	.word	0x08018965
 80189a0:	08018965 	.word	0x08018965
 80189a4:	08018965 	.word	0x08018965
 80189a8:	08018af5 	.word	0x08018af5
 80189ac:	08018a19 	.word	0x08018a19
 80189b0:	08018ad7 	.word	0x08018ad7
 80189b4:	08018965 	.word	0x08018965
 80189b8:	08018965 	.word	0x08018965
 80189bc:	08018b17 	.word	0x08018b17
 80189c0:	08018965 	.word	0x08018965
 80189c4:	08018a19 	.word	0x08018a19
 80189c8:	08018965 	.word	0x08018965
 80189cc:	08018965 	.word	0x08018965
 80189d0:	08018adf 	.word	0x08018adf
 80189d4:	680b      	ldr	r3, [r1, #0]
 80189d6:	1d1a      	adds	r2, r3, #4
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	600a      	str	r2, [r1, #0]
 80189dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80189e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80189e4:	2301      	movs	r3, #1
 80189e6:	e0a3      	b.n	8018b30 <_printf_i+0x1f4>
 80189e8:	6825      	ldr	r5, [r4, #0]
 80189ea:	6808      	ldr	r0, [r1, #0]
 80189ec:	062e      	lsls	r6, r5, #24
 80189ee:	f100 0304 	add.w	r3, r0, #4
 80189f2:	d50a      	bpl.n	8018a0a <_printf_i+0xce>
 80189f4:	6805      	ldr	r5, [r0, #0]
 80189f6:	600b      	str	r3, [r1, #0]
 80189f8:	2d00      	cmp	r5, #0
 80189fa:	da03      	bge.n	8018a04 <_printf_i+0xc8>
 80189fc:	232d      	movs	r3, #45	; 0x2d
 80189fe:	426d      	negs	r5, r5
 8018a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a04:	485e      	ldr	r0, [pc, #376]	; (8018b80 <_printf_i+0x244>)
 8018a06:	230a      	movs	r3, #10
 8018a08:	e019      	b.n	8018a3e <_printf_i+0x102>
 8018a0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018a0e:	6805      	ldr	r5, [r0, #0]
 8018a10:	600b      	str	r3, [r1, #0]
 8018a12:	bf18      	it	ne
 8018a14:	b22d      	sxthne	r5, r5
 8018a16:	e7ef      	b.n	80189f8 <_printf_i+0xbc>
 8018a18:	680b      	ldr	r3, [r1, #0]
 8018a1a:	6825      	ldr	r5, [r4, #0]
 8018a1c:	1d18      	adds	r0, r3, #4
 8018a1e:	6008      	str	r0, [r1, #0]
 8018a20:	0628      	lsls	r0, r5, #24
 8018a22:	d501      	bpl.n	8018a28 <_printf_i+0xec>
 8018a24:	681d      	ldr	r5, [r3, #0]
 8018a26:	e002      	b.n	8018a2e <_printf_i+0xf2>
 8018a28:	0669      	lsls	r1, r5, #25
 8018a2a:	d5fb      	bpl.n	8018a24 <_printf_i+0xe8>
 8018a2c:	881d      	ldrh	r5, [r3, #0]
 8018a2e:	4854      	ldr	r0, [pc, #336]	; (8018b80 <_printf_i+0x244>)
 8018a30:	2f6f      	cmp	r7, #111	; 0x6f
 8018a32:	bf0c      	ite	eq
 8018a34:	2308      	moveq	r3, #8
 8018a36:	230a      	movne	r3, #10
 8018a38:	2100      	movs	r1, #0
 8018a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a3e:	6866      	ldr	r6, [r4, #4]
 8018a40:	60a6      	str	r6, [r4, #8]
 8018a42:	2e00      	cmp	r6, #0
 8018a44:	bfa2      	ittt	ge
 8018a46:	6821      	ldrge	r1, [r4, #0]
 8018a48:	f021 0104 	bicge.w	r1, r1, #4
 8018a4c:	6021      	strge	r1, [r4, #0]
 8018a4e:	b90d      	cbnz	r5, 8018a54 <_printf_i+0x118>
 8018a50:	2e00      	cmp	r6, #0
 8018a52:	d04d      	beq.n	8018af0 <_printf_i+0x1b4>
 8018a54:	4616      	mov	r6, r2
 8018a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8018a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8018a5e:	5dc7      	ldrb	r7, [r0, r7]
 8018a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018a64:	462f      	mov	r7, r5
 8018a66:	42bb      	cmp	r3, r7
 8018a68:	460d      	mov	r5, r1
 8018a6a:	d9f4      	bls.n	8018a56 <_printf_i+0x11a>
 8018a6c:	2b08      	cmp	r3, #8
 8018a6e:	d10b      	bne.n	8018a88 <_printf_i+0x14c>
 8018a70:	6823      	ldr	r3, [r4, #0]
 8018a72:	07df      	lsls	r7, r3, #31
 8018a74:	d508      	bpl.n	8018a88 <_printf_i+0x14c>
 8018a76:	6923      	ldr	r3, [r4, #16]
 8018a78:	6861      	ldr	r1, [r4, #4]
 8018a7a:	4299      	cmp	r1, r3
 8018a7c:	bfde      	ittt	le
 8018a7e:	2330      	movle	r3, #48	; 0x30
 8018a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018a84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018a88:	1b92      	subs	r2, r2, r6
 8018a8a:	6122      	str	r2, [r4, #16]
 8018a8c:	f8cd a000 	str.w	sl, [sp]
 8018a90:	464b      	mov	r3, r9
 8018a92:	aa03      	add	r2, sp, #12
 8018a94:	4621      	mov	r1, r4
 8018a96:	4640      	mov	r0, r8
 8018a98:	f7ff fee2 	bl	8018860 <_printf_common>
 8018a9c:	3001      	adds	r0, #1
 8018a9e:	d14c      	bne.n	8018b3a <_printf_i+0x1fe>
 8018aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8018aa4:	b004      	add	sp, #16
 8018aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aaa:	4835      	ldr	r0, [pc, #212]	; (8018b80 <_printf_i+0x244>)
 8018aac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018ab0:	6823      	ldr	r3, [r4, #0]
 8018ab2:	680e      	ldr	r6, [r1, #0]
 8018ab4:	061f      	lsls	r7, r3, #24
 8018ab6:	f856 5b04 	ldr.w	r5, [r6], #4
 8018aba:	600e      	str	r6, [r1, #0]
 8018abc:	d514      	bpl.n	8018ae8 <_printf_i+0x1ac>
 8018abe:	07d9      	lsls	r1, r3, #31
 8018ac0:	bf44      	itt	mi
 8018ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8018ac6:	6023      	strmi	r3, [r4, #0]
 8018ac8:	b91d      	cbnz	r5, 8018ad2 <_printf_i+0x196>
 8018aca:	6823      	ldr	r3, [r4, #0]
 8018acc:	f023 0320 	bic.w	r3, r3, #32
 8018ad0:	6023      	str	r3, [r4, #0]
 8018ad2:	2310      	movs	r3, #16
 8018ad4:	e7b0      	b.n	8018a38 <_printf_i+0xfc>
 8018ad6:	6823      	ldr	r3, [r4, #0]
 8018ad8:	f043 0320 	orr.w	r3, r3, #32
 8018adc:	6023      	str	r3, [r4, #0]
 8018ade:	2378      	movs	r3, #120	; 0x78
 8018ae0:	4828      	ldr	r0, [pc, #160]	; (8018b84 <_printf_i+0x248>)
 8018ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018ae6:	e7e3      	b.n	8018ab0 <_printf_i+0x174>
 8018ae8:	065e      	lsls	r6, r3, #25
 8018aea:	bf48      	it	mi
 8018aec:	b2ad      	uxthmi	r5, r5
 8018aee:	e7e6      	b.n	8018abe <_printf_i+0x182>
 8018af0:	4616      	mov	r6, r2
 8018af2:	e7bb      	b.n	8018a6c <_printf_i+0x130>
 8018af4:	680b      	ldr	r3, [r1, #0]
 8018af6:	6826      	ldr	r6, [r4, #0]
 8018af8:	6960      	ldr	r0, [r4, #20]
 8018afa:	1d1d      	adds	r5, r3, #4
 8018afc:	600d      	str	r5, [r1, #0]
 8018afe:	0635      	lsls	r5, r6, #24
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	d501      	bpl.n	8018b08 <_printf_i+0x1cc>
 8018b04:	6018      	str	r0, [r3, #0]
 8018b06:	e002      	b.n	8018b0e <_printf_i+0x1d2>
 8018b08:	0671      	lsls	r1, r6, #25
 8018b0a:	d5fb      	bpl.n	8018b04 <_printf_i+0x1c8>
 8018b0c:	8018      	strh	r0, [r3, #0]
 8018b0e:	2300      	movs	r3, #0
 8018b10:	6123      	str	r3, [r4, #16]
 8018b12:	4616      	mov	r6, r2
 8018b14:	e7ba      	b.n	8018a8c <_printf_i+0x150>
 8018b16:	680b      	ldr	r3, [r1, #0]
 8018b18:	1d1a      	adds	r2, r3, #4
 8018b1a:	600a      	str	r2, [r1, #0]
 8018b1c:	681e      	ldr	r6, [r3, #0]
 8018b1e:	6862      	ldr	r2, [r4, #4]
 8018b20:	2100      	movs	r1, #0
 8018b22:	4630      	mov	r0, r6
 8018b24:	f7e7 fb94 	bl	8000250 <memchr>
 8018b28:	b108      	cbz	r0, 8018b2e <_printf_i+0x1f2>
 8018b2a:	1b80      	subs	r0, r0, r6
 8018b2c:	6060      	str	r0, [r4, #4]
 8018b2e:	6863      	ldr	r3, [r4, #4]
 8018b30:	6123      	str	r3, [r4, #16]
 8018b32:	2300      	movs	r3, #0
 8018b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b38:	e7a8      	b.n	8018a8c <_printf_i+0x150>
 8018b3a:	6923      	ldr	r3, [r4, #16]
 8018b3c:	4632      	mov	r2, r6
 8018b3e:	4649      	mov	r1, r9
 8018b40:	4640      	mov	r0, r8
 8018b42:	47d0      	blx	sl
 8018b44:	3001      	adds	r0, #1
 8018b46:	d0ab      	beq.n	8018aa0 <_printf_i+0x164>
 8018b48:	6823      	ldr	r3, [r4, #0]
 8018b4a:	079b      	lsls	r3, r3, #30
 8018b4c:	d413      	bmi.n	8018b76 <_printf_i+0x23a>
 8018b4e:	68e0      	ldr	r0, [r4, #12]
 8018b50:	9b03      	ldr	r3, [sp, #12]
 8018b52:	4298      	cmp	r0, r3
 8018b54:	bfb8      	it	lt
 8018b56:	4618      	movlt	r0, r3
 8018b58:	e7a4      	b.n	8018aa4 <_printf_i+0x168>
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	4632      	mov	r2, r6
 8018b5e:	4649      	mov	r1, r9
 8018b60:	4640      	mov	r0, r8
 8018b62:	47d0      	blx	sl
 8018b64:	3001      	adds	r0, #1
 8018b66:	d09b      	beq.n	8018aa0 <_printf_i+0x164>
 8018b68:	3501      	adds	r5, #1
 8018b6a:	68e3      	ldr	r3, [r4, #12]
 8018b6c:	9903      	ldr	r1, [sp, #12]
 8018b6e:	1a5b      	subs	r3, r3, r1
 8018b70:	42ab      	cmp	r3, r5
 8018b72:	dcf2      	bgt.n	8018b5a <_printf_i+0x21e>
 8018b74:	e7eb      	b.n	8018b4e <_printf_i+0x212>
 8018b76:	2500      	movs	r5, #0
 8018b78:	f104 0619 	add.w	r6, r4, #25
 8018b7c:	e7f5      	b.n	8018b6a <_printf_i+0x22e>
 8018b7e:	bf00      	nop
 8018b80:	0801c6b5 	.word	0x0801c6b5
 8018b84:	0801c6c6 	.word	0x0801c6c6

08018b88 <_sbrk_r>:
 8018b88:	b538      	push	{r3, r4, r5, lr}
 8018b8a:	4d06      	ldr	r5, [pc, #24]	; (8018ba4 <_sbrk_r+0x1c>)
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	4604      	mov	r4, r0
 8018b90:	4608      	mov	r0, r1
 8018b92:	602b      	str	r3, [r5, #0]
 8018b94:	f7e8 fa3a 	bl	800100c <_sbrk>
 8018b98:	1c43      	adds	r3, r0, #1
 8018b9a:	d102      	bne.n	8018ba2 <_sbrk_r+0x1a>
 8018b9c:	682b      	ldr	r3, [r5, #0]
 8018b9e:	b103      	cbz	r3, 8018ba2 <_sbrk_r+0x1a>
 8018ba0:	6023      	str	r3, [r4, #0]
 8018ba2:	bd38      	pop	{r3, r4, r5, pc}
 8018ba4:	20011514 	.word	0x20011514

08018ba8 <__sread>:
 8018ba8:	b510      	push	{r4, lr}
 8018baa:	460c      	mov	r4, r1
 8018bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bb0:	f000 f8ce 	bl	8018d50 <_read_r>
 8018bb4:	2800      	cmp	r0, #0
 8018bb6:	bfab      	itete	ge
 8018bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018bba:	89a3      	ldrhlt	r3, [r4, #12]
 8018bbc:	181b      	addge	r3, r3, r0
 8018bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018bc2:	bfac      	ite	ge
 8018bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8018bc6:	81a3      	strhlt	r3, [r4, #12]
 8018bc8:	bd10      	pop	{r4, pc}

08018bca <__swrite>:
 8018bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bce:	461f      	mov	r7, r3
 8018bd0:	898b      	ldrh	r3, [r1, #12]
 8018bd2:	05db      	lsls	r3, r3, #23
 8018bd4:	4605      	mov	r5, r0
 8018bd6:	460c      	mov	r4, r1
 8018bd8:	4616      	mov	r6, r2
 8018bda:	d505      	bpl.n	8018be8 <__swrite+0x1e>
 8018bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018be0:	2302      	movs	r3, #2
 8018be2:	2200      	movs	r2, #0
 8018be4:	f000 f870 	bl	8018cc8 <_lseek_r>
 8018be8:	89a3      	ldrh	r3, [r4, #12]
 8018bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018bf2:	81a3      	strh	r3, [r4, #12]
 8018bf4:	4632      	mov	r2, r6
 8018bf6:	463b      	mov	r3, r7
 8018bf8:	4628      	mov	r0, r5
 8018bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bfe:	f000 b817 	b.w	8018c30 <_write_r>

08018c02 <__sseek>:
 8018c02:	b510      	push	{r4, lr}
 8018c04:	460c      	mov	r4, r1
 8018c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c0a:	f000 f85d 	bl	8018cc8 <_lseek_r>
 8018c0e:	1c43      	adds	r3, r0, #1
 8018c10:	89a3      	ldrh	r3, [r4, #12]
 8018c12:	bf15      	itete	ne
 8018c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8018c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018c1e:	81a3      	strheq	r3, [r4, #12]
 8018c20:	bf18      	it	ne
 8018c22:	81a3      	strhne	r3, [r4, #12]
 8018c24:	bd10      	pop	{r4, pc}

08018c26 <__sclose>:
 8018c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c2a:	f000 b81b 	b.w	8018c64 <_close_r>
	...

08018c30 <_write_r>:
 8018c30:	b538      	push	{r3, r4, r5, lr}
 8018c32:	4d07      	ldr	r5, [pc, #28]	; (8018c50 <_write_r+0x20>)
 8018c34:	4604      	mov	r4, r0
 8018c36:	4608      	mov	r0, r1
 8018c38:	4611      	mov	r1, r2
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	602a      	str	r2, [r5, #0]
 8018c3e:	461a      	mov	r2, r3
 8018c40:	f7e7 fffa 	bl	8000c38 <_write>
 8018c44:	1c43      	adds	r3, r0, #1
 8018c46:	d102      	bne.n	8018c4e <_write_r+0x1e>
 8018c48:	682b      	ldr	r3, [r5, #0]
 8018c4a:	b103      	cbz	r3, 8018c4e <_write_r+0x1e>
 8018c4c:	6023      	str	r3, [r4, #0]
 8018c4e:	bd38      	pop	{r3, r4, r5, pc}
 8018c50:	20011514 	.word	0x20011514

08018c54 <abort>:
 8018c54:	b508      	push	{r3, lr}
 8018c56:	2006      	movs	r0, #6
 8018c58:	f000 f8b4 	bl	8018dc4 <raise>
 8018c5c:	2001      	movs	r0, #1
 8018c5e:	f000 f8e5 	bl	8018e2c <_exit>
	...

08018c64 <_close_r>:
 8018c64:	b538      	push	{r3, r4, r5, lr}
 8018c66:	4d06      	ldr	r5, [pc, #24]	; (8018c80 <_close_r+0x1c>)
 8018c68:	2300      	movs	r3, #0
 8018c6a:	4604      	mov	r4, r0
 8018c6c:	4608      	mov	r0, r1
 8018c6e:	602b      	str	r3, [r5, #0]
 8018c70:	f7e8 f80e 	bl	8000c90 <_close>
 8018c74:	1c43      	adds	r3, r0, #1
 8018c76:	d102      	bne.n	8018c7e <_close_r+0x1a>
 8018c78:	682b      	ldr	r3, [r5, #0]
 8018c7a:	b103      	cbz	r3, 8018c7e <_close_r+0x1a>
 8018c7c:	6023      	str	r3, [r4, #0]
 8018c7e:	bd38      	pop	{r3, r4, r5, pc}
 8018c80:	20011514 	.word	0x20011514

08018c84 <_fstat_r>:
 8018c84:	b538      	push	{r3, r4, r5, lr}
 8018c86:	4d07      	ldr	r5, [pc, #28]	; (8018ca4 <_fstat_r+0x20>)
 8018c88:	2300      	movs	r3, #0
 8018c8a:	4604      	mov	r4, r0
 8018c8c:	4608      	mov	r0, r1
 8018c8e:	4611      	mov	r1, r2
 8018c90:	602b      	str	r3, [r5, #0]
 8018c92:	f7e8 f853 	bl	8000d3c <_fstat>
 8018c96:	1c43      	adds	r3, r0, #1
 8018c98:	d102      	bne.n	8018ca0 <_fstat_r+0x1c>
 8018c9a:	682b      	ldr	r3, [r5, #0]
 8018c9c:	b103      	cbz	r3, 8018ca0 <_fstat_r+0x1c>
 8018c9e:	6023      	str	r3, [r4, #0]
 8018ca0:	bd38      	pop	{r3, r4, r5, pc}
 8018ca2:	bf00      	nop
 8018ca4:	20011514 	.word	0x20011514

08018ca8 <_isatty_r>:
 8018ca8:	b538      	push	{r3, r4, r5, lr}
 8018caa:	4d06      	ldr	r5, [pc, #24]	; (8018cc4 <_isatty_r+0x1c>)
 8018cac:	2300      	movs	r3, #0
 8018cae:	4604      	mov	r4, r0
 8018cb0:	4608      	mov	r0, r1
 8018cb2:	602b      	str	r3, [r5, #0]
 8018cb4:	f7e7 ffa8 	bl	8000c08 <_isatty>
 8018cb8:	1c43      	adds	r3, r0, #1
 8018cba:	d102      	bne.n	8018cc2 <_isatty_r+0x1a>
 8018cbc:	682b      	ldr	r3, [r5, #0]
 8018cbe:	b103      	cbz	r3, 8018cc2 <_isatty_r+0x1a>
 8018cc0:	6023      	str	r3, [r4, #0]
 8018cc2:	bd38      	pop	{r3, r4, r5, pc}
 8018cc4:	20011514 	.word	0x20011514

08018cc8 <_lseek_r>:
 8018cc8:	b538      	push	{r3, r4, r5, lr}
 8018cca:	4d07      	ldr	r5, [pc, #28]	; (8018ce8 <_lseek_r+0x20>)
 8018ccc:	4604      	mov	r4, r0
 8018cce:	4608      	mov	r0, r1
 8018cd0:	4611      	mov	r1, r2
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	602a      	str	r2, [r5, #0]
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	f7e7 fff4 	bl	8000cc4 <_lseek>
 8018cdc:	1c43      	adds	r3, r0, #1
 8018cde:	d102      	bne.n	8018ce6 <_lseek_r+0x1e>
 8018ce0:	682b      	ldr	r3, [r5, #0]
 8018ce2:	b103      	cbz	r3, 8018ce6 <_lseek_r+0x1e>
 8018ce4:	6023      	str	r3, [r4, #0]
 8018ce6:	bd38      	pop	{r3, r4, r5, pc}
 8018ce8:	20011514 	.word	0x20011514

08018cec <__malloc_lock>:
 8018cec:	4801      	ldr	r0, [pc, #4]	; (8018cf4 <__malloc_lock+0x8>)
 8018cee:	f7ff b9e9 	b.w	80180c4 <__retarget_lock_acquire_recursive>
 8018cf2:	bf00      	nop
 8018cf4:	20011520 	.word	0x20011520

08018cf8 <__malloc_unlock>:
 8018cf8:	4801      	ldr	r0, [pc, #4]	; (8018d00 <__malloc_unlock+0x8>)
 8018cfa:	f7ff b9e4 	b.w	80180c6 <__retarget_lock_release_recursive>
 8018cfe:	bf00      	nop
 8018d00:	20011520 	.word	0x20011520

08018d04 <_realloc_r>:
 8018d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d06:	4607      	mov	r7, r0
 8018d08:	4614      	mov	r4, r2
 8018d0a:	460e      	mov	r6, r1
 8018d0c:	b921      	cbnz	r1, 8018d18 <_realloc_r+0x14>
 8018d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d12:	4611      	mov	r1, r2
 8018d14:	f7ff ba94 	b.w	8018240 <_malloc_r>
 8018d18:	b922      	cbnz	r2, 8018d24 <_realloc_r+0x20>
 8018d1a:	f7ff fa41 	bl	80181a0 <_free_r>
 8018d1e:	4625      	mov	r5, r4
 8018d20:	4628      	mov	r0, r5
 8018d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d24:	f000 f86a 	bl	8018dfc <_malloc_usable_size_r>
 8018d28:	42a0      	cmp	r0, r4
 8018d2a:	d20f      	bcs.n	8018d4c <_realloc_r+0x48>
 8018d2c:	4621      	mov	r1, r4
 8018d2e:	4638      	mov	r0, r7
 8018d30:	f7ff fa86 	bl	8018240 <_malloc_r>
 8018d34:	4605      	mov	r5, r0
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d0f2      	beq.n	8018d20 <_realloc_r+0x1c>
 8018d3a:	4631      	mov	r1, r6
 8018d3c:	4622      	mov	r2, r4
 8018d3e:	f7fe fd35 	bl	80177ac <memcpy>
 8018d42:	4631      	mov	r1, r6
 8018d44:	4638      	mov	r0, r7
 8018d46:	f7ff fa2b 	bl	80181a0 <_free_r>
 8018d4a:	e7e9      	b.n	8018d20 <_realloc_r+0x1c>
 8018d4c:	4635      	mov	r5, r6
 8018d4e:	e7e7      	b.n	8018d20 <_realloc_r+0x1c>

08018d50 <_read_r>:
 8018d50:	b538      	push	{r3, r4, r5, lr}
 8018d52:	4d07      	ldr	r5, [pc, #28]	; (8018d70 <_read_r+0x20>)
 8018d54:	4604      	mov	r4, r0
 8018d56:	4608      	mov	r0, r1
 8018d58:	4611      	mov	r1, r2
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	602a      	str	r2, [r5, #0]
 8018d5e:	461a      	mov	r2, r3
 8018d60:	f7e7 ffc4 	bl	8000cec <_read>
 8018d64:	1c43      	adds	r3, r0, #1
 8018d66:	d102      	bne.n	8018d6e <_read_r+0x1e>
 8018d68:	682b      	ldr	r3, [r5, #0]
 8018d6a:	b103      	cbz	r3, 8018d6e <_read_r+0x1e>
 8018d6c:	6023      	str	r3, [r4, #0]
 8018d6e:	bd38      	pop	{r3, r4, r5, pc}
 8018d70:	20011514 	.word	0x20011514

08018d74 <_raise_r>:
 8018d74:	291f      	cmp	r1, #31
 8018d76:	b538      	push	{r3, r4, r5, lr}
 8018d78:	4604      	mov	r4, r0
 8018d7a:	460d      	mov	r5, r1
 8018d7c:	d904      	bls.n	8018d88 <_raise_r+0x14>
 8018d7e:	2316      	movs	r3, #22
 8018d80:	6003      	str	r3, [r0, #0]
 8018d82:	f04f 30ff 	mov.w	r0, #4294967295
 8018d86:	bd38      	pop	{r3, r4, r5, pc}
 8018d88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018d8a:	b112      	cbz	r2, 8018d92 <_raise_r+0x1e>
 8018d8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018d90:	b94b      	cbnz	r3, 8018da6 <_raise_r+0x32>
 8018d92:	4620      	mov	r0, r4
 8018d94:	f000 f830 	bl	8018df8 <_getpid_r>
 8018d98:	462a      	mov	r2, r5
 8018d9a:	4601      	mov	r1, r0
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018da2:	f000 b817 	b.w	8018dd4 <_kill_r>
 8018da6:	2b01      	cmp	r3, #1
 8018da8:	d00a      	beq.n	8018dc0 <_raise_r+0x4c>
 8018daa:	1c59      	adds	r1, r3, #1
 8018dac:	d103      	bne.n	8018db6 <_raise_r+0x42>
 8018dae:	2316      	movs	r3, #22
 8018db0:	6003      	str	r3, [r0, #0]
 8018db2:	2001      	movs	r0, #1
 8018db4:	e7e7      	b.n	8018d86 <_raise_r+0x12>
 8018db6:	2400      	movs	r4, #0
 8018db8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018dbc:	4628      	mov	r0, r5
 8018dbe:	4798      	blx	r3
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	e7e0      	b.n	8018d86 <_raise_r+0x12>

08018dc4 <raise>:
 8018dc4:	4b02      	ldr	r3, [pc, #8]	; (8018dd0 <raise+0xc>)
 8018dc6:	4601      	mov	r1, r0
 8018dc8:	6818      	ldr	r0, [r3, #0]
 8018dca:	f7ff bfd3 	b.w	8018d74 <_raise_r>
 8018dce:	bf00      	nop
 8018dd0:	2000001c 	.word	0x2000001c

08018dd4 <_kill_r>:
 8018dd4:	b538      	push	{r3, r4, r5, lr}
 8018dd6:	4d07      	ldr	r5, [pc, #28]	; (8018df4 <_kill_r+0x20>)
 8018dd8:	2300      	movs	r3, #0
 8018dda:	4604      	mov	r4, r0
 8018ddc:	4608      	mov	r0, r1
 8018dde:	4611      	mov	r1, r2
 8018de0:	602b      	str	r3, [r5, #0]
 8018de2:	f000 f81b 	bl	8018e1c <_kill>
 8018de6:	1c43      	adds	r3, r0, #1
 8018de8:	d102      	bne.n	8018df0 <_kill_r+0x1c>
 8018dea:	682b      	ldr	r3, [r5, #0]
 8018dec:	b103      	cbz	r3, 8018df0 <_kill_r+0x1c>
 8018dee:	6023      	str	r3, [r4, #0]
 8018df0:	bd38      	pop	{r3, r4, r5, pc}
 8018df2:	bf00      	nop
 8018df4:	20011514 	.word	0x20011514

08018df8 <_getpid_r>:
 8018df8:	f000 b808 	b.w	8018e0c <_getpid>

08018dfc <_malloc_usable_size_r>:
 8018dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e00:	1f18      	subs	r0, r3, #4
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	bfbc      	itt	lt
 8018e06:	580b      	ldrlt	r3, [r1, r0]
 8018e08:	18c0      	addlt	r0, r0, r3
 8018e0a:	4770      	bx	lr

08018e0c <_getpid>:
 8018e0c:	4b02      	ldr	r3, [pc, #8]	; (8018e18 <_getpid+0xc>)
 8018e0e:	2258      	movs	r2, #88	; 0x58
 8018e10:	601a      	str	r2, [r3, #0]
 8018e12:	f04f 30ff 	mov.w	r0, #4294967295
 8018e16:	4770      	bx	lr
 8018e18:	20011514 	.word	0x20011514

08018e1c <_kill>:
 8018e1c:	4b02      	ldr	r3, [pc, #8]	; (8018e28 <_kill+0xc>)
 8018e1e:	2258      	movs	r2, #88	; 0x58
 8018e20:	601a      	str	r2, [r3, #0]
 8018e22:	f04f 30ff 	mov.w	r0, #4294967295
 8018e26:	4770      	bx	lr
 8018e28:	20011514 	.word	0x20011514

08018e2c <_exit>:
 8018e2c:	e7fe      	b.n	8018e2c <_exit>
	...

08018e30 <_init>:
 8018e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e32:	bf00      	nop
 8018e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e36:	bc08      	pop	{r3}
 8018e38:	469e      	mov	lr, r3
 8018e3a:	4770      	bx	lr

08018e3c <_fini>:
 8018e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e3e:	bf00      	nop
 8018e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e42:	bc08      	pop	{r3}
 8018e44:	469e      	mov	lr, r3
 8018e46:	4770      	bx	lr
